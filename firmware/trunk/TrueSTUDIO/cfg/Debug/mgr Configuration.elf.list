
mgr Configuration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .user_data    00000000  081e0000  081e0000  00040b70  2**0
                  CONTENTS
  2 .text         0001add8  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000844c  0801af88  0801af88  0002af88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080233d4  080233d4  000333d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080233d8  080233d8  000333d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000b70  20000000  080233dc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00040b70  2**0
                  CONTENTS
  8 .bss          000211ac  20000b70  20000b70  00040b70  2**2
                  ALLOC
  9 ._user_heap_stack 00002400  20021d1c  20021d1c  00040b70  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00040b70  2**0
                  CONTENTS, READONLY
 11 .debug_line   00025a6c  00000000  00000000  00040b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   000ce01c  00000000  00000000  0006660a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00023346  00000000  00000000  00134626  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00005190  00000000  00000000  00157970  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00005248  00000000  00000000  0015cb00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000432e7  00000000  00000000  00161d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00017a10  00000000  00000000  001a502f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      00000100  00000000  00000000  001bca3f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000ce08  00000000  00000000  001bcb40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000b70 	.word	0x20000b70
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801af70 	.word	0x0801af70

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000b74 	.word	0x20000b74
 80001ec:	0801af70 	.word	0x0801af70

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033e:	f1a4 0401 	sub.w	r4, r4, #1
 8000342:	d1e9      	bne.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f092 0f00 	teq	r2, #0
 80004ea:	bf14      	ite	ne
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000500:	e720      	b.n	8000344 <__adddf3+0x138>
 8000502:	bf00      	nop

08000504 <__aeabi_ul2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	e00a      	b.n	800052a <__aeabi_l2d+0x16>

08000514 <__aeabi_l2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000522:	d502      	bpl.n	800052a <__aeabi_l2d+0x16>
 8000524:	4240      	negs	r0, r0
 8000526:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000532:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000536:	f43f aedc 	beq.w	80002f2 <__adddf3+0xe6>
 800053a:	f04f 0203 	mov.w	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000552:	f1c2 0320 	rsb	r3, r2, #32
 8000556:	fa00 fc03 	lsl.w	ip, r0, r3
 800055a:	fa20 f002 	lsr.w	r0, r0, r2
 800055e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000562:	ea40 000e 	orr.w	r0, r0, lr
 8000566:	fa21 f102 	lsr.w	r1, r1, r2
 800056a:	4414      	add	r4, r2
 800056c:	e6c1      	b.n	80002f2 <__adddf3+0xe6>
 800056e:	bf00      	nop

08000570 <__aeabi_dmul>:
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000576:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800057e:	bf1d      	ittte	ne
 8000580:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000584:	ea94 0f0c 	teqne	r4, ip
 8000588:	ea95 0f0c 	teqne	r5, ip
 800058c:	f000 f8de 	bleq	800074c <__aeabi_dmul+0x1dc>
 8000590:	442c      	add	r4, r5
 8000592:	ea81 0603 	eor.w	r6, r1, r3
 8000596:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800059e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a2:	bf18      	it	ne
 80005a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b0:	d038      	beq.n	8000624 <__aeabi_dmul+0xb4>
 80005b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005c6:	f04f 0600 	mov.w	r6, #0
 80005ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ce:	f09c 0f00 	teq	ip, #0
 80005d2:	bf18      	it	ne
 80005d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e4:	d204      	bcs.n	80005f0 <__aeabi_dmul+0x80>
 80005e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ea:	416d      	adcs	r5, r5
 80005ec:	eb46 0606 	adc.w	r6, r6, r6
 80005f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000600:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000604:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000608:	bf88      	it	hi
 800060a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800060e:	d81e      	bhi.n	800064e <__aeabi_dmul+0xde>
 8000610:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000614:	bf08      	it	eq
 8000616:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061a:	f150 0000 	adcs.w	r0, r0, #0
 800061e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000628:	ea46 0101 	orr.w	r1, r6, r1
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	ea81 0103 	eor.w	r1, r1, r3
 8000634:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000638:	bfc2      	ittt	gt
 800063a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800063e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000642:	bd70      	popgt	{r4, r5, r6, pc}
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f04f 0e00 	mov.w	lr, #0
 800064c:	3c01      	subs	r4, #1
 800064e:	f300 80ab 	bgt.w	80007a8 <__aeabi_dmul+0x238>
 8000652:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000656:	bfde      	ittt	le
 8000658:	2000      	movle	r0, #0
 800065a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd70      	pople	{r4, r5, r6, pc}
 8000660:	f1c4 0400 	rsb	r4, r4, #0
 8000664:	3c20      	subs	r4, #32
 8000666:	da35      	bge.n	80006d4 <__aeabi_dmul+0x164>
 8000668:	340c      	adds	r4, #12
 800066a:	dc1b      	bgt.n	80006a4 <__aeabi_dmul+0x134>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f305 	lsl.w	r3, r0, r5
 8000678:	fa20 f004 	lsr.w	r0, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000688:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800068c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000690:	fa21 f604 	lsr.w	r6, r1, r4
 8000694:	eb42 0106 	adc.w	r1, r2, r6
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 040c 	rsb	r4, r4, #12
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f304 	lsl.w	r3, r0, r4
 80006b0:	fa20 f005 	lsr.w	r0, r0, r5
 80006b4:	fa01 f204 	lsl.w	r2, r1, r4
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c4:	f141 0100 	adc.w	r1, r1, #0
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 0520 	rsb	r5, r4, #32
 80006d8:	fa00 f205 	lsl.w	r2, r0, r5
 80006dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e0:	fa20 f304 	lsr.w	r3, r0, r4
 80006e4:	fa01 f205 	lsl.w	r2, r1, r5
 80006e8:	ea43 0302 	orr.w	r3, r3, r2
 80006ec:	fa21 f004 	lsr.w	r0, r1, r4
 80006f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f4:	fa21 f204 	lsr.w	r2, r1, r4
 80006f8:	ea20 0002 	bic.w	r0, r0, r2
 80006fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f094 0f00 	teq	r4, #0
 8000710:	d10f      	bne.n	8000732 <__aeabi_dmul+0x1c2>
 8000712:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000716:	0040      	lsls	r0, r0, #1
 8000718:	eb41 0101 	adc.w	r1, r1, r1
 800071c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3c01      	subeq	r4, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1a6>
 8000726:	ea41 0106 	orr.w	r1, r1, r6
 800072a:	f095 0f00 	teq	r5, #0
 800072e:	bf18      	it	ne
 8000730:	4770      	bxne	lr
 8000732:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000736:	0052      	lsls	r2, r2, #1
 8000738:	eb43 0303 	adc.w	r3, r3, r3
 800073c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3d01      	subeq	r5, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1c6>
 8000746:	ea43 0306 	orr.w	r3, r3, r6
 800074a:	4770      	bx	lr
 800074c:	ea94 0f0c 	teq	r4, ip
 8000750:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000754:	bf18      	it	ne
 8000756:	ea95 0f0c 	teqne	r5, ip
 800075a:	d00c      	beq.n	8000776 <__aeabi_dmul+0x206>
 800075c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000760:	bf18      	it	ne
 8000762:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000766:	d1d1      	bne.n	800070c <__aeabi_dmul+0x19c>
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	f04f 0000 	mov.w	r0, #0
 8000774:	bd70      	pop	{r4, r5, r6, pc}
 8000776:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077a:	bf06      	itte	eq
 800077c:	4610      	moveq	r0, r2
 800077e:	4619      	moveq	r1, r3
 8000780:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000784:	d019      	beq.n	80007ba <__aeabi_dmul+0x24a>
 8000786:	ea94 0f0c 	teq	r4, ip
 800078a:	d102      	bne.n	8000792 <__aeabi_dmul+0x222>
 800078c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000790:	d113      	bne.n	80007ba <__aeabi_dmul+0x24a>
 8000792:	ea95 0f0c 	teq	r5, ip
 8000796:	d105      	bne.n	80007a4 <__aeabi_dmul+0x234>
 8000798:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800079c:	bf1c      	itt	ne
 800079e:	4610      	movne	r0, r2
 80007a0:	4619      	movne	r1, r3
 80007a2:	d10a      	bne.n	80007ba <__aeabi_dmul+0x24a>
 80007a4:	ea81 0103 	eor.w	r1, r1, r3
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b4:	f04f 0000 	mov.w	r0, #0
 80007b8:	bd70      	pop	{r4, r5, r6, pc}
 80007ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c2:	bd70      	pop	{r4, r5, r6, pc}

080007c4 <__aeabi_ddiv>:
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d2:	bf1d      	ittte	ne
 80007d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d8:	ea94 0f0c 	teqne	r4, ip
 80007dc:	ea95 0f0c 	teqne	r5, ip
 80007e0:	f000 f8a7 	bleq	8000932 <__aeabi_ddiv+0x16e>
 80007e4:	eba4 0405 	sub.w	r4, r4, r5
 80007e8:	ea81 0e03 	eor.w	lr, r1, r3
 80007ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f4:	f000 8088 	beq.w	8000908 <__aeabi_ddiv+0x144>
 80007f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000800:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000804:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000808:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800080c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000810:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000814:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000818:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800081c:	429d      	cmp	r5, r3
 800081e:	bf08      	it	eq
 8000820:	4296      	cmpeq	r6, r2
 8000822:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000826:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082a:	d202      	bcs.n	8000832 <__aeabi_ddiv+0x6e>
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	1ab6      	subs	r6, r6, r2
 8000834:	eb65 0503 	sbc.w	r5, r5, r3
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000842:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 000c 	orrcs.w	r0, r0, ip
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a4:	d018      	beq.n	80008d8 <__aeabi_ddiv+0x114>
 80008a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c2:	d1c0      	bne.n	8000846 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	d10b      	bne.n	80008e2 <__aeabi_ddiv+0x11e>
 80008ca:	ea41 0100 	orr.w	r1, r1, r0
 80008ce:	f04f 0000 	mov.w	r0, #0
 80008d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008d6:	e7b6      	b.n	8000846 <__aeabi_ddiv+0x82>
 80008d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008dc:	bf04      	itt	eq
 80008de:	4301      	orreq	r1, r0
 80008e0:	2000      	moveq	r0, #0
 80008e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008e6:	bf88      	it	hi
 80008e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008ec:	f63f aeaf 	bhi.w	800064e <__aeabi_dmul+0xde>
 80008f0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f4:	bf04      	itt	eq
 80008f6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008fe:	f150 0000 	adcs.w	r0, r0, #0
 8000902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000906:	bd70      	pop	{r4, r5, r6, pc}
 8000908:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800090c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000910:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000914:	bfc2      	ittt	gt
 8000916:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800091e:	bd70      	popgt	{r4, r5, r6, pc}
 8000920:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000924:	f04f 0e00 	mov.w	lr, #0
 8000928:	3c01      	subs	r4, #1
 800092a:	e690      	b.n	800064e <__aeabi_dmul+0xde>
 800092c:	ea45 0e06 	orr.w	lr, r5, r6
 8000930:	e68d      	b.n	800064e <__aeabi_dmul+0xde>
 8000932:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000936:	ea94 0f0c 	teq	r4, ip
 800093a:	bf08      	it	eq
 800093c:	ea95 0f0c 	teqeq	r5, ip
 8000940:	f43f af3b 	beq.w	80007ba <__aeabi_dmul+0x24a>
 8000944:	ea94 0f0c 	teq	r4, ip
 8000948:	d10a      	bne.n	8000960 <__aeabi_ddiv+0x19c>
 800094a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800094e:	f47f af34 	bne.w	80007ba <__aeabi_dmul+0x24a>
 8000952:	ea95 0f0c 	teq	r5, ip
 8000956:	f47f af25 	bne.w	80007a4 <__aeabi_dmul+0x234>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e72c      	b.n	80007ba <__aeabi_dmul+0x24a>
 8000960:	ea95 0f0c 	teq	r5, ip
 8000964:	d106      	bne.n	8000974 <__aeabi_ddiv+0x1b0>
 8000966:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096a:	f43f aefd 	beq.w	8000768 <__aeabi_dmul+0x1f8>
 800096e:	4610      	mov	r0, r2
 8000970:	4619      	mov	r1, r3
 8000972:	e722      	b.n	80007ba <__aeabi_dmul+0x24a>
 8000974:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000978:	bf18      	it	ne
 800097a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800097e:	f47f aec5 	bne.w	800070c <__aeabi_dmul+0x19c>
 8000982:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000986:	f47f af0d 	bne.w	80007a4 <__aeabi_dmul+0x234>
 800098a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800098e:	f47f aeeb 	bne.w	8000768 <__aeabi_dmul+0x1f8>
 8000992:	e712      	b.n	80007ba <__aeabi_dmul+0x24a>

08000994 <__gedf2>:
 8000994:	f04f 3cff 	mov.w	ip, #4294967295
 8000998:	e006      	b.n	80009a8 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__ledf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	e002      	b.n	80009a8 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__cmpdf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009be:	d01b      	beq.n	80009f8 <__cmpdf2+0x54>
 80009c0:	b001      	add	sp, #4
 80009c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009c6:	bf0c      	ite	eq
 80009c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009cc:	ea91 0f03 	teqne	r1, r3
 80009d0:	bf02      	ittt	eq
 80009d2:	ea90 0f02 	teqeq	r0, r2
 80009d6:	2000      	moveq	r0, #0
 80009d8:	4770      	bxeq	lr
 80009da:	f110 0f00 	cmn.w	r0, #0
 80009de:	ea91 0f03 	teq	r1, r3
 80009e2:	bf58      	it	pl
 80009e4:	4299      	cmppl	r1, r3
 80009e6:	bf08      	it	eq
 80009e8:	4290      	cmpeq	r0, r2
 80009ea:	bf2c      	ite	cs
 80009ec:	17d8      	asrcs	r0, r3, #31
 80009ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009f2:	f040 0001 	orr.w	r0, r0, #1
 80009f6:	4770      	bx	lr
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d102      	bne.n	8000a08 <__cmpdf2+0x64>
 8000a02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a06:	d107      	bne.n	8000a18 <__cmpdf2+0x74>
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d1d6      	bne.n	80009c0 <__cmpdf2+0x1c>
 8000a12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a16:	d0d3      	beq.n	80009c0 <__cmpdf2+0x1c>
 8000a18:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdrcmple>:
 8000a20:	4684      	mov	ip, r0
 8000a22:	4610      	mov	r0, r2
 8000a24:	4662      	mov	r2, ip
 8000a26:	468c      	mov	ip, r1
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4663      	mov	r3, ip
 8000a2c:	e000      	b.n	8000a30 <__aeabi_cdcmpeq>
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdcmpeq>:
 8000a30:	b501      	push	{r0, lr}
 8000a32:	f7ff ffb7 	bl	80009a4 <__cmpdf2>
 8000a36:	2800      	cmp	r0, #0
 8000a38:	bf48      	it	mi
 8000a3a:	f110 0f00 	cmnmi.w	r0, #0
 8000a3e:	bd01      	pop	{r0, pc}

08000a40 <__aeabi_dcmpeq>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff fff4 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a48:	bf0c      	ite	eq
 8000a4a:	2001      	moveq	r0, #1
 8000a4c:	2000      	movne	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmplt>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffea 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a5c:	bf34      	ite	cc
 8000a5e:	2001      	movcc	r0, #1
 8000a60:	2000      	movcs	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmple>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffe0 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a70:	bf94      	ite	ls
 8000a72:	2001      	movls	r0, #1
 8000a74:	2000      	movhi	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpge>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffce 	bl	8000a20 <__aeabi_cdrcmple>
 8000a84:	bf94      	ite	ls
 8000a86:	2001      	movls	r0, #1
 8000a88:	2000      	movhi	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmpgt>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffc4 	bl	8000a20 <__aeabi_cdrcmple>
 8000a98:	bf34      	ite	cc
 8000a9a:	2001      	movcc	r0, #1
 8000a9c:	2000      	movcs	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_d2iz>:
 8000aa4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aac:	d215      	bcs.n	8000ada <__aeabi_d2iz+0x36>
 8000aae:	d511      	bpl.n	8000ad4 <__aeabi_d2iz+0x30>
 8000ab0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab8:	d912      	bls.n	8000ae0 <__aeabi_d2iz+0x3c>
 8000aba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000abe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	bf18      	it	ne
 8000ad0:	4240      	negne	r0, r0
 8000ad2:	4770      	bx	lr
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ade:	d105      	bne.n	8000aec <__aeabi_d2iz+0x48>
 8000ae0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae4:	bf08      	it	eq
 8000ae6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <__aeabi_d2uiz>:
 8000af4:	004a      	lsls	r2, r1, #1
 8000af6:	d211      	bcs.n	8000b1c <__aeabi_d2uiz+0x28>
 8000af8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000afc:	d211      	bcs.n	8000b22 <__aeabi_d2uiz+0x2e>
 8000afe:	d50d      	bpl.n	8000b1c <__aeabi_d2uiz+0x28>
 8000b00:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b08:	d40e      	bmi.n	8000b28 <__aeabi_d2uiz+0x34>
 8000b0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b26:	d102      	bne.n	8000b2e <__aeabi_d2uiz+0x3a>
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2c:	4770      	bx	lr
 8000b2e:	f04f 0000 	mov.w	r0, #0
 8000b32:	4770      	bx	lr

08000b34 <__aeabi_d2f>:
 8000b34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b38:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b3c:	bf24      	itt	cs
 8000b3e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b42:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b46:	d90d      	bls.n	8000b64 <__aeabi_d2f+0x30>
 8000b48:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b4c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b50:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b54:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b58:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b5c:	bf08      	it	eq
 8000b5e:	f020 0001 	biceq.w	r0, r0, #1
 8000b62:	4770      	bx	lr
 8000b64:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b68:	d121      	bne.n	8000bae <__aeabi_d2f+0x7a>
 8000b6a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6e:	bfbc      	itt	lt
 8000b70:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	4770      	bxlt	lr
 8000b76:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b7a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7e:	f1c2 0218 	rsb	r2, r2, #24
 8000b82:	f1c2 0c20 	rsb	ip, r2, #32
 8000b86:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8e:	bf18      	it	ne
 8000b90:	f040 0001 	orrne.w	r0, r0, #1
 8000b94:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b98:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b9c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba0:	ea40 000c 	orr.w	r0, r0, ip
 8000ba4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bac:	e7cc      	b.n	8000b48 <__aeabi_d2f+0x14>
 8000bae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb2:	d107      	bne.n	8000bc4 <__aeabi_d2f+0x90>
 8000bb4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb8:	bf1e      	ittt	ne
 8000bba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bbe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bc2:	4770      	bxne	lr
 8000bc4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c0c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000bd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bda:	e003      	b.n	8000be4 <LoopCopyDataInit>

08000bdc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000be0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000be2:	3104      	adds	r1, #4

08000be4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000be4:	480b      	ldr	r0, [pc, #44]	; (8000c14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000be8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bec:	d3f6      	bcc.n	8000bdc <CopyDataInit>
  ldr  r2, =_sbss
 8000bee:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bf0:	e002      	b.n	8000bf8 <LoopFillZerobss>

08000bf2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bf2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bf4:	f842 3b04 	str.w	r3, [r2], #4

08000bf8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bfc:	d3f9      	bcc.n	8000bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bfe:	f002 fc63 	bl	80034c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c02:	f017 ffd7 	bl	8018bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c06:	f001 faa7 	bl	8002158 <main>
  bx  lr    
 8000c0a:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c0c:	20030000 	.word	0x20030000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000c10:	080233dc 	.word	0x080233dc
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c18:	20000b70 	.word	0x20000b70
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000c1c:	20000b70 	.word	0x20000b70
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c20:	20021d1c 	.word	0x20021d1c

08000c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c24:	e7fe      	b.n	8000c24 <ADC_IRQHandler>
	...

08000c28 <_speedRegWindowCallback>:
static void _speedRegWindowCallback(WM_MESSAGE * pMsg)
{
  int NCode;
  int Id;

  switch (pMsg->MsgId)
 8000c28:	6803      	ldr	r3, [r0, #0]
 8000c2a:	2b1d      	cmp	r3, #29
      break;
    }
}

static void _speedRegWindowCallback(WM_MESSAGE * pMsg)
{
 8000c2c:	b570      	push	{r4, r5, r6, lr}
 8000c2e:	4605      	mov	r5, r0
  int NCode;
  int Id;

  switch (pMsg->MsgId)
 8000c30:	d002      	beq.n	8000c38 <_speedRegWindowCallback+0x10>
 8000c32:	2b26      	cmp	r3, #38	; 0x26
 8000c34:	d020      	beq.n	8000c78 <_speedRegWindowCallback+0x50>
 8000c36:	e0ce      	b.n	8000dd6 <_speedRegWindowCallback+0x1ae>
    {
    case WM_INIT_DIALOG:
      editHandles[EDIT_KP_SPEED] = WM_GetDialogItem(pMsg->hWin, ID_EDIT_KP_SPEED);
 8000c38:	f640 012e 	movw	r1, #2094	; 0x82e
 8000c3c:	6840      	ldr	r0, [r0, #4]
 8000c3e:	4c68      	ldr	r4, [pc, #416]	; (8000de0 <_speedRegWindowCallback+0x1b8>)
 8000c40:	f00a fa8f 	bl	800b162 <WM_GetDialogItem>
      editHandles[EDIT_KI_SPEED] = WM_GetDialogItem(pMsg->hWin, ID_EDIT_KI_SPEED);
 8000c44:	f640 012f 	movw	r1, #2095	; 0x82f
  int Id;

  switch (pMsg->MsgId)
    {
    case WM_INIT_DIALOG:
      editHandles[EDIT_KP_SPEED] = WM_GetDialogItem(pMsg->hWin, ID_EDIT_KP_SPEED);
 8000c48:	60a0      	str	r0, [r4, #8]
      editHandles[EDIT_KI_SPEED] = WM_GetDialogItem(pMsg->hWin, ID_EDIT_KI_SPEED);
 8000c4a:	6868      	ldr	r0, [r5, #4]
 8000c4c:	f00a fa89 	bl	800b162 <WM_GetDialogItem>
      editHandles[EDIT_KD_SPEED] = WM_GetDialogItem(pMsg->hWin, ID_EDIT_KD_SPEED);
 8000c50:	f44f 6103 	mov.w	r1, #2096	; 0x830

  switch (pMsg->MsgId)
    {
    case WM_INIT_DIALOG:
      editHandles[EDIT_KP_SPEED] = WM_GetDialogItem(pMsg->hWin, ID_EDIT_KP_SPEED);
      editHandles[EDIT_KI_SPEED] = WM_GetDialogItem(pMsg->hWin, ID_EDIT_KI_SPEED);
 8000c54:	60e0      	str	r0, [r4, #12]
      editHandles[EDIT_KD_SPEED] = WM_GetDialogItem(pMsg->hWin, ID_EDIT_KD_SPEED);
 8000c56:	6868      	ldr	r0, [r5, #4]
 8000c58:	f00a fa83 	bl	800b162 <WM_GetDialogItem>
      editHandles[EDIT_SPEED_REF] = WM_GetDialogItem(pMsg->hWin, ID_SPEED_REF_EDIT);
 8000c5c:	f640 0129 	movw	r1, #2089	; 0x829
  switch (pMsg->MsgId)
    {
    case WM_INIT_DIALOG:
      editHandles[EDIT_KP_SPEED] = WM_GetDialogItem(pMsg->hWin, ID_EDIT_KP_SPEED);
      editHandles[EDIT_KI_SPEED] = WM_GetDialogItem(pMsg->hWin, ID_EDIT_KI_SPEED);
      editHandles[EDIT_KD_SPEED] = WM_GetDialogItem(pMsg->hWin, ID_EDIT_KD_SPEED);
 8000c60:	6120      	str	r0, [r4, #16]
      editHandles[EDIT_SPEED_REF] = WM_GetDialogItem(pMsg->hWin, ID_SPEED_REF_EDIT);
 8000c62:	6868      	ldr	r0, [r5, #4]
 8000c64:	f00a fa7d 	bl	800b162 <WM_GetDialogItem>
      editHandles[EDIT_CURRENT_LIMIT] = WM_GetDialogItem(pMsg->hWin, ID_EDIT_CURRENT_LIMIT);
 8000c68:	f44f 6104 	mov.w	r1, #2112	; 0x840
    {
    case WM_INIT_DIALOG:
      editHandles[EDIT_KP_SPEED] = WM_GetDialogItem(pMsg->hWin, ID_EDIT_KP_SPEED);
      editHandles[EDIT_KI_SPEED] = WM_GetDialogItem(pMsg->hWin, ID_EDIT_KI_SPEED);
      editHandles[EDIT_KD_SPEED] = WM_GetDialogItem(pMsg->hWin, ID_EDIT_KD_SPEED);
      editHandles[EDIT_SPEED_REF] = WM_GetDialogItem(pMsg->hWin, ID_SPEED_REF_EDIT);
 8000c6c:	61a0      	str	r0, [r4, #24]
      editHandles[EDIT_CURRENT_LIMIT] = WM_GetDialogItem(pMsg->hWin, ID_EDIT_CURRENT_LIMIT);
 8000c6e:	6868      	ldr	r0, [r5, #4]
 8000c70:	f00a fa77 	bl	800b162 <WM_GetDialogItem>
 8000c74:	61e0      	str	r0, [r4, #28]
      break;
 8000c76:	bd70      	pop	{r4, r5, r6, pc}

    case WM_NOTIFY_PARENT:
      Id    = WM_GetId(pMsg->hWinSrc);
 8000c78:	6880      	ldr	r0, [r0, #8]
 8000c7a:	f00a fa32 	bl	800b0e2 <WM_GetId>
      NCode = pMsg->Data.v;
      switch (Id)
 8000c7e:	f640 0228 	movw	r2, #2088	; 0x828
 8000c82:	4290      	cmp	r0, r2
      editHandles[EDIT_SPEED_REF] = WM_GetDialogItem(pMsg->hWin, ID_SPEED_REF_EDIT);
      editHandles[EDIT_CURRENT_LIMIT] = WM_GetDialogItem(pMsg->hWin, ID_EDIT_CURRENT_LIMIT);
      break;

    case WM_NOTIFY_PARENT:
      Id    = WM_GetId(pMsg->hWinSrc);
 8000c84:	4604      	mov	r4, r0
      NCode = pMsg->Data.v;
 8000c86:	68eb      	ldr	r3, [r5, #12]
      switch (Id)
 8000c88:	d059      	beq.n	8000d3e <_speedRegWindowCallback+0x116>
 8000c8a:	dc09      	bgt.n	8000ca0 <_speedRegWindowCallback+0x78>
 8000c8c:	f640 0226 	movw	r2, #2086	; 0x826
 8000c90:	4290      	cmp	r0, r2
 8000c92:	d06f      	beq.n	8000d74 <_speedRegWindowCallback+0x14c>
 8000c94:	dc35      	bgt.n	8000d02 <_speedRegWindowCallback+0xda>
 8000c96:	f640 021b 	movw	r2, #2075	; 0x81b
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	da17      	bge.n	8000cce <_speedRegWindowCallback+0xa6>
 8000c9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ca0:	f640 022f 	movw	r2, #2095	; 0x82f
 8000ca4:	4290      	cmp	r0, r2
 8000ca6:	f000 8084 	beq.w	8000db2 <_speedRegWindowCallback+0x18a>
 8000caa:	f5b0 6f03 	cmp.w	r0, #2096	; 0x830
 8000cae:	da09      	bge.n	8000cc4 <_speedRegWindowCallback+0x9c>
 8000cb0:	f640 0229 	movw	r2, #2089	; 0x829
 8000cb4:	4290      	cmp	r0, r2
 8000cb6:	f000 8084 	beq.w	8000dc2 <_speedRegWindowCallback+0x19a>
 8000cba:	f640 022e 	movw	r2, #2094	; 0x82e
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	d073      	beq.n	8000daa <_speedRegWindowCallback+0x182>
 8000cc2:	bd70      	pop	{r4, r5, r6, pc}
 8000cc4:	d079      	beq.n	8000dba <_speedRegWindowCallback+0x192>
 8000cc6:	f5b0 6f04 	cmp.w	r0, #2112	; 0x840
 8000cca:	d07e      	beq.n	8000dca <_speedRegWindowCallback+0x1a2>
 8000ccc:	bd70      	pop	{r4, r5, r6, pc}
        {
        case ID_BUTTON_10 ... ID_BUTTON_19:
          switch (NCode)
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	f040 8085 	bne.w	8000dde <_speedRegWindowCallback+0x1b6>
            {
            case WM_NOTIFICATION_CLICKED:
              EDIT_GetText(editHandles[activeEditField], currentlyEditedField, 10);
 8000cd4:	4e43      	ldr	r6, [pc, #268]	; (8000de4 <_speedRegWindowCallback+0x1bc>)
 8000cd6:	4d42      	ldr	r5, [pc, #264]	; (8000de0 <_speedRegWindowCallback+0x1b8>)
 8000cd8:	7833      	ldrb	r3, [r6, #0]
 8000cda:	4943      	ldr	r1, [pc, #268]	; (8000de8 <_speedRegWindowCallback+0x1c0>)
 8000cdc:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8000ce0:	220a      	movs	r2, #10
 8000ce2:	f008 fe60 	bl	80099a6 <EDIT_GetText>
              if (strlen(currentlyEditedField) < MAX_EDIT_FIELD_LENGTH)
 8000ce6:	4840      	ldr	r0, [pc, #256]	; (8000de8 <_speedRegWindowCallback+0x1c0>)
 8000ce8:	f7ff fa82 	bl	80001f0 <strlen>
 8000cec:	2805      	cmp	r0, #5
 8000cee:	d876      	bhi.n	8000dde <_speedRegWindowCallback+0x1b6>
                {
                  strcat(currentlyEditedField, buttonsSpeed[Id]);
 8000cf0:	493e      	ldr	r1, [pc, #248]	; (8000dec <_speedRegWindowCallback+0x1c4>)
 8000cf2:	483d      	ldr	r0, [pc, #244]	; (8000de8 <_speedRegWindowCallback+0x1c0>)
 8000cf4:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 8000cf8:	f017 ffbf 	bl	8018c7a <strcat>
                  EDIT_SetText(editHandles[activeEditField], currentlyEditedField);
 8000cfc:	7833      	ldrb	r3, [r6, #0]
 8000cfe:	493a      	ldr	r1, [pc, #232]	; (8000de8 <_speedRegWindowCallback+0x1c0>)
 8000d00:	e017      	b.n	8000d32 <_speedRegWindowCallback+0x10a>
              break;
            }
          break;

        case ID_BUTTON_BACKSPACE_SPEED:
          if (NCode == WM_NOTIFICATION_CLICKED)
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d16b      	bne.n	8000dde <_speedRegWindowCallback+0x1b6>
            {
              EDIT_GetText(editHandles[activeEditField], currentlyEditedField, 10);
 8000d06:	4e37      	ldr	r6, [pc, #220]	; (8000de4 <_speedRegWindowCallback+0x1bc>)
 8000d08:	4c37      	ldr	r4, [pc, #220]	; (8000de8 <_speedRegWindowCallback+0x1c0>)
 8000d0a:	7833      	ldrb	r3, [r6, #0]
 8000d0c:	4d34      	ldr	r5, [pc, #208]	; (8000de0 <_speedRegWindowCallback+0x1b8>)
 8000d0e:	220a      	movs	r2, #10
 8000d10:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8000d14:	4621      	mov	r1, r4
 8000d16:	f008 fe46 	bl	80099a6 <EDIT_GetText>
              uint8_t length = strlen(currentlyEditedField);
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	f7ff fa68 	bl	80001f0 <strlen>
              if (length < 1)
 8000d20:	b2c0      	uxtb	r0, r0
 8000d22:	2800      	cmp	r0, #0
 8000d24:	d05b      	beq.n	8000dde <_speedRegWindowCallback+0x1b6>
                break;
              currentlyEditedField[length - 1] = '\0';
 8000d26:	4420      	add	r0, r4
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f800 3c01 	strb.w	r3, [r0, #-1]
              EDIT_SetText(editHandles[activeEditField], currentlyEditedField);
 8000d2e:	7833      	ldrb	r3, [r6, #0]
 8000d30:	4621      	mov	r1, r4
 8000d32:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
      break;
    default:
      WM_DefaultProc(pMsg);
      break;
    }
}
 8000d36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              EDIT_GetText(editHandles[activeEditField], currentlyEditedField, 10);
              uint8_t length = strlen(currentlyEditedField);
              if (length < 1)
                break;
              currentlyEditedField[length - 1] = '\0';
              EDIT_SetText(editHandles[activeEditField], currentlyEditedField);
 8000d3a:	f008 bdcb 	b.w	80098d4 <EDIT_SetText>
            }
          break;

        case ID_CLEAR_ALL_SPEED:
          if (NCode == WM_NOTIFICATION_CLICKED)
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d14d      	bne.n	8000dde <_speedRegWindowCallback+0x1b6>
            {
              memset(currentlyEditedField, 0, sizeof(currentlyEditedField));
 8000d42:	4c29      	ldr	r4, [pc, #164]	; (8000de8 <_speedRegWindowCallback+0x1c0>)

              EDIT_SetText(editHandles[EDIT_KP_SPEED], currentlyEditedField);
 8000d44:	4d26      	ldr	r5, [pc, #152]	; (8000de0 <_speedRegWindowCallback+0x1b8>)
          break;

        case ID_CLEAR_ALL_SPEED:
          if (NCode == WM_NOTIFICATION_CLICKED)
            {
              memset(currentlyEditedField, 0, sizeof(currentlyEditedField));
 8000d46:	2300      	movs	r3, #0
 8000d48:	6023      	str	r3, [r4, #0]
 8000d4a:	6063      	str	r3, [r4, #4]
 8000d4c:	8123      	strh	r3, [r4, #8]

              EDIT_SetText(editHandles[EDIT_KP_SPEED], currentlyEditedField);
 8000d4e:	4621      	mov	r1, r4
 8000d50:	68a8      	ldr	r0, [r5, #8]
 8000d52:	f008 fdbf 	bl	80098d4 <EDIT_SetText>
              EDIT_SetText(editHandles[EDIT_KI_SPEED], currentlyEditedField);
 8000d56:	4621      	mov	r1, r4
 8000d58:	68e8      	ldr	r0, [r5, #12]
 8000d5a:	f008 fdbb 	bl	80098d4 <EDIT_SetText>
              EDIT_SetText(editHandles[EDIT_KD_SPEED], currentlyEditedField);
 8000d5e:	4621      	mov	r1, r4
 8000d60:	6928      	ldr	r0, [r5, #16]
 8000d62:	f008 fdb7 	bl	80098d4 <EDIT_SetText>
              EDIT_SetText(editHandles[EDIT_SPEED_REF], currentlyEditedField);
 8000d66:	4621      	mov	r1, r4
 8000d68:	69a8      	ldr	r0, [r5, #24]
 8000d6a:	f008 fdb3 	bl	80098d4 <EDIT_SetText>
              EDIT_SetText(editHandles[EDIT_CURRENT_LIMIT], currentlyEditedField);
 8000d6e:	4621      	mov	r1, r4
 8000d70:	69e8      	ldr	r0, [r5, #28]
 8000d72:	e7e0      	b.n	8000d36 <_speedRegWindowCallback+0x10e>
            }
          break;

        case ID_BUTTON_DOT_SPEED:
          if (NCode == WM_NOTIFICATION_CLICKED)
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d132      	bne.n	8000dde <_speedRegWindowCallback+0x1b6>
            {
              if (activeEditField == EDIT_SPEED_REF)
 8000d78:	4d1a      	ldr	r5, [pc, #104]	; (8000de4 <_speedRegWindowCallback+0x1bc>)
 8000d7a:	782b      	ldrb	r3, [r5, #0]
 8000d7c:	2b06      	cmp	r3, #6
 8000d7e:	d02e      	beq.n	8000dde <_speedRegWindowCallback+0x1b6>
                break;

              EDIT_GetText(editHandles[activeEditField], currentlyEditedField, 10);
 8000d80:	4c17      	ldr	r4, [pc, #92]	; (8000de0 <_speedRegWindowCallback+0x1b8>)
 8000d82:	4919      	ldr	r1, [pc, #100]	; (8000de8 <_speedRegWindowCallback+0x1c0>)
 8000d84:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8000d88:	220a      	movs	r2, #10
 8000d8a:	f008 fe0c 	bl	80099a6 <EDIT_GetText>
              if (strlen(currentlyEditedField) < MAX_EDIT_FIELD_LENGTH)
 8000d8e:	4816      	ldr	r0, [pc, #88]	; (8000de8 <_speedRegWindowCallback+0x1c0>)
 8000d90:	f7ff fa2e 	bl	80001f0 <strlen>
 8000d94:	2805      	cmp	r0, #5
 8000d96:	d822      	bhi.n	8000dde <_speedRegWindowCallback+0x1b6>
                {
                  strcat(currentlyEditedField, ".");
 8000d98:	4915      	ldr	r1, [pc, #84]	; (8000df0 <_speedRegWindowCallback+0x1c8>)
 8000d9a:	4813      	ldr	r0, [pc, #76]	; (8000de8 <_speedRegWindowCallback+0x1c0>)
 8000d9c:	f017 ff6d 	bl	8018c7a <strcat>
                  EDIT_SetText(editHandles[activeEditField], currentlyEditedField);
 8000da0:	782b      	ldrb	r3, [r5, #0]
 8000da2:	4911      	ldr	r1, [pc, #68]	; (8000de8 <_speedRegWindowCallback+0x1c0>)
 8000da4:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8000da8:	e7c5      	b.n	8000d36 <_speedRegWindowCallback+0x10e>
                }
            }
          break;

        case ID_EDIT_KP_SPEED:
          if (NCode == WM_NOTIFICATION_CLICKED)
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d117      	bne.n	8000dde <_speedRegWindowCallback+0x1b6>
            activeEditField = EDIT_KP_SPEED;
 8000dae:	2202      	movs	r2, #2
 8000db0:	e00e      	b.n	8000dd0 <_speedRegWindowCallback+0x1a8>
          break;

        case ID_EDIT_KI_SPEED:
          if (NCode == WM_NOTIFICATION_CLICKED)
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d113      	bne.n	8000dde <_speedRegWindowCallback+0x1b6>
            activeEditField = EDIT_KI_SPEED;
 8000db6:	2203      	movs	r2, #3
 8000db8:	e00a      	b.n	8000dd0 <_speedRegWindowCallback+0x1a8>
          break;

        case ID_EDIT_KD_SPEED:
          if (NCode == WM_NOTIFICATION_CLICKED)
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d10f      	bne.n	8000dde <_speedRegWindowCallback+0x1b6>
            activeEditField = EDIT_KD_SPEED;
 8000dbe:	2204      	movs	r2, #4
 8000dc0:	e006      	b.n	8000dd0 <_speedRegWindowCallback+0x1a8>
          break;

        case ID_SPEED_REF_EDIT:
          if (NCode == WM_NOTIFICATION_CLICKED)
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d10b      	bne.n	8000dde <_speedRegWindowCallback+0x1b6>
            activeEditField = EDIT_SPEED_REF;
 8000dc6:	2206      	movs	r2, #6
 8000dc8:	e002      	b.n	8000dd0 <_speedRegWindowCallback+0x1a8>
          break;

        case ID_EDIT_CURRENT_LIMIT:
          if (NCode == WM_NOTIFICATION_CLICKED)
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d107      	bne.n	8000dde <_speedRegWindowCallback+0x1b6>
            activeEditField = EDIT_CURRENT_LIMIT;
 8000dce:	2207      	movs	r2, #7
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <_speedRegWindowCallback+0x1bc>)
 8000dd2:	701a      	strb	r2, [r3, #0]
 8000dd4:	bd70      	pop	{r4, r5, r6, pc}
      break;
    default:
      WM_DefaultProc(pMsg);
      break;
    }
}
 8000dd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            activeEditField = EDIT_CURRENT_LIMIT;
          break;
        }
      break;
    default:
      WM_DefaultProc(pMsg);
 8000dda:	f00b bbb5 	b.w	800c548 <WM_DefaultProc>
 8000dde:	bd70      	pop	{r4, r5, r6, pc}
 8000de0:	20000ba8 	.word	0x20000ba8
 8000de4:	20000bd0 	.word	0x20000bd0
 8000de8:	20000b98 	.word	0x20000b98
 8000dec:	0801af9b 	.word	0x0801af9b
 8000df0:	0801d626 	.word	0x0801d626

08000df4 <checkField>:
#define CURRENT_MIN 1
#define CURRENT_MAX 100
#define SPEED_MIN 1
#define SPEED_MAX 3000
static bool checkField(editField_t field, float min, float max)
{
 8000df4:	b510      	push	{r4, lr}
 8000df6:	ed2d 8b02 	vpush	{d8}
  float temp;
  char buff[10] = {0};

  EDIT_GetText(editHandles[field], buff, sizeof(buff));
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <checkField+0x60>)
#define CURRENT_MIN 1
#define CURRENT_MAX 100
#define SPEED_MIN 1
#define SPEED_MAX 3000
static bool checkField(editField_t field, float min, float max)
{
 8000dfc:	b084      	sub	sp, #16
  float temp;
  char buff[10] = {0};

  EDIT_GetText(editHandles[field], buff, sizeof(buff));
 8000dfe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
#define SPEED_MIN 1
#define SPEED_MAX 3000
static bool checkField(editField_t field, float min, float max)
{
  float temp;
  char buff[10] = {0};
 8000e02:	2400      	movs	r4, #0

  EDIT_GetText(editHandles[field], buff, sizeof(buff));
 8000e04:	220a      	movs	r2, #10
 8000e06:	a901      	add	r1, sp, #4
#define CURRENT_MIN 1
#define CURRENT_MAX 100
#define SPEED_MIN 1
#define SPEED_MAX 3000
static bool checkField(editField_t field, float min, float max)
{
 8000e08:	eef0 8a40 	vmov.f32	s17, s0
 8000e0c:	eeb0 8a60 	vmov.f32	s16, s1
  float temp;
  char buff[10] = {0};
 8000e10:	9401      	str	r4, [sp, #4]
 8000e12:	9402      	str	r4, [sp, #8]
 8000e14:	f8ad 400c 	strh.w	r4, [sp, #12]

  EDIT_GetText(editHandles[field], buff, sizeof(buff));
 8000e18:	f008 fdc5 	bl	80099a6 <EDIT_GetText>
  temp = atof(buff);
 8000e1c:	a801      	add	r0, sp, #4
 8000e1e:	f017 fec1 	bl	8018ba4 <atof>
 8000e22:	ec51 0b10 	vmov	r0, r1, d0
 8000e26:	f7ff fe85 	bl	8000b34 <__aeabi_d2f>
 8000e2a:	ee07 0a90 	vmov	s15, r0

  if (temp >= min && temp <= max)
 8000e2e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8000e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e36:	db07      	blt.n	8000e48 <checkField+0x54>
 8000e38:	eef4 7ac8 	vcmpe.f32	s15, s16
 8000e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e40:	bf94      	ite	ls
 8000e42:	2001      	movls	r0, #1
 8000e44:	4620      	movhi	r0, r4
 8000e46:	e000      	b.n	8000e4a <checkField+0x56>
    return true;
  else
    return false;
 8000e48:	4620      	mov	r0, r4
}
 8000e4a:	b004      	add	sp, #16
 8000e4c:	ecbd 8b02 	vpop	{d8}
 8000e50:	bd10      	pop	{r4, pc}
 8000e52:	bf00      	nop
 8000e54:	20000ba8 	.word	0x20000ba8

08000e58 <_currentRegWindowCallback>:
static void _currentRegWindowCallback(WM_MESSAGE * pMsg)
{
  int NCode;
  int Id;

  switch (pMsg->MsgId)
 8000e58:	6803      	ldr	r3, [r0, #0]
 8000e5a:	2b1d      	cmp	r3, #29

    }
}

static void _currentRegWindowCallback(WM_MESSAGE * pMsg)
{
 8000e5c:	b570      	push	{r4, r5, r6, lr}
 8000e5e:	4604      	mov	r4, r0
  int NCode;
  int Id;

  switch (pMsg->MsgId)
 8000e60:	d002      	beq.n	8000e68 <_currentRegWindowCallback+0x10>
 8000e62:	2b26      	cmp	r3, #38	; 0x26
 8000e64:	d014      	beq.n	8000e90 <_currentRegWindowCallback+0x38>
 8000e66:	e098      	b.n	8000f9a <_currentRegWindowCallback+0x142>
    {
    case WM_INIT_DIALOG:
      editHandles[EDIT_KP_CURRENT] = WM_GetDialogItem(pMsg->hWin, ID_EDIT_KP_CURRENT);
 8000e68:	f640 0102 	movw	r1, #2050	; 0x802
 8000e6c:	6840      	ldr	r0, [r0, #4]
 8000e6e:	4d4d      	ldr	r5, [pc, #308]	; (8000fa4 <_currentRegWindowCallback+0x14c>)
 8000e70:	f00a f977 	bl	800b162 <WM_GetDialogItem>
      editHandles[EDIT_KI_CURRENT] = WM_GetDialogItem(pMsg->hWin, ID_EDIT_KI_CURRENT);
 8000e74:	f640 0112 	movw	r1, #2066	; 0x812
  int Id;

  switch (pMsg->MsgId)
    {
    case WM_INIT_DIALOG:
      editHandles[EDIT_KP_CURRENT] = WM_GetDialogItem(pMsg->hWin, ID_EDIT_KP_CURRENT);
 8000e78:	6028      	str	r0, [r5, #0]
      editHandles[EDIT_KI_CURRENT] = WM_GetDialogItem(pMsg->hWin, ID_EDIT_KI_CURRENT);
 8000e7a:	6860      	ldr	r0, [r4, #4]
 8000e7c:	f00a f971 	bl	800b162 <WM_GetDialogItem>
      editHandles[EDIT_CURRENT_REF] = WM_GetDialogItem(pMsg->hWin, ID_CURRENT_REF_EDIT);
 8000e80:	f640 0117 	movw	r1, #2071	; 0x817

  switch (pMsg->MsgId)
    {
    case WM_INIT_DIALOG:
      editHandles[EDIT_KP_CURRENT] = WM_GetDialogItem(pMsg->hWin, ID_EDIT_KP_CURRENT);
      editHandles[EDIT_KI_CURRENT] = WM_GetDialogItem(pMsg->hWin, ID_EDIT_KI_CURRENT);
 8000e84:	6068      	str	r0, [r5, #4]
      editHandles[EDIT_CURRENT_REF] = WM_GetDialogItem(pMsg->hWin, ID_CURRENT_REF_EDIT);
 8000e86:	6860      	ldr	r0, [r4, #4]
 8000e88:	f00a f96b 	bl	800b162 <WM_GetDialogItem>
 8000e8c:	6168      	str	r0, [r5, #20]
      break;
 8000e8e:	bd70      	pop	{r4, r5, r6, pc}

    case WM_NOTIFY_PARENT:
      Id    = WM_GetId(pMsg->hWinSrc);
 8000e90:	6880      	ldr	r0, [r0, #8]
 8000e92:	f00a f926 	bl	800b0e2 <WM_GetId>
      NCode = pMsg->Data.v;
      switch (Id)
 8000e96:	f6a0 0202 	subw	r2, r0, #2050	; 0x802
      editHandles[EDIT_KI_CURRENT] = WM_GetDialogItem(pMsg->hWin, ID_EDIT_KI_CURRENT);
      editHandles[EDIT_CURRENT_REF] = WM_GetDialogItem(pMsg->hWin, ID_CURRENT_REF_EDIT);
      break;

    case WM_NOTIFY_PARENT:
      Id    = WM_GetId(pMsg->hWinSrc);
 8000e9a:	4606      	mov	r6, r0
      NCode = pMsg->Data.v;
 8000e9c:	68e3      	ldr	r3, [r4, #12]
      switch (Id)
 8000e9e:	2a15      	cmp	r2, #21
 8000ea0:	d87f      	bhi.n	8000fa2 <_currentRegWindowCallback+0x14a>
 8000ea2:	e8df f002 	tbb	[pc, r2]
 8000ea6:	0b6b      	.short	0x0b6b
 8000ea8:	0b0b0b0b 	.word	0x0b0b0b0b
 8000eac:	0b0b0b0b 	.word	0x0b0b0b0b
 8000eb0:	7e3d1f0b 	.word	0x7e3d1f0b
 8000eb4:	7e6f7e7e 	.word	0x7e6f7e7e
 8000eb8:	74507e7e 	.word	0x74507e7e
        {
        case ID_BUTTON_0 ... ID_BUTTON_9:
          switch (NCode)
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d170      	bne.n	8000fa2 <_currentRegWindowCallback+0x14a>
            {
            case WM_NOTIFICATION_CLICKED:
              EDIT_GetText(editHandles[activeEditField], currentlyEditedField, 10);
 8000ec0:	4d39      	ldr	r5, [pc, #228]	; (8000fa8 <_currentRegWindowCallback+0x150>)
 8000ec2:	4c38      	ldr	r4, [pc, #224]	; (8000fa4 <_currentRegWindowCallback+0x14c>)
 8000ec4:	782b      	ldrb	r3, [r5, #0]
 8000ec6:	4939      	ldr	r1, [pc, #228]	; (8000fac <_currentRegWindowCallback+0x154>)
 8000ec8:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8000ecc:	220a      	movs	r2, #10
 8000ece:	f008 fd6a 	bl	80099a6 <EDIT_GetText>
              if (strlen(currentlyEditedField) < MAX_EDIT_FIELD_LENGTH)
 8000ed2:	4836      	ldr	r0, [pc, #216]	; (8000fac <_currentRegWindowCallback+0x154>)
 8000ed4:	f7ff f98c 	bl	80001f0 <strlen>
 8000ed8:	2805      	cmp	r0, #5
 8000eda:	d862      	bhi.n	8000fa2 <_currentRegWindowCallback+0x14a>
                {
                  strcat(currentlyEditedField, buttonsCurrent[Id]);
 8000edc:	4934      	ldr	r1, [pc, #208]	; (8000fb0 <_currentRegWindowCallback+0x158>)
 8000ede:	eb01 0146 	add.w	r1, r1, r6, lsl #1
 8000ee2:	e043      	b.n	8000f6c <_currentRegWindowCallback+0x114>
              break;
            }
          break;

        case ID_BUTTON_BACKSPACE_CURRENT:
          if (NCode == WM_NOTIFICATION_CLICKED)
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d15c      	bne.n	8000fa2 <_currentRegWindowCallback+0x14a>
            {
              EDIT_GetText(editHandles[activeEditField], currentlyEditedField, 10);
 8000ee8:	4e2f      	ldr	r6, [pc, #188]	; (8000fa8 <_currentRegWindowCallback+0x150>)
 8000eea:	4c30      	ldr	r4, [pc, #192]	; (8000fac <_currentRegWindowCallback+0x154>)
 8000eec:	7833      	ldrb	r3, [r6, #0]
 8000eee:	4d2d      	ldr	r5, [pc, #180]	; (8000fa4 <_currentRegWindowCallback+0x14c>)
 8000ef0:	220a      	movs	r2, #10
 8000ef2:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8000ef6:	4621      	mov	r1, r4
 8000ef8:	f008 fd55 	bl	80099a6 <EDIT_GetText>
              uint8_t length = strlen(currentlyEditedField);
 8000efc:	4620      	mov	r0, r4
 8000efe:	f7ff f977 	bl	80001f0 <strlen>
              if (length < 1)
 8000f02:	b2c0      	uxtb	r0, r0
 8000f04:	2800      	cmp	r0, #0
 8000f06:	d04c      	beq.n	8000fa2 <_currentRegWindowCallback+0x14a>
                break;
              currentlyEditedField[length - 1] = '\0';
 8000f08:	4420      	add	r0, r4
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f800 3c01 	strb.w	r3, [r0, #-1]
              EDIT_SetText(editHandles[activeEditField], currentlyEditedField);
 8000f10:	7833      	ldrb	r3, [r6, #0]
 8000f12:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8000f16:	4621      	mov	r1, r4
      break;
    default:
      WM_DefaultProc(pMsg);
      break;
    }
}
 8000f18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              EDIT_GetText(editHandles[activeEditField], currentlyEditedField, 10);
              uint8_t length = strlen(currentlyEditedField);
              if (length < 1)
                break;
              currentlyEditedField[length - 1] = '\0';
              EDIT_SetText(editHandles[activeEditField], currentlyEditedField);
 8000f1c:	f008 bcda 	b.w	80098d4 <EDIT_SetText>
            }
          break;

        case ID_CLEAR_ALL_CURRENT:
          if (NCode == WM_NOTIFICATION_CLICKED)
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d13e      	bne.n	8000fa2 <_currentRegWindowCallback+0x14a>
            {
              memset(currentlyEditedField, 0, sizeof(currentlyEditedField));
 8000f24:	4c21      	ldr	r4, [pc, #132]	; (8000fac <_currentRegWindowCallback+0x154>)
              EDIT_SetText(editHandles[EDIT_KP_CURRENT], currentlyEditedField);
 8000f26:	4d1f      	ldr	r5, [pc, #124]	; (8000fa4 <_currentRegWindowCallback+0x14c>)
          break;

        case ID_CLEAR_ALL_CURRENT:
          if (NCode == WM_NOTIFICATION_CLICKED)
            {
              memset(currentlyEditedField, 0, sizeof(currentlyEditedField));
 8000f28:	2300      	movs	r3, #0
 8000f2a:	6023      	str	r3, [r4, #0]
 8000f2c:	6063      	str	r3, [r4, #4]
 8000f2e:	8123      	strh	r3, [r4, #8]
              EDIT_SetText(editHandles[EDIT_KP_CURRENT], currentlyEditedField);
 8000f30:	4621      	mov	r1, r4
 8000f32:	6828      	ldr	r0, [r5, #0]
 8000f34:	f008 fcce 	bl	80098d4 <EDIT_SetText>
              EDIT_SetText(editHandles[EDIT_KI_CURRENT], currentlyEditedField);
 8000f38:	4621      	mov	r1, r4
 8000f3a:	6868      	ldr	r0, [r5, #4]
 8000f3c:	f008 fcca 	bl	80098d4 <EDIT_SetText>
              EDIT_SetText(editHandles[EDIT_CURRENT_REF], currentlyEditedField);
 8000f40:	4621      	mov	r1, r4
 8000f42:	6968      	ldr	r0, [r5, #20]
 8000f44:	e7e8      	b.n	8000f18 <_currentRegWindowCallback+0xc0>

            }
          break;

        case ID_BUTTON_DOT_CURRENT:
          if (NCode == WM_NOTIFICATION_CLICKED)
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d12b      	bne.n	8000fa2 <_currentRegWindowCallback+0x14a>
            {
              if (activeEditField == EDIT_CURRENT_REF)
 8000f4a:	4d17      	ldr	r5, [pc, #92]	; (8000fa8 <_currentRegWindowCallback+0x150>)
 8000f4c:	782b      	ldrb	r3, [r5, #0]
 8000f4e:	2b05      	cmp	r3, #5
 8000f50:	d027      	beq.n	8000fa2 <_currentRegWindowCallback+0x14a>
                break;

              EDIT_GetText(editHandles[activeEditField], currentlyEditedField, 10);
 8000f52:	4c14      	ldr	r4, [pc, #80]	; (8000fa4 <_currentRegWindowCallback+0x14c>)
 8000f54:	4915      	ldr	r1, [pc, #84]	; (8000fac <_currentRegWindowCallback+0x154>)
 8000f56:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8000f5a:	220a      	movs	r2, #10
 8000f5c:	f008 fd23 	bl	80099a6 <EDIT_GetText>
              if (strlen(currentlyEditedField) < MAX_EDIT_FIELD_LENGTH)
 8000f60:	4812      	ldr	r0, [pc, #72]	; (8000fac <_currentRegWindowCallback+0x154>)
 8000f62:	f7ff f945 	bl	80001f0 <strlen>
 8000f66:	2805      	cmp	r0, #5
 8000f68:	d81b      	bhi.n	8000fa2 <_currentRegWindowCallback+0x14a>
                {
                  strcat(currentlyEditedField, ".");
 8000f6a:	4912      	ldr	r1, [pc, #72]	; (8000fb4 <_currentRegWindowCallback+0x15c>)
 8000f6c:	480f      	ldr	r0, [pc, #60]	; (8000fac <_currentRegWindowCallback+0x154>)
 8000f6e:	f017 fe84 	bl	8018c7a <strcat>
                  EDIT_SetText(editHandles[activeEditField], currentlyEditedField);
 8000f72:	782b      	ldrb	r3, [r5, #0]
 8000f74:	490d      	ldr	r1, [pc, #52]	; (8000fac <_currentRegWindowCallback+0x154>)
 8000f76:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8000f7a:	e7cd      	b.n	8000f18 <_currentRegWindowCallback+0xc0>
                }
            }
          break;

        case ID_EDIT_KP_CURRENT:
          if (NCode == WM_NOTIFICATION_CLICKED)
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d110      	bne.n	8000fa2 <_currentRegWindowCallback+0x14a>
            activeEditField = EDIT_KP_CURRENT;
 8000f80:	2200      	movs	r2, #0
 8000f82:	e007      	b.n	8000f94 <_currentRegWindowCallback+0x13c>
          break;

        case ID_EDIT_KI_CURRENT:
          if (NCode == WM_NOTIFICATION_CLICKED)
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d10c      	bne.n	8000fa2 <_currentRegWindowCallback+0x14a>
            activeEditField = EDIT_KI_CURRENT;
 8000f88:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <_currentRegWindowCallback+0x150>)
 8000f8a:	7013      	strb	r3, [r2, #0]
 8000f8c:	bd70      	pop	{r4, r5, r6, pc}
          break;

        case ID_CURRENT_REF_EDIT:
          if (NCode == WM_NOTIFICATION_CLICKED)
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d107      	bne.n	8000fa2 <_currentRegWindowCallback+0x14a>
            activeEditField = EDIT_CURRENT_REF;
 8000f92:	2205      	movs	r2, #5
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <_currentRegWindowCallback+0x150>)
 8000f96:	701a      	strb	r2, [r3, #0]
 8000f98:	bd70      	pop	{r4, r5, r6, pc}
      break;
    default:
      WM_DefaultProc(pMsg);
      break;
    }
}
 8000f9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            activeEditField = EDIT_CURRENT_REF;
          break;
        }
      break;
    default:
      WM_DefaultProc(pMsg);
 8000f9e:	f00b bad3 	b.w	800c548 <WM_DefaultProc>
 8000fa2:	bd70      	pop	{r4, r5, r6, pc}
 8000fa4:	20000ba8 	.word	0x20000ba8
 8000fa8:	20000bd0 	.word	0x20000bd0
 8000fac:	20000b98 	.word	0x20000b98
 8000fb0:	0801bfe7 	.word	0x0801bfe7
 8000fb4:	0801d626 	.word	0x0801d626

08000fb8 <_controlWindowCallback>:
};

static WM_HWIN editHandles[editFieldsNum];

static void _controlWindowCallback(WM_MESSAGE * pMsg)
{
 8000fb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int     NCode;
  int     Id;

  switch (pMsg->MsgId)
 8000fbc:	6803      	ldr	r3, [r0, #0]
 8000fbe:	2b1d      	cmp	r3, #29
};

static WM_HWIN editHandles[editFieldsNum];

static void _controlWindowCallback(WM_MESSAGE * pMsg)
{
 8000fc0:	b091      	sub	sp, #68	; 0x44
 8000fc2:	4605      	mov	r5, r0
  int     NCode;
  int     Id;

  switch (pMsg->MsgId)
 8000fc4:	d003      	beq.n	8000fce <_controlWindowCallback+0x16>
 8000fc6:	2b26      	cmp	r3, #38	; 0x26
 8000fc8:	f000 80e1 	beq.w	800118e <_controlWindowCallback+0x1d6>
 8000fcc:	e238      	b.n	8001440 <_controlWindowCallback+0x488>
    {
    case WM_INIT_DIALOG:
      editHandles[EDIT_ERROR1] = WM_GetDialogItem(pMsg->hWin, ID_TEXT_ERROR1);
 8000fce:	f640 0113 	movw	r1, #2067	; 0x813
 8000fd2:	6840      	ldr	r0, [r0, #4]
 8000fd4:	4cb1      	ldr	r4, [pc, #708]	; (800129c <_controlWindowCallback+0x2e4>)
 8000fd6:	f00a f8c4 	bl	800b162 <WM_GetDialogItem>
      editHandles[EDIT_ERROR2] = WM_GetDialogItem(pMsg->hWin, ID_TEXT_ERROR2);
 8000fda:	f640 0115 	movw	r1, #2069	; 0x815
  int     Id;

  switch (pMsg->MsgId)
    {
    case WM_INIT_DIALOG:
      editHandles[EDIT_ERROR1] = WM_GetDialogItem(pMsg->hWin, ID_TEXT_ERROR1);
 8000fde:	6220      	str	r0, [r4, #32]
      editHandles[EDIT_ERROR2] = WM_GetDialogItem(pMsg->hWin, ID_TEXT_ERROR2);
 8000fe0:	6868      	ldr	r0, [r5, #4]
 8000fe2:	f00a f8be 	bl	800b162 <WM_GetDialogItem>

      hStartButton = WM_GetDialogItem(pMsg->hWin, GUI_ID_BUTTON0);
 8000fe6:	f44f 71b8 	mov.w	r1, #368	; 0x170

  switch (pMsg->MsgId)
    {
    case WM_INIT_DIALOG:
      editHandles[EDIT_ERROR1] = WM_GetDialogItem(pMsg->hWin, ID_TEXT_ERROR1);
      editHandles[EDIT_ERROR2] = WM_GetDialogItem(pMsg->hWin, ID_TEXT_ERROR2);
 8000fea:	6260      	str	r0, [r4, #36]	; 0x24

      hStartButton = WM_GetDialogItem(pMsg->hWin, GUI_ID_BUTTON0);
 8000fec:	6868      	ldr	r0, [r5, #4]
      hStopButton = WM_GetDialogItem(pMsg->hWin, GUI_ID_BUTTON1);
      WM_DisableWindow(hStopButton);

      hRadio = WM_GetDialogItem(pMsg->hWin, GUI_ID_RADIO0);
 8000fee:	4cac      	ldr	r4, [pc, #688]	; (80012a0 <_controlWindowCallback+0x2e8>)
    {
    case WM_INIT_DIALOG:
      editHandles[EDIT_ERROR1] = WM_GetDialogItem(pMsg->hWin, ID_TEXT_ERROR1);
      editHandles[EDIT_ERROR2] = WM_GetDialogItem(pMsg->hWin, ID_TEXT_ERROR2);

      hStartButton = WM_GetDialogItem(pMsg->hWin, GUI_ID_BUTTON0);
 8000ff0:	f00a f8b7 	bl	800b162 <WM_GetDialogItem>
 8000ff4:	4bab      	ldr	r3, [pc, #684]	; (80012a4 <_controlWindowCallback+0x2ec>)
      hStopButton = WM_GetDialogItem(pMsg->hWin, GUI_ID_BUTTON1);
 8000ff6:	f240 1171 	movw	r1, #369	; 0x171
    {
    case WM_INIT_DIALOG:
      editHandles[EDIT_ERROR1] = WM_GetDialogItem(pMsg->hWin, ID_TEXT_ERROR1);
      editHandles[EDIT_ERROR2] = WM_GetDialogItem(pMsg->hWin, ID_TEXT_ERROR2);

      hStartButton = WM_GetDialogItem(pMsg->hWin, GUI_ID_BUTTON0);
 8000ffa:	6018      	str	r0, [r3, #0]
      hStopButton = WM_GetDialogItem(pMsg->hWin, GUI_ID_BUTTON1);
 8000ffc:	6868      	ldr	r0, [r5, #4]
 8000ffe:	f00a f8b0 	bl	800b162 <WM_GetDialogItem>
 8001002:	4ba9      	ldr	r3, [pc, #676]	; (80012a8 <_controlWindowCallback+0x2f0>)
 8001004:	6018      	str	r0, [r3, #0]
      WM_DisableWindow(hStopButton);
 8001006:	f00a f92c 	bl	800b262 <WM_DisableWindow>

      hRadio = WM_GetDialogItem(pMsg->hWin, GUI_ID_RADIO0);
 800100a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800100e:	6868      	ldr	r0, [r5, #4]
 8001010:	f00a f8a7 	bl	800b162 <WM_GetDialogItem>
      RADIO_SetText(hRadio, "Regulacja pradu", 0);
 8001014:	2200      	movs	r2, #0
 8001016:	49a5      	ldr	r1, [pc, #660]	; (80012ac <_controlWindowCallback+0x2f4>)

      hStartButton = WM_GetDialogItem(pMsg->hWin, GUI_ID_BUTTON0);
      hStopButton = WM_GetDialogItem(pMsg->hWin, GUI_ID_BUTTON1);
      WM_DisableWindow(hStopButton);

      hRadio = WM_GetDialogItem(pMsg->hWin, GUI_ID_RADIO0);
 8001018:	6020      	str	r0, [r4, #0]
      RADIO_SetText(hRadio, "Regulacja pradu", 0);
 800101a:	f006 facd 	bl	80075b8 <RADIO_SetText>
      RADIO_SetText(hRadio, "Regulacja predkosci", 1);
 800101e:	6820      	ldr	r0, [r4, #0]
 8001020:	49a3      	ldr	r1, [pc, #652]	; (80012b0 <_controlWindowCallback+0x2f8>)
 8001022:	2201      	movs	r2, #1
 8001024:	f006 fac8 	bl	80075b8 <RADIO_SetText>
      RADIO_SetText(hRadio, "PWM", 2);
 8001028:	2202      	movs	r2, #2
 800102a:	6820      	ldr	r0, [r4, #0]
 800102c:	49a1      	ldr	r1, [pc, #644]	; (80012b4 <_controlWindowCallback+0x2fc>)

      hDropDownFreq = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_FREQ);
 800102e:	4ca2      	ldr	r4, [pc, #648]	; (80012b8 <_controlWindowCallback+0x300>)
      WM_DisableWindow(hStopButton);

      hRadio = WM_GetDialogItem(pMsg->hWin, GUI_ID_RADIO0);
      RADIO_SetText(hRadio, "Regulacja pradu", 0);
      RADIO_SetText(hRadio, "Regulacja predkosci", 1);
      RADIO_SetText(hRadio, "PWM", 2);
 8001030:	f006 fac2 	bl	80075b8 <RADIO_SetText>

      hDropDownFreq = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_FREQ);
 8001034:	f640 0111 	movw	r1, #2065	; 0x811
 8001038:	6868      	ldr	r0, [r5, #4]
 800103a:	f00a f892 	bl	800b162 <WM_GetDialogItem>
      DROPDOWN_SetFont(hDropDownFreq, GUI_FONT_24_1);
 800103e:	499f      	ldr	r1, [pc, #636]	; (80012bc <_controlWindowCallback+0x304>)
      hRadio = WM_GetDialogItem(pMsg->hWin, GUI_ID_RADIO0);
      RADIO_SetText(hRadio, "Regulacja pradu", 0);
      RADIO_SetText(hRadio, "Regulacja predkosci", 1);
      RADIO_SetText(hRadio, "PWM", 2);

      hDropDownFreq = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_FREQ);
 8001040:	6020      	str	r0, [r4, #0]
      DROPDOWN_SetFont(hDropDownFreq, GUI_FONT_24_1);
 8001042:	f008 fd09 	bl	8009a58 <DROPDOWN_SetFont>
      DROPDOWN_SetListHeight(hDropDownFreq, 135); // dlugosc listy
 8001046:	2187      	movs	r1, #135	; 0x87
 8001048:	6820      	ldr	r0, [r4, #0]
 800104a:	f009 f883 	bl	800a154 <DROPDOWN_SetListHeight>
      DROPDOWN_AddString(hDropDownFreq, "500");
 800104e:	6820      	ldr	r0, [r4, #0]
 8001050:	499b      	ldr	r1, [pc, #620]	; (80012c0 <_controlWindowCallback+0x308>)
 8001052:	f008 fd6b 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownFreq, "1000");
 8001056:	6820      	ldr	r0, [r4, #0]
 8001058:	499a      	ldr	r1, [pc, #616]	; (80012c4 <_controlWindowCallback+0x30c>)
 800105a:	f008 fd67 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownFreq, "1500");
 800105e:	6820      	ldr	r0, [r4, #0]
 8001060:	4999      	ldr	r1, [pc, #612]	; (80012c8 <_controlWindowCallback+0x310>)
 8001062:	f008 fd63 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownFreq, "2000");
 8001066:	6820      	ldr	r0, [r4, #0]
 8001068:	4998      	ldr	r1, [pc, #608]	; (80012cc <_controlWindowCallback+0x314>)
 800106a:	f008 fd5f 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownFreq, "2500");
 800106e:	6820      	ldr	r0, [r4, #0]
 8001070:	4997      	ldr	r1, [pc, #604]	; (80012d0 <_controlWindowCallback+0x318>)
 8001072:	f008 fd5b 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownFreq, "3000");
 8001076:	6820      	ldr	r0, [r4, #0]
 8001078:	4996      	ldr	r1, [pc, #600]	; (80012d4 <_controlWindowCallback+0x31c>)
 800107a:	f008 fd57 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownFreq, "3500");
 800107e:	6820      	ldr	r0, [r4, #0]
 8001080:	4995      	ldr	r1, [pc, #596]	; (80012d8 <_controlWindowCallback+0x320>)
 8001082:	f008 fd53 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownFreq, "4000");
 8001086:	6820      	ldr	r0, [r4, #0]
 8001088:	4994      	ldr	r1, [pc, #592]	; (80012dc <_controlWindowCallback+0x324>)
 800108a:	f008 fd4f 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownFreq, "4500");
 800108e:	6820      	ldr	r0, [r4, #0]
 8001090:	4993      	ldr	r1, [pc, #588]	; (80012e0 <_controlWindowCallback+0x328>)
 8001092:	f008 fd4b 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownFreq, "5000");
 8001096:	6820      	ldr	r0, [r4, #0]
 8001098:	4992      	ldr	r1, [pc, #584]	; (80012e4 <_controlWindowCallback+0x32c>)
 800109a:	f008 fd47 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownFreq, "5500");
 800109e:	6820      	ldr	r0, [r4, #0]
 80010a0:	4991      	ldr	r1, [pc, #580]	; (80012e8 <_controlWindowCallback+0x330>)
 80010a2:	f008 fd43 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownFreq, "6000");
 80010a6:	6820      	ldr	r0, [r4, #0]
 80010a8:	4990      	ldr	r1, [pc, #576]	; (80012ec <_controlWindowCallback+0x334>)
 80010aa:	f008 fd3f 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownFreq, "6500");
 80010ae:	6820      	ldr	r0, [r4, #0]
 80010b0:	498f      	ldr	r1, [pc, #572]	; (80012f0 <_controlWindowCallback+0x338>)
 80010b2:	f008 fd3b 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownFreq, "7000");
 80010b6:	6820      	ldr	r0, [r4, #0]
 80010b8:	498e      	ldr	r1, [pc, #568]	; (80012f4 <_controlWindowCallback+0x33c>)
 80010ba:	f008 fd37 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownFreq, "7500");
 80010be:	6820      	ldr	r0, [r4, #0]
 80010c0:	498d      	ldr	r1, [pc, #564]	; (80012f8 <_controlWindowCallback+0x340>)
 80010c2:	f008 fd33 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownFreq, "8000");
 80010c6:	6820      	ldr	r0, [r4, #0]
 80010c8:	498c      	ldr	r1, [pc, #560]	; (80012fc <_controlWindowCallback+0x344>)
 80010ca:	f008 fd2f 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownFreq, "8500");
 80010ce:	6820      	ldr	r0, [r4, #0]
 80010d0:	498b      	ldr	r1, [pc, #556]	; (8001300 <_controlWindowCallback+0x348>)
 80010d2:	f008 fd2b 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownFreq, "9000");
 80010d6:	6820      	ldr	r0, [r4, #0]
 80010d8:	498a      	ldr	r1, [pc, #552]	; (8001304 <_controlWindowCallback+0x34c>)
 80010da:	f008 fd27 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownFreq, "9500");
 80010de:	6820      	ldr	r0, [r4, #0]
 80010e0:	4989      	ldr	r1, [pc, #548]	; (8001308 <_controlWindowCallback+0x350>)
 80010e2:	f008 fd23 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownFreq, "10000");
 80010e6:	6820      	ldr	r0, [r4, #0]
 80010e8:	4988      	ldr	r1, [pc, #544]	; (800130c <_controlWindowCallback+0x354>)
 80010ea:	f008 fd1f 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_SetAutoScroll(hDropDownFreq, 1);
 80010ee:	6820      	ldr	r0, [r4, #0]
 80010f0:	2101      	movs	r1, #1
 80010f2:	f008 fcdc 	bl	8009aae <DROPDOWN_SetAutoScroll>
      DROPDOWN_SetScrollbarWidth(hDropDownFreq, 30); // szerokosc scrollbara
 80010f6:	6820      	ldr	r0, [r4, #0]
 80010f8:	211e      	movs	r1, #30
 80010fa:	f008 fc90 	bl	8009a1e <DROPDOWN_SetScrollbarWidth>
      DROPDOWN_SetSel(hDropDownFreq, 9); // 50 % PWM domyslnie
 80010fe:	6820      	ldr	r0, [r4, #0]

      hDropDownDutyCycle = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_DUTY_CYCLE);
 8001100:	4c83      	ldr	r4, [pc, #524]	; (8001310 <_controlWindowCallback+0x358>)
      DROPDOWN_AddString(hDropDownFreq, "9000");
      DROPDOWN_AddString(hDropDownFreq, "9500");
      DROPDOWN_AddString(hDropDownFreq, "10000");
      DROPDOWN_SetAutoScroll(hDropDownFreq, 1);
      DROPDOWN_SetScrollbarWidth(hDropDownFreq, 30); // szerokosc scrollbara
      DROPDOWN_SetSel(hDropDownFreq, 9); // 50 % PWM domyslnie
 8001102:	2109      	movs	r1, #9
 8001104:	f008 fed6 	bl	8009eb4 <DROPDOWN_SetSel>

      hDropDownDutyCycle = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_DUTY_CYCLE);
 8001108:	f640 0141 	movw	r1, #2113	; 0x841
 800110c:	6868      	ldr	r0, [r5, #4]
 800110e:	f00a f828 	bl	800b162 <WM_GetDialogItem>
      DROPDOWN_SetFont(hDropDownDutyCycle, GUI_FONT_24_1);
 8001112:	496a      	ldr	r1, [pc, #424]	; (80012bc <_controlWindowCallback+0x304>)
      DROPDOWN_AddString(hDropDownFreq, "10000");
      DROPDOWN_SetAutoScroll(hDropDownFreq, 1);
      DROPDOWN_SetScrollbarWidth(hDropDownFreq, 30); // szerokosc scrollbara
      DROPDOWN_SetSel(hDropDownFreq, 9); // 50 % PWM domyslnie

      hDropDownDutyCycle = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_DUTY_CYCLE);
 8001114:	6020      	str	r0, [r4, #0]
      DROPDOWN_SetFont(hDropDownDutyCycle, GUI_FONT_24_1);
 8001116:	f008 fc9f 	bl	8009a58 <DROPDOWN_SetFont>
      DROPDOWN_SetListHeight(hDropDownDutyCycle, 135); // dlugosc listy
 800111a:	2187      	movs	r1, #135	; 0x87
 800111c:	6820      	ldr	r0, [r4, #0]
 800111e:	f009 f819 	bl	800a154 <DROPDOWN_SetListHeight>
      DROPDOWN_AddString(hDropDownDutyCycle, "10");
 8001122:	497c      	ldr	r1, [pc, #496]	; (8001314 <_controlWindowCallback+0x35c>)
 8001124:	6820      	ldr	r0, [r4, #0]
 8001126:	f008 fd01 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownDutyCycle, "20");
 800112a:	497b      	ldr	r1, [pc, #492]	; (8001318 <_controlWindowCallback+0x360>)
 800112c:	6820      	ldr	r0, [r4, #0]
 800112e:	f008 fcfd 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownDutyCycle, "30");
 8001132:	497a      	ldr	r1, [pc, #488]	; (800131c <_controlWindowCallback+0x364>)
 8001134:	6820      	ldr	r0, [r4, #0]
 8001136:	f008 fcf9 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownDutyCycle, "40");
 800113a:	4979      	ldr	r1, [pc, #484]	; (8001320 <_controlWindowCallback+0x368>)
 800113c:	6820      	ldr	r0, [r4, #0]
 800113e:	f008 fcf5 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownDutyCycle, "50");
 8001142:	4978      	ldr	r1, [pc, #480]	; (8001324 <_controlWindowCallback+0x36c>)
 8001144:	6820      	ldr	r0, [r4, #0]
 8001146:	f008 fcf1 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownDutyCycle, "60");
 800114a:	4977      	ldr	r1, [pc, #476]	; (8001328 <_controlWindowCallback+0x370>)
 800114c:	6820      	ldr	r0, [r4, #0]
 800114e:	f008 fced 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownDutyCycle, "70");
 8001152:	4976      	ldr	r1, [pc, #472]	; (800132c <_controlWindowCallback+0x374>)
 8001154:	6820      	ldr	r0, [r4, #0]
 8001156:	f008 fce9 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownDutyCycle, "80");
 800115a:	4975      	ldr	r1, [pc, #468]	; (8001330 <_controlWindowCallback+0x378>)
 800115c:	6820      	ldr	r0, [r4, #0]
 800115e:	f008 fce5 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownDutyCycle, "90");
 8001162:	4974      	ldr	r1, [pc, #464]	; (8001334 <_controlWindowCallback+0x37c>)
 8001164:	6820      	ldr	r0, [r4, #0]
 8001166:	f008 fce1 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_AddString(hDropDownDutyCycle, "100");
 800116a:	4973      	ldr	r1, [pc, #460]	; (8001338 <_controlWindowCallback+0x380>)
 800116c:	6820      	ldr	r0, [r4, #0]
 800116e:	f008 fcdd 	bl	8009b2c <DROPDOWN_AddString>
      DROPDOWN_SetAutoScroll(hDropDownDutyCycle, 1);
 8001172:	2101      	movs	r1, #1
 8001174:	6820      	ldr	r0, [r4, #0]
 8001176:	f008 fc9a 	bl	8009aae <DROPDOWN_SetAutoScroll>
      DROPDOWN_SetScrollbarWidth(hDropDownDutyCycle, 30); // szerokosc scrollbara
 800117a:	211e      	movs	r1, #30
 800117c:	6820      	ldr	r0, [r4, #0]
 800117e:	f008 fc4e 	bl	8009a1e <DROPDOWN_SetScrollbarWidth>
      DROPDOWN_SetSel(hDropDownDutyCycle, 4); // 50 % PWM domyslnie
 8001182:	6820      	ldr	r0, [r4, #0]
 8001184:	2104      	movs	r1, #4
 8001186:	f008 fe95 	bl	8009eb4 <DROPDOWN_SetSel>
      WM_DisableWindow(hDropDownDutyCycle);
 800118a:	6820      	ldr	r0, [r4, #0]
 800118c:	e026      	b.n	80011dc <_controlWindowCallback+0x224>
      break;

    case WM_NOTIFY_PARENT:
      Id    = WM_GetId(pMsg->hWinSrc);
 800118e:	6880      	ldr	r0, [r0, #8]
 8001190:	f009 ffa7 	bl	800b0e2 <WM_GetId>
      NCode = pMsg->Data.v;
      switch (Id)
 8001194:	f5b0 7fb8 	cmp.w	r0, #368	; 0x170
      DROPDOWN_SetSel(hDropDownDutyCycle, 4); // 50 % PWM domyslnie
      WM_DisableWindow(hDropDownDutyCycle);
      break;

    case WM_NOTIFY_PARENT:
      Id    = WM_GetId(pMsg->hWinSrc);
 8001198:	4601      	mov	r1, r0
      NCode = pMsg->Data.v;
 800119a:	68ee      	ldr	r6, [r5, #12]
      switch (Id)
 800119c:	d021      	beq.n	80011e2 <_controlWindowCallback+0x22a>
 800119e:	f240 1371 	movw	r3, #369	; 0x171
 80011a2:	4298      	cmp	r0, r3
 80011a4:	f000 8116 	beq.w	80013d4 <_controlWindowCallback+0x41c>
 80011a8:	f5b0 7fa8 	cmp.w	r0, #336	; 0x150
 80011ac:	f040 8220 	bne.w	80015f0 <_controlWindowCallback+0x638>
              break;
            }
          break;

        case GUI_ID_RADIO0: // Notifications sent by 'Radio'
          switch (NCode)
 80011b0:	2e05      	cmp	r6, #5
 80011b2:	f040 821d 	bne.w	80015f0 <_controlWindowCallback+0x638>
            case WM_NOTIFICATION_CLICKED:
              break;
            case WM_NOTIFICATION_RELEASED:
              break;
            case WM_NOTIFICATION_VALUE_CHANGED:
              hRadio = WM_GetDialogItem(pMsg->hWin, GUI_ID_RADIO0);
 80011b6:	6868      	ldr	r0, [r5, #4]
 80011b8:	f009 ffd3 	bl	800b162 <WM_GetDialogItem>
 80011bc:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <_controlWindowCallback+0x2e8>)
 80011be:	6018      	str	r0, [r3, #0]
              radioButtonSelectIndex = RADIO_GetValue(hRadio);
 80011c0:	f006 fbcb 	bl	800795a <RADIO_GetValue>
 80011c4:	4b5d      	ldr	r3, [pc, #372]	; (800133c <_controlWindowCallback+0x384>)
 80011c6:	7018      	strb	r0, [r3, #0]

              if (radioMap[radioButtonSelectIndex] == PWM_CONTROL)
 80011c8:	b2c0      	uxtb	r0, r0
 80011ca:	4b5d      	ldr	r3, [pc, #372]	; (8001340 <_controlWindowCallback+0x388>)
 80011cc:	5c1b      	ldrb	r3, [r3, r0]
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	4b4f      	ldr	r3, [pc, #316]	; (8001310 <_controlWindowCallback+0x358>)
                WM_EnableWindow(hDropDownDutyCycle);
 80011d2:	6818      	ldr	r0, [r3, #0]
              break;
            case WM_NOTIFICATION_VALUE_CHANGED:
              hRadio = WM_GetDialogItem(pMsg->hWin, GUI_ID_RADIO0);
              radioButtonSelectIndex = RADIO_GetValue(hRadio);

              if (radioMap[radioButtonSelectIndex] == PWM_CONTROL)
 80011d4:	d102      	bne.n	80011dc <_controlWindowCallback+0x224>
                WM_EnableWindow(hDropDownDutyCycle);
 80011d6:	f00a f841 	bl	800b25c <WM_EnableWindow>
 80011da:	e209      	b.n	80015f0 <_controlWindowCallback+0x638>
              else
                WM_DisableWindow(hDropDownDutyCycle);
 80011dc:	f00a f841 	bl	800b262 <WM_DisableWindow>
 80011e0:	e206      	b.n	80015f0 <_controlWindowCallback+0x638>
              break;
            }
          break;

        case GUI_ID_BUTTON0: // Notifications sent by 'START'
          switch (NCode)
 80011e2:	2e01      	cmp	r6, #1
 80011e4:	f040 8204 	bne.w	80015f0 <_controlWindowCallback+0x638>
    ERROR_MESSAGE(msg); \
  return false;}}

static bool isMotorStartPossible(char *error)
{
  switch (radioMap[radioButtonSelectIndex])
 80011e8:	4f54      	ldr	r7, [pc, #336]	; (800133c <_controlWindowCallback+0x384>)
 80011ea:	4c2c      	ldr	r4, [pc, #176]	; (800129c <_controlWindowCallback+0x2e4>)
}

static void onStartClick(WM_MESSAGE *pMsg)
{
  bool startPossible = false;
  char errorMessage[50] = {0};
 80011ec:	2232      	movs	r2, #50	; 0x32
 80011ee:	2100      	movs	r1, #0
 80011f0:	a803      	add	r0, sp, #12
 80011f2:	f017 fd3a 	bl	8018c6a <memset>
    ERROR_MESSAGE(msg); \
  return false;}}

static bool isMotorStartPossible(char *error)
{
  switch (radioMap[radioButtonSelectIndex])
 80011f6:	4b52      	ldr	r3, [pc, #328]	; (8001340 <_controlWindowCallback+0x388>)
 80011f8:	783a      	ldrb	r2, [r7, #0]
 80011fa:	f813 9002 	ldrb.w	r9, [r3, r2]
 80011fe:	f1b9 0f01 	cmp.w	r9, #1
 8001202:	4698      	mov	r8, r3
 8001204:	d023      	beq.n	800124e <_controlWindowCallback+0x296>
 8001206:	f1b9 0f02 	cmp.w	r9, #2
 800120a:	f040 811c 	bne.w	8001446 <_controlWindowCallback+0x48e>
    {
    case TORQUE_CONTROL:
      IS_FIELD_VALID(EDIT_KP_CURRENT, COEFF_MIN, COEFF_MAX, "nastawy Kp regulatora pradu.");
 800120e:	eddf 0a52 	vldr	s1, [pc, #328]	; 8001358 <_controlWindowCallback+0x3a0>
 8001212:	ed9f 0a52 	vldr	s0, [pc, #328]	; 800135c <_controlWindowCallback+0x3a4>
 8001216:	2000      	movs	r0, #0
 8001218:	f7ff fdec 	bl	8000df4 <checkField>
 800121c:	b908      	cbnz	r0, 8001222 <_controlWindowCallback+0x26a>
 800121e:	4949      	ldr	r1, [pc, #292]	; (8001344 <_controlWindowCallback+0x38c>)
 8001220:	e0bc      	b.n	800139c <_controlWindowCallback+0x3e4>
      IS_FIELD_VALID(EDIT_KI_CURRENT, COEFF_MIN, COEFF_MAX, "nastawy Ti regulatora pradu.");
 8001222:	eddf 0a4d 	vldr	s1, [pc, #308]	; 8001358 <_controlWindowCallback+0x3a0>
 8001226:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800135c <_controlWindowCallback+0x3a4>
 800122a:	4630      	mov	r0, r6
 800122c:	f7ff fde2 	bl	8000df4 <checkField>
 8001230:	b908      	cbnz	r0, 8001236 <_controlWindowCallback+0x27e>
 8001232:	4945      	ldr	r1, [pc, #276]	; (8001348 <_controlWindowCallback+0x390>)
 8001234:	e0b2      	b.n	800139c <_controlWindowCallback+0x3e4>
      IS_FIELD_VALID(EDIT_CURRENT_REF, CURRENT_MIN, CURRENT_MAX, "pradu zadanego.");
 8001236:	eddf 0a48 	vldr	s1, [pc, #288]	; 8001358 <_controlWindowCallback+0x3a0>
 800123a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800123e:	2005      	movs	r0, #5
 8001240:	f7ff fdd8 	bl	8000df4 <checkField>
 8001244:	2800      	cmp	r0, #0
 8001246:	f040 80fe 	bne.w	8001446 <_controlWindowCallback+0x48e>
 800124a:	4940      	ldr	r1, [pc, #256]	; (800134c <_controlWindowCallback+0x394>)
 800124c:	e0a6      	b.n	800139c <_controlWindowCallback+0x3e4>
      break;

    case SPEED_CONTROL:
      IS_FIELD_VALID(EDIT_KP_CURRENT, COEFF_MIN, COEFF_MAX, "nastawy Kp regulatora pradu.");
 800124e:	eddf 0a42 	vldr	s1, [pc, #264]	; 8001358 <_controlWindowCallback+0x3a0>
 8001252:	ed9f 0a42 	vldr	s0, [pc, #264]	; 800135c <_controlWindowCallback+0x3a4>
 8001256:	2000      	movs	r0, #0
 8001258:	f7ff fdcc 	bl	8000df4 <checkField>
 800125c:	2800      	cmp	r0, #0
 800125e:	d0de      	beq.n	800121e <_controlWindowCallback+0x266>
      IS_FIELD_VALID(EDIT_KI_CURRENT, COEFF_MIN, COEFF_MAX, "nastawy Ti regulatora pradu.");
 8001260:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8001358 <_controlWindowCallback+0x3a0>
 8001264:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800135c <_controlWindowCallback+0x3a4>
 8001268:	4648      	mov	r0, r9
 800126a:	f7ff fdc3 	bl	8000df4 <checkField>
 800126e:	2800      	cmp	r0, #0
 8001270:	d0df      	beq.n	8001232 <_controlWindowCallback+0x27a>
      IS_FIELD_VALID(EDIT_KP_SPEED, COEFF_MIN, COEFF_MAX, "nastawy Kp regulatora predkosci.");
 8001272:	eddf 0a39 	vldr	s1, [pc, #228]	; 8001358 <_controlWindowCallback+0x3a0>
 8001276:	ed9f 0a39 	vldr	s0, [pc, #228]	; 800135c <_controlWindowCallback+0x3a4>
 800127a:	2002      	movs	r0, #2
 800127c:	f7ff fdba 	bl	8000df4 <checkField>
 8001280:	b908      	cbnz	r0, 8001286 <_controlWindowCallback+0x2ce>
 8001282:	4933      	ldr	r1, [pc, #204]	; (8001350 <_controlWindowCallback+0x398>)
 8001284:	e08a      	b.n	800139c <_controlWindowCallback+0x3e4>
      IS_FIELD_VALID(EDIT_KI_SPEED, COEFF_MIN, COEFF_MAX, "nastawy Ti regulatora predkosci.");
 8001286:	eddf 0a34 	vldr	s1, [pc, #208]	; 8001358 <_controlWindowCallback+0x3a0>
 800128a:	ed9f 0a34 	vldr	s0, [pc, #208]	; 800135c <_controlWindowCallback+0x3a4>
 800128e:	2003      	movs	r0, #3
 8001290:	f7ff fdb0 	bl	8000df4 <checkField>
 8001294:	2800      	cmp	r0, #0
 8001296:	d163      	bne.n	8001360 <_controlWindowCallback+0x3a8>
 8001298:	492e      	ldr	r1, [pc, #184]	; (8001354 <_controlWindowCallback+0x39c>)
 800129a:	e07f      	b.n	800139c <_controlWindowCallback+0x3e4>
 800129c:	20000ba8 	.word	0x20000ba8
 80012a0:	20001870 	.word	0x20001870
 80012a4:	20001874 	.word	0x20001874
 80012a8:	2000186c 	.word	0x2000186c
 80012ac:	0801d4d4 	.word	0x0801d4d4
 80012b0:	0801d4e4 	.word	0x0801d4e4
 80012b4:	0801d4f8 	.word	0x0801d4f8
 80012b8:	20001880 	.word	0x20001880
 80012bc:	0801f504 	.word	0x0801f504
 80012c0:	0801d502 	.word	0x0801d502
 80012c4:	0801d4fc 	.word	0x0801d4fc
 80012c8:	0801d501 	.word	0x0801d501
 80012cc:	0801d506 	.word	0x0801d506
 80012d0:	0801d50b 	.word	0x0801d50b
 80012d4:	0801d510 	.word	0x0801d510
 80012d8:	0801d515 	.word	0x0801d515
 80012dc:	0801d51a 	.word	0x0801d51a
 80012e0:	0801d51f 	.word	0x0801d51f
 80012e4:	0801d524 	.word	0x0801d524
 80012e8:	0801d529 	.word	0x0801d529
 80012ec:	0801d52e 	.word	0x0801d52e
 80012f0:	0801d533 	.word	0x0801d533
 80012f4:	0801d538 	.word	0x0801d538
 80012f8:	0801d53d 	.word	0x0801d53d
 80012fc:	0801d542 	.word	0x0801d542
 8001300:	0801d547 	.word	0x0801d547
 8001304:	0801d54c 	.word	0x0801d54c
 8001308:	0801d551 	.word	0x0801d551
 800130c:	0801d556 	.word	0x0801d556
 8001310:	2000187c 	.word	0x2000187c
 8001314:	0801d55c 	.word	0x0801d55c
 8001318:	0801d55f 	.word	0x0801d55f
 800131c:	0801d562 	.word	0x0801d562
 8001320:	0801d565 	.word	0x0801d565
 8001324:	0801d568 	.word	0x0801d568
 8001328:	0801d56b 	.word	0x0801d56b
 800132c:	0801d56e 	.word	0x0801d56e
 8001330:	0801d571 	.word	0x0801d571
 8001334:	0801d574 	.word	0x0801d574
 8001338:	0801d577 	.word	0x0801d577
 800133c:	20000b92 	.word	0x20000b92
 8001340:	0801af98 	.word	0x0801af98
 8001344:	0801d57b 	.word	0x0801d57b
 8001348:	0801d598 	.word	0x0801d598
 800134c:	0801d5b5 	.word	0x0801d5b5
 8001350:	0801d5c5 	.word	0x0801d5c5
 8001354:	0801d5e6 	.word	0x0801d5e6
 8001358:	42c80000 	.word	0x42c80000
 800135c:	38d1b717 	.word	0x38d1b717
      IS_FIELD_VALID(EDIT_KD_SPEED, COEFF_MIN, COEFF_MAX, "nastawy Td regulatora predkosci.");
 8001360:	ed5f 0a03 	vldr	s1, [pc, #-12]	; 8001358 <_controlWindowCallback+0x3a0>
 8001364:	ed1f 0a03 	vldr	s0, [pc, #-12]	; 800135c <_controlWindowCallback+0x3a4>
 8001368:	2004      	movs	r0, #4
 800136a:	f7ff fd43 	bl	8000df4 <checkField>
 800136e:	b908      	cbnz	r0, 8001374 <_controlWindowCallback+0x3bc>
 8001370:	49a1      	ldr	r1, [pc, #644]	; (80015f8 <_controlWindowCallback+0x640>)
 8001372:	e013      	b.n	800139c <_controlWindowCallback+0x3e4>
      IS_FIELD_VALID(EDIT_SPEED_REF, SPEED_MIN, SPEED_MAX, "predkosci zadanej.");
 8001374:	eddf 0aa1 	vldr	s1, [pc, #644]	; 80015fc <_controlWindowCallback+0x644>
 8001378:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800137c:	2006      	movs	r0, #6
 800137e:	f7ff fd39 	bl	8000df4 <checkField>
 8001382:	b908      	cbnz	r0, 8001388 <_controlWindowCallback+0x3d0>
 8001384:	499e      	ldr	r1, [pc, #632]	; (8001600 <_controlWindowCallback+0x648>)
 8001386:	e009      	b.n	800139c <_controlWindowCallback+0x3e4>
      IS_FIELD_VALID(EDIT_CURRENT_LIMIT, CURRENT_MIN, CURRENT_MAX, "ograniczenia pradu.");
 8001388:	eddf 0a9e 	vldr	s1, [pc, #632]	; 8001604 <_controlWindowCallback+0x64c>
 800138c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001390:	2007      	movs	r0, #7
 8001392:	f7ff fd2f 	bl	8000df4 <checkField>
 8001396:	2800      	cmp	r0, #0
 8001398:	d155      	bne.n	8001446 <_controlWindowCallback+0x48e>
 800139a:	499b      	ldr	r1, [pc, #620]	; (8001608 <_controlWindowCallback+0x650>)
 800139c:	a803      	add	r0, sp, #12
 800139e:	f017 fc7b 	bl	8018c98 <strcpy>
      WM_DisableWindow(hDropDownDutyCycle);
      startMotorFromGUI(pMsg);
    }
  else
    {
      TEXT_SetFont(editHandles[EDIT_ERROR1], GUI_FONT_16B_1);
 80013a2:	6a20      	ldr	r0, [r4, #32]
 80013a4:	4999      	ldr	r1, [pc, #612]	; (800160c <_controlWindowCallback+0x654>)
 80013a6:	f006 f830 	bl	800740a <TEXT_SetFont>
      TEXT_SetFont(editHandles[EDIT_ERROR2], GUI_FONT_16B_1);
 80013aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80013ac:	4997      	ldr	r1, [pc, #604]	; (800160c <_controlWindowCallback+0x654>)
 80013ae:	f006 f82c 	bl	800740a <TEXT_SetFont>
      TEXT_SetTextColor(editHandles[EDIT_ERROR1], GUI_RED);
 80013b2:	6a20      	ldr	r0, [r4, #32]
 80013b4:	21ff      	movs	r1, #255	; 0xff
 80013b6:	f005 ffec 	bl	8007392 <TEXT_SetTextColor>
      TEXT_SetTextColor(editHandles[EDIT_ERROR2], GUI_RED);
 80013ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80013bc:	21ff      	movs	r1, #255	; 0xff
 80013be:	f005 ffe8 	bl	8007392 <TEXT_SetTextColor>
      TEXT_SetText(editHandles[EDIT_ERROR1], wrongValue);
 80013c2:	4993      	ldr	r1, [pc, #588]	; (8001610 <_controlWindowCallback+0x658>)
 80013c4:	6a20      	ldr	r0, [r4, #32]
 80013c6:	f005 fff7 	bl	80073b8 <TEXT_SetText>
      TEXT_SetText(editHandles[EDIT_ERROR2], errorMessage);
 80013ca:	a903      	add	r1, sp, #12
 80013cc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80013ce:	f005 fff3 	bl	80073b8 <TEXT_SetText>
 80013d2:	e10d      	b.n	80015f0 <_controlWindowCallback+0x638>
              break;
            }
          break;

        case GUI_ID_BUTTON1: // Notifications sent by 'STOP'
          switch (NCode)
 80013d4:	2e01      	cmp	r6, #1
 80013d6:	f040 810b 	bne.w	80015f0 <_controlWindowCallback+0x638>
            {
            case WM_NOTIFICATION_CLICKED:
            {
              DISABLE_STOP_BTN();
 80013da:	4b8e      	ldr	r3, [pc, #568]	; (8001614 <_controlWindowCallback+0x65c>)

static inline void enableAllPages(void)
{
  uint8_t i = 0;
  for (i = 0; i < PAGES_NUM; i++)
    MULTIPAGE_EnablePage(hMultiPage, i);
 80013dc:	4d8e      	ldr	r5, [pc, #568]	; (8001618 <_controlWindowCallback+0x660>)
        case GUI_ID_BUTTON1: // Notifications sent by 'STOP'
          switch (NCode)
            {
            case WM_NOTIFICATION_CLICKED:
            {
              DISABLE_STOP_BTN();
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	f009 ff3f 	bl	800b262 <WM_DisableWindow>
              ENABLE_START_BTN();
 80013e4:	4b8d      	ldr	r3, [pc, #564]	; (800161c <_controlWindowCallback+0x664>)
 80013e6:	6818      	ldr	r0, [r3, #0]
 80013e8:	f009 ff38 	bl	800b25c <WM_EnableWindow>
              TEXT_SetText(editHandles[EDIT_ERROR1], "");
 80013ec:	4b8c      	ldr	r3, [pc, #560]	; (8001620 <_controlWindowCallback+0x668>)
 80013ee:	498d      	ldr	r1, [pc, #564]	; (8001624 <_controlWindowCallback+0x66c>)
 80013f0:	6a18      	ldr	r0, [r3, #32]
 80013f2:	f005 ffe1 	bl	80073b8 <TEXT_SetText>
 80013f6:	2400      	movs	r4, #0

static inline void enableAllPages(void)
{
  uint8_t i = 0;
  for (i = 0; i < PAGES_NUM; i++)
    MULTIPAGE_EnablePage(hMultiPage, i);
 80013f8:	4621      	mov	r1, r4
 80013fa:	6828      	ldr	r0, [r5, #0]
 80013fc:	3401      	adds	r4, #1
 80013fe:	f007 f875 	bl	80084ec <MULTIPAGE_EnablePage>
}

static inline void enableAllPages(void)
{
  uint8_t i = 0;
  for (i = 0; i < PAGES_NUM; i++)
 8001402:	2c03      	cmp	r4, #3
 8001404:	d1f8      	bne.n	80013f8 <_controlWindowCallback+0x440>
            {
              DISABLE_STOP_BTN();
              ENABLE_START_BTN();
              TEXT_SetText(editHandles[EDIT_ERROR1], "");
              enableAllPages();
              WM_EnableWindow(hRadio);
 8001406:	4b88      	ldr	r3, [pc, #544]	; (8001628 <_controlWindowCallback+0x670>)
 8001408:	6818      	ldr	r0, [r3, #0]
 800140a:	f009 ff27 	bl	800b25c <WM_EnableWindow>
              WM_EnableWindow(hDropDownFreq);
 800140e:	4b87      	ldr	r3, [pc, #540]	; (800162c <_controlWindowCallback+0x674>)
 8001410:	6818      	ldr	r0, [r3, #0]
 8001412:	f009 ff23 	bl	800b25c <WM_EnableWindow>

              if (radioMap[radioButtonSelectIndex] == PWM_CONTROL)
 8001416:	4b86      	ldr	r3, [pc, #536]	; (8001630 <_controlWindowCallback+0x678>)
 8001418:	4a86      	ldr	r2, [pc, #536]	; (8001634 <_controlWindowCallback+0x67c>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	5cd3      	ldrb	r3, [r2, r3]
 800141e:	2b03      	cmp	r3, #3
 8001420:	4b85      	ldr	r3, [pc, #532]	; (8001638 <_controlWindowCallback+0x680>)
                WM_EnableWindow(hDropDownDutyCycle);
 8001422:	6818      	ldr	r0, [r3, #0]
              TEXT_SetText(editHandles[EDIT_ERROR1], "");
              enableAllPages();
              WM_EnableWindow(hRadio);
              WM_EnableWindow(hDropDownFreq);

              if (radioMap[radioButtonSelectIndex] == PWM_CONTROL)
 8001424:	d102      	bne.n	800142c <_controlWindowCallback+0x474>
                WM_EnableWindow(hDropDownDutyCycle);
 8001426:	f009 ff19 	bl	800b25c <WM_EnableWindow>
 800142a:	e001      	b.n	8001430 <_controlWindowCallback+0x478>
              else
                WM_DisableWindow(hDropDownDutyCycle);
 800142c:	f009 ff19 	bl	800b262 <WM_DisableWindow>

              motorObject_t *motor = getMotorObject();
 8001430:	f000 fb7e 	bl	8001b30 <getMotorObject>
              motor->state = STOP_MOTOR;
 8001434:	2300      	movs	r3, #0
 8001436:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
              updateMotorState();
 800143a:	f000 fce3 	bl	8001e04 <updateMotorState>
            }
            break;
 800143e:	e0d7      	b.n	80015f0 <_controlWindowCallback+0x638>
          break;
        }
      break;

    default:
      WM_DefaultProc(pMsg);
 8001440:	f00b f882 	bl	800c548 <WM_DefaultProc>
      break;

    }
}
 8001444:	e0d4      	b.n	80015f0 <_controlWindowCallback+0x638>

  startPossible = isMotorStartPossible(errorMessage);

  if (startPossible)
    {
      TEXT_SetFont(editHandles[EDIT_ERROR1], GUI_FONT_16B_1);
 8001446:	4971      	ldr	r1, [pc, #452]	; (800160c <_controlWindowCallback+0x654>)
 8001448:	6a20      	ldr	r0, [r4, #32]

static inline void disableAllPages(void)
{
  uint8_t i = 0;
  for (i = 0; i < PAGES_NUM; i++)
    MULTIPAGE_DisablePage(hMultiPage, i);
 800144a:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8001618 <_controlWindowCallback+0x660>

  startPossible = isMotorStartPossible(errorMessage);

  if (startPossible)
    {
      TEXT_SetFont(editHandles[EDIT_ERROR1], GUI_FONT_16B_1);
 800144e:	f005 ffdc 	bl	800740a <TEXT_SetFont>
      TEXT_SetTextColor(editHandles[EDIT_ERROR1], GUI_GREEN);
 8001452:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001456:	6a20      	ldr	r0, [r4, #32]
 8001458:	f005 ff9b 	bl	8007392 <TEXT_SetTextColor>
      TEXT_SetText(editHandles[EDIT_ERROR1], "OK !");
 800145c:	4977      	ldr	r1, [pc, #476]	; (800163c <_controlWindowCallback+0x684>)
 800145e:	6a20      	ldr	r0, [r4, #32]
 8001460:	f005 ffaa 	bl	80073b8 <TEXT_SetText>
      TEXT_SetText(editHandles[EDIT_ERROR2], "");
 8001464:	496f      	ldr	r1, [pc, #444]	; (8001624 <_controlWindowCallback+0x66c>)
 8001466:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001468:	f005 ffa6 	bl	80073b8 <TEXT_SetText>
      DISABLE_START_BTN();
 800146c:	4b6b      	ldr	r3, [pc, #428]	; (800161c <_controlWindowCallback+0x664>)
 800146e:	6818      	ldr	r0, [r3, #0]
 8001470:	f009 fef7 	bl	800b262 <WM_DisableWindow>
      ENABLE_STOP_BTN();
 8001474:	4b67      	ldr	r3, [pc, #412]	; (8001614 <_controlWindowCallback+0x65c>)
 8001476:	6818      	ldr	r0, [r3, #0]
 8001478:	f009 fef0 	bl	800b25c <WM_EnableWindow>
 800147c:	2600      	movs	r6, #0

static inline void disableAllPages(void)
{
  uint8_t i = 0;
  for (i = 0; i < PAGES_NUM; i++)
    MULTIPAGE_DisablePage(hMultiPage, i);
 800147e:	4631      	mov	r1, r6
 8001480:	f8d9 0000 	ldr.w	r0, [r9]
 8001484:	3601      	adds	r6, #1
 8001486:	f007 f80e 	bl	80084a6 <MULTIPAGE_DisablePage>
}

static inline void disableAllPages(void)
{
  uint8_t i = 0;
  for (i = 0; i < PAGES_NUM; i++)
 800148a:	2e03      	cmp	r6, #3
 800148c:	d1f7      	bne.n	800147e <_controlWindowCallback+0x4c6>
      DISABLE_START_BTN();
      ENABLE_STOP_BTN();

      /*Disable all controls - only STOP is active */
      disableAllPages();
      WM_DisableWindow(hRadio);
 800148e:	4b66      	ldr	r3, [pc, #408]	; (8001628 <_controlWindowCallback+0x670>)
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	f009 fee6 	bl	800b262 <WM_DisableWindow>
      WM_DisableWindow(hDropDownFreq);
 8001496:	4b65      	ldr	r3, [pc, #404]	; (800162c <_controlWindowCallback+0x674>)
 8001498:	6818      	ldr	r0, [r3, #0]
 800149a:	f009 fee2 	bl	800b262 <WM_DisableWindow>
      WM_DisableWindow(hDropDownDutyCycle);
 800149e:	4b66      	ldr	r3, [pc, #408]	; (8001638 <_controlWindowCallback+0x680>)
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	f009 fede 	bl	800b262 <WM_DisableWindow>
  return hWin;
}

static void startMotorFromGUI(WM_MESSAGE *pMsg)
{
  motorObject_t *motor = getMotorObject();
 80014a6:	f000 fb43 	bl	8001b30 <getMotorObject>
  char buff[10] = {0};
 80014aa:	2300      	movs	r3, #0
  return hWin;
}

static void startMotorFromGUI(WM_MESSAGE *pMsg)
{
  motorObject_t *motor = getMotorObject();
 80014ac:	4606      	mov	r6, r0
  char buff[10] = {0};

  /* Regulator pradu */
  EDIT_GetText(editHandles[EDIT_KP_CURRENT], currentlyEditedField, 10);
 80014ae:	220a      	movs	r2, #10
 80014b0:	4963      	ldr	r1, [pc, #396]	; (8001640 <_controlWindowCallback+0x688>)
 80014b2:	6820      	ldr	r0, [r4, #0]
}

static void startMotorFromGUI(WM_MESSAGE *pMsg)
{
  motorObject_t *motor = getMotorObject();
  char buff[10] = {0};
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	f8ad 3008 	strh.w	r3, [sp, #8]

  /* Regulator pradu */
  EDIT_GetText(editHandles[EDIT_KP_CURRENT], currentlyEditedField, 10);
 80014bc:	f008 fa73 	bl	80099a6 <EDIT_GetText>
  motor->currentPID.kp = atof(currentlyEditedField);
 80014c0:	485f      	ldr	r0, [pc, #380]	; (8001640 <_controlWindowCallback+0x688>)
 80014c2:	f017 fb6f 	bl	8018ba4 <atof>
 80014c6:	ec51 0b10 	vmov	r0, r1, d0
 80014ca:	f7ff fb33 	bl	8000b34 <__aeabi_d2f>

  EDIT_GetText(editHandles[EDIT_KI_CURRENT], currentlyEditedField, 10);
 80014ce:	220a      	movs	r2, #10
 80014d0:	495b      	ldr	r1, [pc, #364]	; (8001640 <_controlWindowCallback+0x688>)
  motorObject_t *motor = getMotorObject();
  char buff[10] = {0};

  /* Regulator pradu */
  EDIT_GetText(editHandles[EDIT_KP_CURRENT], currentlyEditedField, 10);
  motor->currentPID.kp = atof(currentlyEditedField);
 80014d2:	6030      	str	r0, [r6, #0]

  EDIT_GetText(editHandles[EDIT_KI_CURRENT], currentlyEditedField, 10);
 80014d4:	6860      	ldr	r0, [r4, #4]
 80014d6:	f008 fa66 	bl	80099a6 <EDIT_GetText>
  motor->currentPID.ki = atof(currentlyEditedField);
 80014da:	4859      	ldr	r0, [pc, #356]	; (8001640 <_controlWindowCallback+0x688>)
 80014dc:	f017 fb62 	bl	8018ba4 <atof>
 80014e0:	ec51 0b10 	vmov	r0, r1, d0
 80014e4:	f7ff fb26 	bl	8000b34 <__aeabi_d2f>

  EDIT_GetText(editHandles[EDIT_CURRENT_REF], currentlyEditedField, 10);
 80014e8:	220a      	movs	r2, #10
 80014ea:	4955      	ldr	r1, [pc, #340]	; (8001640 <_controlWindowCallback+0x688>)
  /* Regulator pradu */
  EDIT_GetText(editHandles[EDIT_KP_CURRENT], currentlyEditedField, 10);
  motor->currentPID.kp = atof(currentlyEditedField);

  EDIT_GetText(editHandles[EDIT_KI_CURRENT], currentlyEditedField, 10);
  motor->currentPID.ki = atof(currentlyEditedField);
 80014ec:	6070      	str	r0, [r6, #4]

  EDIT_GetText(editHandles[EDIT_CURRENT_REF], currentlyEditedField, 10);
 80014ee:	6960      	ldr	r0, [r4, #20]
 80014f0:	f008 fa59 	bl	80099a6 <EDIT_GetText>
  motor->currentPID.ref = atof(currentlyEditedField);
 80014f4:	4852      	ldr	r0, [pc, #328]	; (8001640 <_controlWindowCallback+0x688>)
 80014f6:	f017 fb55 	bl	8018ba4 <atof>
 80014fa:	ec51 0b10 	vmov	r0, r1, d0
 80014fe:	f7ff fb19 	bl	8000b34 <__aeabi_d2f>

  /* Regulator predkosci */
  EDIT_GetText(editHandles[EDIT_KP_SPEED], currentlyEditedField, 10);
 8001502:	220a      	movs	r2, #10
 8001504:	494e      	ldr	r1, [pc, #312]	; (8001640 <_controlWindowCallback+0x688>)

  EDIT_GetText(editHandles[EDIT_KI_CURRENT], currentlyEditedField, 10);
  motor->currentPID.ki = atof(currentlyEditedField);

  EDIT_GetText(editHandles[EDIT_CURRENT_REF], currentlyEditedField, 10);
  motor->currentPID.ref = atof(currentlyEditedField);
 8001506:	60f0      	str	r0, [r6, #12]

  /* Regulator predkosci */
  EDIT_GetText(editHandles[EDIT_KP_SPEED], currentlyEditedField, 10);
 8001508:	68a0      	ldr	r0, [r4, #8]
 800150a:	f008 fa4c 	bl	80099a6 <EDIT_GetText>
  motor->speedPID.kp = atof(currentlyEditedField);
 800150e:	484c      	ldr	r0, [pc, #304]	; (8001640 <_controlWindowCallback+0x688>)
 8001510:	f017 fb48 	bl	8018ba4 <atof>
 8001514:	ec51 0b10 	vmov	r0, r1, d0
 8001518:	f7ff fb0c 	bl	8000b34 <__aeabi_d2f>

  EDIT_GetText(editHandles[EDIT_KI_SPEED], currentlyEditedField, 10);
 800151c:	220a      	movs	r2, #10
 800151e:	4948      	ldr	r1, [pc, #288]	; (8001640 <_controlWindowCallback+0x688>)
  EDIT_GetText(editHandles[EDIT_CURRENT_REF], currentlyEditedField, 10);
  motor->currentPID.ref = atof(currentlyEditedField);

  /* Regulator predkosci */
  EDIT_GetText(editHandles[EDIT_KP_SPEED], currentlyEditedField, 10);
  motor->speedPID.kp = atof(currentlyEditedField);
 8001520:	6130      	str	r0, [r6, #16]

  EDIT_GetText(editHandles[EDIT_KI_SPEED], currentlyEditedField, 10);
 8001522:	68e0      	ldr	r0, [r4, #12]
 8001524:	f008 fa3f 	bl	80099a6 <EDIT_GetText>
  motor->speedPID.ki = atof(currentlyEditedField);
 8001528:	4845      	ldr	r0, [pc, #276]	; (8001640 <_controlWindowCallback+0x688>)
 800152a:	f017 fb3b 	bl	8018ba4 <atof>
 800152e:	ec51 0b10 	vmov	r0, r1, d0
 8001532:	f7ff faff 	bl	8000b34 <__aeabi_d2f>

  EDIT_GetText(editHandles[EDIT_KD_SPEED], currentlyEditedField, 10);
 8001536:	220a      	movs	r2, #10
 8001538:	4941      	ldr	r1, [pc, #260]	; (8001640 <_controlWindowCallback+0x688>)
  /* Regulator predkosci */
  EDIT_GetText(editHandles[EDIT_KP_SPEED], currentlyEditedField, 10);
  motor->speedPID.kp = atof(currentlyEditedField);

  EDIT_GetText(editHandles[EDIT_KI_SPEED], currentlyEditedField, 10);
  motor->speedPID.ki = atof(currentlyEditedField);
 800153a:	6170      	str	r0, [r6, #20]

  EDIT_GetText(editHandles[EDIT_KD_SPEED], currentlyEditedField, 10);
 800153c:	6920      	ldr	r0, [r4, #16]
 800153e:	f008 fa32 	bl	80099a6 <EDIT_GetText>
  motor->speedPID.kd = atof(currentlyEditedField);
 8001542:	483f      	ldr	r0, [pc, #252]	; (8001640 <_controlWindowCallback+0x688>)
 8001544:	f017 fb2e 	bl	8018ba4 <atof>
 8001548:	ec51 0b10 	vmov	r0, r1, d0
 800154c:	f7ff faf2 	bl	8000b34 <__aeabi_d2f>

  EDIT_GetText(editHandles[EDIT_SPEED_REF], currentlyEditedField, 10);
 8001550:	220a      	movs	r2, #10
 8001552:	493b      	ldr	r1, [pc, #236]	; (8001640 <_controlWindowCallback+0x688>)

  EDIT_GetText(editHandles[EDIT_KI_SPEED], currentlyEditedField, 10);
  motor->speedPID.ki = atof(currentlyEditedField);

  EDIT_GetText(editHandles[EDIT_KD_SPEED], currentlyEditedField, 10);
  motor->speedPID.kd = atof(currentlyEditedField);
 8001554:	61b0      	str	r0, [r6, #24]

  EDIT_GetText(editHandles[EDIT_SPEED_REF], currentlyEditedField, 10);
 8001556:	69a0      	ldr	r0, [r4, #24]
 8001558:	f008 fa25 	bl	80099a6 <EDIT_GetText>
  motor->speedPID.ref = atof(currentlyEditedField);
 800155c:	4838      	ldr	r0, [pc, #224]	; (8001640 <_controlWindowCallback+0x688>)
 800155e:	f017 fb21 	bl	8018ba4 <atof>
 8001562:	ec51 0b10 	vmov	r0, r1, d0
 8001566:	f7ff fae5 	bl	8000b34 <__aeabi_d2f>

  /* Ograniczenie pradu */
  EDIT_GetText(editHandles[EDIT_CURRENT_LIMIT], currentlyEditedField, 10);
 800156a:	220a      	movs	r2, #10
 800156c:	4934      	ldr	r1, [pc, #208]	; (8001640 <_controlWindowCallback+0x688>)

  EDIT_GetText(editHandles[EDIT_KD_SPEED], currentlyEditedField, 10);
  motor->speedPID.kd = atof(currentlyEditedField);

  EDIT_GetText(editHandles[EDIT_SPEED_REF], currentlyEditedField, 10);
  motor->speedPID.ref = atof(currentlyEditedField);
 800156e:	61f0      	str	r0, [r6, #28]

  /* Ograniczenie pradu */
  EDIT_GetText(editHandles[EDIT_CURRENT_LIMIT], currentlyEditedField, 10);
 8001570:	69e0      	ldr	r0, [r4, #28]
 8001572:	f008 fa18 	bl	80099a6 <EDIT_GetText>
  motor->currentLimit = atof(currentlyEditedField);
 8001576:	4832      	ldr	r0, [pc, #200]	; (8001640 <_controlWindowCallback+0x688>)
 8001578:	f017 fb14 	bl	8018ba4 <atof>
 800157c:	ec51 0b10 	vmov	r0, r1, d0
 8001580:	f7ff fad8 	bl	8000b34 <__aeabi_d2f>

  WM_HWIN hDropDown = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_FREQ);
 8001584:	f640 0111 	movw	r1, #2065	; 0x811
  EDIT_GetText(editHandles[EDIT_SPEED_REF], currentlyEditedField, 10);
  motor->speedPID.ref = atof(currentlyEditedField);

  /* Ograniczenie pradu */
  EDIT_GetText(editHandles[EDIT_CURRENT_LIMIT], currentlyEditedField, 10);
  motor->currentLimit = atof(currentlyEditedField);
 8001588:	6270      	str	r0, [r6, #36]	; 0x24

  WM_HWIN hDropDown = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_FREQ);
 800158a:	6868      	ldr	r0, [r5, #4]
 800158c:	f009 fde9 	bl	800b162 <WM_GetDialogItem>
 8001590:	4604      	mov	r4, r0
  int sel = DROPDOWN_GetSel(hDropDown);
 8001592:	f008 fcb8 	bl	8009f06 <DROPDOWN_GetSel>
  DROPDOWN_GetItemText(hDropDown, sel, buff, sizeof(buff));
 8001596:	230a      	movs	r3, #10
 8001598:	466a      	mov	r2, sp
 800159a:	4601      	mov	r1, r0
 800159c:	4620      	mov	r0, r4
 800159e:	f008 fdf6 	bl	800a18e <DROPDOWN_GetItemText>
  motor->frequency = atoi(buff);
 80015a2:	4668      	mov	r0, sp
 80015a4:	f017 fb01 	bl	8018baa <atoi>

  hDropDown = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_DUTY_CYCLE);
 80015a8:	f640 0141 	movw	r1, #2113	; 0x841
  motor->currentLimit = atof(currentlyEditedField);

  WM_HWIN hDropDown = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_FREQ);
  int sel = DROPDOWN_GetSel(hDropDown);
  DROPDOWN_GetItemText(hDropDown, sel, buff, sizeof(buff));
  motor->frequency = atoi(buff);
 80015ac:	8570      	strh	r0, [r6, #42]	; 0x2a

  hDropDown = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_DUTY_CYCLE);
 80015ae:	6868      	ldr	r0, [r5, #4]
 80015b0:	f009 fdd7 	bl	800b162 <WM_GetDialogItem>
 80015b4:	4604      	mov	r4, r0
  sel = DROPDOWN_GetSel(hDropDown);
 80015b6:	f008 fca6 	bl	8009f06 <DROPDOWN_GetSel>
  DROPDOWN_GetItemText(hDropDown, sel, buff, sizeof(buff));
 80015ba:	230a      	movs	r3, #10
 80015bc:	4601      	mov	r1, r0
 80015be:	466a      	mov	r2, sp
 80015c0:	4620      	mov	r0, r4
 80015c2:	f008 fde4 	bl	800a18e <DROPDOWN_GetItemText>
  motor->dutyCycle = atof(buff);
 80015c6:	4668      	mov	r0, sp
 80015c8:	f017 faec 	bl	8018ba4 <atof>
  motor->dutyCycle /= 100;
 80015cc:	ec51 0b10 	vmov	r0, r1, d0
 80015d0:	f7ff fab0 	bl	8000b34 <__aeabi_d2f>
 80015d4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001604 <_controlWindowCallback+0x64c>

  motor->state = radioMap[radioButtonSelectIndex];
 80015d8:	783b      	ldrb	r3, [r7, #0]

  hDropDown = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_DUTY_CYCLE);
  sel = DROPDOWN_GetSel(hDropDown);
  DROPDOWN_GetItemText(hDropDown, sel, buff, sizeof(buff));
  motor->dutyCycle = atof(buff);
  motor->dutyCycle /= 100;
 80015da:	ee06 0a90 	vmov	s13, r0
 80015de:	eec6 7a87 	vdiv.f32	s15, s13, s14

  motor->state = radioMap[radioButtonSelectIndex];
 80015e2:	f818 3003 	ldrb.w	r3, [r8, r3]
 80015e6:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30

  hDropDown = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_DUTY_CYCLE);
  sel = DROPDOWN_GetSel(hDropDown);
  DROPDOWN_GetItemText(hDropDown, sel, buff, sizeof(buff));
  motor->dutyCycle = atof(buff);
  motor->dutyCycle /= 100;
 80015ea:	edc6 7a0b 	vstr	s15, [r6, #44]	; 0x2c
 80015ee:	e724      	b.n	800143a <_controlWindowCallback+0x482>
    default:
      WM_DefaultProc(pMsg);
      break;

    }
}
 80015f0:	b011      	add	sp, #68	; 0x44
 80015f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015f6:	bf00      	nop
 80015f8:	0801d607 	.word	0x0801d607
 80015fc:	453b8000 	.word	0x453b8000
 8001600:	0801d628 	.word	0x0801d628
 8001604:	42c80000 	.word	0x42c80000
 8001608:	0801d63b 	.word	0x0801d63b
 800160c:	0801ff78 	.word	0x0801ff78
 8001610:	0801d97c 	.word	0x0801d97c
 8001614:	2000186c 	.word	0x2000186c
 8001618:	20001878 	.word	0x20001878
 800161c:	20001874 	.word	0x20001874
 8001620:	20000ba8 	.word	0x20000ba8
 8001624:	0801dafd 	.word	0x0801dafd
 8001628:	20001870 	.word	0x20001870
 800162c:	20001880 	.word	0x20001880
 8001630:	20000b92 	.word	0x20000b92
 8001634:	0801af98 	.word	0x0801af98
 8001638:	2000187c 	.word	0x2000187c
 800163c:	0801d64f 	.word	0x0801d64f
 8001640:	20000b98 	.word	0x20000b98

08001644 <WindowInit>:
  EDIT_SetText(editHandles[EDIT_CURRENT_LIMIT], "15");
}

WM_HWIN WindowInit(void);
WM_HWIN WindowInit(void)
{
 8001644:	b530      	push	{r4, r5, lr}
 8001646:	b085      	sub	sp, #20
  WM_HWIN hWin = 0;
  WM_HWIN hFrameWin;

  hFrameWin = FRAMEWIN_Create("Chopper", NULL, WM_CF_SHOW, -10, 0, 260, 325);
 8001648:	f240 1345 	movw	r3, #325	; 0x145
 800164c:	2400      	movs	r4, #0
 800164e:	9302      	str	r3, [sp, #8]
 8001650:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001654:	2202      	movs	r2, #2
 8001656:	9301      	str	r3, [sp, #4]
 8001658:	4621      	mov	r1, r4
 800165a:	f06f 0309 	mvn.w	r3, #9
 800165e:	9400      	str	r4, [sp, #0]
 8001660:	4837      	ldr	r0, [pc, #220]	; (8001740 <WindowInit+0xfc>)
 8001662:	f007 f98c 	bl	800897e <FRAMEWIN_Create>
  FRAMEWIN_SetBorderSize(hFrameWin, 0);
 8001666:	4621      	mov	r1, r4
WM_HWIN WindowInit(void)
{
  WM_HWIN hWin = 0;
  WM_HWIN hFrameWin;

  hFrameWin = FRAMEWIN_Create("Chopper", NULL, WM_CF_SHOW, -10, 0, 260, 325);
 8001668:	4605      	mov	r5, r0
  FRAMEWIN_SetBorderSize(hFrameWin, 0);
 800166a:	f007 f934 	bl	80088d6 <FRAMEWIN_SetBorderSize>
  FRAMEWIN_SetTitleVis(hFrameWin, 0);
 800166e:	4621      	mov	r1, r4
 8001670:	4628      	mov	r0, r5
 8001672:	f007 f8de 	bl	8008832 <FRAMEWIN_SetTitleVis>

  hMultiPage = MULTIPAGE_CreateEx(7, 6, 235, 310, WM_GetClientWindow(hFrameWin), WM_CF_SHOW, 0, 0);
 8001676:	4628      	mov	r0, r5
 8001678:	f009 fd8e 	bl	800b198 <WM_GetClientWindow>
 800167c:	2302      	movs	r3, #2
 800167e:	e88d 0009 	stmia.w	sp, {r0, r3}
 8001682:	22eb      	movs	r2, #235	; 0xeb
 8001684:	f44f 739b 	mov.w	r3, #310	; 0x136
 8001688:	9403      	str	r4, [sp, #12]
 800168a:	9402      	str	r4, [sp, #8]
 800168c:	2106      	movs	r1, #6
 800168e:	2007      	movs	r0, #7
 8001690:	f006 fca6 	bl	8007fe0 <MULTIPAGE_CreateEx>
 8001694:	4d2b      	ldr	r5, [pc, #172]	; (8001744 <WindowInit+0x100>)
  MULTIPAGE_SetFont(hMultiPage, GUI_FONT_24_1);
 8001696:	492c      	ldr	r1, [pc, #176]	; (8001748 <WindowInit+0x104>)

  hFrameWin = FRAMEWIN_Create("Chopper", NULL, WM_CF_SHOW, -10, 0, 260, 325);
  FRAMEWIN_SetBorderSize(hFrameWin, 0);
  FRAMEWIN_SetTitleVis(hFrameWin, 0);

  hMultiPage = MULTIPAGE_CreateEx(7, 6, 235, 310, WM_GetClientWindow(hFrameWin), WM_CF_SHOW, 0, 0);
 8001698:	6028      	str	r0, [r5, #0]
  MULTIPAGE_SetFont(hMultiPage, GUI_FONT_24_1);
 800169a:	f006 ff4a 	bl	8008532 <MULTIPAGE_SetFont>

  hDialogControl = GUI_CreateDialogBox(_aDialogCreate_Control, GUI_COUNTOF(_aDialogCreate_Control), _controlWindowCallback, WM_UNATTACHED, 0, 0);
 800169e:	9401      	str	r4, [sp, #4]
 80016a0:	9400      	str	r4, [sp, #0]
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295
 80016a6:	4a29      	ldr	r2, [pc, #164]	; (800174c <WindowInit+0x108>)
 80016a8:	4829      	ldr	r0, [pc, #164]	; (8001750 <WindowInit+0x10c>)
 80016aa:	210e      	movs	r1, #14
 80016ac:	f008 fda0 	bl	800a1f0 <GUI_CreateDialogBox>
 80016b0:	4b28      	ldr	r3, [pc, #160]	; (8001754 <WindowInit+0x110>)
  MULTIPAGE_AddPage(hMultiPage, hDialogControl, "Sterowanie");
 80016b2:	4a29      	ldr	r2, [pc, #164]	; (8001758 <WindowInit+0x114>)
  FRAMEWIN_SetTitleVis(hFrameWin, 0);

  hMultiPage = MULTIPAGE_CreateEx(7, 6, 235, 310, WM_GetClientWindow(hFrameWin), WM_CF_SHOW, 0, 0);
  MULTIPAGE_SetFont(hMultiPage, GUI_FONT_24_1);

  hDialogControl = GUI_CreateDialogBox(_aDialogCreate_Control, GUI_COUNTOF(_aDialogCreate_Control), _controlWindowCallback, WM_UNATTACHED, 0, 0);
 80016b4:	6018      	str	r0, [r3, #0]
 80016b6:	4601      	mov	r1, r0
  MULTIPAGE_AddPage(hMultiPage, hDialogControl, "Sterowanie");
 80016b8:	6828      	ldr	r0, [r5, #0]
 80016ba:	f006 fe6f 	bl	800839c <MULTIPAGE_AddPage>
  hDialogCurrentReg = GUI_CreateDialogBox(_aDialogCreate_CurrentReg, GUI_COUNTOF(_aDialogCreate_CurrentReg), _currentRegWindowCallback, WM_UNATTACHED, 0, 0);
 80016be:	9401      	str	r4, [sp, #4]
 80016c0:	9400      	str	r4, [sp, #0]
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
 80016c6:	4a25      	ldr	r2, [pc, #148]	; (800175c <WindowInit+0x118>)
 80016c8:	4825      	ldr	r0, [pc, #148]	; (8001760 <WindowInit+0x11c>)
 80016ca:	2114      	movs	r1, #20
 80016cc:	f008 fd90 	bl	800a1f0 <GUI_CreateDialogBox>
 80016d0:	4b24      	ldr	r3, [pc, #144]	; (8001764 <WindowInit+0x120>)
  MULTIPAGE_AddPage(hMultiPage, hDialogCurrentReg, "Reg. pradu");
 80016d2:	4a25      	ldr	r2, [pc, #148]	; (8001768 <WindowInit+0x124>)
  hMultiPage = MULTIPAGE_CreateEx(7, 6, 235, 310, WM_GetClientWindow(hFrameWin), WM_CF_SHOW, 0, 0);
  MULTIPAGE_SetFont(hMultiPage, GUI_FONT_24_1);

  hDialogControl = GUI_CreateDialogBox(_aDialogCreate_Control, GUI_COUNTOF(_aDialogCreate_Control), _controlWindowCallback, WM_UNATTACHED, 0, 0);
  MULTIPAGE_AddPage(hMultiPage, hDialogControl, "Sterowanie");
  hDialogCurrentReg = GUI_CreateDialogBox(_aDialogCreate_CurrentReg, GUI_COUNTOF(_aDialogCreate_CurrentReg), _currentRegWindowCallback, WM_UNATTACHED, 0, 0);
 80016d4:	6018      	str	r0, [r3, #0]
 80016d6:	4601      	mov	r1, r0
  MULTIPAGE_AddPage(hMultiPage, hDialogCurrentReg, "Reg. pradu");
 80016d8:	6828      	ldr	r0, [r5, #0]
 80016da:	f006 fe5f 	bl	800839c <MULTIPAGE_AddPage>
  hDialogSpeedReg = GUI_CreateDialogBox(_aDialogCreate_SpeedReg, GUI_COUNTOF(_aDialogCreate_SpeedReg), _speedRegWindowCallback, WM_UNATTACHED, 0, 0);
 80016de:	9401      	str	r4, [sp, #4]
 80016e0:	9400      	str	r4, [sp, #0]
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295
 80016e6:	4a21      	ldr	r2, [pc, #132]	; (800176c <WindowInit+0x128>)
 80016e8:	4821      	ldr	r0, [pc, #132]	; (8001770 <WindowInit+0x12c>)
 80016ea:	2118      	movs	r1, #24
 80016ec:	f008 fd80 	bl	800a1f0 <GUI_CreateDialogBox>
 80016f0:	4b20      	ldr	r3, [pc, #128]	; (8001774 <WindowInit+0x130>)
  MULTIPAGE_AddPage(hMultiPage, hDialogSpeedReg, "Reg. predkosci");
 80016f2:	4a21      	ldr	r2, [pc, #132]	; (8001778 <WindowInit+0x134>)

  hDialogControl = GUI_CreateDialogBox(_aDialogCreate_Control, GUI_COUNTOF(_aDialogCreate_Control), _controlWindowCallback, WM_UNATTACHED, 0, 0);
  MULTIPAGE_AddPage(hMultiPage, hDialogControl, "Sterowanie");
  hDialogCurrentReg = GUI_CreateDialogBox(_aDialogCreate_CurrentReg, GUI_COUNTOF(_aDialogCreate_CurrentReg), _currentRegWindowCallback, WM_UNATTACHED, 0, 0);
  MULTIPAGE_AddPage(hMultiPage, hDialogCurrentReg, "Reg. pradu");
  hDialogSpeedReg = GUI_CreateDialogBox(_aDialogCreate_SpeedReg, GUI_COUNTOF(_aDialogCreate_SpeedReg), _speedRegWindowCallback, WM_UNATTACHED, 0, 0);
 80016f4:	6018      	str	r0, [r3, #0]
 80016f6:	4601      	mov	r1, r0
  MULTIPAGE_AddPage(hMultiPage, hDialogSpeedReg, "Reg. predkosci");
 80016f8:	6828      	ldr	r0, [r5, #0]
 80016fa:	f006 fe4f 	bl	800839c <MULTIPAGE_AddPage>

  MULTIPAGE_SelectPage(hMultiPage, 0);
 80016fe:	6828      	ldr	r0, [r5, #0]
    }
}

static void setInitialValues(void)
{
  EDIT_SetText(editHandles[EDIT_KP_CURRENT], "0.5");
 8001700:	4d1e      	ldr	r5, [pc, #120]	; (800177c <WindowInit+0x138>)
  hDialogCurrentReg = GUI_CreateDialogBox(_aDialogCreate_CurrentReg, GUI_COUNTOF(_aDialogCreate_CurrentReg), _currentRegWindowCallback, WM_UNATTACHED, 0, 0);
  MULTIPAGE_AddPage(hMultiPage, hDialogCurrentReg, "Reg. pradu");
  hDialogSpeedReg = GUI_CreateDialogBox(_aDialogCreate_SpeedReg, GUI_COUNTOF(_aDialogCreate_SpeedReg), _speedRegWindowCallback, WM_UNATTACHED, 0, 0);
  MULTIPAGE_AddPage(hMultiPage, hDialogSpeedReg, "Reg. predkosci");

  MULTIPAGE_SelectPage(hMultiPage, 0);
 8001702:	4621      	mov	r1, r4
 8001704:	f006 fc7c 	bl	8008000 <MULTIPAGE_SelectPage>
    }
}

static void setInitialValues(void)
{
  EDIT_SetText(editHandles[EDIT_KP_CURRENT], "0.5");
 8001708:	6828      	ldr	r0, [r5, #0]
 800170a:	491d      	ldr	r1, [pc, #116]	; (8001780 <WindowInit+0x13c>)
 800170c:	f008 f8e2 	bl	80098d4 <EDIT_SetText>
  EDIT_SetText(editHandles[EDIT_KI_CURRENT], "3");
 8001710:	6868      	ldr	r0, [r5, #4]
 8001712:	491c      	ldr	r1, [pc, #112]	; (8001784 <WindowInit+0x140>)
 8001714:	f008 f8de 	bl	80098d4 <EDIT_SetText>
  EDIT_SetText(editHandles[EDIT_KP_SPEED], "5");
 8001718:	68a8      	ldr	r0, [r5, #8]
 800171a:	491b      	ldr	r1, [pc, #108]	; (8001788 <WindowInit+0x144>)
 800171c:	f008 f8da 	bl	80098d4 <EDIT_SetText>
  EDIT_SetText(editHandles[EDIT_KI_SPEED], "0.4");
 8001720:	68e8      	ldr	r0, [r5, #12]
 8001722:	491a      	ldr	r1, [pc, #104]	; (800178c <WindowInit+0x148>)
 8001724:	f008 f8d6 	bl	80098d4 <EDIT_SetText>
  EDIT_SetText(editHandles[EDIT_KD_SPEED], "0.0001");
 8001728:	6928      	ldr	r0, [r5, #16]
 800172a:	4919      	ldr	r1, [pc, #100]	; (8001790 <WindowInit+0x14c>)
 800172c:	f008 f8d2 	bl	80098d4 <EDIT_SetText>
  EDIT_SetText(editHandles[EDIT_CURRENT_LIMIT], "15");
 8001730:	69e8      	ldr	r0, [r5, #28]
 8001732:	4918      	ldr	r1, [pc, #96]	; (8001794 <WindowInit+0x150>)
 8001734:	f008 f8ce 	bl	80098d4 <EDIT_SetText>

  MULTIPAGE_SelectPage(hMultiPage, 0);
  setInitialValues();

  return hWin;
}
 8001738:	4620      	mov	r0, r4
 800173a:	b005      	add	sp, #20
 800173c:	bd30      	pop	{r4, r5, pc}
 800173e:	bf00      	nop
 8001740:	0801d654 	.word	0x0801d654
 8001744:	20001878 	.word	0x20001878
 8001748:	0801f504 	.word	0x0801f504
 800174c:	08000fb9 	.word	0x08000fb9
 8001750:	0801d7f4 	.word	0x0801d7f4
 8001754:	20001864 	.word	0x20001864
 8001758:	0801d65c 	.word	0x0801d65c
 800175c:	08000e59 	.word	0x08000e59
 8001760:	0801d2a4 	.word	0x0801d2a4
 8001764:	20001884 	.word	0x20001884
 8001768:	0801d667 	.word	0x0801d667
 800176c:	08000c29 	.word	0x08000c29
 8001770:	0801d004 	.word	0x0801d004
 8001774:	20001868 	.word	0x20001868
 8001778:	0801d672 	.word	0x0801d672
 800177c:	20000ba8 	.word	0x20000ba8
 8001780:	0801d681 	.word	0x0801d681
 8001784:	0801d685 	.word	0x0801d685
 8001788:	0801d683 	.word	0x0801d683
 800178c:	0801d687 	.word	0x0801d687
 8001790:	0801d68b 	.word	0x0801d68b
 8001794:	0801d692 	.word	0x0801d692

08001798 <refreshMotorCurrentOnGUI>:
      TEXT_SetText(editHandles[EDIT_ERROR2], errorMessage);
    }
}

void refreshMotorCurrentOnGUI(void)
{
 8001798:	b530      	push	{r4, r5, lr}
 800179a:	b087      	sub	sp, #28
  static speedType_t motorSpeed = 0;
  static char currentStr[6];
  static char speedStr[6];
  static WM_HWIN hDlg, hText;

  motorObject_t *motor = getMotorObject();
 800179c:	f000 f9c8 	bl	8001b30 <getMotorObject>
  if (motor->state == STOP_MOTOR)
 80017a0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 80017a4:	4d22      	ldr	r5, [pc, #136]	; (8001830 <refreshMotorCurrentOnGUI+0x98>)
 80017a6:	4c23      	ldr	r4, [pc, #140]	; (8001834 <refreshMotorCurrentOnGUI+0x9c>)
 80017a8:	b91b      	cbnz	r3, 80017b2 <refreshMotorCurrentOnGUI+0x1a>
    {
      motorCurrent = 0;
 80017aa:	2200      	movs	r2, #0
 80017ac:	602a      	str	r2, [r5, #0]
      motorSpeed = 0;
 80017ae:	8023      	strh	r3, [r4, #0]
 80017b0:	e006      	b.n	80017c0 <refreshMotorCurrentOnGUI+0x28>
    }
  else
    {
      motorCurrent = getMotorAverageCurrent();
 80017b2:	f000 f9f1 	bl	8001b98 <getMotorAverageCurrent>
 80017b6:	ed85 0a00 	vstr	s0, [r5]
      motorSpeed = getMotorSpeed();
 80017ba:	f000 fa09 	bl	8001bd0 <getMotorSpeed>
 80017be:	8020      	strh	r0, [r4, #0]
    }

  floatToString(motorCurrent, currentStr); // float to str
 80017c0:	ed95 0a00 	vldr	s0, [r5]
 80017c4:	481c      	ldr	r0, [pc, #112]	; (8001838 <refreshMotorCurrentOnGUI+0xa0>)
  xsprintf(speedStr, "%d", motorSpeed); // int to str

  if (WM_IsVisible(hDialogControl))
 80017c6:	4d1d      	ldr	r5, [pc, #116]	; (800183c <refreshMotorCurrentOnGUI+0xa4>)
    {
      motorCurrent = getMotorAverageCurrent();
      motorSpeed = getMotorSpeed();
    }

  floatToString(motorCurrent, currentStr); // float to str
 80017c8:	f000 fe8a 	bl	80024e0 <floatToString>
  xsprintf(speedStr, "%d", motorSpeed); // int to str
 80017cc:	481c      	ldr	r0, [pc, #112]	; (8001840 <refreshMotorCurrentOnGUI+0xa8>)
 80017ce:	8822      	ldrh	r2, [r4, #0]
 80017d0:	491c      	ldr	r1, [pc, #112]	; (8001844 <refreshMotorCurrentOnGUI+0xac>)
 80017d2:	f001 f821 	bl	8002818 <xsprintf>

  if (WM_IsVisible(hDialogControl))
 80017d6:	6828      	ldr	r0, [r5, #0]
 80017d8:	f009 fbc0 	bl	800af5c <WM_IsVisible>
 80017dc:	b198      	cbz	r0, 8001806 <refreshMotorCurrentOnGUI+0x6e>
    {
      hDlg = WM_GetClientWindow(hDialogControl);
 80017de:	6828      	ldr	r0, [r5, #0]
 80017e0:	4d19      	ldr	r5, [pc, #100]	; (8001848 <refreshMotorCurrentOnGUI+0xb0>)
 80017e2:	f009 fcd9 	bl	800b198 <WM_GetClientWindow>
      hText = WM_GetDialogItem(hDlg, ID_CURRENT_MEAS);
 80017e6:	f640 011a 	movw	r1, #2074	; 0x81a
  floatToString(motorCurrent, currentStr); // float to str
  xsprintf(speedStr, "%d", motorSpeed); // int to str

  if (WM_IsVisible(hDialogControl))
    {
      hDlg = WM_GetClientWindow(hDialogControl);
 80017ea:	6028      	str	r0, [r5, #0]
      hText = WM_GetDialogItem(hDlg, ID_CURRENT_MEAS);
 80017ec:	f009 fcb9 	bl	800b162 <WM_GetDialogItem>
      TEXT_SetText(hText, currentStr);
 80017f0:	4911      	ldr	r1, [pc, #68]	; (8001838 <refreshMotorCurrentOnGUI+0xa0>)
 80017f2:	f005 fde1 	bl	80073b8 <TEXT_SetText>

      hText = WM_GetDialogItem(hDlg, ID_SPEED_MEAS);
 80017f6:	f640 0145 	movw	r1, #2117	; 0x845
 80017fa:	6828      	ldr	r0, [r5, #0]
 80017fc:	f009 fcb1 	bl	800b162 <WM_GetDialogItem>
      TEXT_SetText(hText, speedStr);
 8001800:	490f      	ldr	r1, [pc, #60]	; (8001840 <refreshMotorCurrentOnGUI+0xa8>)
 8001802:	f005 fdd9 	bl	80073b8 <TEXT_SetText>
    }

  char data[20];
  xsprintf(data, "$%s$", currentStr);
 8001806:	4a0c      	ldr	r2, [pc, #48]	; (8001838 <refreshMotorCurrentOnGUI+0xa0>)
 8001808:	4910      	ldr	r1, [pc, #64]	; (800184c <refreshMotorCurrentOnGUI+0xb4>)
 800180a:	a801      	add	r0, sp, #4
 800180c:	f001 f804 	bl	8002818 <xsprintf>
  xprintf("%s", data);
 8001810:	a901      	add	r1, sp, #4
 8001812:	480f      	ldr	r0, [pc, #60]	; (8001850 <refreshMotorCurrentOnGUI+0xb8>)
 8001814:	f000 fff3 	bl	80027fe <xprintf>

  xsprintf(data, "^%d^", motorSpeed);
 8001818:	8822      	ldrh	r2, [r4, #0]
 800181a:	490e      	ldr	r1, [pc, #56]	; (8001854 <refreshMotorCurrentOnGUI+0xbc>)
 800181c:	a801      	add	r0, sp, #4
 800181e:	f000 fffb 	bl	8002818 <xsprintf>
  xprintf("%s", data);
 8001822:	a901      	add	r1, sp, #4
 8001824:	480a      	ldr	r0, [pc, #40]	; (8001850 <refreshMotorCurrentOnGUI+0xb8>)
 8001826:	f000 ffea 	bl	80027fe <xprintf>
}
 800182a:	b007      	add	sp, #28
 800182c:	bd30      	pop	{r4, r5, pc}
 800182e:	bf00      	nop
 8001830:	20000b8c 	.word	0x20000b8c
 8001834:	20000b90 	.word	0x20000b90
 8001838:	20000bd1 	.word	0x20000bd1
 800183c:	20001864 	.word	0x20001864
 8001840:	20000ba2 	.word	0x20000ba2
 8001844:	0801d695 	.word	0x0801d695
 8001848:	20000b94 	.word	0x20000b94
 800184c:	0801d698 	.word	0x0801d698
 8001850:	0801d69d 	.word	0x0801d69d
 8001854:	0801d6a0 	.word	0x0801d6a0

08001858 <boardInit>:
  HAL_NVIC_SetPriority(TIM4_IRQn, 4, 0);
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
}

void boardInit(void)
{
 8001858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800185c:	b099      	sub	sp, #100	; 0x64

  /* Initialize the Touch screen */
  BSP_TS_Init(240, 320);

  /* Enable Back up SRAM */
  __HAL_RCC_BKPSRAM_CLK_ENABLE();
 800185e:	2400      	movs	r4, #0
 8001860:	4d89      	ldr	r5, [pc, #548]	; (8001a88 <boardInit+0x230>)
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
}

void boardInit(void)
{
  HAL_Init();
 8001862:	f001 fe6b 	bl	800353c <HAL_Init>
}

static void BSP_Config(void)
{
  /* Initializes the SDRAM device */
  BSP_SDRAM_Init();
 8001866:	f001 fcb9 	bl	80031dc <BSP_SDRAM_Init>

  /* Initialize the Touch screen */
  BSP_TS_Init(240, 320);
 800186a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800186e:	20f0      	movs	r0, #240	; 0xf0
 8001870:	f001 fda8 	bl	80033c4 <BSP_TS_Init>

  /* Enable Back up SRAM */
  __HAL_RCC_BKPSRAM_CLK_ENABLE();
 8001874:	9405      	str	r4, [sp, #20]
 8001876:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800187c:	632b      	str	r3, [r5, #48]	; 0x30
 800187e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001880:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001884:	9305      	str	r3, [sp, #20]
 8001886:	9b05      	ldr	r3, [sp, #20]

  /* Enable the CRC Module */
  __HAL_RCC_CRC_CLK_ENABLE();
 8001888:	9406      	str	r4, [sp, #24]
 800188a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800188c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001890:	632b      	str	r3, [r5, #48]	; 0x30
 8001892:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001894:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001898:	9306      	str	r3, [sp, #24]
 800189a:	9b06      	ldr	r3, [sp, #24]
static void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __PWR_CLK_ENABLE();
 800189c:	9403      	str	r4, [sp, #12]
 800189e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80018a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a4:	642b      	str	r3, [r5, #64]	; 0x40
 80018a6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80018a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ac:	9303      	str	r3, [sp, #12]
 80018ae:	9b03      	ldr	r3, [sp, #12]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018b0:	4b76      	ldr	r3, [pc, #472]	; (8001a8c <boardInit+0x234>)
 80018b2:	9404      	str	r4, [sp, #16]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018c2:	9304      	str	r3, [sp, #16]
 80018c4:	9b04      	ldr	r3, [sp, #16]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018ca:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018cc:	2308      	movs	r3, #8
 80018ce:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018d0:	f44f 73a8 	mov.w	r3, #336	; 0x150

  __PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018d4:	2701      	movs	r7, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018d6:	f04f 0802 	mov.w	r8, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018da:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80018dc:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018de:	2307      	movs	r3, #7
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018e0:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018e4:	9317      	str	r3, [sp, #92]	; 0x5c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80018e6:	260f      	movs	r6, #15

  __PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018e8:	970c      	str	r7, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018ea:	970d      	str	r7, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ec:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018f0:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80018f4:	f003 fab6 	bl	8004e64 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80018fc:	2105      	movs	r1, #5
 80018fe:	a807      	add	r0, sp, #28

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001900:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001902:	9607      	str	r6, [sp, #28]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001904:	f8cd 8020 	str.w	r8, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001908:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800190a:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800190e:	f003 fc4f 	bl	80051b0 <HAL_RCC_ClockConfig>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001912:	2004      	movs	r0, #4
 8001914:	f002 f8e4 	bl	8003ae0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001918:	4622      	mov	r2, r4
 800191a:	4631      	mov	r1, r6
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	f002 f888 	bl	8003a34 <HAL_NVIC_SetPriority>
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOA_CLK_ENABLE();
 8001924:	9401      	str	r4, [sp, #4]
 8001926:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_RESET);
 8001928:	4e59      	ldr	r6, [pc, #356]	; (8001a90 <boardInit+0x238>)
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOA_CLK_ENABLE();
 800192a:	433b      	orrs	r3, r7
 800192c:	632b      	str	r3, [r5, #48]	; 0x30
 800192e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001930:	403b      	ands	r3, r7
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	9b01      	ldr	r3, [sp, #4]
  __GPIOG_CLK_ENABLE();
 8001936:	9402      	str	r4, [sp, #8]
 8001938:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800193a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800193e:	632b      	str	r3, [r5, #48]	; 0x30
 8001940:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001942:	f003 0340 	and.w	r3, r3, #64	; 0x40

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_RESET);
 8001946:	4622      	mov	r2, r4
{
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOA_CLK_ENABLE();
  __GPIOG_CLK_ENABLE();
 8001948:	9302      	str	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_RESET);
 800194a:	4630      	mov	r0, r6
 800194c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
{
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOA_CLK_ENABLE();
  __GPIOG_CLK_ENABLE();
 8001950:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_RESET);
 8001952:	f002 fbf3 	bl	800413c <HAL_GPIO_WritePin>
  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001956:	a90c      	add	r1, sp, #48	; 0x30

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 8001958:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800195c:	4630      	mov	r0, r6

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 800195e:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8001964:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001966:	f002 fafd 	bl	8003f64 <HAL_GPIO_Init>
{
  HAL_Init();
  BSP_Config();
  SystemClock_Config();
  MX_GPIO_Init();
  uartInit();
 800196a:	f000 fbc7 	bl	80020fc <uartInit>
  xdev_out(sendConsole);
 800196e:	4b49      	ldr	r3, [pc, #292]	; (8001a94 <boardInit+0x23c>)
 8001970:	4a49      	ldr	r2, [pc, #292]	; (8001a98 <boardInit+0x240>)
{
  ADC_ChannelConfTypeDef sConfig;

  /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1; // Peryferium ADC1
 8001972:	4e4a      	ldr	r6, [pc, #296]	; (8001a9c <boardInit+0x244>)
  HAL_Init();
  BSP_Config();
  SystemClock_Config();
  MX_GPIO_Init();
  uartInit();
  xdev_out(sendConsole);
 8001974:	601a      	str	r2, [r3, #0]

static void MX_RNG_Init(void)
{
  RNG_HandleTypeDef hrng;
  hrng.Instance = RNG;
  HAL_RNG_Init(&hrng);
 8001976:	a80c      	add	r0, sp, #48	; 0x30
}

static void MX_RNG_Init(void)
{
  RNG_HandleTypeDef hrng;
  hrng.Instance = RNG;
 8001978:	4b49      	ldr	r3, [pc, #292]	; (8001aa0 <boardInit+0x248>)
 800197a:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_RNG_Init(&hrng);
 800197c:	f003 fe61 	bl	8005642 <HAL_RNG_Init>
  ADC_ChannelConfTypeDef sConfig;

  /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1; // Peryferium ADC1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4; // Dzielnik zegara ADC = 4
 8001980:	4a48      	ldr	r2, [pc, #288]	; (8001aa4 <boardInit+0x24c>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B; // Rozdzielczość przetwornika
 8001982:	60b4      	str	r4, [r6, #8]
  ADC_ChannelConfTypeDef sConfig;

  /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1; // Peryferium ADC1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4; // Dzielnik zegara ADC = 4
 8001984:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE; // Zewnętrzne wyzwolenie ADC wyłączone
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT; // Dane na 12 najmłodszych bitach
  hadc1.Init.NbrOfConversion = 2; // Liczba kanałów do przeprowadzenia konwersji
  hadc1.Init.DMAContinuousRequests = ENABLE; // Cykliczne DMA włączone
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV; //
  HAL_ADC_Init(&hadc1);
 8001988:	4630      	mov	r0, r6
  ADC_ChannelConfTypeDef sConfig;

  /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1; // Peryferium ADC1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4; // Dzielnik zegara ADC = 4
 800198a:	e886 000c 	stmia.w	r6, {r2, r3}
  hadc1.Init.Resolution = ADC_RESOLUTION_12B; // Rozdzielczość przetwornika
  hadc1.Init.ScanConvMode = ENABLE; // Włączenie pomiaru wielu kanałów jeden po drugim
 800198e:	6137      	str	r7, [r6, #16]
  hadc1.Init.ContinuousConvMode = ENABLE; // Ciągły tryb pracy ADC
 8001990:	61b7      	str	r7, [r6, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE; // j.w.
 8001992:	6234      	str	r4, [r6, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE; // Zewnętrzne wyzwolenie ADC wyłączone
 8001994:	62f4      	str	r4, [r6, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT; // Dane na 12 najmłodszych bitach
 8001996:	60f4      	str	r4, [r6, #12]
  hadc1.Init.NbrOfConversion = 2; // Liczba kanałów do przeprowadzenia konwersji
 8001998:	f8c6 801c 	str.w	r8, [r6, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE; // Cykliczne DMA włączone
 800199c:	6337      	str	r7, [r6, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV; //
 800199e:	6177      	str	r7, [r6, #20]
  HAL_ADC_Init(&hadc1);
 80019a0:	f001 fe02 	bl	80035a8 <HAL_ADC_Init>

  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11; // PC1
 80019a4:	230b      	movs	r3, #11
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80019a6:	a90c      	add	r1, sp, #48	; 0x30
 80019a8:	4630      	mov	r0, r6
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV; //
  HAL_ADC_Init(&hadc1);

  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11; // PC1
 80019aa:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.Rank = 1;
 80019ac:	970d      	str	r7, [sp, #52]	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80019ae:	970e      	str	r7, [sp, #56]	; 0x38
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80019b0:	f001 ff94 	bl	80038dc <HAL_ADC_ConfigChannel>

  sConfig.Channel = ADC_CHANNEL_13; // PC3
 80019b4:	230d      	movs	r3, #13
  sConfig.Rank = 2;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80019b6:	a90c      	add	r1, sp, #48	; 0x30
 80019b8:	4630      	mov	r0, r6
  sConfig.Channel = ADC_CHANNEL_11; // PC1
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);

  sConfig.Channel = ADC_CHANNEL_13; // PC3
 80019ba:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.Rank = 2;
 80019bc:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80019c0:	f001 ff8c 	bl	80038dc <HAL_ADC_ConfigChannel>

  __DMA2_CLK_ENABLE();
 80019c4:	9400      	str	r4, [sp, #0]
 80019c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80019c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019cc:	632b      	str	r3, [r5, #48]	; 0x30
 80019ce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
static void MX_TIM5_Init(void)
{
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
 80019d0:	4d35      	ldr	r5, [pc, #212]	; (8001aa8 <boardInit+0x250>)

  sConfig.Channel = ADC_CHANNEL_13; // PC3
  sConfig.Rank = 2;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);

  __DMA2_CLK_ENABLE();
 80019d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80019d6:	4622      	mov	r2, r4

  sConfig.Channel = ADC_CHANNEL_13; // PC3
  sConfig.Rank = 2;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);

  __DMA2_CLK_ENABLE();
 80019d8:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80019da:	2105      	movs	r1, #5
 80019dc:	2038      	movs	r0, #56	; 0x38

  sConfig.Channel = ADC_CHANNEL_13; // PC3
  sConfig.Rank = 2;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);

  __DMA2_CLK_ENABLE();
 80019de:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80019e0:	f002 f828 	bl	8003a34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80019e4:	2038      	movs	r0, #56	; 0x38
 80019e6:	f002 f859 	bl	8003a9c <HAL_NVIC_EnableIRQ>
{
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 8400 - 1;
 80019ea:	4930      	ldr	r1, [pc, #192]	; (8001aac <boardInit+0x254>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ec:	60ac      	str	r4, [r5, #8]
{
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 8400 - 1;
 80019ee:	f242 03cf 	movw	r3, #8399	; 0x20cf
 80019f2:	e885 000a 	stmia.w	r5, {r1, r3}
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 20000 - 1;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim5);
 80019f6:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 8400 - 1;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 20000 - 1;
 80019f8:	f644 631f 	movw	r3, #19999	; 0x4e1f
 80019fc:	60eb      	str	r3, [r5, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fe:	612c      	str	r4, [r5, #16]
  HAL_TIM_Base_Init(&htim5);
 8001a00:	f004 fa72 	bl	8005ee8 <HAL_TIM_Base_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig);
 8001a04:	a90c      	add	r1, sp, #48	; 0x30
 8001a06:	4628      	mov	r0, r5
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 20000 - 1;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim5);

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a08:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig);
 8001a0c:	f004 f8a7 	bl	8005b5e <HAL_TIM_ConfigClockSource>

  HAL_TIM_PWM_Init(&htim5);
 8001a10:	4628      	mov	r0, r5
 8001a12:	f004 fa83 	bl	8005f1c <HAL_TIM_PWM_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig);
 8001a16:	a907      	add	r1, sp, #28
 8001a18:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig);

  HAL_TIM_PWM_Init(&htim5);

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1a:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1c:	9408      	str	r4, [sp, #32]
  HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig);
 8001a1e:	f004 fb85 	bl	800612c <HAL_TIMEx_MasterConfigSynchronization>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a22:	4923      	ldr	r1, [pc, #140]	; (8001ab0 <boardInit+0x258>)
  sConfigOC.Pulse = (20000 - 1) / 2;
 8001a24:	f242 730f 	movw	r3, #9999	; 0x270f
 8001a28:	2060      	movs	r0, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1);
 8001a2a:	4622      	mov	r2, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig);

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = (20000 - 1) / 2;
 8001a2c:	e881 0009 	stmia.w	r1, {r0, r3}
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1);
 8001a30:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig);

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = (20000 - 1) / 2;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a32:	608c      	str	r4, [r1, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a34:	610c      	str	r4, [r1, #16]
  HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1);
 8001a36:	f004 fabd 	bl	8005fb4 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_MspPostInit(&htim5);
 8001a3a:	4628      	mov	r0, r5
 8001a3c:	f000 fc9e 	bl	800237c <HAL_TIM_MspPostInit>
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 8001a40:	4d1c      	ldr	r5, [pc, #112]	; (8001ab4 <boardInit+0x25c>)
  htim4.Init.Prescaler = 84 - 1;
 8001a42:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <boardInit+0x260>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a44:	60ac      	str	r4, [r5, #8]

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 84 - 1;
 8001a46:	2653      	movs	r6, #83	; 0x53
 8001a48:	e885 0048 	stmia.w	r5, {r3, r6}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  // htim4.Init.Period = 60 - 1;
  htim4.Init.Period = 100 - 1;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim4);
 8001a4c:	4628      	mov	r0, r5

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 84 - 1;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  // htim4.Init.Period = 60 - 1;
  htim4.Init.Period = 100 - 1;
 8001a4e:	2363      	movs	r3, #99	; 0x63
 8001a50:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a52:	612c      	str	r4, [r5, #16]
  HAL_TIM_Base_Init(&htim4);
 8001a54:	f004 fa48 	bl	8005ee8 <HAL_TIM_Base_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8001a58:	a90c      	add	r1, sp, #48	; 0x30
 8001a5a:	4628      	mov	r0, r5
  // htim4.Init.Period = 60 - 1;
  htim4.Init.Period = 100 - 1;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim4);

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a5c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8001a60:	f004 f87d 	bl	8005b5e <HAL_TIM_ConfigClockSource>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8001a64:	a907      	add	r1, sp, #28
 8001a66:	4628      	mov	r0, r5
  HAL_TIM_Base_Init(&htim4);

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a68:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6a:	9408      	str	r4, [sp, #32]
  HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8001a6c:	f004 fb5e 	bl	800612c <HAL_TIMEx_MasterConfigSynchronization>

  HAL_NVIC_SetPriority(TIM4_IRQn, 4, 0);
 8001a70:	4622      	mov	r2, r4
 8001a72:	2104      	movs	r1, #4
 8001a74:	201e      	movs	r0, #30
 8001a76:	f001 ffdd 	bl	8003a34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a7a:	201e      	movs	r0, #30
 8001a7c:	f002 f80e 	bl	8003a9c <HAL_NVIC_EnableIRQ>
  xdev_out(sendConsole);
  MX_RNG_Init();
  MX_ADC1_Init();
  MX_TIM5_Init(); // PWM
  MX_TIM4_Init(); // ADC
}
 8001a80:	b019      	add	sp, #100	; 0x64
 8001a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40007000 	.word	0x40007000
 8001a90:	40021800 	.word	0x40021800
 8001a94:	20001a64 	.word	0x20001a64
 8001a98:	08002081 	.word	0x08002081
 8001a9c:	20001900 	.word	0x20001900
 8001aa0:	50060800 	.word	0x50060800
 8001aa4:	40012000 	.word	0x40012000
 8001aa8:	200018c4 	.word	0x200018c4
 8001aac:	40000c00 	.word	0x40000c00
 8001ab0:	20001948 	.word	0x20001948
 8001ab4:	20001888 	.word	0x20001888
 8001ab8:	40000800 	.word	0x40000800

08001abc <PI.constprop.0>:
static float PI(float Kp, float Ti, float varRef, float var, float limit)
{
  float error, out;

  error = varRef - var;
  integral_PI += Kp * error / Ti;
 8001abc:	ee71 1a61 	vsub.f32	s3, s2, s3
 8001ac0:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <PI.constprop.0+0x6c>)
 8001ac2:	ee21 0a80 	vmul.f32	s0, s3, s0
 8001ac6:	edd3 7a00 	vldr	s15, [r3]
 8001aca:	eec0 0a20 	vdiv.f32	s1, s0, s1
 8001ace:	ee70 0aa7 	vadd.f32	s1, s1, s15

  if (integral_PI > INT_THRESHOLD_MAX_CURR)
 8001ad2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001ad6:	eef4 0ae7 	vcmpe.f32	s1, s15
 8001ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ade:	dd02      	ble.n	8001ae6 <PI.constprop.0+0x2a>
    integral_PI = INT_THRESHOLD_MAX_CURR;
 8001ae0:	edc3 7a00 	vstr	s15, [r3]
 8001ae4:	e00a      	b.n	8001afc <PI.constprop.0+0x40>
  else if (integral_PI < INT_THRESHOLD_MIN_CURR)
 8001ae6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
static float PI(float Kp, float Ti, float varRef, float var, float limit)
{
  float error, out;

  error = varRef - var;
  integral_PI += Kp * error / Ti;
 8001aea:	eef4 0ac7 	vcmpe.f32	s1, s14
 8001aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af2:	bf48      	it	mi
 8001af4:	eef0 0a47 	vmovmi.f32	s1, s14
 8001af8:	edc3 0a00 	vstr	s1, [r3]
  if (integral_PI > INT_THRESHOLD_MAX_CURR)
    integral_PI = INT_THRESHOLD_MAX_CURR;
  else if (integral_PI < INT_THRESHOLD_MIN_CURR)
    integral_PI = INT_THRESHOLD_MIN_CURR;

  out = Kp * error + integral_PI;
 8001afc:	edd3 1a00 	vldr	s3, [r3]
 8001b00:	ee30 0a21 	vadd.f32	s0, s0, s3
  return speedRaw;
}

static float limitVar(float var, float limit) // returns value in range <0:limit>
{
  if (var > limit)
 8001b04:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0c:	dc09      	bgt.n	8001b22 <PI.constprop.0+0x66>
    var = limit;
  else if (var < 0)
    var = 0;
 8001b0e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001b12:	eddf 7a06 	vldr	s15, [pc, #24]	; 8001b2c <PI.constprop.0+0x70>
 8001b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1a:	bf48      	it	mi
 8001b1c:	eeb0 0a67 	vmovmi.f32	s0, s15
 8001b20:	4770      	bx	lr
}

static float limitVar(float var, float limit) // returns value in range <0:limit>
{
  if (var > limit)
    var = limit;
 8001b22:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    integral_PI = INT_THRESHOLD_MIN_CURR;

  out = Kp * error + integral_PI;

  return limitVar(out, limit);
}
 8001b26:	4770      	bx	lr
 8001b28:	200013f0 	.word	0x200013f0
 8001b2c:	00000000 	.word	0x00000000

08001b30 <getMotorObject>:
};

motorObject_t *getMotorObject(void)
{
  return &motor;
}
 8001b30:	4800      	ldr	r0, [pc, #0]	; (8001b34 <getMotorObject+0x4>)
 8001b32:	4770      	bx	lr
 8001b34:	20000000 	.word	0x20000000

08001b38 <HAL_ADC_ConvCpltCallback>:
uint32_t adcBuffer[ADC_BUFFER_SIZE] = {0};
int16_t currPos = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
  adcBuffer[currPos++] = adcResult[0];
 8001b38:	490b      	ldr	r1, [pc, #44]	; (8001b68 <HAL_ADC_ConvCpltCallback+0x30>)
 8001b3a:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <HAL_ADC_ConvCpltCallback+0x34>)
 8001b3c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8001b40:	6810      	ldr	r0, [r2, #0]
 8001b42:	4a0b      	ldr	r2, [pc, #44]	; (8001b70 <HAL_ADC_ConvCpltCallback+0x38>)
 8001b44:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  currPos = currPos % ADC_BUFFER_SIZE;
 8001b48:	3301      	adds	r3, #1
 8001b4a:	b21a      	sxth	r2, r3
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	bfbf      	itttt	lt
 8001b54:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8001b58:	ea6f 53c3 	mvnlt.w	r3, r3, lsl #23
 8001b5c:	ea6f 53d3 	mvnlt.w	r3, r3, lsr #23
 8001b60:	3301      	addlt	r3, #1
 8001b62:	800b      	strh	r3, [r1, #0]
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	200013ec 	.word	0x200013ec
 8001b6c:	20000bd8 	.word	0x20000bd8
 8001b70:	20000bec 	.word	0x20000bec
 8001b74:	800001ff 	.word	0x800001ff

08001b78 <startADC>:
}

void startADC(void)
{
  HAL_ADC_Start_DMA(&hadc1, adcResult, 2);
 8001b78:	2202      	movs	r2, #2
 8001b7a:	4902      	ldr	r1, [pc, #8]	; (8001b84 <startADC+0xc>)
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <startADC+0x10>)
 8001b7e:	f001 bdbd 	b.w	80036fc <HAL_ADC_Start_DMA>
 8001b82:	bf00      	nop
 8001b84:	20000bd8 	.word	0x20000bd8
 8001b88:	20001900 	.word	0x20001900

08001b8c <stopADC>:
}

void stopADC(void)
{
  HAL_ADC_Stop_DMA(&hadc1);
 8001b8c:	4801      	ldr	r0, [pc, #4]	; (8001b94 <stopADC+0x8>)
 8001b8e:	f001 be35 	b.w	80037fc <HAL_ADC_Stop_DMA>
 8001b92:	bf00      	nop
 8001b94:	20001900 	.word	0x20001900

08001b98 <getMotorAverageCurrent>:
  current = (uint32_t)((MAX_CURRENT * adcCpy) / MAX_12_BIT);
  return ((float)current) / 1000;
}

float getMotorAverageCurrent(void)
{
 8001b98:	2200      	movs	r2, #0
  uint32_t current = 0, average = 0;
  uint32_t sum = 0;
  uint16_t i = 0;

  for (i = 0; i < ADC_BUFFER_SIZE; i++)
    sum += adcBuffer[i];
 8001b9a:	480b      	ldr	r0, [pc, #44]	; (8001bc8 <getMotorAverageCurrent+0x30>)
}

float getMotorAverageCurrent(void)
{
  uint32_t current = 0, average = 0;
  uint32_t sum = 0;
 8001b9c:	4613      	mov	r3, r2
  uint16_t i = 0;

  for (i = 0; i < ADC_BUFFER_SIZE; i++)
    sum += adcBuffer[i];
 8001b9e:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 8001ba2:	3201      	adds	r2, #1
{
  uint32_t current = 0, average = 0;
  uint32_t sum = 0;
  uint16_t i = 0;

  for (i = 0; i < ADC_BUFFER_SIZE; i++)
 8001ba4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    sum += adcBuffer[i];
 8001ba8:	440b      	add	r3, r1
{
  uint32_t current = 0, average = 0;
  uint32_t sum = 0;
  uint16_t i = 0;

  for (i = 0; i < ADC_BUFFER_SIZE; i++)
 8001baa:	d1f8      	bne.n	8001b9e <getMotorAverageCurrent+0x6>
    sum += adcBuffer[i];

  average = sum >> 9;
  current = (uint32_t)((MAX_CURRENT * average) / MAX_12_BIT);
  return ((float)current) / 1000;
 8001bac:	0a5a      	lsrs	r2, r3, #9
 8001bae:	f247 5330 	movw	r3, #30000	; 0x7530
 8001bb2:	4353      	muls	r3, r2
 8001bb4:	0b1b      	lsrs	r3, r3, #12
 8001bb6:	ee00 3a10 	vmov	s0, r3
}
 8001bba:	eddf 7a04 	vldr	s15, [pc, #16]	; 8001bcc <getMotorAverageCurrent+0x34>
  for (i = 0; i < ADC_BUFFER_SIZE; i++)
    sum += adcBuffer[i];

  average = sum >> 9;
  current = (uint32_t)((MAX_CURRENT * average) / MAX_12_BIT);
  return ((float)current) / 1000;
 8001bbe:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
 8001bc2:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8001bc6:	4770      	bx	lr
 8001bc8:	20000bec 	.word	0x20000bec
 8001bcc:	447a0000 	.word	0x447a0000

08001bd0 <getMotorSpeed>:

speedType_t getMotorSpeed(void)
{
  speedType_t speedRaw = 0;
  uint32_t adcCpy = adcResult[1];
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <getMotorSpeed+0x10>)
  speedRaw = (uint32_t)((MAX_SPEED * adcCpy) / MAX_12_BIT);
  return speedRaw;
 8001bd2:	6858      	ldr	r0, [r3, #4]
 8001bd4:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8001bd8:	4358      	muls	r0, r3
}
 8001bda:	f3c0 300f 	ubfx	r0, r0, #12, #16
 8001bde:	4770      	bx	lr
 8001be0:	20000bd8 	.word	0x20000bd8
 8001be4:	00000000 	.word	0x00000000

08001be8 <HAL_TIM_PeriodElapsedCallback>:
    }
}

// Motor control interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001be8:	b570      	push	{r4, r5, r6, lr}
  if (htim->Instance == TIM4) // 100 us
 8001bea:	6802      	ldr	r2, [r0, #0]
 8001bec:	4b54      	ldr	r3, [pc, #336]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001bee:	429a      	cmp	r2, r3
    }
}

// Motor control interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bf0:	ed2d 8b04 	vpush	{d8-d9}
  if (htim->Instance == TIM4) // 100 us
 8001bf4:	f040 809b 	bne.w	8001d2e <HAL_TIM_PeriodElapsedCallback+0x146>

static void motorControl(void)
{
  static float gamma = 0;

  switch (motor.state)
 8001bf8:	4a52      	ldr	r2, [pc, #328]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001bfa:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	4614      	mov	r4, r2
 8001c02:	d019      	beq.n	8001c38 <HAL_TIM_PeriodElapsedCallback+0x50>
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	f040 8092 	bne.w	8001d2e <HAL_TIM_PeriodElapsedCallback+0x146>
}

static float getMotorCurrentRaw(void)
{
  uint32_t current = 0;
  uint32_t adcCpy = adcResult[0];
 8001c0a:	4b4f      	ldr	r3, [pc, #316]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x160>)
  current = (uint32_t)((MAX_CURRENT * adcCpy) / MAX_12_BIT);
  return ((float)current) / 1000;
 8001c0c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001d4c <HAL_TIM_PeriodElapsedCallback+0x164>
 8001c10:	6819      	ldr	r1, [r3, #0]
      setDutyCycle(gamma);
      break;

    case TORQUE_CONTROL:
      motor.current = getMotorCurrentRaw();
      gamma = PI(motor.currentPID.kp, motor.currentPID.ki, motor.currentPID.ref, motor.current, 1);
 8001c12:	ed92 1a03 	vldr	s2, [r2, #12]
 8001c16:	edd2 0a01 	vldr	s1, [r2, #4]
 8001c1a:	ed92 0a00 	vldr	s0, [r2]
static float getMotorCurrentRaw(void)
{
  uint32_t current = 0;
  uint32_t adcCpy = adcResult[0];
  current = (uint32_t)((MAX_CURRENT * adcCpy) / MAX_12_BIT);
  return ((float)current) / 1000;
 8001c1e:	f247 5330 	movw	r3, #30000	; 0x7530
 8001c22:	434b      	muls	r3, r1
 8001c24:	0b1b      	lsrs	r3, r3, #12
 8001c26:	ee07 3a90 	vmov	s15, r3
 8001c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c2e:	eec7 1a87 	vdiv.f32	s3, s15, s14
      gamma = PI(motor.currentPID.kp, motor.currentPID.ki, motor.currentPID.ref, motor.current, 1);
      setDutyCycle(gamma);
      break;

    case TORQUE_CONTROL:
      motor.current = getMotorCurrentRaw();
 8001c32:	edc2 1a08 	vstr	s3, [r2, #32]
 8001c36:	e072      	b.n	8001d1e <HAL_TIM_PeriodElapsedCallback+0x136>
    {
    case STOP_MOTOR:
      break;

    case SPEED_CONTROL:
      motor.speed = getMotorSpeed();
 8001c38:	f7ff ffca 	bl	8001bd0 <getMotorSpeed>
static float errorPrev_PID = 0, integral_PID = 0;
static float PID(float Kp, float Ti, float Td, float varRef, float var, float limit)
{
  float error, out, derivative;

  error = varRef - var;
 8001c3c:	ee07 0a90 	vmov	s15, r0
 8001c40:	eeb8 9a67 	vcvt.f32.u32	s18, s15
 8001c44:	edd2 7a07 	vldr	s15, [r2, #28]
    case STOP_MOTOR:
      break;

    case SPEED_CONTROL:
      motor.speed = getMotorSpeed();
      motor.currentPID.ref = PID(motor.speedPID.kp, motor.speedPID.ki, motor.speedPID.kd, motor.speedPID.ref, motor.speed, motor.currentLimit);
 8001c48:	ed92 7a04 	vldr	s14, [r2, #16]
static float PID(float Kp, float Ti, float Td, float varRef, float var, float limit)
{
  float error, out, derivative;

  error = varRef - var;
  integral_PID += Kp * error / Ti;
 8001c4c:	ed92 6a05 	vldr	s12, [r2, #20]
 8001c50:	4d3f      	ldr	r5, [pc, #252]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x168>)
  derivative = Kp * Td * (error - errorPrev_PID) / dt;
 8001c52:	4e40      	ldr	r6, [pc, #256]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x16c>)
static float PID(float Kp, float Ti, float Td, float varRef, float var, float limit)
{
  float error, out, derivative;

  error = varRef - var;
  integral_PID += Kp * error / Ti;
 8001c54:	edd5 8a00 	vldr	s17, [r5]
    case STOP_MOTOR:
      break;

    case SPEED_CONTROL:
      motor.speed = getMotorSpeed();
      motor.currentPID.ref = PID(motor.speedPID.kp, motor.speedPID.ki, motor.speedPID.kd, motor.speedPID.ref, motor.speed, motor.currentLimit);
 8001c58:	edd2 6a06 	vldr	s13, [r2, #24]
    {
    case STOP_MOTOR:
      break;

    case SPEED_CONTROL:
      motor.speed = getMotorSpeed();
 8001c5c:	8510      	strh	r0, [r2, #40]	; 0x28
static float errorPrev_PID = 0, integral_PID = 0;
static float PID(float Kp, float Ti, float Td, float varRef, float var, float limit)
{
  float error, out, derivative;

  error = varRef - var;
 8001c5e:	ee37 9ac9 	vsub.f32	s18, s15, s18
    case STOP_MOTOR:
      break;

    case SPEED_CONTROL:
      motor.speed = getMotorSpeed();
      motor.currentPID.ref = PID(motor.speedPID.kp, motor.speedPID.ki, motor.speedPID.kd, motor.speedPID.ref, motor.speed, motor.currentLimit);
 8001c62:	edd2 9a09 	vldr	s19, [r2, #36]	; 0x24
static float PID(float Kp, float Ti, float Td, float varRef, float var, float limit)
{
  float error, out, derivative;

  error = varRef - var;
  integral_PID += Kp * error / Ti;
 8001c66:	ee27 8a09 	vmul.f32	s16, s14, s18
  derivative = Kp * Td * (error - errorPrev_PID) / dt;
 8001c6a:	ee27 7a26 	vmul.f32	s14, s14, s13
static float PID(float Kp, float Ti, float Td, float varRef, float var, float limit)
{
  float error, out, derivative;

  error = varRef - var;
  integral_PID += Kp * error / Ti;
 8001c6e:	eec8 7a06 	vdiv.f32	s15, s16, s12
 8001c72:	ee77 8aa8 	vadd.f32	s17, s15, s17
  derivative = Kp * Td * (error - errorPrev_PID) / dt;
 8001c76:	edd6 7a00 	vldr	s15, [r6]
static float PID(float Kp, float Ti, float Td, float varRef, float var, float limit)
{
  float error, out, derivative;

  error = varRef - var;
  integral_PID += Kp * error / Ti;
 8001c7a:	edc5 8a00 	vstr	s17, [r5]
  derivative = Kp * Td * (error - errorPrev_PID) / dt;
 8001c7e:	ee79 7a67 	vsub.f32	s15, s18, s15
 8001c82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c86:	ee17 0a90 	vmov	r0, s15
 8001c8a:	f7fe fc1d 	bl	80004c8 <__aeabi_f2d>
 8001c8e:	a32a      	add	r3, pc, #168	; (adr r3, 8001d38 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	f7fe fd96 	bl	80007c4 <__aeabi_ddiv>
 8001c98:	f7fe ff4c 	bl	8000b34 <__aeabi_d2f>
  errorPrev_PID = error;

  if (integral_PID > INT_THRESHOLD_MAX_SPEED)
 8001c9c:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001ca0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8001ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
  float error, out, derivative;

  error = varRef - var;
  integral_PID += Kp * error / Ti;
  derivative = Kp * Td * (error - errorPrev_PID) / dt;
 8001ca8:	ee07 0a10 	vmov	s14, r0
  errorPrev_PID = error;
 8001cac:	ed86 9a00 	vstr	s18, [r6]

  if (integral_PID > INT_THRESHOLD_MAX_SPEED)
 8001cb0:	dc06      	bgt.n	8001cc0 <HAL_TIM_PeriodElapsedCallback+0xd8>
    integral_PID = INT_THRESHOLD_MAX_SPEED;
  else if (integral_PID < INT_THRESHOLD_MIN_SPEED)
 8001cb2:	eefb 7a0e 	vmov.f32	s15, #190	; 0xc1f00000 -30.0
 8001cb6:	eef4 8ae7 	vcmpe.f32	s17, s15
 8001cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cbe:	d501      	bpl.n	8001cc4 <HAL_TIM_PeriodElapsedCallback+0xdc>
    integral_PID = INT_THRESHOLD_MIN_SPEED;
 8001cc0:	edc5 7a00 	vstr	s15, [r5]

  out = Kp * error + integral_PID + derivative;
 8001cc4:	ed95 1a00 	vldr	s2, [r5]
 8001cc8:	ee38 8a01 	vadd.f32	s16, s16, s2
 8001ccc:	ee38 1a07 	vadd.f32	s2, s16, s14
  return speedRaw;
}

static float limitVar(float var, float limit) // returns value in range <0:limit>
{
  if (var > limit)
 8001cd0:	eef4 9ac1 	vcmpe.f32	s19, s2
 8001cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd8:	d409      	bmi.n	8001cee <HAL_TIM_PeriodElapsedCallback+0x106>
    var = limit;
  else if (var < 0)
    var = 0;
 8001cda:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8001cde:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8001d58 <HAL_TIM_PeriodElapsedCallback+0x170>
 8001ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce6:	bf48      	it	mi
 8001ce8:	eeb0 1a67 	vmovmi.f32	s2, s15
 8001cec:	e001      	b.n	8001cf2 <HAL_TIM_PeriodElapsedCallback+0x10a>
}

static float limitVar(float var, float limit) // returns value in range <0:limit>
{
  if (var > limit)
    var = limit;
 8001cee:	eeb0 1a69 	vmov.f32	s2, s19
}

static float getMotorCurrentRaw(void)
{
  uint32_t current = 0;
  uint32_t adcCpy = adcResult[0];
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x160>)
  current = (uint32_t)((MAX_CURRENT * adcCpy) / MAX_12_BIT);
  return ((float)current) / 1000;
 8001cf4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001d4c <HAL_TIM_PeriodElapsedCallback+0x164>
 8001cf8:	681a      	ldr	r2, [r3, #0]

    case SPEED_CONTROL:
      motor.speed = getMotorSpeed();
      motor.currentPID.ref = PID(motor.speedPID.kp, motor.speedPID.ki, motor.speedPID.kd, motor.speedPID.ref, motor.speed, motor.currentLimit);
      motor.current = getMotorCurrentRaw();
      gamma = PI(motor.currentPID.kp, motor.currentPID.ki, motor.currentPID.ref, motor.current, 1);
 8001cfa:	edd4 0a01 	vldr	s1, [r4, #4]
 8001cfe:	ed94 0a00 	vldr	s0, [r4]
    case STOP_MOTOR:
      break;

    case SPEED_CONTROL:
      motor.speed = getMotorSpeed();
      motor.currentPID.ref = PID(motor.speedPID.kp, motor.speedPID.ki, motor.speedPID.kd, motor.speedPID.ref, motor.speed, motor.currentLimit);
 8001d02:	ed84 1a03 	vstr	s2, [r4, #12]
static float getMotorCurrentRaw(void)
{
  uint32_t current = 0;
  uint32_t adcCpy = adcResult[0];
  current = (uint32_t)((MAX_CURRENT * adcCpy) / MAX_12_BIT);
  return ((float)current) / 1000;
 8001d06:	f247 5330 	movw	r3, #30000	; 0x7530
 8001d0a:	4353      	muls	r3, r2
 8001d0c:	0b1b      	lsrs	r3, r3, #12
 8001d0e:	ee07 3a90 	vmov	s15, r3
 8001d12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d16:	eec7 1a87 	vdiv.f32	s3, s15, s14
      break;

    case SPEED_CONTROL:
      motor.speed = getMotorSpeed();
      motor.currentPID.ref = PID(motor.speedPID.kp, motor.speedPID.ki, motor.speedPID.kd, motor.speedPID.ref, motor.speed, motor.currentLimit);
      motor.current = getMotorCurrentRaw();
 8001d1a:	edc4 1a08 	vstr	s3, [r4, #32]
      setDutyCycle(gamma);
      break;

    case TORQUE_CONTROL:
      motor.current = getMotorCurrentRaw();
      gamma = PI(motor.currentPID.kp, motor.currentPID.ki, motor.currentPID.ref, motor.current, 1);
 8001d1e:	f7ff fecd 	bl	8001abc <PI.constprop.0>
{
  if (htim->Instance == TIM4) // 100 us
    {
      motorControl();
    }
}
 8001d22:	ecbd 8b04 	vpop	{d8-d9}
 8001d26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      break;

    case TORQUE_CONTROL:
      motor.current = getMotorCurrentRaw();
      gamma = PI(motor.currentPID.kp, motor.currentPID.ki, motor.currentPID.ref, motor.current, 1);
      setDutyCycle(gamma);
 8001d2a:	f000 ba57 	b.w	80021dc <setDutyCycle>
{
  if (htim->Instance == TIM4) // 100 us
    {
      motorControl();
    }
}
 8001d2e:	ecbd 8b04 	vpop	{d8-d9}
 8001d32:	bd70      	pop	{r4, r5, r6, pc}
 8001d34:	f3af 8000 	nop.w
 8001d38:	eb1c432d 	.word	0xeb1c432d
 8001d3c:	3f1a36e2 	.word	0x3f1a36e2
 8001d40:	40000800 	.word	0x40000800
 8001d44:	20000000 	.word	0x20000000
 8001d48:	20000bd8 	.word	0x20000bd8
 8001d4c:	447a0000 	.word	0x447a0000
 8001d50:	20000be4 	.word	0x20000be4
 8001d54:	20000be8 	.word	0x20000be8
 8001d58:	00000000 	.word	0x00000000

08001d5c <stopControlInterrupt>:

void stopControlInterrupt(void)
{
  HAL_TIM_Base_Stop_IT(&htim4);
 8001d5c:	4801      	ldr	r0, [pc, #4]	; (8001d64 <stopControlInterrupt+0x8>)
 8001d5e:	f003 bee8 	b.w	8005b32 <HAL_TIM_Base_Stop_IT>
 8001d62:	bf00      	nop
 8001d64:	20001888 	.word	0x20001888

08001d68 <stopMotor>:
{
  HAL_TIM_Base_Start_IT(&htim4);
}

static void stopMotor(void)
{
 8001d68:	b508      	push	{r3, lr}
  xprintf("Silnik STOP\n");
 8001d6a:	480b      	ldr	r0, [pc, #44]	; (8001d98 <stopMotor+0x30>)
 8001d6c:	f000 fd47 	bl	80027fe <xprintf>
  RED_LED_OFF();
 8001d70:	2200      	movs	r2, #0
 8001d72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d76:	4809      	ldr	r0, [pc, #36]	; (8001d9c <stopMotor+0x34>)
 8001d78:	f002 f9e0 	bl	800413c <HAL_GPIO_WritePin>
  stopPWM();
 8001d7c:	f000 fa4e 	bl	800221c <stopPWM>
  stopADC();
 8001d80:	f7ff ff04 	bl	8001b8c <stopADC>
  stopControlInterrupt();
 8001d84:	f7ff ffea 	bl	8001d5c <stopControlInterrupt>
  integral_PI = 0; // przerobic
 8001d88:	4a05      	ldr	r2, [pc, #20]	; (8001da0 <stopMotor+0x38>)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	6013      	str	r3, [r2, #0]
  integral_PID = 0;
 8001d8e:	4a05      	ldr	r2, [pc, #20]	; (8001da4 <stopMotor+0x3c>)
 8001d90:	6013      	str	r3, [r2, #0]
  errorPrev_PID = 0;
 8001d92:	4a05      	ldr	r2, [pc, #20]	; (8001da8 <stopMotor+0x40>)
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	bd08      	pop	{r3, pc}
 8001d98:	0801d992 	.word	0x0801d992
 8001d9c:	40021800 	.word	0x40021800
 8001da0:	200013f0 	.word	0x200013f0
 8001da4:	20000be4 	.word	0x20000be4
 8001da8:	20000be8 	.word	0x20000be8

08001dac <startControlInterrupt>:
  HAL_TIM_Base_Stop_IT(&htim4);
}

void startControlInterrupt(void)
{
  HAL_TIM_Base_Start_IT(&htim4);
 8001dac:	4801      	ldr	r0, [pc, #4]	; (8001db4 <startControlInterrupt+0x8>)
 8001dae:	f003 beb5 	b.w	8005b1c <HAL_TIM_Base_Start_IT>
 8001db2:	bf00      	nop
 8001db4:	20001888 	.word	0x20001888

08001db8 <startMotor>:
  integral_PID = 0;
  errorPrev_PID = 0;
}

static void startMotor(void)
{
 8001db8:	b510      	push	{r4, lr}
  xprintf("Silnik START...\n");
 8001dba:	480f      	ldr	r0, [pc, #60]	; (8001df8 <startMotor+0x40>)
  RED_LED_ON();
  setSwitchingFrequency(motor.frequency);
 8001dbc:	4c0f      	ldr	r4, [pc, #60]	; (8001dfc <startMotor+0x44>)
  errorPrev_PID = 0;
}

static void startMotor(void)
{
  xprintf("Silnik START...\n");
 8001dbe:	f000 fd1e 	bl	80027fe <xprintf>
  RED_LED_ON();
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dc8:	480d      	ldr	r0, [pc, #52]	; (8001e00 <startMotor+0x48>)
 8001dca:	f002 f9b7 	bl	800413c <HAL_GPIO_WritePin>
  setSwitchingFrequency(motor.frequency);
 8001dce:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8001dd0:	f000 f9f4 	bl	80021bc <setSwitchingFrequency>
  setDutyCycle(motor.dutyCycle);
 8001dd4:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8001dd8:	f000 fa00 	bl	80021dc <setDutyCycle>
  startADC();
 8001ddc:	f7ff fecc 	bl	8001b78 <startADC>
  startPWM();
 8001de0:	f000 fa0e 	bl	8002200 <startPWM>

  if (motor.state != PWM_CONTROL)
 8001de4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8001de8:	2b03      	cmp	r3, #3
 8001dea:	d003      	beq.n	8001df4 <startMotor+0x3c>
    startControlInterrupt();
}
 8001dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  setDutyCycle(motor.dutyCycle);
  startADC();
  startPWM();

  if (motor.state != PWM_CONTROL)
    startControlInterrupt();
 8001df0:	f7ff bfdc 	b.w	8001dac <startControlInterrupt>
 8001df4:	bd10      	pop	{r4, pc}
 8001df6:	bf00      	nop
 8001df8:	0801d99f 	.word	0x0801d99f
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	40021800 	.word	0x40021800

08001e04 <updateMotorState>:
}

void updateMotorState(void)
{
  newMotorState = true;
 8001e04:	4b01      	ldr	r3, [pc, #4]	; (8001e0c <updateMotorState+0x8>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
 8001e0a:	4770      	bx	lr
 8001e0c:	20000be0 	.word	0x20000be0

08001e10 <motorCheck>:
}

void motorCheck(void)
{
  if (!newMotorState)
 8001e10:	4b52      	ldr	r3, [pc, #328]	; (8001f5c <motorCheck+0x14c>)
 8001e12:	781a      	ldrb	r2, [r3, #0]
{
  newMotorState = true;
}

void motorCheck(void)
{
 8001e14:	b513      	push	{r0, r1, r4, lr}
  if (!newMotorState)
 8001e16:	2a00      	cmp	r2, #0
 8001e18:	f000 809e 	beq.w	8001f58 <motorCheck+0x148>
    return;

  newMotorState = false;

  switch (motor.state)
 8001e1c:	4c50      	ldr	r4, [pc, #320]	; (8001f60 <motorCheck+0x150>)
void motorCheck(void)
{
  if (!newMotorState)
    return;

  newMotorState = false;
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]

  switch (motor.state)
 8001e22:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	f200 8096 	bhi.w	8001f58 <motorCheck+0x148>
 8001e2c:	e8df f003 	tbb	[pc, r3]
 8001e30:	75042b02 	.word	0x75042b02
    {
    case STOP_MOTOR:
      motor.stop();
 8001e34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e36:	e08b      	b.n	8001f50 <motorCheck+0x140>
      break;

    case TORQUE_CONTROL:
      xprintf("***************************************\n");
 8001e38:	484a      	ldr	r0, [pc, #296]	; (8001f64 <motorCheck+0x154>)
 8001e3a:	f000 fce0 	bl	80027fe <xprintf>
      xprintf("Odebrane dane:\n");
 8001e3e:	484a      	ldr	r0, [pc, #296]	; (8001f68 <motorCheck+0x158>)
 8001e40:	f000 fcdd 	bl	80027fe <xprintf>
      xprintf("Prad zadany: %d A\n", (uint16_t)(motor.currentPID.ref));
 8001e44:	edd4 7a03 	vldr	s15, [r4, #12]
 8001e48:	4848      	ldr	r0, [pc, #288]	; (8001f6c <motorCheck+0x15c>)
 8001e4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e4e:	edcd 7a01 	vstr	s15, [sp, #4]
 8001e52:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8001e56:	f000 fcd2 	bl	80027fe <xprintf>
      xprintf("Kp: %s\n", fts04(motor.currentPID.kp));
 8001e5a:	ed94 0a00 	vldr	s0, [r4]
 8001e5e:	f000 fb57 	bl	8002510 <fts04>
 8001e62:	4601      	mov	r1, r0
 8001e64:	4842      	ldr	r0, [pc, #264]	; (8001f70 <motorCheck+0x160>)
 8001e66:	f000 fcca 	bl	80027fe <xprintf>
      xprintf("Ki: %s\n", fts04(motor.currentPID.ki));
 8001e6a:	ed94 0a01 	vldr	s0, [r4, #4]
 8001e6e:	f000 fb4f 	bl	8002510 <fts04>
 8001e72:	4601      	mov	r1, r0
 8001e74:	483f      	ldr	r0, [pc, #252]	; (8001f74 <motorCheck+0x164>)
 8001e76:	f000 fcc2 	bl	80027fe <xprintf>
      xprintf("Czestotliwosc modulacji: %d Hz\n", motor.frequency);
 8001e7a:	483f      	ldr	r0, [pc, #252]	; (8001f78 <motorCheck+0x168>)
 8001e7c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001e7e:	f000 fcbe 	bl	80027fe <xprintf>
      xprintf("Regulacja momentu\n");
 8001e82:	483e      	ldr	r0, [pc, #248]	; (8001f7c <motorCheck+0x16c>)
 8001e84:	e061      	b.n	8001f4a <motorCheck+0x13a>
      motor.start();
      break;

    case SPEED_CONTROL:
      xprintf("***************************************\n");
 8001e86:	4837      	ldr	r0, [pc, #220]	; (8001f64 <motorCheck+0x154>)
 8001e88:	f000 fcb9 	bl	80027fe <xprintf>
      xprintf("Odebrane dane:\n");
 8001e8c:	4836      	ldr	r0, [pc, #216]	; (8001f68 <motorCheck+0x158>)
 8001e8e:	f000 fcb6 	bl	80027fe <xprintf>
      xprintf("Predkosc zadana: %d obr/min\n", (uint16_t)(motor.speedPID.ref));
 8001e92:	edd4 7a07 	vldr	s15, [r4, #28]
 8001e96:	483a      	ldr	r0, [pc, #232]	; (8001f80 <motorCheck+0x170>)
 8001e98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e9c:	edcd 7a01 	vstr	s15, [sp, #4]
 8001ea0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8001ea4:	f000 fcab 	bl	80027fe <xprintf>
      xprintf("Kp pradu: %s\n", fts04(motor.currentPID.kp));
 8001ea8:	ed94 0a00 	vldr	s0, [r4]
 8001eac:	f000 fb30 	bl	8002510 <fts04>
 8001eb0:	4601      	mov	r1, r0
 8001eb2:	4834      	ldr	r0, [pc, #208]	; (8001f84 <motorCheck+0x174>)
 8001eb4:	f000 fca3 	bl	80027fe <xprintf>
      xprintf("Ki pradu: %s\n", fts04(motor.currentPID.ki));
 8001eb8:	ed94 0a01 	vldr	s0, [r4, #4]
 8001ebc:	f000 fb28 	bl	8002510 <fts04>
 8001ec0:	4601      	mov	r1, r0
 8001ec2:	4831      	ldr	r0, [pc, #196]	; (8001f88 <motorCheck+0x178>)
 8001ec4:	f000 fc9b 	bl	80027fe <xprintf>
      xprintf("Kp predkosci: %s\n", fts04(motor.speedPID.kp));
 8001ec8:	ed94 0a04 	vldr	s0, [r4, #16]
 8001ecc:	f000 fb20 	bl	8002510 <fts04>
 8001ed0:	4601      	mov	r1, r0
 8001ed2:	482e      	ldr	r0, [pc, #184]	; (8001f8c <motorCheck+0x17c>)
 8001ed4:	f000 fc93 	bl	80027fe <xprintf>
      xprintf("Ki predkosci: %s\n", fts04(motor.speedPID.ki));
 8001ed8:	ed94 0a05 	vldr	s0, [r4, #20]
 8001edc:	f000 fb18 	bl	8002510 <fts04>
 8001ee0:	4601      	mov	r1, r0
 8001ee2:	482b      	ldr	r0, [pc, #172]	; (8001f90 <motorCheck+0x180>)
 8001ee4:	f000 fc8b 	bl	80027fe <xprintf>
      xprintf("Kd predkosci: %s\n", fts04(motor.speedPID.kd));
 8001ee8:	ed94 0a06 	vldr	s0, [r4, #24]
 8001eec:	f000 fb10 	bl	8002510 <fts04>
 8001ef0:	4601      	mov	r1, r0
 8001ef2:	4828      	ldr	r0, [pc, #160]	; (8001f94 <motorCheck+0x184>)
 8001ef4:	f000 fc83 	bl	80027fe <xprintf>
      xprintf("Czestotliwosc modulacji: %d Hz\n", motor.frequency);
 8001ef8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001efa:	481f      	ldr	r0, [pc, #124]	; (8001f78 <motorCheck+0x168>)
 8001efc:	f000 fc7f 	bl	80027fe <xprintf>
      xprintf("Ograniczenie pradu: %d A\n", (uint16_t)(motor.currentLimit));
 8001f00:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8001f04:	4824      	ldr	r0, [pc, #144]	; (8001f98 <motorCheck+0x188>)
 8001f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f0a:	edcd 7a01 	vstr	s15, [sp, #4]
 8001f0e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8001f12:	f000 fc74 	bl	80027fe <xprintf>
      xprintf("Regulacja predkosci\n");
 8001f16:	4821      	ldr	r0, [pc, #132]	; (8001f9c <motorCheck+0x18c>)
 8001f18:	e017      	b.n	8001f4a <motorCheck+0x13a>
      motor.start();
      break;

    case PWM_CONTROL:
      xprintf("***************************************\n");
 8001f1a:	4812      	ldr	r0, [pc, #72]	; (8001f64 <motorCheck+0x154>)
 8001f1c:	f000 fc6f 	bl	80027fe <xprintf>
      xprintf("Odebrane dane:\n");
 8001f20:	4811      	ldr	r0, [pc, #68]	; (8001f68 <motorCheck+0x158>)
 8001f22:	f000 fc6c 	bl	80027fe <xprintf>
      xprintf("Czestotliwosc modulacji: %d Hz\n", motor.frequency);
 8001f26:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001f28:	4813      	ldr	r0, [pc, #76]	; (8001f78 <motorCheck+0x168>)
 8001f2a:	f000 fc68 	bl	80027fe <xprintf>
      xprintf("Wspolczynnik wypelnienia: %d %%\n", (uint32_t)(motor.dutyCycle * 100));
 8001f2e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8001f32:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001fa0 <motorCheck+0x190>
 8001f36:	481b      	ldr	r0, [pc, #108]	; (8001fa4 <motorCheck+0x194>)
 8001f38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f40:	ee17 1a90 	vmov	r1, s15
 8001f44:	f000 fc5b 	bl	80027fe <xprintf>
      xprintf("Sterowanie PWM\n");
 8001f48:	4817      	ldr	r0, [pc, #92]	; (8001fa8 <motorCheck+0x198>)
 8001f4a:	f000 fc58 	bl	80027fe <xprintf>
      motor.start();
 8001f4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
      break;

    default:
      break;
    }
}
 8001f50:	b002      	add	sp, #8
 8001f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      xprintf("***************************************\n");
      xprintf("Odebrane dane:\n");
      xprintf("Czestotliwosc modulacji: %d Hz\n", motor.frequency);
      xprintf("Wspolczynnik wypelnienia: %d %%\n", (uint32_t)(motor.dutyCycle * 100));
      xprintf("Sterowanie PWM\n");
      motor.start();
 8001f56:	4718      	bx	r3
      break;

    default:
      break;
    }
}
 8001f58:	b002      	add	sp, #8
 8001f5a:	bd10      	pop	{r4, pc}
 8001f5c:	20000be0 	.word	0x20000be0
 8001f60:	20000000 	.word	0x20000000
 8001f64:	0801d9b0 	.word	0x0801d9b0
 8001f68:	0801d9d9 	.word	0x0801d9d9
 8001f6c:	0801d9e9 	.word	0x0801d9e9
 8001f70:	0801d9fc 	.word	0x0801d9fc
 8001f74:	0801da04 	.word	0x0801da04
 8001f78:	0801da0c 	.word	0x0801da0c
 8001f7c:	0801da2c 	.word	0x0801da2c
 8001f80:	0801da3f 	.word	0x0801da3f
 8001f84:	0801da5c 	.word	0x0801da5c
 8001f88:	0801da6a 	.word	0x0801da6a
 8001f8c:	0801da78 	.word	0x0801da78
 8001f90:	0801da8a 	.word	0x0801da8a
 8001f94:	0801da9c 	.word	0x0801da9c
 8001f98:	0801daae 	.word	0x0801daae
 8001f9c:	0801dac8 	.word	0x0801dac8
 8001fa0:	42c80000 	.word	0x42c80000
 8001fa4:	0801dadd 	.word	0x0801dadd
 8001fa8:	0801dafe 	.word	0x0801dafe

08001fac <guiInit>:
#include "guiTask.h"

extern WM_HWIN WindowInit(void);

void guiInit(void)
{
 8001fac:	b508      	push	{r3, lr}
  WM_SetCreateFlags(WM_CF_MEMDEV);
 8001fae:	2004      	movs	r0, #4
 8001fb0:	f008 fd72 	bl	800aa98 <WM_SetCreateFlags>
  // WM_MULTIBUF_Enable(1);
  GUI_Init();
 8001fb4:	f00e f96c 	bl	8010290 <GUI_Init>

  GUI_Clear();
 8001fb8:	f00e f930 	bl	801021c <GUI_Clear>
  WindowInit();
}
 8001fbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  WM_SetCreateFlags(WM_CF_MEMDEV);
  // WM_MULTIBUF_Enable(1);
  GUI_Init();

  GUI_Clear();
  WindowInit();
 8001fc0:	f7ff bb40 	b.w	8001644 <WindowInit>

08001fc4 <guiRefresh>:
      GUI_TOUCH_StoreStateEx(&TS_State);
    }
}

void guiRefresh(void)
{
 8001fc4:	b510      	push	{r4, lr}
 8001fc6:	b086      	sub	sp, #24
  GUI_PID_STATE TS_State;
  static TS_StateTypeDef prev_state;
  __IO TS_StateTypeDef  ts;
  uint16_t xDiff, yDiff;

  BSP_TS_GetState((TS_StateTypeDef *)&ts);
 8001fc8:	a801      	add	r0, sp, #4
 8001fca:	f001 fa1d 	bl	8003408 <BSP_TS_GetState>

  TS_State.Pressed = ts.TouchDetected;
 8001fce:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001fd2:	f88d 3014 	strb.w	r3, [sp, #20]

  xDiff = (prev_state.X > ts.X) ? (prev_state.X - ts.X) : (ts.X - prev_state.X);
 8001fd6:	4b20      	ldr	r3, [pc, #128]	; (8002058 <guiRefresh+0x94>)
 8001fd8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8001fdc:	8858      	ldrh	r0, [r3, #2]
  yDiff = (prev_state.Y > ts.Y) ? (prev_state.Y - ts.Y) : (ts.Y - prev_state.Y);

  if ((prev_state.TouchDetected != ts.TouchDetected ) ||
 8001fde:	881c      	ldrh	r4, [r3, #0]

  BSP_TS_GetState((TS_StateTypeDef *)&ts);

  TS_State.Pressed = ts.TouchDetected;

  xDiff = (prev_state.X > ts.X) ? (prev_state.X - ts.X) : (ts.X - prev_state.X);
 8001fe0:	b292      	uxth	r2, r2
 8001fe2:	4290      	cmp	r0, r2
 8001fe4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  yDiff = (prev_state.Y > ts.Y) ? (prev_state.Y - ts.Y) : (ts.Y - prev_state.Y);
 8001fe8:	f8bd 1008 	ldrh.w	r1, [sp, #8]

  BSP_TS_GetState((TS_StateTypeDef *)&ts);

  TS_State.Pressed = ts.TouchDetected;

  xDiff = (prev_state.X > ts.X) ? (prev_state.X - ts.X) : (ts.X - prev_state.X);
 8001fec:	bf8c      	ite	hi
 8001fee:	1a80      	subhi	r0, r0, r2
 8001ff0:	1a10      	subls	r0, r2, r0
  yDiff = (prev_state.Y > ts.Y) ? (prev_state.Y - ts.Y) : (ts.Y - prev_state.Y);
 8001ff2:	889a      	ldrh	r2, [r3, #4]
 8001ff4:	b289      	uxth	r1, r1
 8001ff6:	428a      	cmp	r2, r1
 8001ff8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8001ffc:	bf8c      	ite	hi
 8001ffe:	1a52      	subhi	r2, r2, r1
 8002000:	1a8a      	subls	r2, r1, r2

  if ((prev_state.TouchDetected != ts.TouchDetected ) ||
 8002002:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8002006:	b289      	uxth	r1, r1
 8002008:	428c      	cmp	r4, r1

  BSP_TS_GetState((TS_StateTypeDef *)&ts);

  TS_State.Pressed = ts.TouchDetected;

  xDiff = (prev_state.X > ts.X) ? (prev_state.X - ts.X) : (ts.X - prev_state.X);
 800200a:	b280      	uxth	r0, r0
  yDiff = (prev_state.Y > ts.Y) ? (prev_state.Y - ts.Y) : (ts.Y - prev_state.Y);
 800200c:	b292      	uxth	r2, r2

  if ((prev_state.TouchDetected != ts.TouchDetected ) ||
 800200e:	d103      	bne.n	8002018 <guiRefresh+0x54>
 8002010:	2803      	cmp	r0, #3
 8002012:	d801      	bhi.n	8002018 <guiRefresh+0x54>
      (xDiff > 3 ) ||
 8002014:	2a03      	cmp	r2, #3
 8002016:	d91b      	bls.n	8002050 <guiRefresh+0x8c>
      (yDiff > 3))
    {
      prev_state.TouchDetected = ts.TouchDetected;
 8002018:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800201c:	801a      	strh	r2, [r3, #0]

      if ((ts.X != 0) &&  (ts.Y != 0))
 800201e:	f8bd 2006 	ldrh.w	r2, [sp, #6]

  if ((prev_state.TouchDetected != ts.TouchDetected ) ||
      (xDiff > 3 ) ||
      (yDiff > 3))
    {
      prev_state.TouchDetected = ts.TouchDetected;
 8002022:	490d      	ldr	r1, [pc, #52]	; (8002058 <guiRefresh+0x94>)

      if ((ts.X != 0) &&  (ts.Y != 0))
 8002024:	b292      	uxth	r2, r2
 8002026:	b14a      	cbz	r2, 800203c <guiRefresh+0x78>
 8002028:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800202c:	b292      	uxth	r2, r2
 800202e:	b12a      	cbz	r2, 800203c <guiRefresh+0x78>
        {
          prev_state.X = ts.X;
 8002030:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002034:	804a      	strh	r2, [r1, #2]
          prev_state.Y = ts.Y;
 8002036:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800203a:	808a      	strh	r2, [r1, #4]
        }
// ?
      TS_State.Layer = 0;
 800203c:	2200      	movs	r2, #0
 800203e:	f88d 2015 	strb.w	r2, [sp, #21]
      TS_State.x = prev_state.X;
      TS_State.y = prev_state.Y;

      GUI_TOUCH_StoreStateEx(&TS_State);
 8002042:	a803      	add	r0, sp, #12
          prev_state.X = ts.X;
          prev_state.Y = ts.Y;
        }
// ?
      TS_State.Layer = 0;
      TS_State.x = prev_state.X;
 8002044:	885a      	ldrh	r2, [r3, #2]
      TS_State.y = prev_state.Y;
 8002046:	889b      	ldrh	r3, [r3, #4]
          prev_state.X = ts.X;
          prev_state.Y = ts.Y;
        }
// ?
      TS_State.Layer = 0;
      TS_State.x = prev_state.X;
 8002048:	9203      	str	r2, [sp, #12]
      TS_State.y = prev_state.Y;
 800204a:	9304      	str	r3, [sp, #16]

      GUI_TOUCH_StoreStateEx(&TS_State);
 800204c:	f00d fbc0 	bl	800f7d0 <GUI_TOUCH_StoreStateEx>
}

void guiRefresh(void)
{
  touchScreenUpdate();
  GUI_Exec(); // Update widgets
 8002050:	f00d fe6a 	bl	800fd28 <GUI_Exec>
 8002054:	b006      	add	sp, #24
 8002056:	bd10      	pop	{r4, pc}
 8002058:	200013f4 	.word	0x200013f4

0800205c <clearRxBuffer>:
{
  return &rxData;
}

static void clearRxBuffer(void)
{
 800205c:	b510      	push	{r4, lr}
  memset(rxData.buffer, 0, USART_BUFFER_SIZE);
 800205e:	4c05      	ldr	r4, [pc, #20]	; (8002074 <clearRxBuffer+0x18>)
 8002060:	22ff      	movs	r2, #255	; 0xff
 8002062:	2100      	movs	r1, #0
 8002064:	4620      	mov	r0, r4
 8002066:	f016 fe00 	bl	8018c6a <memset>
  rxData.pos = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8002070:	bd10      	pop	{r4, pc}
 8002072:	bf00      	nop
 8002074:	2000003c 	.word	0x2000003c

08002078 <getUartRxData>:
};

uartBuffer_t *getUartRxData(void)
{
  return &rxData;
}
 8002078:	4800      	ldr	r0, [pc, #0]	; (800207c <getUartRxData+0x4>)
 800207a:	4770      	bx	lr
 800207c:	2000003c 	.word	0x2000003c

08002080 <sendConsole>:
{
  xprintf("RxBuff: %s\n", rxData.buffer);
}

void sendConsole(char data)
{
 8002080:	b507      	push	{r0, r1, r2, lr}
 8002082:	a902      	add	r1, sp, #8
  HAL_UART_Transmit_IT(&huart1, (uint8_t *)&data, sizeof(uint8_t));
 8002084:	2201      	movs	r2, #1
{
  xprintf("RxBuff: %s\n", rxData.buffer);
}

void sendConsole(char data)
{
 8002086:	f801 0d01 	strb.w	r0, [r1, #-1]!
  HAL_UART_Transmit_IT(&huart1, (uint8_t *)&data, sizeof(uint8_t));
 800208a:	4806      	ldr	r0, [pc, #24]	; (80020a4 <sendConsole+0x24>)
 800208c:	f004 f9cc 	bl	8006428 <HAL_UART_Transmit_IT>
  semaphore = true;
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <sendConsole+0x28>)
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
  while (semaphore);
 8002096:	781a      	ldrb	r2, [r3, #0]
 8002098:	2a00      	cmp	r2, #0
 800209a:	d1fc      	bne.n	8002096 <sendConsole+0x16>
}
 800209c:	b003      	add	sp, #12
 800209e:	f85d fb04 	ldr.w	pc, [sp], #4
 80020a2:	bf00      	nop
 80020a4:	20001a24 	.word	0x20001a24
 80020a8:	200013fd 	.word	0x200013fd

080020ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  if (huart->Instance == USART1)
 80020ac:	6802      	ldr	r2, [r0, #0]
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_UART_RxCpltCallback+0x28>)
 80020b0:	429a      	cmp	r2, r3
  semaphore = true;
  while (semaphore);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020b2:	b510      	push	{r4, lr}
  if (huart->Instance == USART1)
 80020b4:	d10d      	bne.n	80020d2 <HAL_UART_RxCpltCallback+0x26>
    {
      HAL_UART_Receive_IT(&huart1, &rxChar, 1);
 80020b6:	4c08      	ldr	r4, [pc, #32]	; (80020d8 <HAL_UART_RxCpltCallback+0x2c>)
 80020b8:	4808      	ldr	r0, [pc, #32]	; (80020dc <HAL_UART_RxCpltCallback+0x30>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	4621      	mov	r1, r4
 80020be:	f004 f9d2 	bl	8006466 <HAL_UART_Receive_IT>
      rxData.buffer[rxData.pos++] = rxChar;
 80020c2:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <HAL_UART_RxCpltCallback+0x34>)
 80020c4:	f893 20ff 	ldrb.w	r2, [r3, #255]	; 0xff
 80020c8:	1c51      	adds	r1, r2, #1
 80020ca:	f883 10ff 	strb.w	r1, [r3, #255]	; 0xff
 80020ce:	7821      	ldrb	r1, [r4, #0]
 80020d0:	5499      	strb	r1, [r3, r2]
 80020d2:	bd10      	pop	{r4, pc}
 80020d4:	40011000 	.word	0x40011000
 80020d8:	200013fc 	.word	0x200013fc
 80020dc:	20001a24 	.word	0x20001a24
 80020e0:	2000003c 	.word	0x2000003c

080020e4 <HAL_UART_TxCpltCallback>:
    }
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
  if (huart->Instance == USART1)
 80020e4:	6802      	ldr	r2, [r0, #0]
 80020e6:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <HAL_UART_TxCpltCallback+0x10>)
 80020e8:	429a      	cmp	r2, r3
    {
      semaphore = false;
 80020ea:	bf02      	ittt	eq
 80020ec:	4b02      	ldreq	r3, [pc, #8]	; (80020f8 <HAL_UART_TxCpltCallback+0x14>)
 80020ee:	2200      	moveq	r2, #0
 80020f0:	701a      	strbeq	r2, [r3, #0]
 80020f2:	4770      	bx	lr
 80020f4:	40011000 	.word	0x40011000
 80020f8:	200013fd 	.word	0x200013fd

080020fc <uartInit>:
    }
}

void uartInit(void)
{
 80020fc:	b538      	push	{r3, r4, r5, lr}
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200; // Prędkość transmisji równa 115200 bit/s
  huart1.Init.WordLength = UART_WORDLENGTH_8B; // Osiem bitów danych
 80020fe:	4a0f      	ldr	r2, [pc, #60]	; (800213c <uartInit+0x40>)
    }
}

void uartInit(void)
{
  huart1.Instance = USART1;
 8002100:	4c0f      	ldr	r4, [pc, #60]	; (8002140 <uartInit+0x44>)
  huart1.Init.BaudRate = 115200; // Prędkość transmisji równa 115200 bit/s
  huart1.Init.WordLength = UART_WORDLENGTH_8B; // Osiem bitów danych
 8002102:	2500      	movs	r5, #0
 8002104:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002108:	e884 002c 	stmia.w	r4, {r2, r3, r5}
  huart1.Init.StopBits = UART_STOPBITS_1; // Jeden bit stopu
  huart1.Init.Parity = UART_PARITY_NONE; // Brak bitu parzystości
  huart1.Init.Mode = UART_MODE_TX_RX; // Komunikacja w obie strony (nadawanie i odbieranie)
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE; // Brak sprzętowej kontroli przepływu
  huart1.Init.OverSampling = UART_OVERSAMPLING_16; // Nadpróbkowanie sygnału
  HAL_UART_Init(&huart1); // Inicjalizacja peryferium
 800210c:	4620      	mov	r0, r4
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200; // Prędkość transmisji równa 115200 bit/s
  huart1.Init.WordLength = UART_WORDLENGTH_8B; // Osiem bitów danych
  huart1.Init.StopBits = UART_STOPBITS_1; // Jeden bit stopu
  huart1.Init.Parity = UART_PARITY_NONE; // Brak bitu parzystości
  huart1.Init.Mode = UART_MODE_TX_RX; // Komunikacja w obie strony (nadawanie i odbieranie)
 800210e:	230c      	movs	r3, #12
 8002110:	6163      	str	r3, [r4, #20]
void uartInit(void)
{
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200; // Prędkość transmisji równa 115200 bit/s
  huart1.Init.WordLength = UART_WORDLENGTH_8B; // Osiem bitów danych
  huart1.Init.StopBits = UART_STOPBITS_1; // Jeden bit stopu
 8002112:	60e5      	str	r5, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE; // Brak bitu parzystości
 8002114:	6125      	str	r5, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX; // Komunikacja w obie strony (nadawanie i odbieranie)
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE; // Brak sprzętowej kontroli przepływu
 8002116:	61a5      	str	r5, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16; // Nadpróbkowanie sygnału
 8002118:	61e5      	str	r5, [r4, #28]
  HAL_UART_Init(&huart1); // Inicjalizacja peryferium
 800211a:	f004 f957 	bl	80063cc <HAL_UART_Init>

  HAL_NVIC_SetPriority(USART1_IRQn, 2, 0); // Ustawienie priorytetu przerwań
 800211e:	462a      	mov	r2, r5
 8002120:	2102      	movs	r1, #2
 8002122:	2025      	movs	r0, #37	; 0x25
 8002124:	f001 fc86 	bl	8003a34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn); // Włączenie przerwań peryferium USART1
 8002128:	2025      	movs	r0, #37	; 0x25
 800212a:	f001 fcb7 	bl	8003a9c <HAL_NVIC_EnableIRQ>

  HAL_UART_Receive_IT(&huart1, &rxChar, 1); // Rozpoczęcie nasłuchiwania w trybie przerwań
 800212e:	4620      	mov	r0, r4
 8002130:	2201      	movs	r2, #1
 8002132:	4904      	ldr	r1, [pc, #16]	; (8002144 <uartInit+0x48>)
}
 8002134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_UART_Init(&huart1); // Inicjalizacja peryferium

  HAL_NVIC_SetPriority(USART1_IRQn, 2, 0); // Ustawienie priorytetu przerwań
  HAL_NVIC_EnableIRQ(USART1_IRQn); // Włączenie przerwań peryferium USART1

  HAL_UART_Receive_IT(&huart1, &rxChar, 1); // Rozpoczęcie nasłuchiwania w trybie przerwań
 8002138:	f004 b995 	b.w	8006466 <HAL_UART_Receive_IT>
 800213c:	40011000 	.word	0x40011000
 8002140:	20001a24 	.word	0x20001a24
 8002144:	200013fc 	.word	0x200013fc

08002148 <changeLedState>:
  uint32_t lastExeTime;
} periodEvents_t;

static void changeLedState(void)
{
  GREEN_LED_TOGGLE();
 8002148:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800214c:	4801      	ldr	r0, [pc, #4]	; (8002154 <changeLedState+0xc>)
 800214e:	f001 bff9 	b.w	8004144 <HAL_GPIO_TogglePin>
 8002152:	bf00      	nop
 8002154:	40021800 	.word	0x40021800

08002158 <main>:
        }
    }
}

int main(void)
{
 8002158:	b580      	push	{r7, lr}
  boardInit();
 800215a:	f7ff fb7d 	bl	8001858 <boardInit>
{
  static uint32_t tick = 0;
  static uint8_t i;

  tick = HAL_GetTick();
  for (i = 0; i < eventsNum; i++)
 800215e:	4c14      	ldr	r4, [pc, #80]	; (80021b0 <main+0x58>)
static void doPeriodically(void)
{
  static uint32_t tick = 0;
  static uint8_t i;

  tick = HAL_GetTick();
 8002160:	4f14      	ldr	r7, [pc, #80]	; (80021b4 <main+0x5c>)
}

int main(void)
{
  boardInit();
  guiInit();
 8002162:	f7ff ff23 	bl	8001fac <guiInit>
 8002166:	4625      	mov	r5, r4

  while (1)
    {
      motorCheck();
 8002168:	f7ff fe52 	bl	8001e10 <motorCheck>
static void doPeriodically(void)
{
  static uint32_t tick = 0;
  static uint8_t i;

  tick = HAL_GetTick();
 800216c:	f001 fa08 	bl	8003580 <HAL_GetTick>
 8002170:	f8df 8040 	ldr.w	r8, [pc, #64]	; 80021b4 <main+0x5c>
  for (i = 0; i < eventsNum; i++)
    {
      if (tick - periodEvents[i].lastExeTime >= periodEvents[i].period)
 8002174:	4e10      	ldr	r6, [pc, #64]	; (80021b8 <main+0x60>)
static void doPeriodically(void)
{
  static uint32_t tick = 0;
  static uint8_t i;

  tick = HAL_GetTick();
 8002176:	6038      	str	r0, [r7, #0]
  for (i = 0; i < eventsNum; i++)
 8002178:	2300      	movs	r3, #0
 800217a:	7023      	strb	r3, [r4, #0]
 800217c:	782b      	ldrb	r3, [r5, #0]
 800217e:	2b03      	cmp	r3, #3
 8002180:	d8f2      	bhi.n	8002168 <main+0x10>
    {
      if (tick - periodEvents[i].lastExeTime >= periodEvents[i].period)
 8002182:	f04f 090c 	mov.w	r9, #12
 8002186:	fb09 f303 	mul.w	r3, r9, r3
 800218a:	18f0      	adds	r0, r6, r3
 800218c:	f8d8 2000 	ldr.w	r2, [r8]
 8002190:	6881      	ldr	r1, [r0, #8]
 8002192:	1a52      	subs	r2, r2, r1
 8002194:	6841      	ldr	r1, [r0, #4]
 8002196:	428a      	cmp	r2, r1
 8002198:	d306      	bcc.n	80021a8 <main+0x50>
        {
          periodEvents[i].callback();
 800219a:	58f3      	ldr	r3, [r6, r3]
 800219c:	4798      	blx	r3
          periodEvents[i].lastExeTime = tick;
 800219e:	7823      	ldrb	r3, [r4, #0]
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	fb09 6303 	mla	r3, r9, r3, r6
 80021a6:	609a      	str	r2, [r3, #8]
{
  static uint32_t tick = 0;
  static uint8_t i;

  tick = HAL_GetTick();
  for (i = 0; i < eventsNum; i++)
 80021a8:	782b      	ldrb	r3, [r5, #0]
 80021aa:	3301      	adds	r3, #1
 80021ac:	702b      	strb	r3, [r5, #0]
 80021ae:	e7e5      	b.n	800217c <main+0x24>
 80021b0:	20001404 	.word	0x20001404
 80021b4:	20001400 	.word	0x20001400
 80021b8:	20000140 	.word	0x20000140

080021bc <setSwitchingFrequency>:
extern TIM_HandleTypeDef htim5;

void setSwitchingFrequency(uint32_t freq)
{
  uint32_t period = TIMER5_CLOCK / (freq * 84);
  htim5.Init.Prescaler = 84 - 1;
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <setSwitchingFrequency+0x18>)
 80021be:	2253      	movs	r2, #83	; 0x53
 80021c0:	605a      	str	r2, [r3, #4]
  htim5.Init.Period = period;
 80021c2:	2254      	movs	r2, #84	; 0x54
 80021c4:	4350      	muls	r0, r2
 80021c6:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <setSwitchingFrequency+0x1c>)
 80021c8:	fbb2 f0f0 	udiv	r0, r2, r0
 80021cc:	60d8      	str	r0, [r3, #12]
  HAL_TIM_Base_Init(&htim5);
 80021ce:	4618      	mov	r0, r3
 80021d0:	f003 be8a 	b.w	8005ee8 <HAL_TIM_Base_Init>
 80021d4:	200018c4 	.word	0x200018c4
 80021d8:	0501bd00 	.word	0x0501bd00

080021dc <setDutyCycle>:
}

void setDutyCycle(float gamma)
{
  TIM5->CCR1 = htim5.Init.Period * gamma;
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <setDutyCycle+0x1c>)
 80021de:	edd3 7a03 	vldr	s15, [r3, #12]
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <setDutyCycle+0x20>)
 80021e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021e8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80021ec:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80021f0:	ed83 0a0d 	vstr	s0, [r3, #52]	; 0x34
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	200018c4 	.word	0x200018c4
 80021fc:	40000c00 	.word	0x40000c00

08002200 <startPWM>:
}

void startPWM(void)
{
 8002200:	b510      	push	{r4, lr}
  HAL_TIM_Base_Start(&htim5);
 8002202:	4c05      	ldr	r4, [pc, #20]	; (8002218 <startPWM+0x18>)
 8002204:	4620      	mov	r0, r4
 8002206:	f003 fc65 	bl	8005ad4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800220a:	4620      	mov	r0, r4
 800220c:	2100      	movs	r1, #0
}
 800220e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void startPWM(void)
{
  HAL_TIM_Base_Start(&htim5);
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8002212:	f003 bf3f 	b.w	8006094 <HAL_TIM_PWM_Start>
 8002216:	bf00      	nop
 8002218:	200018c4 	.word	0x200018c4

0800221c <stopPWM>:
}

void stopPWM(void)
{
 800221c:	b510      	push	{r4, lr}
  HAL_TIM_Base_Stop(&htim5);
 800221e:	4c05      	ldr	r4, [pc, #20]	; (8002234 <stopPWM+0x18>)
 8002220:	4620      	mov	r0, r4
 8002222:	f003 fc64 	bl	8005aee <HAL_TIM_Base_Stop>
  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8002226:	4620      	mov	r0, r4
 8002228:	2100      	movs	r1, #0
}
 800222a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void stopPWM(void)
{
  HAL_TIM_Base_Stop(&htim5);
  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 800222e:	f003 bf4b 	b.w	80060c8 <HAL_TIM_PWM_Stop>
 8002232:	bf00      	nop
 8002234:	200018c4 	.word	0x200018c4

08002238 <HAL_MspInit>:
#include "stm32f4xx_hal.h"

extern DMA_HandleTypeDef hdma_adc1;

void HAL_MspInit(void)
{
 8002238:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800223a:	2003      	movs	r0, #3
 800223c:	f001 fbe8 	bl	8003a10 <HAL_NVIC_SetPriorityGrouping>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002240:	2200      	movs	r2, #0
 8002242:	210f      	movs	r1, #15
 8002244:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
extern DMA_HandleTypeDef hdma_adc1;

void HAL_MspInit(void)
{
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800224c:	f001 bbf2 	b.w	8003a34 <HAL_NVIC_SetPriority>

08002250 <HAL_UART_MspInit>:
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002250:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if (huart->Instance == USART1)
 8002252:	6802      	ldr	r2, [r0, #0]
 8002254:	4b10      	ldr	r3, [pc, #64]	; (8002298 <HAL_UART_MspInit+0x48>)
 8002256:	429a      	cmp	r2, r3
 8002258:	d11a      	bne.n	8002290 <HAL_UART_MspInit+0x40>
    {
      __USART1_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	4b0f      	ldr	r3, [pc, #60]	; (800229c <HAL_UART_MspInit+0x4c>)
      GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002260:	480f      	ldr	r0, [pc, #60]	; (80022a0 <HAL_UART_MspInit+0x50>)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if (huart->Instance == USART1)
    {
      __USART1_CLK_ENABLE();
 8002262:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002264:	f042 0210 	orr.w	r2, r2, #16
 8002268:	645a      	str	r2, [r3, #68]	; 0x44
 800226a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226c:	f003 0310 	and.w	r3, r3, #16
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	9b00      	ldr	r3, [sp, #0]

      /**USART1 GPIO Configuration
      PA9     ------> USART1_TX
      PA10     ------> USART1_RX
      */
      GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8002274:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002278:	9301      	str	r3, [sp, #4]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227a:	2302      	movs	r3, #2
 800227c:	9302      	str	r3, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 800227e:	2301      	movs	r3, #1
 8002280:	9303      	str	r3, [sp, #12]
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002282:	2303      	movs	r3, #3
 8002284:	9304      	str	r3, [sp, #16]
      GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002286:	a901      	add	r1, sp, #4
      */
      GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002288:	2307      	movs	r3, #7
 800228a:	9305      	str	r3, [sp, #20]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228c:	f001 fe6a 	bl	8003f64 <HAL_GPIO_Init>
    }

}
 8002290:	b007      	add	sp, #28
 8002292:	f85d fb04 	ldr.w	pc, [sp], #4
 8002296:	bf00      	nop
 8002298:	40011000 	.word	0x40011000
 800229c:	40023800 	.word	0x40023800
 80022a0:	40020000 	.word	0x40020000

080022a4 <HAL_ADC_MspInit>:
      __WWDG_CLK_DISABLE();
    }
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022a4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if (hadc->Instance == ADC1)
 80022a6:	6802      	ldr	r2, [r0, #0]
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <HAL_ADC_MspInit+0x74>)
 80022aa:	429a      	cmp	r2, r3
      __WWDG_CLK_DISABLE();
    }
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022ac:	b086      	sub	sp, #24
 80022ae:	4606      	mov	r6, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if (hadc->Instance == ADC1)
 80022b0:	d130      	bne.n	8002314 <HAL_ADC_MspInit+0x70>
    {
      /* USER CODE BEGIN ADC1_MspInit 0 */

      /* USER CODE END ADC1_MspInit 0 */
      /* Peripheral clock enable */
      __HAL_RCC_ADC1_CLK_ENABLE();
 80022b2:	2500      	movs	r5, #0
 80022b4:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80022b8:	9500      	str	r5, [sp, #0]
 80022ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      PC3     ------> ADC1_IN13
      */
      GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_3;
      GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022bc:	4817      	ldr	r0, [pc, #92]	; (800231c <HAL_ADC_MspInit+0x78>)

      /* Peripheral DMA init*/

      hdma_adc1.Instance = DMA2_Stream0;
 80022be:	4c18      	ldr	r4, [pc, #96]	; (8002320 <HAL_ADC_MspInit+0x7c>)
    {
      /* USER CODE BEGIN ADC1_MspInit 0 */

      /* USER CODE END ADC1_MspInit 0 */
      /* Peripheral clock enable */
      __HAL_RCC_ADC1_CLK_ENABLE();
 80022c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022c4:	645a      	str	r2, [r3, #68]	; 0x44
 80022c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      PC1     ------> ADC1_IN11
      PC3     ------> ADC1_IN13
      */
      GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_3;
      GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	9503      	str	r5, [sp, #12]
    {
      /* USER CODE BEGIN ADC1_MspInit 0 */

      /* USER CODE END ADC1_MspInit 0 */
      /* Peripheral clock enable */
      __HAL_RCC_ADC1_CLK_ENABLE();
 80022ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	9b00      	ldr	r3, [sp, #0]
      /**ADC1 GPIO Configuration
      PC1     ------> ADC1_IN11
      PC3     ------> ADC1_IN13
      */
      GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_3;
 80022d2:	230a      	movs	r3, #10
 80022d4:	9301      	str	r3, [sp, #4]
      GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d6:	a901      	add	r1, sp, #4
      /**ADC1 GPIO Configuration
      PC1     ------> ADC1_IN11
      PC3     ------> ADC1_IN13
      */
      GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_3;
      GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022d8:	2303      	movs	r3, #3
 80022da:	9302      	str	r3, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022dc:	f001 fe42 	bl	8003f64 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

      hdma_adc1.Instance = DMA2_Stream0;
 80022e0:	4b10      	ldr	r3, [pc, #64]	; (8002324 <HAL_ADC_MspInit+0x80>)
      hdma_adc1.Init.Channel = DMA_CHANNEL_0;
      hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022e2:	60a5      	str	r5, [r4, #8]
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

      /* Peripheral DMA init*/

      hdma_adc1.Instance = DMA2_Stream0;
      hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80022e4:	e884 0028 	stmia.w	r4, {r3, r5}
      hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
      hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
      hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022ec:	6123      	str	r3, [r4, #16]
      hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f2:	6163      	str	r3, [r4, #20]
      hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022f8:	61a3      	str	r3, [r4, #24]
      hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80022fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022fe:	61e3      	str	r3, [r4, #28]
      hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
      hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
      HAL_DMA_Init(&hdma_adc1);
 8002300:	4620      	mov	r0, r4
      hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
      hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
      hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
      hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
      hdma_adc1.Init.Mode = DMA_CIRCULAR;
      hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002302:	f44f 3340 	mov.w	r3, #196608	; 0x30000
      /* Peripheral DMA init*/

      hdma_adc1.Instance = DMA2_Stream0;
      hdma_adc1.Init.Channel = DMA_CHANNEL_0;
      hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
      hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002306:	60e5      	str	r5, [r4, #12]
      hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
      hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
      hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
      hdma_adc1.Init.Mode = DMA_CIRCULAR;
      hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002308:	6223      	str	r3, [r4, #32]
      hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800230a:	6265      	str	r5, [r4, #36]	; 0x24
      HAL_DMA_Init(&hdma_adc1);
 800230c:	f001 fc10 	bl	8003b30 <HAL_DMA_Init>

      __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc1);
 8002310:	63b4      	str	r4, [r6, #56]	; 0x38
 8002312:	63a6      	str	r6, [r4, #56]	; 0x38
      /* USER CODE BEGIN ADC1_MspInit 1 */

      /* USER CODE END ADC1_MspInit 1 */
    }

}
 8002314:	b006      	add	sp, #24
 8002316:	bd70      	pop	{r4, r5, r6, pc}
 8002318:	40012000 	.word	0x40012000
 800231c:	40020800 	.word	0x40020800
 8002320:	20001964 	.word	0x20001964
 8002324:	40026410 	.word	0x40026410

08002328 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if (htim_base->Instance == TIM5)
 8002328:	6803      	ldr	r3, [r0, #0]
 800232a:	4a11      	ldr	r2, [pc, #68]	; (8002370 <HAL_TIM_Base_MspInit+0x48>)
 800232c:	4293      	cmp	r3, r2
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800232e:	b082      	sub	sp, #8

  if (htim_base->Instance == TIM5)
 8002330:	d10c      	bne.n	800234c <HAL_TIM_Base_MspInit+0x24>
    {
      /* USER CODE BEGIN TIM5_MspInit 0 */

      /* USER CODE END TIM5_MspInit 0 */
      /* Peripheral clock enable */
      __HAL_RCC_TIM5_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <HAL_TIM_Base_MspInit+0x4c>)
 8002338:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800233a:	f042 0208 	orr.w	r2, r2, #8
 800233e:	641a      	str	r2, [r3, #64]	; 0x40
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	9b00      	ldr	r3, [sp, #0]
 800234a:	e00e      	b.n	800236a <HAL_TIM_Base_MspInit+0x42>
      /* USER CODE BEGIN TIM5_MspInit 1 */

      /* USER CODE END TIM5_MspInit 1 */
    }
  else if (htim_base->Instance == TIM4)
 800234c:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <HAL_TIM_Base_MspInit+0x50>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d10b      	bne.n	800236a <HAL_TIM_Base_MspInit+0x42>
    {
      /* USER CODE BEGIN TIM4_MspInit 0 */

      /* USER CODE END TIM4_MspInit 0 */
      /* Peripheral clock enable */
      __HAL_RCC_TIM4_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	9301      	str	r3, [sp, #4]
 8002356:	4b07      	ldr	r3, [pc, #28]	; (8002374 <HAL_TIM_Base_MspInit+0x4c>)
 8002358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800235a:	f042 0204 	orr.w	r2, r2, #4
 800235e:	641a      	str	r2, [r3, #64]	; 0x40
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	9b01      	ldr	r3, [sp, #4]
      /* USER CODE BEGIN TIM4_MspInit 1 */

      /* USER CODE END TIM4_MspInit 1 */
    }

}
 800236a:	b002      	add	sp, #8
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40000c00 	.word	0x40000c00
 8002374:	40023800 	.word	0x40023800
 8002378:	40000800 	.word	0x40000800

0800237c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800237c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if (htim->Instance == TIM5)
 800237e:	6802      	ldr	r2, [r0, #0]
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <HAL_TIM_MspPostInit+0x28>)
 8002382:	429a      	cmp	r2, r3
 8002384:	d10b      	bne.n	800239e <HAL_TIM_MspPostInit+0x22>
      /* USER CODE END TIM5_MspPostInit 0 */

      /**TIM5 GPIO Configuration
      PA0     ------> TIM5_CH1
      */
      GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002386:	2301      	movs	r3, #1
 8002388:	9301      	str	r3, [sp, #4]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2200      	movs	r2, #0

      /**TIM5 GPIO Configuration
      PA0     ------> TIM5_CH1
      */
      GPIO_InitStruct.Pin = GPIO_PIN_0;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238e:	a901      	add	r1, sp, #4
 8002390:	4805      	ldr	r0, [pc, #20]	; (80023a8 <HAL_TIM_MspPostInit+0x2c>)

      /**TIM5 GPIO Configuration
      PA0     ------> TIM5_CH1
      */
      GPIO_InitStruct.Pin = GPIO_PIN_0;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	9302      	str	r3, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	9203      	str	r2, [sp, #12]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002396:	9304      	str	r3, [sp, #16]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002398:	9305      	str	r3, [sp, #20]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239a:	f001 fde3 	bl	8003f64 <HAL_GPIO_Init>
      /* USER CODE BEGIN TIM5_MspPostInit 1 */

      /* USER CODE END TIM5_MspPostInit 1 */
    }

}
 800239e:	b007      	add	sp, #28
 80023a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80023a4:	40000c00 	.word	0x40000c00
 80023a8:	40020000 	.word	0x40020000

080023ac <SysTick_Handler>:

extern void LTDC_ISR_Handler(void);
extern void DMA2D_ISR_Handler(void);

void SysTick_Handler(void)
{
 80023ac:	b508      	push	{r3, lr}
  HAL_IncTick();
 80023ae:	f001 f8df 	bl	8003570 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
}
 80023b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
extern void DMA2D_ISR_Handler(void);

void SysTick_Handler(void)
{
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 80023b6:	f001 bba0 	b.w	8003afa <HAL_SYSTICK_IRQHandler>
	...

080023bc <DMA2_Stream7_IRQHandler>:
}

void DMA2_Stream7_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80023bc:	4801      	ldr	r0, [pc, #4]	; (80023c4 <DMA2_Stream7_IRQHandler+0x8>)
 80023be:	f001 bce7 	b.w	8003d90 <HAL_DMA_IRQHandler>
 80023c2:	bf00      	nop
 80023c4:	200019c4 	.word	0x200019c4

080023c8 <USART1_IRQHandler>:
}

void USART1_IRQHandler(void)
{
  HAL_UART_IRQHandler(&huart1);
 80023c8:	4801      	ldr	r0, [pc, #4]	; (80023d0 <USART1_IRQHandler+0x8>)
 80023ca:	f004 b8ad 	b.w	8006528 <HAL_UART_IRQHandler>
 80023ce:	bf00      	nop
 80023d0:	20001a24 	.word	0x20001a24

080023d4 <LTDC_IRQHandler>:
}

void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hltdc);
 80023d4:	4801      	ldr	r0, [pc, #4]	; (80023dc <LTDC_IRQHandler+0x8>)
 80023d6:	f002 bb8f 	b.w	8004af8 <HAL_LTDC_IRQHandler>
 80023da:	bf00      	nop
 80023dc:	20021ac0 	.word	0x20021ac0

080023e0 <TIM4_IRQHandler>:
}

void TIM4_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&htim4);
 80023e0:	4801      	ldr	r0, [pc, #4]	; (80023e8 <TIM4_IRQHandler+0x8>)
 80023e2:	f003 bc7a 	b.w	8005cda <HAL_TIM_IRQHandler>
 80023e6:	bf00      	nop
 80023e8:	20001888 	.word	0x20001888

080023ec <DMA2_Stream0_IRQHandler>:
}

void DMA2_Stream0_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023ec:	4801      	ldr	r0, [pc, #4]	; (80023f4 <DMA2_Stream0_IRQHandler+0x8>)
 80023ee:	f001 bccf 	b.w	8003d90 <HAL_DMA_IRQHandler>
 80023f2:	bf00      	nop
 80023f4:	20001964 	.word	0x20001964

080023f8 <setMotorData>:
  i++; // to ommit 'n' character in next iteration
  return 1;
}

static void setMotorData(uint8_t paraNum, char *parameter)
{
 80023f8:	b570      	push	{r4, r5, r6, lr}
 80023fa:	4606      	mov	r6, r0
 80023fc:	460d      	mov	r5, r1
  motorObject_t *motor = getMotorObject();
 80023fe:	f7ff fb97 	bl	8001b30 <getMotorObject>
 8002402:	4604      	mov	r4, r0

  switch (paraNum)
 8002404:	2e0a      	cmp	r6, #10
 8002406:	d863      	bhi.n	80024d0 <setMotorData+0xd8>
 8002408:	e8df f006 	tbb	[pc, r6]
 800240c:	21180f06 	.word	0x21180f06
 8002410:	3e39332a 	.word	0x3e39332a
 8002414:	5147      	.short	0x5147
 8002416:	5a          	.byte	0x5a
 8002417:	00          	.byte	0x00
    {
    case 0:
      motor->currentPID.kp = atof(parameter);
 8002418:	4628      	mov	r0, r5
 800241a:	f016 fbc3 	bl	8018ba4 <atof>
 800241e:	ec51 0b10 	vmov	r0, r1, d0
 8002422:	f7fe fb87 	bl	8000b34 <__aeabi_d2f>
 8002426:	6020      	str	r0, [r4, #0]
      break;
 8002428:	bd70      	pop	{r4, r5, r6, pc}

    case 1:
      motor->currentPID.ki = atof(parameter);
 800242a:	4628      	mov	r0, r5
 800242c:	f016 fbba 	bl	8018ba4 <atof>
 8002430:	ec51 0b10 	vmov	r0, r1, d0
 8002434:	f7fe fb7e 	bl	8000b34 <__aeabi_d2f>
 8002438:	6060      	str	r0, [r4, #4]
      break;
 800243a:	bd70      	pop	{r4, r5, r6, pc}

    case 2:
      motor->speedPID.kp = atof(parameter);
 800243c:	4628      	mov	r0, r5
 800243e:	f016 fbb1 	bl	8018ba4 <atof>
 8002442:	ec51 0b10 	vmov	r0, r1, d0
 8002446:	f7fe fb75 	bl	8000b34 <__aeabi_d2f>
 800244a:	6120      	str	r0, [r4, #16]
      break;
 800244c:	bd70      	pop	{r4, r5, r6, pc}

    case 3:
      motor->speedPID.ki = atof(parameter);
 800244e:	4628      	mov	r0, r5
 8002450:	f016 fba8 	bl	8018ba4 <atof>
 8002454:	ec51 0b10 	vmov	r0, r1, d0
 8002458:	f7fe fb6c 	bl	8000b34 <__aeabi_d2f>
 800245c:	6160      	str	r0, [r4, #20]
      break;
 800245e:	bd70      	pop	{r4, r5, r6, pc}

    case 4:
      motor->speedPID.kd = atof(parameter);
 8002460:	4628      	mov	r0, r5
 8002462:	f016 fb9f 	bl	8018ba4 <atof>
 8002466:	ec51 0b10 	vmov	r0, r1, d0
 800246a:	f7fe fb63 	bl	8000b34 <__aeabi_d2f>
 800246e:	61a0      	str	r0, [r4, #24]
      break;
 8002470:	bd70      	pop	{r4, r5, r6, pc}

    case 5:
      motor->state = atoi(parameter);
 8002472:	4628      	mov	r0, r5
 8002474:	f016 fb99 	bl	8018baa <atoi>
 8002478:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
      break;
 800247c:	bd70      	pop	{r4, r5, r6, pc}

    case 6:
      motor->frequency = atoi(parameter);
 800247e:	4628      	mov	r0, r5
 8002480:	f016 fb93 	bl	8018baa <atoi>
 8002484:	8560      	strh	r0, [r4, #42]	; 0x2a
      break;
 8002486:	bd70      	pop	{r4, r5, r6, pc}

    case 7:
      motor->currentPID.ref = atof(parameter);
 8002488:	4628      	mov	r0, r5
 800248a:	f016 fb8b 	bl	8018ba4 <atof>
 800248e:	ec51 0b10 	vmov	r0, r1, d0
 8002492:	f7fe fb4f 	bl	8000b34 <__aeabi_d2f>
 8002496:	60e0      	str	r0, [r4, #12]
      break;
 8002498:	bd70      	pop	{r4, r5, r6, pc}

    case 8:
      motor->speedPID.ref = atoi(parameter);
 800249a:	4628      	mov	r0, r5
 800249c:	f016 fb85 	bl	8018baa <atoi>
 80024a0:	ee07 0a90 	vmov	s15, r0
 80024a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024a8:	edc4 7a07 	vstr	s15, [r4, #28]
      break;
 80024ac:	bd70      	pop	{r4, r5, r6, pc}

    case 9:
      motor->currentLimit = atof(parameter);
 80024ae:	4628      	mov	r0, r5
 80024b0:	f016 fb78 	bl	8018ba4 <atof>
 80024b4:	ec51 0b10 	vmov	r0, r1, d0
 80024b8:	f7fe fb3c 	bl	8000b34 <__aeabi_d2f>
 80024bc:	6260      	str	r0, [r4, #36]	; 0x24
      break;
 80024be:	bd70      	pop	{r4, r5, r6, pc}

    case 10:
      motor->dutyCycle = atof(parameter);
 80024c0:	4628      	mov	r0, r5
 80024c2:	f016 fb6f 	bl	8018ba4 <atof>
 80024c6:	ec51 0b10 	vmov	r0, r1, d0
 80024ca:	f7fe fb33 	bl	8000b34 <__aeabi_d2f>
 80024ce:	62e0      	str	r0, [r4, #44]	; 0x2c
 80024d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080024d4 <sendAck>:
    }
}

static void sendAck(void)
{
  xprintf("&");
 80024d4:	4801      	ldr	r0, [pc, #4]	; (80024dc <sendAck+0x8>)
 80024d6:	f000 b992 	b.w	80027fe <xprintf>
 80024da:	bf00      	nop
 80024dc:	0801db28 	.word	0x0801db28

080024e0 <floatToString>:
  return cmd;
}

void floatToString(float f1, char *str)
{
  int d1 = f1;
 80024e0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
  float f2 = f1 - d1;
  int d2 = (int)(f2 * 100);
  xsprintf (str, "%d.%02d", d1, d2);
 80024e4:	4908      	ldr	r1, [pc, #32]	; (8002508 <floatToString+0x28>)
 80024e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024ea:	ee17 2a90 	vmov	r2, s15
 80024ee:	ee30 0a47 	vsub.f32	s0, s0, s14
 80024f2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800250c <floatToString+0x2c>
 80024f6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80024fa:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80024fe:	ee17 3a10 	vmov	r3, s14
 8002502:	f000 b989 	b.w	8002818 <xsprintf>
 8002506:	bf00      	nop
 8002508:	0801db2a 	.word	0x0801db2a
 800250c:	42c80000 	.word	0x42c80000

08002510 <fts04>:
}

char *fts04(float f1)
{
  static char str[10];
  int d1 = f1;
 8002510:	eefd 7ac0 	vcvt.s32.f32	s15, s0
  xsprintf (str, "%d.%02d", d1, d2);
  return str;
}

char *fts04(float f1)
{
 8002514:	b510      	push	{r4, lr}
  static char str[10];
  int d1 = f1;
  float f2 = f1 - d1;
  int d2 = (int)(f2 * 10000);
  xsprintf (str, "%d.%04d", d1, d2);
 8002516:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800251a:	4c09      	ldr	r4, [pc, #36]	; (8002540 <fts04+0x30>)
 800251c:	4909      	ldr	r1, [pc, #36]	; (8002544 <fts04+0x34>)
 800251e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002522:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002548 <fts04+0x38>
 8002526:	ee20 0a07 	vmul.f32	s0, s0, s14
 800252a:	4620      	mov	r0, r4
 800252c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8002530:	ee17 2a90 	vmov	r2, s15
 8002534:	ee17 3a10 	vmov	r3, s14
 8002538:	f000 f96e 	bl	8002818 <xsprintf>
  return str;
}
 800253c:	4620      	mov	r0, r4
 800253e:	bd10      	pop	{r4, pc}
 8002540:	20001405 	.word	0x20001405
 8002544:	0801db32 	.word	0x0801db32
 8002548:	461c4000 	.word	0x461c4000

0800254c <checkUart>:
    }
  return 0;
}

void checkUart(void)
{
 800254c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002550:	b085      	sub	sp, #20
  return cmd;
}

static uint8_t checkRxBuff(void)
{
  uartBuffer_t *rxData = getUartRxData();
 8002552:	f7ff fd91 	bl	8002078 <getUartRxData>
 8002556:	3801      	subs	r0, #1
  uint8_t *rxBuff = rxData->buffer;
  while (*rxBuff != 0)
 8002558:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800255c:	2b00      	cmp	r3, #0
 800255e:	d050      	beq.n	8002602 <checkUart+0xb6>
    {
      if (*rxBuff == 'e') // rx buff is not empty - parsing needed
 8002560:	2b65      	cmp	r3, #101	; 0x65
 8002562:	d1f9      	bne.n	8002558 <checkUart+0xc>
    commandsFromPC[cmd].executeCommand();
}

static cmdType_t parseRxBuffer(void)
{
  uartBuffer_t *rxData = getUartRxData();
 8002564:	f7ff fd88 	bl	8002078 <getUartRxData>
  uint8_t *rxBuff = rxData->buffer;
  char parameter[12] = {0};
 8002568:	2400      	movs	r4, #0
 800256a:	9401      	str	r4, [sp, #4]
 800256c:	9402      	str	r4, [sp, #8]
 800256e:	9403      	str	r4, [sp, #12]
  uint8_t status = 1, paraNum = 0;
  cmdType_t cmd = searchForCommand(rxBuff[0]);
 8002570:	7803      	ldrb	r3, [r0, #0]
static uint8_t searchForCommand(char prefix)
{
  int cmd = 0;
  for (cmd = 0; cmd < cmdNum; cmd++)
    {
      if (prefix == commandsFromPC[cmd].prefix)
 8002572:	2b73      	cmp	r3, #115	; 0x73
    commandsFromPC[cmd].executeCommand();
}

static cmdType_t parseRxBuffer(void)
{
  uartBuffer_t *rxData = getUartRxData();
 8002574:	4606      	mov	r6, r0
static uint8_t searchForCommand(char prefix)
{
  int cmd = 0;
  for (cmd = 0; cmd < cmdNum; cmd++)
    {
      if (prefix == commandsFromPC[cmd].prefix)
 8002576:	d003      	beq.n	8002580 <checkUart+0x34>
};

static uint8_t searchForCommand(char prefix)
{
  int cmd = 0;
  for (cmd = 0; cmd < cmdNum; cmd++)
 8002578:	2b63      	cmp	r3, #99	; 0x63
 800257a:	bf0c      	ite	eq
 800257c:	2401      	moveq	r4, #1
 800257e:	2402      	movne	r4, #2
  xprintf("&");
}

static void prepareCommandData(cmdType_t cmd, char *parameter, uint8_t *paraNum)
{
  if (commandsFromPC[cmd].prepareData != NULL && cmd < cmdNum)
 8002580:	4a21      	ldr	r2, [pc, #132]	; (8002608 <checkUart+0xbc>)
 8002582:	230c      	movs	r3, #12
 8002584:	fb03 2304 	mla	r3, r3, r4, r2
  uint8_t *rxBuff = rxData->buffer;
  char parameter[12] = {0};
  uint8_t status = 1, paraNum = 0;
  cmdType_t cmd = searchForCommand(rxBuff[0]);

  rxBuff++; // ommit prefix
 8002588:	f106 0801 	add.w	r8, r6, #1
  xprintf("&");
}

static void prepareCommandData(cmdType_t cmd, char *parameter, uint8_t *paraNum)
{
  if (commandsFromPC[cmd].prepareData != NULL && cmd < cmdNum)
 800258c:	685f      	ldr	r7, [r3, #4]
static cmdType_t parseRxBuffer(void)
{
  uartBuffer_t *rxData = getUartRxData();
  uint8_t *rxBuff = rxData->buffer;
  char parameter[12] = {0};
  uint8_t status = 1, paraNum = 0;
 800258e:	2000      	movs	r0, #0
 8002590:	491e      	ldr	r1, [pc, #120]	; (800260c <checkUart+0xc0>)
 8002592:	f891 e000 	ldrb.w	lr, [r1]
};

static uint8_t searchForCommand(char prefix)
{
  int cmd = 0;
  for (cmd = 0; cmd < cmdNum; cmd++)
 8002596:	2300      	movs	r3, #0
 8002598:	eb0e 0203 	add.w	r2, lr, r3
 800259c:	b2d2      	uxtb	r2, r2
static uint8_t parseParameter(char *buff, char *out)
{
  static uint8_t i = 0;
  uint8_t j = 0;

  while (buff[i] != 'n')
 800259e:	f818 5002 	ldrb.w	r5, [r8, r2]
 80025a2:	2d6e      	cmp	r5, #110	; 0x6e
 80025a4:	d00e      	beq.n	80025c4 <checkUart+0x78>
    {
      if (buff[i] == 'e') //end of transmission detected
 80025a6:	2d65      	cmp	r5, #101	; 0x65
 80025a8:	f103 0201 	add.w	r2, r3, #1
 80025ac:	d102      	bne.n	80025b4 <checkUart+0x68>
        {
          i = 0;
 80025ae:	2500      	movs	r5, #0
 80025b0:	700d      	strb	r5, [r1, #0]
 80025b2:	e00a      	b.n	80025ca <checkUart+0x7e>
          return 0;
        }

      out[j] = buff[i];
 80025b4:	f10d 0c10 	add.w	ip, sp, #16
 80025b8:	fa5c f383 	uxtab	r3, ip, r3
 80025bc:	f803 5c0c 	strb.w	r5, [r3, #-12]
 80025c0:	4613      	mov	r3, r2
 80025c2:	e7e9      	b.n	8002598 <checkUart+0x4c>
      j++;
      i++;
    }

  i++; // to ommit 'n' character in next iteration
 80025c4:	3201      	adds	r2, #1
 80025c6:	700a      	strb	r2, [r1, #0]
  return 1;
 80025c8:	2501      	movs	r5, #1
  xprintf("&");
}

static void prepareCommandData(cmdType_t cmd, char *parameter, uint8_t *paraNum)
{
  if (commandsFromPC[cmd].prepareData != NULL && cmd < cmdNum)
 80025ca:	b147      	cbz	r7, 80025de <checkUart+0x92>
 80025cc:	2c02      	cmp	r4, #2
 80025ce:	d006      	beq.n	80025de <checkUart+0x92>
    commandsFromPC[cmd].prepareData((*paraNum)++, parameter);
 80025d0:	f100 0901 	add.w	r9, r0, #1
 80025d4:	fa5f f989 	uxtb.w	r9, r9
 80025d8:	a901      	add	r1, sp, #4
 80025da:	47b8      	blx	r7
 80025dc:	4648      	mov	r0, r9
  rxBuff++; // ommit prefix
  while (status)
    {
      status = parseParameter((char *)rxBuff, parameter);
      prepareCommandData(cmd, parameter, &paraNum);
      memset(parameter, 0, sizeof(parameter));
 80025de:	2300      	movs	r3, #0
 80025e0:	9301      	str	r3, [sp, #4]
 80025e2:	9302      	str	r3, [sp, #8]
 80025e4:	9303      	str	r3, [sp, #12]
  char parameter[12] = {0};
  uint8_t status = 1, paraNum = 0;
  cmdType_t cmd = searchForCommand(rxBuff[0]);

  rxBuff++; // ommit prefix
  while (status)
 80025e6:	2d00      	cmp	r5, #0
 80025e8:	d1d2      	bne.n	8002590 <checkUart+0x44>
      status = parseParameter((char *)rxBuff, parameter);
      prepareCommandData(cmd, parameter, &paraNum);
      memset(parameter, 0, sizeof(parameter));
    }

  rxData->clear(); //clear rx buffer - data is no longer needed
 80025ea:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
 80025ee:	4798      	blx	r3
    commandsFromPC[cmd].prepareData((*paraNum)++, parameter);
}

static void executeCommand(cmdType_t cmd)
{
  if (commandsFromPC[cmd].executeCommand !=  NULL && cmd < cmdNum)
 80025f0:	4a05      	ldr	r2, [pc, #20]	; (8002608 <checkUart+0xbc>)
 80025f2:	230c      	movs	r3, #12
 80025f4:	fb03 2304 	mla	r3, r3, r4, r2
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	b113      	cbz	r3, 8002602 <checkUart+0xb6>
 80025fc:	2c02      	cmp	r4, #2
 80025fe:	d000      	beq.n	8002602 <checkUart+0xb6>
    commandsFromPC[cmd].executeCommand();
 8002600:	4798      	blx	r3
  if (checkRxBuff())
    {
      cmdType_t cmd = parseRxBuffer();
      executeCommand(cmd);
    }
 8002602:	b005      	add	sp, #20
 8002604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002608:	0801db10 	.word	0x0801db10
 800260c:	2000140f 	.word	0x2000140f

08002610 <xputc>:
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 8002610:	280a      	cmp	r0, #10
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
 8002612:	b510      	push	{r4, lr}
 8002614:	4604      	mov	r4, r0
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 8002616:	d102      	bne.n	800261e <xputc+0xe>
 8002618:	200d      	movs	r0, #13
 800261a:	f7ff fff9 	bl	8002610 <xputc>

	if (outptr) {
 800261e:	4a07      	ldr	r2, [pc, #28]	; (800263c <xputc+0x2c>)
 8002620:	6813      	ldr	r3, [r2, #0]
 8002622:	b11b      	cbz	r3, 800262c <xputc+0x1c>
		*outptr++ = (unsigned char)c;
 8002624:	1c59      	adds	r1, r3, #1
 8002626:	701c      	strb	r4, [r3, #0]
 8002628:	6011      	str	r1, [r2, #0]
		return;
 800262a:	bd10      	pop	{r4, pc}
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <xputc+0x30>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	b11b      	cbz	r3, 800263a <xputc+0x2a>
 8002632:	4620      	mov	r0, r4
}
 8002634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (outptr) {
		*outptr++ = (unsigned char)c;
		return;
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
 8002638:	4718      	bx	r3
 800263a:	bd10      	pop	{r4, pc}
 800263c:	20001410 	.word	0x20001410
 8002640:	20001a64 	.word	0x20001a64

08002644 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 8002644:	b510      	push	{r4, lr}
 8002646:	1e44      	subs	r4, r0, #1
	while (*str)
 8002648:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800264c:	b110      	cbz	r0, 8002654 <xputs+0x10>
		xputc(*str++);
 800264e:	f7ff ffdf 	bl	8002610 <xputc>
 8002652:	e7f9      	b.n	8002648 <xputs+0x4>
}
 8002654:	bd10      	pop	{r4, pc}

08002656 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 8002656:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800265a:	4602      	mov	r2, r0
 800265c:	460d      	mov	r5, r1
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 800265e:	7810      	ldrb	r0, [r2, #0]
		if (!c) break;				/* End of format? */
 8002660:	2800      	cmp	r0, #0
 8002662:	f000 80c9 	beq.w	80027f8 <xvprintf+0x1a2>
		if (c != '%') {				/* Pass through it if not a % sequense */
 8002666:	2825      	cmp	r0, #37	; 0x25
 8002668:	d001      	beq.n	800266e <xvprintf+0x18>
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 800266a:	1c57      	adds	r7, r2, #1
 800266c:	e06b      	b.n	8002746 <xvprintf+0xf0>
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass through it if not a % sequense */
			xputc(c); continue;
		}
		f = 0;
		c = *fmt++;					/* Get first char of the sequense */
 800266e:	7853      	ldrb	r3, [r2, #1]
		if (c == '0') {				/* Flag: '0' padded */
 8002670:	2b30      	cmp	r3, #48	; 0x30
 8002672:	d103      	bne.n	800267c <xvprintf+0x26>
			f = 1; c = *fmt++;
 8002674:	1cd7      	adds	r7, r2, #3
 8002676:	7893      	ldrb	r3, [r2, #2]
 8002678:	2601      	movs	r6, #1
 800267a:	e007      	b.n	800268c <xvprintf+0x36>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800267c:	2b2d      	cmp	r3, #45	; 0x2d
				f = 2; c = *fmt++;
 800267e:	bf0d      	iteet	eq
 8002680:	7893      	ldrbeq	r3, [r2, #2]
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass through it if not a % sequense */
			xputc(c); continue;
		}
		f = 0;
		c = *fmt++;					/* Get first char of the sequense */
 8002682:	1c97      	addne	r7, r2, #2
		c = *fmt++;					/* Get a char */
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass through it if not a % sequense */
			xputc(c); continue;
		}
		f = 0;
 8002684:	2600      	movne	r6, #0
		c = *fmt++;					/* Get first char of the sequense */
		if (c == '0') {				/* Flag: '0' padded */
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
 8002686:	1cd7      	addeq	r7, r2, #3
 8002688:	bf08      	it	eq
 800268a:	2602      	moveq	r6, #2
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 800268c:	f04f 0800 	mov.w	r8, #0
			w = w * 10 + c - '0';
 8002690:	210a      	movs	r1, #10
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8002692:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002696:	2a09      	cmp	r2, #9
 8002698:	d806      	bhi.n	80026a8 <xvprintf+0x52>
			w = w * 10 + c - '0';
 800269a:	fb01 3808 	mla	r8, r1, r8, r3
 800269e:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 80026a2:	f817 3b01 	ldrb.w	r3, [r7], #1
 80026a6:	e7f4      	b.n	8002692 <xvprintf+0x3c>
			w = w * 10 + c - '0';
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80026a8:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 80026ac:	2a4c      	cmp	r2, #76	; 0x4c
			f |= 4; c = *fmt++;
 80026ae:	bf02      	ittt	eq
 80026b0:	783b      	ldrbeq	r3, [r7, #0]
 80026b2:	f046 0604 	orreq.w	r6, r6, #4
 80026b6:	3701      	addeq	r7, #1
		}
		if (!c) break;				/* End of format? */
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 809d 	beq.w	80027f8 <xvprintf+0x1a2>
		d = c;
		if (d >= 'a') d -= 0x20;
 80026be:	2b60      	cmp	r3, #96	; 0x60
 80026c0:	bf86      	itte	hi
 80026c2:	f1a3 0220 	subhi.w	r2, r3, #32
 80026c6:	b2d2      	uxtbhi	r2, r2
 80026c8:	461a      	movls	r2, r3
		switch (d) {				/* Type is... */
 80026ca:	2a4f      	cmp	r2, #79	; 0x4f
 80026cc:	d012      	beq.n	80026f4 <xvprintf+0x9e>
 80026ce:	d806      	bhi.n	80026de <xvprintf+0x88>
 80026d0:	2a43      	cmp	r2, #67	; 0x43
 80026d2:	d030      	beq.n	8002736 <xvprintf+0xe0>
 80026d4:	2a44      	cmp	r2, #68	; 0x44
 80026d6:	d03c      	beq.n	8002752 <xvprintf+0xfc>
 80026d8:	2a42      	cmp	r2, #66	; 0x42
 80026da:	d038      	beq.n	800274e <xvprintf+0xf8>
 80026dc:	e032      	b.n	8002744 <xvprintf+0xee>
 80026de:	2a55      	cmp	r2, #85	; 0x55
 80026e0:	d037      	beq.n	8002752 <xvprintf+0xfc>
 80026e2:	2a58      	cmp	r2, #88	; 0x58
 80026e4:	d02c      	beq.n	8002740 <xvprintf+0xea>
 80026e6:	2a53      	cmp	r2, #83	; 0x53
 80026e8:	d12c      	bne.n	8002744 <xvprintf+0xee>
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 80026ea:	f8d5 9000 	ldr.w	r9, [r5]
 80026ee:	1d2c      	adds	r4, r5, #4
			for (j = 0; p[j]; j++) ;
 80026f0:	464b      	mov	r3, r9
 80026f2:	e001      	b.n	80026f8 <xvprintf+0xa2>
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
 80026f4:	2008      	movs	r0, #8
 80026f6:	e02d      	b.n	8002754 <xvprintf+0xfe>
 80026f8:	ebc9 0503 	rsb	r5, r9, r3
		d = c;
		if (d >= 'a') d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, char*);
			for (j = 0; p[j]; j++) ;
 80026fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002700:	2a00      	cmp	r2, #0
 8002702:	d1f9      	bne.n	80026f8 <xvprintf+0xa2>
			while (!(f & 2) && j++ < w) xputc(' ');
 8002704:	07b0      	lsls	r0, r6, #30
 8002706:	d409      	bmi.n	800271c <xvprintf+0xc6>
 8002708:	4545      	cmp	r5, r8
 800270a:	f105 0601 	add.w	r6, r5, #1
 800270e:	d204      	bcs.n	800271a <xvprintf+0xc4>
 8002710:	2020      	movs	r0, #32
 8002712:	f7ff ff7d 	bl	8002610 <xputc>
 8002716:	4635      	mov	r5, r6
 8002718:	e7f6      	b.n	8002708 <xvprintf+0xb2>
 800271a:	4635      	mov	r5, r6
			xputs(p);
 800271c:	4648      	mov	r0, r9
 800271e:	f7ff ff91 	bl	8002644 <xputs>
			while (j++ < w) xputc(' ');
 8002722:	45a8      	cmp	r8, r5
 8002724:	d802      	bhi.n	800272c <xvprintf+0xd6>
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 8002726:	4625      	mov	r5, r4
 8002728:	463a      	mov	r2, r7
 800272a:	e798      	b.n	800265e <xvprintf+0x8>
		case 'S' :					/* String */
			p = va_arg(arp, char*);
			for (j = 0; p[j]; j++) ;
			while (!(f & 2) && j++ < w) xputc(' ');
			xputs(p);
			while (j++ < w) xputc(' ');
 800272c:	2020      	movs	r0, #32
 800272e:	f7ff ff6f 	bl	8002610 <xputc>
 8002732:	3501      	adds	r5, #1
 8002734:	e7f5      	b.n	8002722 <xvprintf+0xcc>
			continue;
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 8002736:	7828      	ldrb	r0, [r5, #0]
 8002738:	1d2c      	adds	r4, r5, #4
 800273a:	f7ff ff69 	bl	8002610 <xputc>
 800273e:	e7f2      	b.n	8002726 <xvprintf+0xd0>
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8002740:	2010      	movs	r0, #16
 8002742:	e007      	b.n	8002754 <xvprintf+0xfe>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ff63 	bl	8002610 <xputc>
 800274a:	462c      	mov	r4, r5
 800274c:	e7eb      	b.n	8002726 <xvprintf+0xd0>
			while (j++ < w) xputc(' ');
			continue;
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
 800274e:	2002      	movs	r0, #2
 8002750:	e000      	b.n	8002754 <xvprintf+0xfe>
		case 'O' :					/* Octal */
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8002752:	200a      	movs	r0, #10
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 8002754:	2a44      	cmp	r2, #68	; 0x44
 8002756:	6829      	ldr	r1, [r5, #0]
 8002758:	f105 0404 	add.w	r4, r5, #4
 800275c:	d104      	bne.n	8002768 <xvprintf+0x112>
		if (d == 'D' && (v & 0x80000000)) {
 800275e:	2900      	cmp	r1, #0
			v = 0 - v;
 8002760:	bfbc      	itt	lt
 8002762:	4249      	neglt	r1, r1
			f |= 8;
 8002764:	f046 0608 	orrlt.w	r6, r6, #8
 8002768:	2b78      	cmp	r3, #120	; 0x78
 800276a:	bf14      	ite	ne
 800276c:	f04f 0c07 	movne.w	ip, #7
 8002770:	f04f 0c27 	moveq.w	ip, #39	; 0x27
		}
		i = 0;
 8002774:	2200      	movs	r2, #0
		do {
			d = (char)(v % r); v /= r;
 8002776:	fbb1 fef0 	udiv	lr, r1, r0
 800277a:	fb00 151e 	mls	r5, r0, lr, r1
 800277e:	b2eb      	uxtb	r3, r5
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8002780:	2d09      	cmp	r5, #9
 8002782:	bf84      	itt	hi
 8002784:	4463      	addhi	r3, ip
 8002786:	b2db      	uxtbhi	r3, r3
			s[i++] = d + '0';
 8002788:	3330      	adds	r3, #48	; 0x30
			v = 0 - v;
			f |= 8;
		}
		i = 0;
		do {
			d = (char)(v % r); v /= r;
 800278a:	4671      	mov	r1, lr
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
 800278c:	1c55      	adds	r5, r2, #1
 800278e:	f80d 3002 	strb.w	r3, [sp, r2]
		} while (v && i < sizeof(s));
 8002792:	f1be 0f00 	cmp.w	lr, #0
 8002796:	d004      	beq.n	80027a2 <xvprintf+0x14c>
 8002798:	2d10      	cmp	r5, #16
 800279a:	d001      	beq.n	80027a0 <xvprintf+0x14a>
 800279c:	462a      	mov	r2, r5
 800279e:	e7ea      	b.n	8002776 <xvprintf+0x120>
 80027a0:	220f      	movs	r2, #15
		if (f & 8) s[i++] = '-';
 80027a2:	0731      	lsls	r1, r6, #28
 80027a4:	d505      	bpl.n	80027b2 <xvprintf+0x15c>
 80027a6:	ab04      	add	r3, sp, #16
 80027a8:	441d      	add	r5, r3
 80027aa:	232d      	movs	r3, #45	; 0x2d
 80027ac:	f805 3c10 	strb.w	r3, [r5, #-16]
 80027b0:	1c95      	adds	r5, r2, #2
		j = i; d = (f & 1) ? '0' : ' ';
 80027b2:	f016 0f01 	tst.w	r6, #1
 80027b6:	bf14      	ite	ne
 80027b8:	f04f 0a30 	movne.w	sl, #48	; 0x30
 80027bc:	f04f 0a20 	moveq.w	sl, #32
		while (!(f & 2) && j++ < w) xputc(d);
 80027c0:	07b3      	lsls	r3, r6, #30
			d = (char)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof(s));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
 80027c2:	46a9      	mov	r9, r5
		while (!(f & 2) && j++ < w) xputc(d);
 80027c4:	d409      	bmi.n	80027da <xvprintf+0x184>
 80027c6:	45c1      	cmp	r9, r8
 80027c8:	f109 0601 	add.w	r6, r9, #1
 80027cc:	d204      	bcs.n	80027d8 <xvprintf+0x182>
 80027ce:	4650      	mov	r0, sl
 80027d0:	f7ff ff1e 	bl	8002610 <xputc>
 80027d4:	46b1      	mov	r9, r6
 80027d6:	e7f6      	b.n	80027c6 <xvprintf+0x170>
 80027d8:	46b1      	mov	r9, r6
		do xputc(s[--i]); while(i);
 80027da:	3d01      	subs	r5, #1
 80027dc:	f81d 0005 	ldrb.w	r0, [sp, r5]
 80027e0:	f7ff ff16 	bl	8002610 <xputc>
 80027e4:	2d00      	cmp	r5, #0
 80027e6:	d1f8      	bne.n	80027da <xvprintf+0x184>
		while (j++ < w) xputc(' ');
 80027e8:	45c8      	cmp	r8, r9
 80027ea:	d99c      	bls.n	8002726 <xvprintf+0xd0>
 80027ec:	2020      	movs	r0, #32
 80027ee:	f7ff ff0f 	bl	8002610 <xputc>
 80027f2:	f109 0901 	add.w	r9, r9, #1
 80027f6:	e7f7      	b.n	80027e8 <xvprintf+0x192>
	}
}
 80027f8:	b004      	add	sp, #16
 80027fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080027fe <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 80027fe:	b40f      	push	{r0, r1, r2, r3}
 8002800:	b507      	push	{r0, r1, r2, lr}
 8002802:	a904      	add	r1, sp, #16
 8002804:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list arp;


	va_start(arp, fmt);
 8002808:	9101      	str	r1, [sp, #4]
	xvprintf(fmt, arp);
 800280a:	f7ff ff24 	bl	8002656 <xvprintf>
	va_end(arp);
}
 800280e:	b003      	add	sp, #12
 8002810:	f85d eb04 	ldr.w	lr, [sp], #4
 8002814:	b004      	add	sp, #16
 8002816:	4770      	bx	lr

08002818 <xsprintf>:
void xsprintf (			/* Put a formatted string to the memory */
	char* buff,			/* Pointer to the output buffer */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 8002818:	b40e      	push	{r1, r2, r3}
 800281a:	b517      	push	{r0, r1, r2, r4, lr}
 800281c:	a905      	add	r1, sp, #20
	va_list arp;


	outptr = buff;		/* Switch destination for memory */
 800281e:	4c08      	ldr	r4, [pc, #32]	; (8002840 <xsprintf+0x28>)
void xsprintf (			/* Put a formatted string to the memory */
	char* buff,			/* Pointer to the output buffer */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 8002820:	f851 3b04 	ldr.w	r3, [r1], #4
	va_list arp;


	outptr = buff;		/* Switch destination for memory */
 8002824:	6020      	str	r0, [r4, #0]

	va_start(arp, fmt);
	xvprintf(fmt, arp);
 8002826:	4618      	mov	r0, r3
	va_list arp;


	outptr = buff;		/* Switch destination for memory */

	va_start(arp, fmt);
 8002828:	9101      	str	r1, [sp, #4]
	xvprintf(fmt, arp);
 800282a:	f7ff ff14 	bl	8002656 <xvprintf>
	va_end(arp);

	*outptr = 0;		/* Terminate output string with a \0 */
 800282e:	6822      	ldr	r2, [r4, #0]
 8002830:	2300      	movs	r3, #0
 8002832:	7013      	strb	r3, [r2, #0]
	outptr = 0;			/* Switch destination for device */
 8002834:	6023      	str	r3, [r4, #0]
}
 8002836:	b003      	add	sp, #12
 8002838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800283c:	b003      	add	sp, #12
 800283e:	4770      	bx	lr
 8002840:	20001410 	.word	0x20001410

08002844 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002844:	b508      	push	{r3, lr}
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002846:	f000 fb6b 	bl	8002f20 <LCD_IO_Init>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 800284a:	20ca      	movs	r0, #202	; 0xca
 800284c:	f000 fbe0 	bl	8003010 <LCD_IO_WriteReg>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
  LCD_IO_WriteData(RegValue);
 8002850:	20c3      	movs	r0, #195	; 0xc3
 8002852:	f000 fbc1 	bl	8002fd8 <LCD_IO_WriteData>
 8002856:	2008      	movs	r0, #8
 8002858:	f000 fbbe 	bl	8002fd8 <LCD_IO_WriteData>
 800285c:	2050      	movs	r0, #80	; 0x50
 800285e:	f000 fbbb 	bl	8002fd8 <LCD_IO_WriteData>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 8002862:	20cf      	movs	r0, #207	; 0xcf
 8002864:	f000 fbd4 	bl	8003010 <LCD_IO_WriteReg>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
  LCD_IO_WriteData(RegValue);
 8002868:	2000      	movs	r0, #0
 800286a:	f000 fbb5 	bl	8002fd8 <LCD_IO_WriteData>
 800286e:	20c1      	movs	r0, #193	; 0xc1
 8002870:	f000 fbb2 	bl	8002fd8 <LCD_IO_WriteData>
 8002874:	2030      	movs	r0, #48	; 0x30
 8002876:	f000 fbaf 	bl	8002fd8 <LCD_IO_WriteData>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 800287a:	20ed      	movs	r0, #237	; 0xed
 800287c:	f000 fbc8 	bl	8003010 <LCD_IO_WriteReg>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
  LCD_IO_WriteData(RegValue);
 8002880:	2064      	movs	r0, #100	; 0x64
 8002882:	f000 fba9 	bl	8002fd8 <LCD_IO_WriteData>
 8002886:	2003      	movs	r0, #3
 8002888:	f000 fba6 	bl	8002fd8 <LCD_IO_WriteData>
 800288c:	2012      	movs	r0, #18
 800288e:	f000 fba3 	bl	8002fd8 <LCD_IO_WriteData>
 8002892:	2081      	movs	r0, #129	; 0x81
 8002894:	f000 fba0 	bl	8002fd8 <LCD_IO_WriteData>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 8002898:	20e8      	movs	r0, #232	; 0xe8
 800289a:	f000 fbb9 	bl	8003010 <LCD_IO_WriteReg>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
  LCD_IO_WriteData(RegValue);
 800289e:	2085      	movs	r0, #133	; 0x85
 80028a0:	f000 fb9a 	bl	8002fd8 <LCD_IO_WriteData>
 80028a4:	2000      	movs	r0, #0
 80028a6:	f000 fb97 	bl	8002fd8 <LCD_IO_WriteData>
 80028aa:	2078      	movs	r0, #120	; 0x78
 80028ac:	f000 fb94 	bl	8002fd8 <LCD_IO_WriteData>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 80028b0:	20cb      	movs	r0, #203	; 0xcb
 80028b2:	f000 fbad 	bl	8003010 <LCD_IO_WriteReg>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
  LCD_IO_WriteData(RegValue);
 80028b6:	2039      	movs	r0, #57	; 0x39
 80028b8:	f000 fb8e 	bl	8002fd8 <LCD_IO_WriteData>
 80028bc:	202c      	movs	r0, #44	; 0x2c
 80028be:	f000 fb8b 	bl	8002fd8 <LCD_IO_WriteData>
 80028c2:	2000      	movs	r0, #0
 80028c4:	f000 fb88 	bl	8002fd8 <LCD_IO_WriteData>
 80028c8:	2034      	movs	r0, #52	; 0x34
 80028ca:	f000 fb85 	bl	8002fd8 <LCD_IO_WriteData>
 80028ce:	2002      	movs	r0, #2
 80028d0:	f000 fb82 	bl	8002fd8 <LCD_IO_WriteData>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 80028d4:	20f7      	movs	r0, #247	; 0xf7
 80028d6:	f000 fb9b 	bl	8003010 <LCD_IO_WriteReg>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
  LCD_IO_WriteData(RegValue);
 80028da:	2020      	movs	r0, #32
 80028dc:	f000 fb7c 	bl	8002fd8 <LCD_IO_WriteData>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 80028e0:	20ea      	movs	r0, #234	; 0xea
 80028e2:	f000 fb95 	bl	8003010 <LCD_IO_WriteReg>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
  LCD_IO_WriteData(RegValue);
 80028e6:	2000      	movs	r0, #0
 80028e8:	f000 fb76 	bl	8002fd8 <LCD_IO_WriteData>
 80028ec:	2000      	movs	r0, #0
 80028ee:	f000 fb73 	bl	8002fd8 <LCD_IO_WriteData>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 80028f2:	20b1      	movs	r0, #177	; 0xb1
 80028f4:	f000 fb8c 	bl	8003010 <LCD_IO_WriteReg>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
  LCD_IO_WriteData(RegValue);
 80028f8:	2000      	movs	r0, #0
 80028fa:	f000 fb6d 	bl	8002fd8 <LCD_IO_WriteData>
 80028fe:	201b      	movs	r0, #27
 8002900:	f000 fb6a 	bl	8002fd8 <LCD_IO_WriteData>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 8002904:	20b6      	movs	r0, #182	; 0xb6
 8002906:	f000 fb83 	bl	8003010 <LCD_IO_WriteReg>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
  LCD_IO_WriteData(RegValue);
 800290a:	200a      	movs	r0, #10
 800290c:	f000 fb64 	bl	8002fd8 <LCD_IO_WriteData>
 8002910:	20a2      	movs	r0, #162	; 0xa2
 8002912:	f000 fb61 	bl	8002fd8 <LCD_IO_WriteData>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 8002916:	20c0      	movs	r0, #192	; 0xc0
 8002918:	f000 fb7a 	bl	8003010 <LCD_IO_WriteReg>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
  LCD_IO_WriteData(RegValue);
 800291c:	2010      	movs	r0, #16
 800291e:	f000 fb5b 	bl	8002fd8 <LCD_IO_WriteData>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 8002922:	20c1      	movs	r0, #193	; 0xc1
 8002924:	f000 fb74 	bl	8003010 <LCD_IO_WriteReg>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
  LCD_IO_WriteData(RegValue);
 8002928:	2010      	movs	r0, #16
 800292a:	f000 fb55 	bl	8002fd8 <LCD_IO_WriteData>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 800292e:	20c5      	movs	r0, #197	; 0xc5
 8002930:	f000 fb6e 	bl	8003010 <LCD_IO_WriteReg>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
  LCD_IO_WriteData(RegValue);
 8002934:	2045      	movs	r0, #69	; 0x45
 8002936:	f000 fb4f 	bl	8002fd8 <LCD_IO_WriteData>
 800293a:	2015      	movs	r0, #21
 800293c:	f000 fb4c 	bl	8002fd8 <LCD_IO_WriteData>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 8002940:	20c7      	movs	r0, #199	; 0xc7
 8002942:	f000 fb65 	bl	8003010 <LCD_IO_WriteReg>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
  LCD_IO_WriteData(RegValue);
 8002946:	2090      	movs	r0, #144	; 0x90
 8002948:	f000 fb46 	bl	8002fd8 <LCD_IO_WriteData>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 800294c:	2036      	movs	r0, #54	; 0x36
 800294e:	f000 fb5f 	bl	8003010 <LCD_IO_WriteReg>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
  LCD_IO_WriteData(RegValue);
 8002952:	20c8      	movs	r0, #200	; 0xc8
 8002954:	f000 fb40 	bl	8002fd8 <LCD_IO_WriteData>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 8002958:	20f2      	movs	r0, #242	; 0xf2
 800295a:	f000 fb59 	bl	8003010 <LCD_IO_WriteReg>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
  LCD_IO_WriteData(RegValue);
 800295e:	2000      	movs	r0, #0
 8002960:	f000 fb3a 	bl	8002fd8 <LCD_IO_WriteData>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 8002964:	20b0      	movs	r0, #176	; 0xb0
 8002966:	f000 fb53 	bl	8003010 <LCD_IO_WriteReg>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
  LCD_IO_WriteData(RegValue);
 800296a:	20c2      	movs	r0, #194	; 0xc2
 800296c:	f000 fb34 	bl	8002fd8 <LCD_IO_WriteData>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 8002970:	20b6      	movs	r0, #182	; 0xb6
 8002972:	f000 fb4d 	bl	8003010 <LCD_IO_WriteReg>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
  LCD_IO_WriteData(RegValue);
 8002976:	200a      	movs	r0, #10
 8002978:	f000 fb2e 	bl	8002fd8 <LCD_IO_WriteData>
 800297c:	20a7      	movs	r0, #167	; 0xa7
 800297e:	f000 fb2b 	bl	8002fd8 <LCD_IO_WriteData>
 8002982:	2027      	movs	r0, #39	; 0x27
 8002984:	f000 fb28 	bl	8002fd8 <LCD_IO_WriteData>
 8002988:	2004      	movs	r0, #4
 800298a:	f000 fb25 	bl	8002fd8 <LCD_IO_WriteData>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 800298e:	202a      	movs	r0, #42	; 0x2a
 8002990:	f000 fb3e 	bl	8003010 <LCD_IO_WriteReg>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
  LCD_IO_WriteData(RegValue);
 8002994:	2000      	movs	r0, #0
 8002996:	f000 fb1f 	bl	8002fd8 <LCD_IO_WriteData>
 800299a:	2000      	movs	r0, #0
 800299c:	f000 fb1c 	bl	8002fd8 <LCD_IO_WriteData>
 80029a0:	2000      	movs	r0, #0
 80029a2:	f000 fb19 	bl	8002fd8 <LCD_IO_WriteData>
 80029a6:	20ef      	movs	r0, #239	; 0xef
 80029a8:	f000 fb16 	bl	8002fd8 <LCD_IO_WriteData>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 80029ac:	202b      	movs	r0, #43	; 0x2b
 80029ae:	f000 fb2f 	bl	8003010 <LCD_IO_WriteReg>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
  LCD_IO_WriteData(RegValue);
 80029b2:	2000      	movs	r0, #0
 80029b4:	f000 fb10 	bl	8002fd8 <LCD_IO_WriteData>
 80029b8:	2000      	movs	r0, #0
 80029ba:	f000 fb0d 	bl	8002fd8 <LCD_IO_WriteData>
 80029be:	2001      	movs	r0, #1
 80029c0:	f000 fb0a 	bl	8002fd8 <LCD_IO_WriteData>
 80029c4:	203f      	movs	r0, #63	; 0x3f
 80029c6:	f000 fb07 	bl	8002fd8 <LCD_IO_WriteData>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 80029ca:	20f6      	movs	r0, #246	; 0xf6
 80029cc:	f000 fb20 	bl	8003010 <LCD_IO_WriteReg>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
  LCD_IO_WriteData(RegValue);
 80029d0:	2001      	movs	r0, #1
 80029d2:	f000 fb01 	bl	8002fd8 <LCD_IO_WriteData>
 80029d6:	2000      	movs	r0, #0
 80029d8:	f000 fafe 	bl	8002fd8 <LCD_IO_WriteData>
 80029dc:	2006      	movs	r0, #6
 80029de:	f000 fafb 	bl	8002fd8 <LCD_IO_WriteData>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 80029e2:	202c      	movs	r0, #44	; 0x2c
 80029e4:	f000 fb14 	bl	8003010 <LCD_IO_WriteReg>
  ili9341_WriteData(0x01);
  ili9341_WriteData(0x00);
  ili9341_WriteData(0x06);
  
  ili9341_WriteReg(LCD_GRAM);
  LCD_Delay(200);
 80029e8:	20c8      	movs	r0, #200	; 0xc8
 80029ea:	f000 fb2d 	bl	8003048 <LCD_Delay>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 80029ee:	2026      	movs	r0, #38	; 0x26
 80029f0:	f000 fb0e 	bl	8003010 <LCD_IO_WriteReg>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
  LCD_IO_WriteData(RegValue);
 80029f4:	2001      	movs	r0, #1
 80029f6:	f000 faef 	bl	8002fd8 <LCD_IO_WriteData>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 80029fa:	20e0      	movs	r0, #224	; 0xe0
 80029fc:	f000 fb08 	bl	8003010 <LCD_IO_WriteReg>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
  LCD_IO_WriteData(RegValue);
 8002a00:	200f      	movs	r0, #15
 8002a02:	f000 fae9 	bl	8002fd8 <LCD_IO_WriteData>
 8002a06:	2029      	movs	r0, #41	; 0x29
 8002a08:	f000 fae6 	bl	8002fd8 <LCD_IO_WriteData>
 8002a0c:	2024      	movs	r0, #36	; 0x24
 8002a0e:	f000 fae3 	bl	8002fd8 <LCD_IO_WriteData>
 8002a12:	200c      	movs	r0, #12
 8002a14:	f000 fae0 	bl	8002fd8 <LCD_IO_WriteData>
 8002a18:	200e      	movs	r0, #14
 8002a1a:	f000 fadd 	bl	8002fd8 <LCD_IO_WriteData>
 8002a1e:	2009      	movs	r0, #9
 8002a20:	f000 fada 	bl	8002fd8 <LCD_IO_WriteData>
 8002a24:	204e      	movs	r0, #78	; 0x4e
 8002a26:	f000 fad7 	bl	8002fd8 <LCD_IO_WriteData>
 8002a2a:	2078      	movs	r0, #120	; 0x78
 8002a2c:	f000 fad4 	bl	8002fd8 <LCD_IO_WriteData>
 8002a30:	203c      	movs	r0, #60	; 0x3c
 8002a32:	f000 fad1 	bl	8002fd8 <LCD_IO_WriteData>
 8002a36:	2009      	movs	r0, #9
 8002a38:	f000 face 	bl	8002fd8 <LCD_IO_WriteData>
 8002a3c:	2013      	movs	r0, #19
 8002a3e:	f000 facb 	bl	8002fd8 <LCD_IO_WriteData>
 8002a42:	2005      	movs	r0, #5
 8002a44:	f000 fac8 	bl	8002fd8 <LCD_IO_WriteData>
 8002a48:	2017      	movs	r0, #23
 8002a4a:	f000 fac5 	bl	8002fd8 <LCD_IO_WriteData>
 8002a4e:	2011      	movs	r0, #17
 8002a50:	f000 fac2 	bl	8002fd8 <LCD_IO_WriteData>
 8002a54:	2000      	movs	r0, #0
 8002a56:	f000 fabf 	bl	8002fd8 <LCD_IO_WriteData>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 8002a5a:	20e1      	movs	r0, #225	; 0xe1
 8002a5c:	f000 fad8 	bl	8003010 <LCD_IO_WriteReg>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
  LCD_IO_WriteData(RegValue);
 8002a60:	2000      	movs	r0, #0
 8002a62:	f000 fab9 	bl	8002fd8 <LCD_IO_WriteData>
 8002a66:	2016      	movs	r0, #22
 8002a68:	f000 fab6 	bl	8002fd8 <LCD_IO_WriteData>
 8002a6c:	201b      	movs	r0, #27
 8002a6e:	f000 fab3 	bl	8002fd8 <LCD_IO_WriteData>
 8002a72:	2004      	movs	r0, #4
 8002a74:	f000 fab0 	bl	8002fd8 <LCD_IO_WriteData>
 8002a78:	2011      	movs	r0, #17
 8002a7a:	f000 faad 	bl	8002fd8 <LCD_IO_WriteData>
 8002a7e:	2007      	movs	r0, #7
 8002a80:	f000 faaa 	bl	8002fd8 <LCD_IO_WriteData>
 8002a84:	2031      	movs	r0, #49	; 0x31
 8002a86:	f000 faa7 	bl	8002fd8 <LCD_IO_WriteData>
 8002a8a:	2033      	movs	r0, #51	; 0x33
 8002a8c:	f000 faa4 	bl	8002fd8 <LCD_IO_WriteData>
 8002a90:	2042      	movs	r0, #66	; 0x42
 8002a92:	f000 faa1 	bl	8002fd8 <LCD_IO_WriteData>
 8002a96:	2005      	movs	r0, #5
 8002a98:	f000 fa9e 	bl	8002fd8 <LCD_IO_WriteData>
 8002a9c:	200c      	movs	r0, #12
 8002a9e:	f000 fa9b 	bl	8002fd8 <LCD_IO_WriteData>
 8002aa2:	200a      	movs	r0, #10
 8002aa4:	f000 fa98 	bl	8002fd8 <LCD_IO_WriteData>
 8002aa8:	2028      	movs	r0, #40	; 0x28
 8002aaa:	f000 fa95 	bl	8002fd8 <LCD_IO_WriteData>
 8002aae:	202f      	movs	r0, #47	; 0x2f
 8002ab0:	f000 fa92 	bl	8002fd8 <LCD_IO_WriteData>
 8002ab4:	200f      	movs	r0, #15
 8002ab6:	f000 fa8f 	bl	8002fd8 <LCD_IO_WriteData>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 8002aba:	2011      	movs	r0, #17
 8002abc:	f000 faa8 	bl	8003010 <LCD_IO_WriteReg>
  ili9341_WriteData(0x28);
  ili9341_WriteData(0x2F);
  ili9341_WriteData(0x0F);
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
  LCD_Delay(200);
 8002ac0:	20c8      	movs	r0, #200	; 0xc8
 8002ac2:	f000 fac1 	bl	8003048 <LCD_Delay>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 8002ac6:	2029      	movs	r0, #41	; 0x29
 8002ac8:	f000 faa2 	bl	8003010 <LCD_IO_WriteReg>
 8002acc:	202c      	movs	r0, #44	; 0x2c
  ili9341_WriteReg(LCD_SLEEP_OUT);
  LCD_Delay(200);
  ili9341_WriteReg(LCD_DISPLAY_ON);
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
}
 8002ace:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 8002ad2:	f000 ba9d 	b.w	8003010 <LCD_IO_WriteReg>

08002ad6 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8002ad6:	b510      	push	{r4, lr}
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8002ad8:	b2c4      	uxtb	r4, r0
 8002ada:	2202      	movs	r2, #2
 8002adc:	2103      	movs	r1, #3
 8002ade:	4620      	mov	r0, r4
 8002ae0:	f000 fae0 	bl	80030a4 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8002ae4:	200a      	movs	r0, #10
 8002ae6:	f000 fb29 	bl	800313c <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8002aea:	4620      	mov	r0, r4
 8002aec:	2200      	movs	r2, #0
 8002aee:	2103      	movs	r1, #3
 8002af0:	f000 fad8 	bl	80030a4 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8002af4:	2002      	movs	r0, #2
}
 8002af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8002afa:	f000 bb1f 	b.w	800313c <IOE_Delay>

08002afe <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8002afe:	b538      	push	{r3, r4, r5, lr}
 8002b00:	4604      	mov	r4, r0
  /* Initialize IO BUS layer */
  IOE_Init(); 
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002b02:	b2e4      	uxtb	r4, r4
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8002b04:	f000 faa2 	bl	800304c <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	f000 fae4 	bl	80030d8 <IOE_Read>
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8002b10:	2101      	movs	r1, #1
{
  /* Initialize IO BUS layer */
  IOE_Init(); 
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002b12:	4605      	mov	r5, r0
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8002b14:	4620      	mov	r0, r4
 8002b16:	f000 fadf 	bl	80030d8 <IOE_Read>
{
  /* Initialize IO BUS layer */
  IOE_Init(); 
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002b1a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
}
 8002b1e:	b280      	uxth	r0, r0
 8002b20:	bd38      	pop	{r3, r4, r5, pc}

08002b22 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002b22:	b510      	push	{r4, lr}
  uint8_t state;
  uint8_t ret = 0;
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8002b24:	b2c4      	uxtb	r4, r0
 8002b26:	2140      	movs	r1, #64	; 0x40
 8002b28:	4620      	mov	r0, r4
 8002b2a:	f000 fad5 	bl	80030d8 <IOE_Read>
  
  if(state > 0)
 8002b2e:	0603      	lsls	r3, r0, #24
 8002b30:	d507      	bpl.n	8002b42 <stmpe811_TS_DetectTouch+0x20>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8002b32:	214c      	movs	r1, #76	; 0x4c
 8002b34:	4620      	mov	r0, r4
 8002b36:	f000 facf 	bl	80030d8 <IOE_Read>
    {
      ret = 1;
 8002b3a:	3000      	adds	r0, #0
 8002b3c:	bf18      	it	ne
 8002b3e:	2001      	movne	r0, #1
 8002b40:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002b42:	4620      	mov	r0, r4
 8002b44:	2201      	movs	r2, #1
 8002b46:	214b      	movs	r1, #75	; 0x4b
 8002b48:	f000 faac 	bl	80030a4 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	2200      	movs	r2, #0
 8002b50:	214b      	movs	r1, #75	; 0x4b
 8002b52:	f000 faa7 	bl	80030a4 <IOE_Write>
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
  uint8_t state;
  uint8_t ret = 0;
 8002b56:	2000      	movs	r0, #0
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
  }
  
  return ret;
}
 8002b58:	bd10      	pop	{r4, pc}

08002b5a <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002b5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	b2c4      	uxtb	r4, r0
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002b60:	460e      	mov	r6, r1
 8002b62:	4615      	mov	r5, r2
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8002b64:	21d7      	movs	r1, #215	; 0xd7
 8002b66:	eb0d 0203 	add.w	r2, sp, r3
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	f000 fad0 	bl	8003110 <IOE_ReadMultiple>
 8002b70:	9b01      	ldr	r3, [sp, #4]
 8002b72:	ba1b      	rev	r3, r3
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8002b74:	0d1a      	lsrs	r2, r3, #20
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002b76:	f3c3 230b 	ubfx	r3, r3, #8, #12
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8002b7a:	8032      	strh	r2, [r6, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002b7c:	4620      	mov	r0, r4
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002b7e:	802b      	strh	r3, [r5, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002b80:	2201      	movs	r2, #1
 8002b82:	214b      	movs	r1, #75	; 0x4b
 8002b84:	f000 fa8e 	bl	80030a4 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002b88:	2200      	movs	r2, #0
 8002b8a:	214b      	movs	r1, #75	; 0x4b
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f000 fa89 	bl	80030a4 <IOE_Write>
}
 8002b92:	b002      	add	sp, #8
 8002b94:	bd70      	pop	{r4, r5, r6, pc}
	...

08002b98 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8002b98:	b510      	push	{r4, lr}
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
  {
    if(stmpe811[idx] == DeviceAddr)
 8002b9a:	4b0a      	ldr	r3, [pc, #40]	; (8002bc4 <stmpe811_Init+0x2c>)
 8002b9c:	781a      	ldrb	r2, [r3, #0]
 8002b9e:	4290      	cmp	r0, r2
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8002ba0:	4604      	mov	r4, r0
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
  {
    if(stmpe811[idx] == DeviceAddr)
 8002ba2:	d00e      	beq.n	8002bc2 <stmpe811_Init+0x2a>
 8002ba4:	7859      	ldrb	r1, [r3, #1]
 8002ba6:	4288      	cmp	r0, r1
 8002ba8:	d100      	bne.n	8002bac <stmpe811_Init+0x14>
 8002baa:	bd10      	pop	{r4, pc}
 8002bac:	b10a      	cbz	r2, 8002bb2 <stmpe811_Init+0x1a>
 8002bae:	b941      	cbnz	r1, 8002bc2 <stmpe811_Init+0x2a>
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002bb0:	2201      	movs	r2, #1
    empty = stmpe811_GetInstance(0);
    
    if(empty < STMPE811_MAX_INSTANCE)
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8002bb2:	549c      	strb	r4, [r3, r2]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8002bb4:	f000 fa4a 	bl	800304c <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8002bb8:	4620      	mov	r0, r4
    }
  }
}
 8002bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8002bbe:	f7ff bf8a 	b.w	8002ad6 <stmpe811_Reset>
 8002bc2:	bd10      	pop	{r4, pc}
 8002bc4:	20001414 	.word	0x20001414

08002bc8 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8002bc8:	b510      	push	{r4, lr}
  uint8_t tmp = 0;
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002bca:	b2c4      	uxtb	r4, r0
 8002bcc:	2109      	movs	r1, #9
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f000 fa82 	bl	80030d8 <IOE_Read>
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8002bd4:	f040 0201 	orr.w	r2, r0, #1
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	4620      	mov	r0, r4
 8002bdc:	2109      	movs	r1, #9
}
 8002bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8002be2:	f000 ba5f 	b.w	80030a4 <IOE_Write>

08002be6 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8002be6:	b510      	push	{r4, lr}
  uint8_t tmp = 0;
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002be8:	b2c4      	uxtb	r4, r0
 8002bea:	2109      	movs	r1, #9
 8002bec:	4620      	mov	r0, r4
 8002bee:	f000 fa73 	bl	80030d8 <IOE_Read>

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8002bf2:	2109      	movs	r1, #9
 8002bf4:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
 8002bf8:	4620      	mov	r0, r4
    
}
 8002bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8002bfe:	f000 ba51 	b.w	80030a4 <IOE_Write>

08002c02 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002c02:	b538      	push	{r3, r4, r5, lr}
  uint8_t tmp = 0;
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002c04:	b2c5      	uxtb	r5, r0
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002c06:	460c      	mov	r4, r1
  uint8_t tmp = 0;
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002c08:	4628      	mov	r0, r5
 8002c0a:	210a      	movs	r1, #10
 8002c0c:	f000 fa64 	bl	80030d8 <IOE_Read>

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002c10:	ea40 0204 	orr.w	r2, r0, r4
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	4628      	mov	r0, r5
 8002c18:	210a      	movs	r1, #10
}
 8002c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002c1e:	f000 ba41 	b.w	80030a4 <IOE_Write>

08002c22 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002c22:	b510      	push	{r4, lr}
 8002c24:	4604      	mov	r4, r0
  IOE_ITConfig();
 8002c26:	f000 fa13 	bl	8003050 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	211f      	movs	r1, #31
 8002c2e:	f7ff ffe8 	bl	8002c02 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8002c32:	4620      	mov	r0, r4
}
 8002c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8002c38:	f7ff bfc6 	b.w	8002bc8 <stmpe811_EnableGlobalIT>

08002c3c <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002c3c:	b538      	push	{r3, r4, r5, lr}
  uint8_t tmp = 0;
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002c3e:	b2c5      	uxtb	r5, r0
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002c40:	460c      	mov	r4, r1
  uint8_t tmp = 0;
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002c42:	4628      	mov	r0, r5
 8002c44:	210a      	movs	r1, #10
 8002c46:	f000 fa47 	bl	80030d8 <IOE_Read>

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8002c4a:	ea20 0204 	bic.w	r2, r0, r4
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	4628      	mov	r0, r5
 8002c52:	210a      	movs	r1, #10
}
 8002c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002c58:	f000 ba24 	b.w	80030a4 <IOE_Write>

08002c5c <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8002c5c:	b510      	push	{r4, lr}
 8002c5e:	4604      	mov	r4, r0
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8002c60:	f7ff ffc1 	bl	8002be6 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002c64:	4620      	mov	r0, r4
 8002c66:	211f      	movs	r1, #31
}
 8002c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002c6c:	f7ff bfe6 	b.w	8002c3c <stmpe811_DisableITSource>

08002c70 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8002c70:	b510      	push	{r4, lr}
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8002c72:	b2c0      	uxtb	r0, r0
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8002c74:	460c      	mov	r4, r1
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8002c76:	210b      	movs	r1, #11
 8002c78:	f000 fa2e 	bl	80030d8 <IOE_Read>
}
 8002c7c:	4020      	ands	r0, r4
 8002c7e:	bd10      	pop	{r4, pc}

08002c80 <stmpe811_TS_ITStatus>:
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8002c80:	211f      	movs	r1, #31
 8002c82:	f7ff bff5 	b.w	8002c70 <stmpe811_ReadGITStatus>

08002c86 <stmpe811_ClearGlobalIT>:
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8002c86:	460a      	mov	r2, r1
 8002c88:	b2c0      	uxtb	r0, r0
 8002c8a:	210b      	movs	r1, #11
 8002c8c:	f000 ba0a 	b.w	80030a4 <IOE_Write>

08002c90 <stmpe811_TS_ClearIT>:
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8002c90:	211f      	movs	r1, #31
 8002c92:	f7ff bff8 	b.w	8002c86 <stmpe811_ClearGlobalIT>

08002c96 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002c96:	b538      	push	{r3, r4, r5, lr}
  uint8_t tmp = 0;
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8002c98:	b2c5      	uxtb	r5, r0
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002c9a:	460c      	mov	r4, r1
  uint8_t tmp = 0;
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8002c9c:	4628      	mov	r0, r5
 8002c9e:	2117      	movs	r1, #23
 8002ca0:	f000 fa1a 	bl	80030d8 <IOE_Read>

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8002ca4:	ea20 0204 	bic.w	r2, r0, r4
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	4628      	mov	r0, r5
 8002cac:	2117      	movs	r1, #23
}
 8002cae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8002cb2:	f000 b9f7 	b.w	80030a4 <IOE_Write>

08002cb6 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8002cb6:	b570      	push	{r4, r5, r6, lr}
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002cb8:	b2c4      	uxtb	r4, r0
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8002cba:	4606      	mov	r6, r0
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002cbc:	2104      	movs	r1, #4
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	f000 fa0a 	bl	80030d8 <IOE_Read>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002cc4:	2104      	movs	r1, #4
 8002cc6:	f000 02fb 	and.w	r2, r0, #251	; 0xfb
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002cca:	4605      	mov	r5, r0
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002ccc:	4620      	mov	r0, r4
 8002cce:	f000 f9e9 	bl	80030a4 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8002cd2:	4630      	mov	r0, r6
 8002cd4:	21f0      	movs	r1, #240	; 0xf0
 8002cd6:	f7ff ffde 	bl	8002c96 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002cda:	f005 02f8 	and.w	r2, r5, #248	; 0xf8
 8002cde:	4620      	mov	r0, r4
 8002ce0:	2104      	movs	r1, #4
 8002ce2:	f000 f9df 	bl	80030a4 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8002ce6:	2249      	movs	r2, #73	; 0x49
 8002ce8:	2120      	movs	r1, #32
 8002cea:	4620      	mov	r0, r4
 8002cec:	f000 f9da 	bl	80030a4 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8002cf0:	2002      	movs	r0, #2
 8002cf2:	f000 fa23 	bl	800313c <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	2121      	movs	r1, #33	; 0x21
 8002cfc:	f000 f9d2 	bl	80030a4 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8002d00:	4620      	mov	r0, r4
 8002d02:	229a      	movs	r2, #154	; 0x9a
 8002d04:	2141      	movs	r1, #65	; 0x41
 8002d06:	f000 f9cd 	bl	80030a4 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	214a      	movs	r1, #74	; 0x4a
 8002d10:	f000 f9c8 	bl	80030a4 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002d14:	4620      	mov	r0, r4
 8002d16:	2201      	movs	r2, #1
 8002d18:	214b      	movs	r1, #75	; 0x4b
 8002d1a:	f000 f9c3 	bl	80030a4 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002d1e:	4620      	mov	r0, r4
 8002d20:	2200      	movs	r2, #0
 8002d22:	214b      	movs	r1, #75	; 0x4b
 8002d24:	f000 f9be 	bl	80030a4 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002d28:	4620      	mov	r0, r4
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	2156      	movs	r1, #86	; 0x56
 8002d2e:	f000 f9b9 	bl	80030a4 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8002d32:	4620      	mov	r0, r4
 8002d34:	2201      	movs	r2, #1
 8002d36:	2158      	movs	r1, #88	; 0x58
 8002d38:	f000 f9b4 	bl	80030a4 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	2201      	movs	r2, #1
 8002d40:	2140      	movs	r1, #64	; 0x40
 8002d42:	f000 f9af 	bl	80030a4 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8002d46:	4620      	mov	r0, r4
 8002d48:	22ff      	movs	r2, #255	; 0xff
 8002d4a:	210b      	movs	r1, #11
 8002d4c:	f000 f9aa 	bl	80030a4 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002d50:	2002      	movs	r0, #2
}
 8002d52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002d56:	f000 b9f1 	b.w	800313c <IOE_Delay>
	...

08002d5c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002d5c:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002d5e:	4c21      	ldr	r4, [pc, #132]	; (8002de4 <SPIx_Init+0x88>)

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002d60:	b088      	sub	sp, #32
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002d62:	4620      	mov	r0, r4
 8002d64:	f002 fe2f 	bl	80059c6 <HAL_SPI_GetState>
 8002d68:	2800      	cmp	r0, #0
 8002d6a:	d138      	bne.n	8002dde <SPIx_Init+0x82>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002d6c:	4b1e      	ldr	r3, [pc, #120]	; (8002de8 <SPIx_Init+0x8c>)
 8002d6e:	6023      	str	r3, [r4, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002d70:	2318      	movs	r3, #24
 8002d72:	61e3      	str	r3, [r4, #28]
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial  = 7;
 8002d74:	2307      	movs	r3, #7
 8002d76:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002d78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d7c:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002d7e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002d82:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002d84:	4b19      	ldr	r3, [pc, #100]	; (8002dec <SPIx_Init+0x90>)
 8002d86:	9001      	str	r0, [sp, #4]
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002d88:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002d8a:	6160      	str	r0, [r4, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002d8c:	6120      	str	r0, [r4, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002d8e:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002d90:	60e0      	str	r0, [r4, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002d92:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002d94:	6260      	str	r0, [r4, #36]	; 0x24
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002d96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d98:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d9c:	645a      	str	r2, [r3, #68]	; 0x44
 8002d9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002da0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002da4:	9201      	str	r2, [sp, #4]
 8002da6:	9a01      	ldr	r2, [sp, #4]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002da8:	9002      	str	r0, [sp, #8]
 8002daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002dac:	4810      	ldr	r0, [pc, #64]	; (8002df0 <SPIx_Init+0x94>)

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002dae:	f042 0220 	orr.w	r2, r2, #32
 8002db2:	631a      	str	r2, [r3, #48]	; 0x30
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	f003 0320 	and.w	r3, r3, #32
 8002dba:	9302      	str	r3, [sp, #8]
 8002dbc:	9b02      	ldr	r3, [sp, #8]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002dbe:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002dc2:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002dc8:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	9306      	str	r3, [sp, #24]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002dce:	a903      	add	r1, sp, #12
  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002dd0:	2305      	movs	r3, #5
 8002dd2:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002dd4:	f001 f8c6 	bl	8003f64 <HAL_GPIO_Init>
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
  
    SPIx_MspInit(&SpiHandle);
    HAL_SPI_Init(&SpiHandle);
 8002dd8:	4620      	mov	r0, r4
 8002dda:	f002 fcf3 	bl	80057c4 <HAL_SPI_Init>
  } 
}
 8002dde:	b008      	add	sp, #32
 8002de0:	bd10      	pop	{r4, pc}
 8002de2:	bf00      	nop
 8002de4:	20001418 	.word	0x20001418
 8002de8:	40015000 	.word	0x40015000
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40021400 	.word	0x40021400

08002df4 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8002df4:	b570      	push	{r4, r5, r6, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002df6:	4e33      	ldr	r6, [pc, #204]	; (8002ec4 <I2Cx_Init+0xd0>)

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8002df8:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002dfa:	4630      	mov	r0, r6
 8002dfc:	f001 fd6e 	bl	80048dc <HAL_I2C_GetState>
 8002e00:	4604      	mov	r4, r0
 8002e02:	2800      	cmp	r0, #0
 8002e04:	d15b      	bne.n	8002ebe <I2Cx_Init+0xca>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8002e06:	4a30      	ldr	r2, [pc, #192]	; (8002ec8 <I2Cx_Init+0xd4>)
 8002e08:	4b30      	ldr	r3, [pc, #192]	; (8002ecc <I2Cx_Init+0xd8>)

  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002e0a:	4d31      	ldr	r5, [pc, #196]	; (8002ed0 <I2Cx_Init+0xdc>)
 8002e0c:	9000      	str	r0, [sp, #0]
static void I2Cx_Init(void)
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8002e0e:	e886 000c 	stmia.w	r6, {r2, r3}
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002e12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8002e16:	60b0      	str	r0, [r6, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8002e18:	60f0      	str	r0, [r6, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8002e1a:	6170      	str	r0, [r6, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8002e1c:	61b0      	str	r0, [r6, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8002e1e:	61f0      	str	r0, [r6, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8002e20:	6230      	str	r0, [r6, #32]
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1      = 0;
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002e22:	6133      	str	r3, [r6, #16]

  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002e24:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002e26:	f043 0304 	orr.w	r3, r3, #4
 8002e2a:	632b      	str	r3, [r5, #48]	; 0x30
 8002e2c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	9b00      	ldr	r3, [sp, #0]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002e36:	9001      	str	r0, [sp, #4]
 8002e38:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	632b      	str	r3, [r5, #48]	; 0x30
 8002e40:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002e42:	9005      	str	r0, [sp, #20]
  if (hi2c->Instance == DISCOVERY_I2Cx)
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	9301      	str	r3, [sp, #4]
 8002e4a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002e4c:	4821      	ldr	r0, [pc, #132]	; (8002ed4 <I2Cx_Init+0xe0>)
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8002e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e52:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002e54:	2312      	movs	r3, #18
 8002e56:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002e58:	2302      	movs	r3, #2
 8002e5a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002e5c:	a903      	add	r1, sp, #12
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002e5e:	2304      	movs	r3, #4
 8002e60:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002e62:	f001 f87f 	bl	8003f64 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8002e66:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002e6a:	a903      	add	r1, sp, #12
 8002e6c:	481a      	ldr	r0, [pc, #104]	; (8002ed8 <I2Cx_Init+0xe4>)
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8002e6e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002e70:	f001 f878 	bl	8003f64 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8002e74:	9402      	str	r4, [sp, #8]
 8002e76:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002e78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e7c:	642b      	str	r3, [r5, #64]	; 0x40
 8002e7e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002e80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e84:	9302      	str	r3, [sp, #8]
 8002e86:	9b02      	ldr	r3, [sp, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8002e88:	6a2b      	ldr	r3, [r5, #32]
 8002e8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e8e:	622b      	str	r3, [r5, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8002e90:	6a2b      	ldr	r3, [r5, #32]
 8002e92:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e96:	622b      	str	r3, [r5, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x00, 0);
 8002e98:	4622      	mov	r2, r4
 8002e9a:	4621      	mov	r1, r4
 8002e9c:	2048      	movs	r0, #72	; 0x48
 8002e9e:	f000 fdc9 	bl	8003a34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002ea2:	2048      	movs	r0, #72	; 0x48
 8002ea4:	f000 fdfa 	bl	8003a9c <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x00, 0);
 8002ea8:	4622      	mov	r2, r4
 8002eaa:	4621      	mov	r1, r4
 8002eac:	2049      	movs	r0, #73	; 0x49
 8002eae:	f000 fdc1 	bl	8003a34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8002eb2:	2049      	movs	r0, #73	; 0x49
 8002eb4:	f000 fdf2 	bl	8003a9c <HAL_NVIC_EnableIRQ>
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
    HAL_I2C_Init(&I2cHandle);
 8002eb8:	4630      	mov	r0, r6
 8002eba:	f001 fb0d 	bl	80044d8 <HAL_I2C_Init>
  }
}
 8002ebe:	b008      	add	sp, #32
 8002ec0:	bd70      	pop	{r4, r5, r6, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20001a68 	.word	0x20001a68
 8002ec8:	40005c00 	.word	0x40005c00
 8002ecc:	000186a0 	.word	0x000186a0
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40020000 	.word	0x40020000
 8002ed8:	40020800 	.word	0x40020800

08002edc <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8002edc:	b508      	push	{r3, lr}
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002ede:	4803      	ldr	r0, [pc, #12]	; (8002eec <I2Cx_Error+0x10>)
 8002ee0:	f001 fb69 	bl	80045b6 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
}
 8002ee4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8002ee8:	f7ff bf84 	b.w	8002df4 <I2Cx_Init>
 8002eec:	20001a68 	.word	0x20001a68

08002ef0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002ef0:	b507      	push	{r0, r1, r2, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002ef2:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <SPIx_Write+0x28>)
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002ef4:	a902      	add	r1, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002ef6:	681b      	ldr	r3, [r3, #0]
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002ef8:	f821 0d02 	strh.w	r0, [r1, #-2]!
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002efc:	2201      	movs	r2, #1
 8002efe:	4807      	ldr	r0, [pc, #28]	; (8002f1c <SPIx_Write+0x2c>)
 8002f00:	f002 fcb4 	bl	800586c <HAL_SPI_Transmit>
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002f04:	b120      	cbz	r0, 8002f10 <SPIx_Write+0x20>
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002f06:	4805      	ldr	r0, [pc, #20]	; (8002f1c <SPIx_Write+0x2c>)
 8002f08:	f002 fc9a 	bl	8005840 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002f0c:	f7ff ff26 	bl	8002d5c <SPIx_Init>
  if(status != HAL_OK)
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
  }
}
 8002f10:	b003      	add	sp, #12
 8002f12:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f16:	bf00      	nop
 8002f18:	20000198 	.word	0x20000198
 8002f1c:	20001418 	.word	0x20001418

08002f20 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002f20:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002f22:	4b29      	ldr	r3, [pc, #164]	; (8002fc8 <LCD_IO_Init+0xa8>)
 8002f24:	781d      	ldrb	r5, [r3, #0]

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002f26:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002f28:	2d00      	cmp	r5, #0
 8002f2a:	d14a      	bne.n	8002fc2 <LCD_IO_Init+0xa2>
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002f2c:	4c27      	ldr	r4, [pc, #156]	; (8002fcc <LCD_IO_Init+0xac>)
 8002f2e:	9500      	str	r5, [sp, #0]
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
  {
    Is_LCD_IO_Initialized = 1; 
 8002f30:	2601      	movs	r6, #1
 8002f32:	701e      	strb	r6, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002f34:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002f36:	4826      	ldr	r0, [pc, #152]	; (8002fd0 <LCD_IO_Init+0xb0>)
  if(Is_LCD_IO_Initialized == 0)
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002f38:	f043 0308 	orr.w	r3, r3, #8
 8002f3c:	6323      	str	r3, [r4, #48]	; 0x30
 8002f3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002f40:	9604      	str	r6, [sp, #16]
  if(Is_LCD_IO_Initialized == 0)
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	9300      	str	r3, [sp, #0]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002f48:	2702      	movs	r7, #2
  if(Is_LCD_IO_Initialized == 0)
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002f4a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002f4c:	9505      	str	r5, [sp, #20]
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002f4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002f52:	a903      	add	r1, sp, #12
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002f54:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002f56:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002f58:	f001 f804 	bl	8003f64 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002f5c:	9501      	str	r5, [sp, #4]
 8002f5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002f60:	481b      	ldr	r0, [pc, #108]	; (8002fd0 <LCD_IO_Init+0xb0>)
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002f62:	f043 0308 	orr.w	r3, r3, #8
 8002f66:	6323      	str	r3, [r4, #48]	; 0x30
 8002f68:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002f6a:	9604      	str	r6, [sp, #16]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	9301      	str	r3, [sp, #4]
 8002f72:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002f74:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
    
    LCD_RDX_GPIO_CLK_ENABLE();
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002f7a:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
    
    LCD_RDX_GPIO_CLK_ENABLE();
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002f7c:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002f7e:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002f80:	f000 fff0 	bl	8003f64 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002f84:	9502      	str	r5, [sp, #8]
 8002f86:	6b23      	ldr	r3, [r4, #48]	; 0x30
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002f88:	4812      	ldr	r0, [pc, #72]	; (8002fd4 <LCD_IO_Init+0xb4>)
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002f8a:	f043 0304 	orr.w	r3, r3, #4
 8002f8e:	6323      	str	r3, [r4, #48]	; 0x30
 8002f90:	6b23      	ldr	r3, [r4, #48]	; 0x30
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002f92:	9604      	str	r6, [sp, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002f94:	f003 0304 	and.w	r3, r3, #4
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002f98:	2404      	movs	r4, #4
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002f9a:	9302      	str	r3, [sp, #8]
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002f9c:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002f9e:	9b02      	ldr	r3, [sp, #8]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002fa0:	9403      	str	r4, [sp, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002fa2:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002fa4:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002fa6:	f000 ffdd 	bl	8003f64 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002faa:	462a      	mov	r2, r5
 8002fac:	4621      	mov	r1, r4
 8002fae:	4809      	ldr	r0, [pc, #36]	; (8002fd4 <LCD_IO_Init+0xb4>)
 8002fb0:	f001 f8c4 	bl	800413c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002fb4:	4632      	mov	r2, r6
 8002fb6:	4621      	mov	r1, r4
 8002fb8:	4806      	ldr	r0, [pc, #24]	; (8002fd4 <LCD_IO_Init+0xb4>)
 8002fba:	f001 f8bf 	bl	800413c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002fbe:	f7ff fecd 	bl	8002d5c <SPIx_Init>
  }
}
 8002fc2:	b009      	add	sp, #36	; 0x24
 8002fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20001470 	.word	0x20001470
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40020c00 	.word	0x40020c00
 8002fd4:	40020800 	.word	0x40020800

08002fd8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002fd8:	b538      	push	{r3, r4, r5, lr}
  /* Set WRX to send data */
  LCD_WRX_HIGH();
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002fda:	4c0b      	ldr	r4, [pc, #44]	; (8003008 <LCD_IO_WriteData+0x30>)

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002fdc:	4605      	mov	r5, r0
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fe4:	4809      	ldr	r0, [pc, #36]	; (800300c <LCD_IO_WriteData+0x34>)
 8002fe6:	f001 f8a9 	bl	800413c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002fea:	2200      	movs	r2, #0
 8002fec:	2104      	movs	r1, #4
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f001 f8a4 	bl	800413c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002ff4:	4628      	mov	r0, r5
 8002ff6:	f7ff ff7b 	bl	8002ef0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	2104      	movs	r1, #4
}
 8003000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
  SPIx_Write(RegValue);
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003004:	f001 b89a 	b.w	800413c <HAL_GPIO_WritePin>
 8003008:	40020800 	.word	0x40020800
 800300c:	40020c00 	.word	0x40020c00

08003010 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003010:	b538      	push	{r3, r4, r5, lr}
  /* Reset WRX to send command */
  LCD_WRX_LOW();
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003012:	4c0b      	ldr	r4, [pc, #44]	; (8003040 <LCD_IO_WriteReg+0x30>)

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003014:	4605      	mov	r5, r0
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003016:	2200      	movs	r2, #0
 8003018:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800301c:	4809      	ldr	r0, [pc, #36]	; (8003044 <LCD_IO_WriteReg+0x34>)
 800301e:	f001 f88d 	bl	800413c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003022:	2200      	movs	r2, #0
 8003024:	2104      	movs	r1, #4
 8003026:	4620      	mov	r0, r4
 8003028:	f001 f888 	bl	800413c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 800302c:	4628      	mov	r0, r5
 800302e:	f7ff ff5f 	bl	8002ef0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003032:	4620      	mov	r0, r4
 8003034:	2201      	movs	r2, #1
 8003036:	2104      	movs	r1, #4
}
 8003038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
  SPIx_Write(Reg);
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800303c:	f001 b87e 	b.w	800413c <HAL_GPIO_WritePin>
 8003040:	40020800 	.word	0x40020800
 8003044:	40020c00 	.word	0x40020c00

08003048 <LCD_Delay>:
 8003048:	f000 baa0 	b.w	800358c <HAL_Delay>

0800304c <IOE_Init>:
/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
  I2Cx_Init();
 800304c:	f7ff bed2 	b.w	8002df4 <I2Cx_Init>

08003050 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8003050:	b510      	push	{r4, lr}
 8003052:	b086      	sub	sp, #24
static void I2Cx_ITConfig(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8003054:	2400      	movs	r4, #0
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <IOE_ITConfig+0x48>)
 8003058:	9400      	str	r4, [sp, #0]
 800305a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 800305c:	480f      	ldr	r0, [pc, #60]	; (800309c <IOE_ITConfig+0x4c>)
static void I2Cx_ITConfig(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	631a      	str	r2, [r3, #48]	; 0x30
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8003066:	9404      	str	r4, [sp, #16]
static void I2Cx_ITConfig(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	9b00      	ldr	r3, [sp, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8003070:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003074:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8003076:	2301      	movs	r3, #1
 8003078:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 800307a:	a901      	add	r1, sp, #4
  STMPE811_INT_CLK_ENABLE();
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 800307c:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <IOE_ITConfig+0x50>)
 800307e:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8003080:	f000 ff70 	bl	8003f64 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x00, 0x00);
 8003084:	4622      	mov	r2, r4
 8003086:	4621      	mov	r1, r4
 8003088:	2028      	movs	r0, #40	; 0x28
 800308a:	f000 fcd3 	bl	8003a34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 800308e:	2028      	movs	r0, #40	; 0x28
 8003090:	f000 fd04 	bl	8003a9c <HAL_NVIC_EnableIRQ>
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
  I2Cx_ITConfig();
}
 8003094:	b006      	add	sp, #24
 8003096:	bd10      	pop	{r4, pc}
 8003098:	40023800 	.word	0x40023800
 800309c:	40020000 	.word	0x40020000
 80030a0:	10210000 	.word	0x10210000

080030a4 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80030a4:	b510      	push	{r4, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	ac06      	add	r4, sp, #24
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 80030aa:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <IOE_Write+0x2c>)
 80030ac:	f804 2d01 	strb.w	r2, [r4, #-1]!
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	9302      	str	r3, [sp, #8]
 80030b4:	2301      	movs	r3, #1
 80030b6:	460a      	mov	r2, r1
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	4601      	mov	r1, r0
 80030bc:	9400      	str	r4, [sp, #0]
 80030be:	4805      	ldr	r0, [pc, #20]	; (80030d4 <IOE_Write+0x30>)
 80030c0:	f001 fa92 	bl	80045e8 <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
 80030c4:	b108      	cbz	r0, 80030ca <IOE_Write+0x26>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80030c6:	f7ff ff09 	bl	8002edc <I2Cx_Error>
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
  I2Cx_WriteData(Addr, Reg, Value);
}
 80030ca:	b006      	add	sp, #24
 80030cc:	bd10      	pop	{r4, pc}
 80030ce:	bf00      	nop
 80030d0:	2000019c 	.word	0x2000019c
 80030d4:	20001a68 	.word	0x20001a68

080030d8 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 80030d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint8_t value = 0;
 80030da:	aa06      	add	r2, sp, #24
 80030dc:	2300      	movs	r3, #0
 80030de:	f802 3d01 	strb.w	r3, [r2, #-1]!
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80030e2:	4b09      	ldr	r3, [pc, #36]	; (8003108 <IOE_Read+0x30>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	9302      	str	r3, [sp, #8]
 80030e8:	2301      	movs	r3, #1
 80030ea:	e88d 000c 	stmia.w	sp, {r2, r3}
 80030ee:	460a      	mov	r2, r1
 80030f0:	4601      	mov	r1, r0
 80030f2:	4806      	ldr	r0, [pc, #24]	; (800310c <IOE_Read+0x34>)
 80030f4:	f001 fafc 	bl	80046f0 <HAL_I2C_Mem_Read>
 
  /* Check the communication status */
  if(status != HAL_OK)
 80030f8:	b108      	cbz	r0, 80030fe <IOE_Read+0x26>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80030fa:	f7ff feef 	bl	8002edc <I2Cx_Error>
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
  return I2Cx_ReadData(Addr, Reg);
}
 80030fe:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8003102:	b007      	add	sp, #28
 8003104:	f85d fb04 	ldr.w	pc, [sp], #4
 8003108:	2000019c 	.word	0x2000019c
 800310c:	20001a68 	.word	0x20001a68

08003110 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8003112:	4c08      	ldr	r4, [pc, #32]	; (8003134 <IOE_ReadMultiple+0x24>)
 8003114:	6824      	ldr	r4, [r4, #0]
 8003116:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 800311a:	460a      	mov	r2, r1
 800311c:	2301      	movs	r3, #1
 800311e:	4601      	mov	r1, r0
 8003120:	4805      	ldr	r0, [pc, #20]	; (8003138 <IOE_ReadMultiple+0x28>)
 8003122:	f001 fae5 	bl	80046f0 <HAL_I2C_Mem_Read>
  
  /* Check the communication status */
  if(status == HAL_OK)
 8003126:	b110      	cbz	r0, 800312e <IOE_ReadMultiple+0x1e>
    return 0;
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003128:	f7ff fed8 	bl	8002edc <I2Cx_Error>

    return 1;
 800312c:	2001      	movs	r0, #1
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
}
 800312e:	b004      	add	sp, #16
 8003130:	bd10      	pop	{r4, pc}
 8003132:	bf00      	nop
 8003134:	2000019c 	.word	0x2000019c
 8003138:	20001a68 	.word	0x20001a68

0800313c <IOE_Delay>:
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800313c:	f000 ba26 	b.w	800358c <HAL_Delay>

08003140 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003140:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t tmpmrd = 0;

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003144:	4c23      	ldr	r4, [pc, #140]	; (80031d4 <BSP_SDRAM_Initialization_sequence+0x94>)
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003146:	4d24      	ldr	r5, [pc, #144]	; (80031d8 <BSP_SDRAM_Initialization_sequence+0x98>)
{
  __IO uint32_t tmpmrd = 0;

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003148:	2601      	movs	r6, #1
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
  __IO uint32_t tmpmrd = 0;
 800314a:	f04f 0800 	mov.w	r8, #0

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800314e:	2708      	movs	r7, #8
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003150:	4621      	mov	r1, r4
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003152:	4682      	mov	sl, r0
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003154:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003158:	4628      	mov	r0, r5
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
  __IO uint32_t tmpmrd = 0;
 800315a:	f8cd 8004 	str.w	r8, [sp, #4]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800315e:	e884 00c0 	stmia.w	r4, {r6, r7}
  Command.AutoRefreshNumber       = 1;
 8003162:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 8003164:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003168:	f002 faab 	bl	80056c2 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800316c:	4630      	mov	r0, r6
 800316e:	f000 fa0d 	bl	800358c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003172:	2302      	movs	r3, #2
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003174:	4621      	mov	r1, r4
 8003176:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800317a:	4628      	mov	r0, r5
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800317c:	e884 0088 	stmia.w	r4, {r3, r7}
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 4;
 8003180:	f04f 0904 	mov.w	r9, #4
  HAL_Delay(1);

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
 8003184:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 8003186:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800318a:	f002 fa9a 	bl	80056c2 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800318e:	2303      	movs	r3, #3
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 4;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003190:	4621      	mov	r1, r4
 8003192:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003196:	4628      	mov	r0, r5
  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003198:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber       = 4;
 800319c:	f8c4 9008 	str.w	r9, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 80031a0:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80031a4:	f002 fa8d 	bl	80056c2 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80031a8:	f44f 730c 	mov.w	r3, #560	; 0x230
 80031ac:	9301      	str	r3, [sp, #4]
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = tmpmrd;
 80031ae:	9b01      	ldr	r3, [sp, #4]
 80031b0:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80031b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031b6:	4621      	mov	r1, r4
 80031b8:	4628      	mov	r0, r5
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80031ba:	f8c4 9000 	str.w	r9, [r4]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80031be:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber       = 1;
 80031c0:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition  = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80031c2:	f002 fa7e 	bl	80056c2 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 80031c6:	4651      	mov	r1, sl
 80031c8:	4628      	mov	r0, r5
 80031ca:	f002 fa91 	bl	80056f0 <HAL_SDRAM_ProgramRefreshRate>
}
 80031ce:	b002      	add	sp, #8
 80031d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031d4:	20001474 	.word	0x20001474
 80031d8:	20001500 	.word	0x20001500

080031dc <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
void BSP_SDRAM_Init(void)
{
 80031dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80031e0:	4e6c      	ldr	r6, [pc, #432]	; (8003394 <BSP_SDRAM_Init+0x1b8>)

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80031e2:	4f6d      	ldr	r7, [pc, #436]	; (8003398 <BSP_SDRAM_Init+0x1bc>)
  * @brief  Initializes the SDRAM device.
  */
void BSP_SDRAM_Init(void)
{
  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80031e4:	4b6d      	ldr	r3, [pc, #436]	; (800339c <BSP_SDRAM_Init+0x1c0>)
 80031e6:	6033      	str	r3, [r6, #0]
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80031e8:	2304      	movs	r3, #4
 80031ea:	60bb      	str	r3, [r7, #8]
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80031ec:	60f3      	str	r3, [r6, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80031ee:	2310      	movs	r3, #16
 80031f0:	6133      	str	r3, [r6, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80031f2:	2340      	movs	r3, #64	; 0x40
 80031f4:	6173      	str	r3, [r6, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80031f6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80031fa:	61b3      	str	r3, [r6, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80031fc:	f44f 6300 	mov.w	r3, #2048	; 0x800

/**
  * @brief  Initializes the SDRAM device.
  */
void BSP_SDRAM_Init(void)
{
 8003200:	b08e      	sub	sp, #56	; 0x38
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003202:	6233      	str	r3, [r6, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003204:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  Timing.RCDDelay             = 2;

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003208:	2400      	movs	r4, #0

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800320a:	2202      	movs	r2, #2
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800320c:	62b3      	str	r3, [r6, #40]	; 0x28
  Timing.RPDelay              = 2;
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800320e:	f04f 0801 	mov.w	r8, #1
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;
  SDRAM_HandleTypeDef  *hsdram = &SdramHandle;

  /* Enable FMC clock */
  __FMC_CLK_ENABLE();
 8003212:	4b63      	ldr	r3, [pc, #396]	; (80033a0 <BSP_SDRAM_Init+0x1c4>)

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003214:	603a      	str	r2, [r7, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003216:	2107      	movs	r1, #7
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003218:	613a      	str	r2, [r7, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 800321a:	617a      	str	r2, [r7, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800321c:	61ba      	str	r2, [r7, #24]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;
  SDRAM_HandleTypeDef  *hsdram = &SdramHandle;

  /* Enable FMC clock */
  __FMC_CLK_ENABLE();
 800321e:	9401      	str	r4, [sp, #4]
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003220:	6079      	str	r1, [r7, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003222:	60f9      	str	r1, [r7, #12]
  Timing.RPDelay              = 2;
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003224:	f8c6 8004 	str.w	r8, [r6, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003228:	60b4      	str	r4, [r6, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800322a:	61f4      	str	r4, [r6, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 800322c:	6274      	str	r4, [r6, #36]	; 0x24
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;
  SDRAM_HandleTypeDef  *hsdram = &SdramHandle;

  /* Enable FMC clock */
  __FMC_CLK_ENABLE();
 800322e:	6b99      	ldr	r1, [r3, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003230:	485c      	ldr	r0, [pc, #368]	; (80033a4 <BSP_SDRAM_Init+0x1c8>)
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;
  SDRAM_HandleTypeDef  *hsdram = &SdramHandle;

  /* Enable FMC clock */
  __FMC_CLK_ENABLE();
 8003232:	ea41 0108 	orr.w	r1, r1, r8
 8003236:	6399      	str	r1, [r3, #56]	; 0x38
 8003238:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800323a:	ea01 0108 	and.w	r1, r1, r8
 800323e:	9101      	str	r1, [sp, #4]
 8003240:	9901      	ldr	r1, [sp, #4]

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003242:	9402      	str	r4, [sp, #8]
 8003244:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003246:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 800324a:	6319      	str	r1, [r3, #48]	; 0x30
 800324c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800324e:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003252:	9102      	str	r1, [sp, #8]
 8003254:	9902      	ldr	r1, [sp, #8]

  /* Enable GPIOs clock */
  __GPIOB_CLK_ENABLE();
 8003256:	9403      	str	r4, [sp, #12]
 8003258:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800325a:	4311      	orrs	r1, r2
 800325c:	6319      	str	r1, [r3, #48]	; 0x30
 800325e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003260:	4011      	ands	r1, r2
 8003262:	9103      	str	r1, [sp, #12]
 8003264:	9903      	ldr	r1, [sp, #12]
  __GPIOC_CLK_ENABLE();
 8003266:	9404      	str	r4, [sp, #16]
 8003268:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800326a:	f041 0104 	orr.w	r1, r1, #4
 800326e:	6319      	str	r1, [r3, #48]	; 0x30
 8003270:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003272:	f001 0104 	and.w	r1, r1, #4
 8003276:	9104      	str	r1, [sp, #16]
 8003278:	9904      	ldr	r1, [sp, #16]
  __GPIOD_CLK_ENABLE();
 800327a:	9405      	str	r4, [sp, #20]
 800327c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800327e:	f041 0108 	orr.w	r1, r1, #8
 8003282:	6319      	str	r1, [r3, #48]	; 0x30
 8003284:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003286:	f001 0108 	and.w	r1, r1, #8
 800328a:	9105      	str	r1, [sp, #20]
 800328c:	9905      	ldr	r1, [sp, #20]
  __GPIOE_CLK_ENABLE();
 800328e:	9406      	str	r4, [sp, #24]
 8003290:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003292:	f041 0110 	orr.w	r1, r1, #16
 8003296:	6319      	str	r1, [r3, #48]	; 0x30
 8003298:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800329a:	f001 0110 	and.w	r1, r1, #16
 800329e:	9106      	str	r1, [sp, #24]
 80032a0:	9906      	ldr	r1, [sp, #24]
  __GPIOF_CLK_ENABLE();
 80032a2:	9407      	str	r4, [sp, #28]
 80032a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032a6:	f041 0120 	orr.w	r1, r1, #32
 80032aa:	6319      	str	r1, [r3, #48]	; 0x30
 80032ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032ae:	f001 0120 	and.w	r1, r1, #32
 80032b2:	9107      	str	r1, [sp, #28]
 80032b4:	9907      	ldr	r1, [sp, #28]
  __GPIOG_CLK_ENABLE();
 80032b6:	9408      	str	r4, [sp, #32]
 80032b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032ba:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80032be:	6319      	str	r1, [r3, #48]	; 0x30
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   +-------------------+

  */

  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80032c2:	920a      	str	r2, [sp, #40]	; 0x28
  __GPIOB_CLK_ENABLE();
  __GPIOC_CLK_ENABLE();
  __GPIOD_CLK_ENABLE();
  __GPIOE_CLK_ENABLE();
  __GPIOF_CLK_ENABLE();
  __GPIOG_CLK_ENABLE();
 80032c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c8:	9308      	str	r3, [sp, #32]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80032ca:	ad0e      	add	r5, sp, #56	; 0x38
  __GPIOB_CLK_ENABLE();
  __GPIOC_CLK_ENABLE();
  __GPIOD_CLK_ENABLE();
  __GPIOE_CLK_ENABLE();
  __GPIOF_CLK_ENABLE();
  __GPIOG_CLK_ENABLE();
 80032cc:	9b08      	ldr	r3, [sp, #32]

  */

  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80032ce:	920c      	str	r2, [sp, #48]	; 0x30
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80032d0:	230c      	movs	r3, #12
 80032d2:	930d      	str	r3, [sp, #52]	; 0x34

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80032d4:	2360      	movs	r3, #96	; 0x60
 80032d6:	f845 3d14 	str.w	r3, [r5, #-20]!
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80032da:	4629      	mov	r1, r5
  */

  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80032dc:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80032de:	f000 fe41 	bl	8003f64 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80032e2:	4629      	mov	r1, r5
 80032e4:	4830      	ldr	r0, [pc, #192]	; (80033a8 <BSP_SDRAM_Init+0x1cc>)
  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;
 80032e6:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80032ea:	f000 fe3b 	bl	8003f64 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80032ee:	f24c 7303 	movw	r3, #50947	; 0xc703
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80032f2:	4629      	mov	r1, r5
 80032f4:	482d      	ldr	r0, [pc, #180]	; (80033ac <BSP_SDRAM_Init+0x1d0>)
  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80032f6:	9309      	str	r3, [sp, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80032f8:	f000 fe34 	bl	8003f64 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80032fc:	f64f 7383 	movw	r3, #65411	; 0xff83
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003300:	4629      	mov	r1, r5
 8003302:	482b      	ldr	r0, [pc, #172]	; (80033b0 <BSP_SDRAM_Init+0x1d4>)
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003304:	9309      	str	r3, [sp, #36]	; 0x24
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003306:	f000 fe2d 	bl	8003f64 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 800330a:	f64f 033f 	movw	r3, #63551	; 0xf83f
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800330e:	4629      	mov	r1, r5
 8003310:	4828      	ldr	r0, [pc, #160]	; (80033b4 <BSP_SDRAM_Init+0x1d8>)
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 8003312:	9309      	str	r3, [sp, #36]	; 0x24
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003314:	f000 fe26 	bl	8003f64 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003318:	4629      	mov	r1, r5
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800331a:	f248 1333 	movw	r3, #33075	; 0x8133
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800331e:	4d26      	ldr	r5, [pc, #152]	; (80033b8 <BSP_SDRAM_Init+0x1dc>)
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003320:	4826      	ldr	r0, [pc, #152]	; (80033bc <BSP_SDRAM_Init+0x1e0>)
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003322:	9309      	str	r3, [sp, #36]	; 0x24
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003324:	f000 fe1e 	bl	8003f64 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003328:	2380      	movs	r3, #128	; 0x80
 800332a:	60ab      	str	r3, [r5, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800332c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003330:	60eb      	str	r3, [r5, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003336:	612b      	str	r3, [r5, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800333c:	616b      	str	r3, [r5, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800333e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003342:	61ab      	str	r3, [r5, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003344:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003348:	622b      	str	r3, [r5, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800334a:	2303      	movs	r3, #3
 800334c:	62ab      	str	r3, [r5, #40]	; 0x28

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);

  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800334e:	4628      	mov	r0, r5
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;

  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003350:	4b1b      	ldr	r3, [pc, #108]	; (80033c0 <BSP_SDRAM_Init+0x1e4>)
 8003352:	602b      	str	r3, [r5, #0]
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003354:	606c      	str	r4, [r5, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003356:	61ec      	str	r4, [r5, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003358:	626c      	str	r4, [r5, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800335a:	62ec      	str	r4, [r5, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 800335c:	632c      	str	r4, [r5, #48]	; 0x30

  dmaHandle.Instance = SDRAM_DMAx_STREAM;

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800335e:	6335      	str	r5, [r6, #48]	; 0x30
 8003360:	63ae      	str	r6, [r5, #56]	; 0x38

  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003362:	f000 fc5b 	bl	8003c1c <HAL_DMA_DeInit>

  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle);
 8003366:	4628      	mov	r0, r5
 8003368:	f000 fbe2 	bl	8003b30 <HAL_DMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0, 0);
 800336c:	4622      	mov	r2, r4
 800336e:	4621      	mov	r1, r4
 8003370:	2038      	movs	r0, #56	; 0x38
 8003372:	f000 fb5f 	bl	8003a34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003376:	2038      	movs	r0, #56	; 0x38
 8003378:	f000 fb90 	bl	8003a9c <HAL_NVIC_EnableIRQ>
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;

  /* SDRAM controller initialization */
  MspInit();
  HAL_SDRAM_Init(&SdramHandle, &Timing);
 800337c:	4639      	mov	r1, r7
 800337e:	4630      	mov	r0, r6
 8003380:	f002 f97f 	bl	8005682 <HAL_SDRAM_Init>

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003384:	f240 506a 	movw	r0, #1386	; 0x56a
 8003388:	f7ff feda 	bl	8003140 <BSP_SDRAM_Initialization_sequence>
}
 800338c:	b00e      	add	sp, #56	; 0x38
 800338e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003392:	bf00      	nop
 8003394:	20001500 	.word	0x20001500
 8003398:	20001484 	.word	0x20001484
 800339c:	a0000140 	.word	0xa0000140
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40020400 	.word	0x40020400
 80033a8:	40020800 	.word	0x40020800
 80033ac:	40020c00 	.word	0x40020c00
 80033b0:	40021000 	.word	0x40021000
 80033b4:	40021400 	.word	0x40021400
 80033b8:	200014a0 	.word	0x200014a0
 80033bc:	40021800 	.word	0x40021800
 80033c0:	40026410 	.word	0x40026410

080033c4 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80033c4:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = TS_ERROR;

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 80033c6:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <BSP_TS_Init+0x34>)
  TsYBoundary = YSize;

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80033c8:	4c0c      	ldr	r4, [pc, #48]	; (80033fc <BSP_TS_Init+0x38>)
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
  uint8_t ret = TS_ERROR;

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 80033ca:	8018      	strh	r0, [r3, #0]
  TsYBoundary = YSize;
 80033cc:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <BSP_TS_Init+0x3c>)

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80033ce:	2082      	movs	r0, #130	; 0x82
{
  uint8_t ret = TS_ERROR;

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
  TsYBoundary = YSize;
 80033d0:	8019      	strh	r1, [r3, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80033d2:	6863      	ldr	r3, [r4, #4]
 80033d4:	4798      	blx	r3
 80033d6:	f640 0311 	movw	r3, #2065	; 0x811
 80033da:	4298      	cmp	r0, r3
 80033dc:	d10a      	bne.n	80033f4 <BSP_TS_Init+0x30>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 80033de:	4d09      	ldr	r5, [pc, #36]	; (8003404 <BSP_TS_Init+0x40>)
  }

  if(ret == TS_OK)
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 80033e0:	6823      	ldr	r3, [r4, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 80033e2:	602c      	str	r4, [r5, #0]
  }

  if(ret == TS_OK)
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 80033e4:	2082      	movs	r0, #130	; 0x82
 80033e6:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 80033e8:	682b      	ldr	r3, [r5, #0]
 80033ea:	2082      	movs	r0, #130	; 0x82
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	4798      	blx	r3
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;

    ret = TS_OK;
 80033f0:	2000      	movs	r0, #0
 80033f2:	bd38      	pop	{r3, r4, r5, pc}
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
  uint8_t ret = TS_ERROR;
 80033f4:	2001      	movs	r0, #1
    TsDrv->Init(TS_I2C_ADDRESS);
    TsDrv->Start(TS_I2C_ADDRESS);
  }

  return ret;
}
 80033f6:	bd38      	pop	{r3, r4, r5, pc}
 80033f8:	20001540 	.word	0x20001540
 80033fc:	20000170 	.word	0x20000170
 8003400:	20001542 	.word	0x20001542
 8003404:	20001538 	.word	0x20001538

08003408 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8003408:	b573      	push	{r0, r1, r4, r5, r6, lr}
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 800340a:	4d2a      	ldr	r5, [pc, #168]	; (80034b4 <BSP_TS_GetState+0xac>)
 800340c:	682b      	ldr	r3, [r5, #0]
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 800340e:	4604      	mov	r4, r0
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2082      	movs	r0, #130	; 0x82
 8003414:	4798      	blx	r3
 8003416:	b280      	uxth	r0, r0
 8003418:	8020      	strh	r0, [r4, #0]
  
  if(TsState->TouchDetected)
 800341a:	2800      	cmp	r0, #0
 800341c:	d048      	beq.n	80034b0 <BSP_TS_GetState+0xa8>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 800341e:	682b      	ldr	r3, [r5, #0]
 8003420:	f10d 0206 	add.w	r2, sp, #6
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	a901      	add	r1, sp, #4
 8003428:	2082      	movs	r0, #130	; 0x82
 800342a:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
    
    /* Y value second correction */
    yr = y / 11;
 800342c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003430:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003434:	b29b      	uxth	r3, r3
 8003436:	220b      	movs	r2, #11
 8003438:	fbb3 f3f2 	udiv	r3, r3, r2
    
    /* Return y position value */
    if(yr <= 0)
 800343c:	b133      	cbz	r3, 800344c <BSP_TS_GetState+0x44>
    {
      yr = 0;
    }
    else if (yr > TsYBoundary)
 800343e:	4a1e      	ldr	r2, [pc, #120]	; (80034b8 <BSP_TS_GetState+0xb0>)
 8003440:	8812      	ldrh	r2, [r2, #0]
 8003442:	4293      	cmp	r3, r2
    {
      yr = TsYBoundary - 1;
 8003444:	bf84      	itt	hi
 8003446:	f102 33ff 	addhi.w	r3, r2, #4294967295
 800344a:	b29b      	uxthhi	r3, r3
    else
    {}
    y = yr;
    
    /* X value first correction */
    if(x <= 3000)
 800344c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8003450:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8003454:	428a      	cmp	r2, r1
    {
      x = 3870 - x;
 8003456:	bf95      	itete	ls
 8003458:	f5c2 6271 	rsbls	r2, r2, #3856	; 0xf10
    }
    else
    {
      x = 3800 - x;
 800345c:	f5c2 626d 	rsbhi	r2, r2, #3792	; 0xed0
    y = yr;
    
    /* X value first correction */
    if(x <= 3000)
    {
      x = 3870 - x;
 8003460:	320e      	addls	r2, #14
    }
    else
    {
      x = 3800 - x;
 8003462:	3208      	addhi	r2, #8
 8003464:	f8ad 2004 	strh.w	r2, [sp, #4]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8003468:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800346c:	220f      	movs	r2, #15
 800346e:	fbb0 f0f2 	udiv	r0, r0, r2
    
    /* Return X position value */
    if(xr <= 0)
 8003472:	b130      	cbz	r0, 8003482 <BSP_TS_GetState+0x7a>
    {
      xr = 0;
    }
    else if (xr > TsXBoundary)
 8003474:	4a11      	ldr	r2, [pc, #68]	; (80034bc <BSP_TS_GetState+0xb4>)
 8003476:	8812      	ldrh	r2, [r2, #0]
 8003478:	4290      	cmp	r0, r2
    {
      xr = TsXBoundary - 1;
 800347a:	bf84      	itt	hi
 800347c:	f102 30ff 	addhi.w	r0, r2, #4294967295
 8003480:	b280      	uxthhi	r0, r0
    }
    else 
    {}
    
    x = xr;
    xDiff = x > _x? (x - _x): (_x - x);
 8003482:	4e0f      	ldr	r6, [pc, #60]	; (80034c0 <BSP_TS_GetState+0xb8>)
    yDiff = y > _y? (y - _y): (_y - y); 
 8003484:	4d0f      	ldr	r5, [pc, #60]	; (80034c4 <BSP_TS_GetState+0xbc>)
    }
    else 
    {}
    
    x = xr;
    xDiff = x > _x? (x - _x): (_x - x);
 8003486:	6832      	ldr	r2, [r6, #0]
 8003488:	4290      	cmp	r0, r2
 800348a:	bf8c      	ite	hi
 800348c:	1a82      	subhi	r2, r0, r2
 800348e:	1a12      	subls	r2, r2, r0
 8003490:	b291      	uxth	r1, r2
    yDiff = y > _y? (y - _y): (_y - y); 
 8003492:	682a      	ldr	r2, [r5, #0]
 8003494:	4293      	cmp	r3, r2
 8003496:	bf8c      	ite	hi
 8003498:	1a9a      	subhi	r2, r3, r2
 800349a:	1ad2      	subls	r2, r2, r3
 800349c:	b292      	uxth	r2, r2
    
    if (xDiff + yDiff > 5)
 800349e:	440a      	add	r2, r1
 80034a0:	2a05      	cmp	r2, #5
    {
      _x = x;
 80034a2:	bfc4      	itt	gt
 80034a4:	6030      	strgt	r0, [r6, #0]
      _y = y; 
 80034a6:	602b      	strgt	r3, [r5, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 80034a8:	6833      	ldr	r3, [r6, #0]
 80034aa:	8063      	strh	r3, [r4, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 80034ac:	682b      	ldr	r3, [r5, #0]
 80034ae:	80a3      	strh	r3, [r4, #4]
  }
}
 80034b0:	b002      	add	sp, #8
 80034b2:	bd70      	pop	{r4, r5, r6, pc}
 80034b4:	20001538 	.word	0x20001538
 80034b8:	20001542 	.word	0x20001542
 80034bc:	20001540 	.word	0x20001540
 80034c0:	2000153c 	.word	0x2000153c
 80034c4:	20001534 	.word	0x20001534

080034c8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034c8:	490f      	ldr	r1, [pc, #60]	; (8003508 <SystemInit+0x40>)
 80034ca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80034ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80034d6:	4b0d      	ldr	r3, [pc, #52]	; (800350c <SystemInit+0x44>)
 80034d8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80034da:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80034dc:	f042 0201 	orr.w	r2, r2, #1
 80034e0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80034e2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80034ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80034ee:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80034f0:	4a07      	ldr	r2, [pc, #28]	; (8003510 <SystemInit+0x48>)
 80034f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034fa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80034fc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80034fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003502:	608b      	str	r3, [r1, #8]
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	e000ed00 	.word	0xe000ed00
 800350c:	40023800 	.word	0x40023800
 8003510:	24003010 	.word	0x24003010

08003514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003514:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8003516:	4b08      	ldr	r3, [pc, #32]	; (8003538 <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003518:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003520:	fbb0 f0f3 	udiv	r0, r0, r3
 8003524:	f000 fac6 	bl	8003ab4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8003528:	2200      	movs	r2, #0
 800352a:	4621      	mov	r1, r4
 800352c:	f04f 30ff 	mov.w	r0, #4294967295
 8003530:	f000 fa80 	bl	8003a34 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8003534:	2000      	movs	r0, #0
 8003536:	bd10      	pop	{r4, pc}
 8003538:	200001a0 	.word	0x200001a0

0800353c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800353c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800353e:	4b0b      	ldr	r3, [pc, #44]	; (800356c <HAL_Init+0x30>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003546:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800354e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003556:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003558:	2003      	movs	r0, #3
 800355a:	f000 fa59 	bl	8003a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800355e:	2000      	movs	r0, #0
 8003560:	f7ff ffd8 	bl	8003514 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003564:	f7fe fe68 	bl	8002238 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8003568:	2000      	movs	r0, #0
 800356a:	bd08      	pop	{r3, pc}
 800356c:	40023c00 	.word	0x40023c00

08003570 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8003570:	4a02      	ldr	r2, [pc, #8]	; (800357c <HAL_IncTick+0xc>)
 8003572:	6813      	ldr	r3, [r2, #0]
 8003574:	3301      	adds	r3, #1
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	20001abc 	.word	0x20001abc

08003580 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003580:	4b01      	ldr	r3, [pc, #4]	; (8003588 <HAL_GetTick+0x8>)
 8003582:	6818      	ldr	r0, [r3, #0]
}
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	20001abc 	.word	0x20001abc

0800358c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800358c:	b513      	push	{r0, r1, r4, lr}
 800358e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 8003590:	f7ff fff6 	bl	8003580 <HAL_GetTick>
 8003594:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8003596:	f7ff fff3 	bl	8003580 <HAL_GetTick>
 800359a:	9b01      	ldr	r3, [sp, #4]
 800359c:	1b00      	subs	r0, r0, r4
 800359e:	4298      	cmp	r0, r3
 80035a0:	d3f9      	bcc.n	8003596 <HAL_Delay+0xa>
  {
  }
}
 80035a2:	b002      	add	sp, #8
 80035a4:	bd10      	pop	{r4, pc}
	...

080035a8 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035a8:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80035aa:	4604      	mov	r4, r0
 80035ac:	2800      	cmp	r0, #0
 80035ae:	f000 809e 	beq.w	80036ee <HAL_ADC_Init+0x146>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80035b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80035b4:	b923      	cbnz	r3, 80035c0 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035b6:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035b8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035bc:	f7fe fe72 	bl	80022a4 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035c2:	06db      	lsls	r3, r3, #27
 80035c4:	f100 808e 	bmi.w	80036e4 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035ce:	f023 0302 	bic.w	r3, r3, #2
 80035d2:	f043 0302 	orr.w	r3, r3, #2
 80035d6:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80035d8:	4b46      	ldr	r3, [pc, #280]	; (80036f4 <HAL_ADC_Init+0x14c>)
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80035e0:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80035e2:	6859      	ldr	r1, [r3, #4]
 80035e4:	6862      	ldr	r2, [r4, #4]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035ea:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035ec:	6921      	ldr	r1, [r4, #16]
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035ee:	685a      	ldr	r2, [r3, #4]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035f6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80035fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003606:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003608:	6859      	ldr	r1, [r3, #4]
 800360a:	68a2      	ldr	r2, [r4, #8]
 800360c:	430a      	orrs	r2, r1
 800360e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003616:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003618:	6899      	ldr	r1, [r3, #8]
 800361a:	68e2      	ldr	r2, [r4, #12]
 800361c:	430a      	orrs	r2, r1
 800361e:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003620:	4a35      	ldr	r2, [pc, #212]	; (80036f8 <HAL_ADC_Init+0x150>)
 8003622:	4290      	cmp	r0, r2
 8003624:	d00e      	beq.n	8003644 <HAL_ADC_Init+0x9c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003626:	6899      	ldr	r1, [r3, #8]
 8003628:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800362c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	4302      	orrs	r2, r0
 8003632:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800363a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800363c:	6899      	ldr	r1, [r3, #8]
 800363e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003640:	430a      	orrs	r2, r1
 8003642:	e006      	b.n	8003652 <HAL_ADC_Init+0xaa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800364a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003652:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003654:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8003656:	69a1      	ldr	r1, [r4, #24]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003658:	f022 0202 	bic.w	r2, r2, #2
 800365c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003664:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003666:	6a22      	ldr	r2, [r4, #32]
 8003668:	b19a      	cbz	r2, 8003692 <HAL_ADC_Init+0xea>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003670:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003678:	605a      	str	r2, [r3, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800367e:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003682:	fab2 f182 	clz	r1, r2
 8003686:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003688:	6858      	ldr	r0, [r3, #4]
 800368a:	3a01      	subs	r2, #1
 800368c:	408a      	lsls	r2, r1
 800368e:	4302      	orrs	r2, r0
 8003690:	e002      	b.n	8003698 <HAL_ADC_Init+0xf0>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003698:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800369a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800369c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80036a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036a2:	69e2      	ldr	r2, [r4, #28]
 80036a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036a6:	3a01      	subs	r2, #1
 80036a8:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 80036ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036ae:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80036b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80036be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036c0:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036c2:	6961      	ldr	r1, [r4, #20]
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036ca:	689a      	ldr	r2, [r3, #8]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036cc:	2000      	movs	r0, #0
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036ce:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80036d2:	609a      	str	r2, [r3, #8]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036d4:	6460      	str	r0, [r4, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036d8:	f023 0303 	bic.w	r3, r3, #3
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	6423      	str	r3, [r4, #64]	; 0x40
 80036e2:	e000      	b.n	80036e6 <HAL_ADC_Init+0x13e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036e4:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80036e6:	2300      	movs	r3, #0
 80036e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80036ec:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80036ee:	2001      	movs	r0, #1
  /* Release Lock */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80036f0:	bd10      	pop	{r4, pc}
 80036f2:	bf00      	nop
 80036f4:	40012300 	.word	0x40012300
 80036f8:	0f000001 	.word	0x0f000001

080036fc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80036fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036fe:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8003700:	2200      	movs	r2, #0
 8003702:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003704:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8003708:	2a01      	cmp	r2, #1
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800370a:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800370c:	d064      	beq.n	80037d8 <HAL_ADC_Start_DMA+0xdc>
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800370e:	6805      	ldr	r5, [r0, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003710:	2201      	movs	r2, #1
 8003712:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003716:	68aa      	ldr	r2, [r5, #8]
 8003718:	07d2      	lsls	r2, r2, #31
 800371a:	d503      	bpl.n	8003724 <HAL_ADC_Start_DMA+0x28>
      counter--;
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800371c:	68aa      	ldr	r2, [r5, #8]
 800371e:	07d0      	lsls	r0, r2, #31
 8003720:	d413      	bmi.n	800374a <HAL_ADC_Start_DMA+0x4e>
 8003722:	e04e      	b.n	80037c2 <HAL_ADC_Start_DMA+0xc6>
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003724:	68aa      	ldr	r2, [r5, #8]
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	60aa      	str	r2, [r5, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800372c:	4a2c      	ldr	r2, [pc, #176]	; (80037e0 <HAL_ADC_Start_DMA+0xe4>)
 800372e:	6810      	ldr	r0, [r2, #0]
 8003730:	4a2c      	ldr	r2, [pc, #176]	; (80037e4 <HAL_ADC_Start_DMA+0xe8>)
 8003732:	fbb0 f0f2 	udiv	r0, r0, r2
 8003736:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800373a:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 800373c:	9a01      	ldr	r2, [sp, #4]
 800373e:	2a00      	cmp	r2, #0
 8003740:	d0ec      	beq.n	800371c <HAL_ADC_Start_DMA+0x20>
    {
      counter--;
 8003742:	9a01      	ldr	r2, [sp, #4]
 8003744:	3a01      	subs	r2, #1
 8003746:	9201      	str	r2, [sp, #4]
 8003748:	e7f8      	b.n	800373c <HAL_ADC_Start_DMA+0x40>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800374a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800374c:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8003750:	f020 0001 	bic.w	r0, r0, #1
 8003754:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8003758:	6420      	str	r0, [r4, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800375a:	686a      	ldr	r2, [r5, #4]
 800375c:	0552      	lsls	r2, r2, #21
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800375e:	bf41      	itttt	mi
 8003760:	6c20      	ldrmi	r0, [r4, #64]	; 0x40
 8003762:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8003766:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 800376a:	6420      	strmi	r0, [r4, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800376c:	6c22      	ldr	r2, [r4, #64]	; 0x40
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800376e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003770:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003774:	bf1c      	itt	ne
 8003776:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 8003778:	f022 0206 	bicne.w	r2, r2, #6
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800377c:	6462      	str	r2, [r4, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800377e:	2200      	movs	r2, #0
 8003780:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003784:	4a18      	ldr	r2, [pc, #96]	; (80037e8 <HAL_ADC_Start_DMA+0xec>)
 8003786:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003788:	4a18      	ldr	r2, [pc, #96]	; (80037ec <HAL_ADC_Start_DMA+0xf0>)
 800378a:	6402      	str	r2, [r0, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800378c:	4a18      	ldr	r2, [pc, #96]	; (80037f0 <HAL_ADC_Start_DMA+0xf4>)
 800378e:	64c2      	str	r2, [r0, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003790:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003794:	602a      	str	r2, [r5, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003796:	686a      	ldr	r2, [r5, #4]
 8003798:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800379c:	606a      	str	r2, [r5, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800379e:	68aa      	ldr	r2, [r5, #8]
 80037a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037a4:	60aa      	str	r2, [r5, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80037a6:	460a      	mov	r2, r1
 80037a8:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 80037ac:	f000 fa5b 	bl	8003c66 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80037b0:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <HAL_ADC_Start_DMA+0xf8>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f013 0f1f 	tst.w	r3, #31
 80037b8:	6823      	ldr	r3, [r4, #0]
 80037ba:	d004      	beq.n	80037c6 <HAL_ADC_Start_DMA+0xca>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80037bc:	4a0e      	ldr	r2, [pc, #56]	; (80037f8 <HAL_ADC_Start_DMA+0xfc>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d001      	beq.n	80037c6 <HAL_ADC_Start_DMA+0xca>
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80037c2:	2000      	movs	r0, #0
 80037c4:	e009      	b.n	80037da <HAL_ADC_Start_DMA+0xde>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80037c6:	6898      	ldr	r0, [r3, #8]
 80037c8:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80037cc:	d1f9      	bne.n	80037c2 <HAL_ADC_Start_DMA+0xc6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037d4:	609a      	str	r2, [r3, #8]
 80037d6:	e000      	b.n	80037da <HAL_ADC_Start_DMA+0xde>
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037d8:	2002      	movs	r0, #2
    }
  }
  
  /* Return function status */
  return HAL_OK;
}
 80037da:	b003      	add	sp, #12
 80037dc:	bd30      	pop	{r4, r5, pc}
 80037de:	bf00      	nop
 80037e0:	200001a0 	.word	0x200001a0
 80037e4:	000f4240 	.word	0x000f4240
 80037e8:	08003857 	.word	0x08003857
 80037ec:	080038b9 	.word	0x080038b9
 80037f0:	080038c5 	.word	0x080038c5
 80037f4:	40012300 	.word	0x40012300
 80037f8:	40012000 	.word	0x40012000

080037fc <HAL_ADC_Stop_DMA>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003800:	2b01      	cmp	r3, #1
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003802:	b510      	push	{r4, lr}
 8003804:	4604      	mov	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003806:	d024      	beq.n	8003852 <HAL_ADC_Stop_DMA+0x56>
 8003808:	2301      	movs	r3, #1
 800380a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800380e:	6803      	ldr	r3, [r0, #0]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	f022 0201 	bic.w	r2, r2, #1
 8003816:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	07d2      	lsls	r2, r2, #31
 800381c:	d414      	bmi.n	8003848 <HAL_ADC_Stop_DMA+0x4c>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800381e:	689a      	ldr	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003820:	6b80      	ldr	r0, [r0, #56]	; 0x38
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003822:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003826:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003828:	f000 fa5d 	bl	8003ce6 <HAL_DMA_Abort>
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800382c:	6822      	ldr	r2, [r4, #0]
 800382e:	6853      	ldr	r3, [r2, #4]
 8003830:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003834:	6053      	str	r3, [r2, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003836:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003838:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800383c:	f023 0301 	bic.w	r3, r3, #1
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	6423      	str	r3, [r4, #64]	; 0x40
 8003846:	e000      	b.n	800384a <HAL_ADC_Stop_DMA+0x4e>
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003848:	2000      	movs	r0, #0
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800384a:	2300      	movs	r3, #0
 800384c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003850:	bd10      	pop	{r4, pc}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003852:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 8003854:	bd10      	pop	{r4, pc}

08003856 <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003856:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800385a:	f012 0f50 	tst.w	r2, #80	; 0x50
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800385e:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003860:	d124      	bne.n	80038ac <ADC_DMAConvCplt+0x56>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003862:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003864:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003868:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	6891      	ldr	r1, [r2, #8]
 800386e:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8003872:	d117      	bne.n	80038a4 <ADC_DMAConvCplt+0x4e>
 8003874:	6999      	ldr	r1, [r3, #24]
 8003876:	b9a9      	cbnz	r1, 80038a4 <ADC_DMAConvCplt+0x4e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003878:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800387a:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 800387e:	d002      	beq.n	8003886 <ADC_DMAConvCplt+0x30>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003880:	6891      	ldr	r1, [r2, #8]
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003882:	0549      	lsls	r1, r1, #21
 8003884:	d40e      	bmi.n	80038a4 <ADC_DMAConvCplt+0x4e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003886:	6851      	ldr	r1, [r2, #4]
 8003888:	f021 0120 	bic.w	r1, r1, #32
 800388c:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800388e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003890:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003894:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003896:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003898:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800389a:	bf5e      	ittt	pl
 800389c:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 800389e:	f042 0201 	orrpl.w	r2, r2, #1
 80038a2:	641a      	strpl	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fe f947 	bl	8001b38 <HAL_ADC_ConvCpltCallback>
 80038aa:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  }
}
 80038ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_ADC_ConvCpltCallback(hadc);
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80038b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b4:	4718      	bx	r3

080038b6 <HAL_ADC_ConvHalfCpltCallback>:
 80038b6:	4770      	bx	lr

080038b8 <ADC_DMAHalfConvCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80038b8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80038ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80038bc:	f7ff fffb 	bl	80038b6 <HAL_ADC_ConvHalfCpltCallback>
 80038c0:	bd08      	pop	{r3, pc}

080038c2 <HAL_ADC_ErrorCallback>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038c2:	4770      	bx	lr

080038c4 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038c4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80038c6:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80038c8:	2340      	movs	r3, #64	; 0x40
 80038ca:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80038cc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80038ce:	f043 0304 	orr.w	r3, r3, #4
 80038d2:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 80038d4:	f7ff fff5 	bl	80038c2 <HAL_ADC_ErrorCallback>
 80038d8:	bd08      	pop	{r3, pc}
	...

080038dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80038dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038e2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d069      	beq.n	80039be <HAL_ADC_ConfigChannel+0xe2>
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80038ea:	680d      	ldr	r5, [r1, #0]
 80038ec:	6804      	ldr	r4, [r0, #0]
 80038ee:	688f      	ldr	r7, [r1, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038f0:	2301      	movs	r3, #1
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80038f2:	2d09      	cmp	r5, #9
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80038f8:	b2ae      	uxth	r6, r5
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80038fa:	d910      	bls.n	800391e <HAL_ADC_ConfigChannel+0x42>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80038fc:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8003900:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8003904:	f1a2 031e 	sub.w	r3, r2, #30
 8003908:	2207      	movs	r2, #7
 800390a:	409a      	lsls	r2, r3
 800390c:	ea2e 0202 	bic.w	r2, lr, r2
 8003910:	60e2      	str	r2, [r4, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003912:	68e2      	ldr	r2, [r4, #12]
 8003914:	fa07 f303 	lsl.w	r3, r7, r3
 8003918:	4313      	orrs	r3, r2
 800391a:	60e3      	str	r3, [r4, #12]
 800391c:	e00e      	b.n	800393c <HAL_ADC_ConfigChannel+0x60>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800391e:	6922      	ldr	r2, [r4, #16]
 8003920:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8003924:	f04f 0e07 	mov.w	lr, #7
 8003928:	fa0e fe03 	lsl.w	lr, lr, r3
 800392c:	ea22 020e 	bic.w	r2, r2, lr
 8003930:	6122      	str	r2, [r4, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003932:	6922      	ldr	r2, [r4, #16]
 8003934:	fa07 f303 	lsl.w	r3, r7, r3
 8003938:	4313      	orrs	r3, r2
 800393a:	6123      	str	r3, [r4, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800393c:	684b      	ldr	r3, [r1, #4]
 800393e:	2b06      	cmp	r3, #6
 8003940:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8003944:	d80d      	bhi.n	8003962 <HAL_ADC_ConfigChannel+0x86>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003946:	4413      	add	r3, r2
 8003948:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800394a:	1f59      	subs	r1, r3, #5
 800394c:	231f      	movs	r3, #31
 800394e:	408b      	lsls	r3, r1
 8003950:	ea27 0303 	bic.w	r3, r7, r3
 8003954:	6363      	str	r3, [r4, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003956:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003958:	fa06 f101 	lsl.w	r1, r6, r1
 800395c:	4311      	orrs	r1, r2
 800395e:	6361      	str	r1, [r4, #52]	; 0x34
 8003960:	e01d      	b.n	800399e <HAL_ADC_ConfigChannel+0xc2>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003962:	2b0c      	cmp	r3, #12
 8003964:	d80e      	bhi.n	8003984 <HAL_ADC_ConfigChannel+0xa8>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003966:	4413      	add	r3, r2
 8003968:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800396a:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 800396e:	231f      	movs	r3, #31
 8003970:	4093      	lsls	r3, r2
 8003972:	ea21 0303 	bic.w	r3, r1, r3
 8003976:	6323      	str	r3, [r4, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003978:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800397a:	fa06 f202 	lsl.w	r2, r6, r2
 800397e:	431a      	orrs	r2, r3
 8003980:	6322      	str	r2, [r4, #48]	; 0x30
 8003982:	e00c      	b.n	800399e <HAL_ADC_ConfigChannel+0xc2>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003984:	4413      	add	r3, r2
 8003986:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003988:	3b41      	subs	r3, #65	; 0x41
 800398a:	221f      	movs	r2, #31
 800398c:	409a      	lsls	r2, r3
 800398e:	ea27 0202 	bic.w	r2, r7, r2
 8003992:	62e2      	str	r2, [r4, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003994:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003996:	fa06 f203 	lsl.w	r2, r6, r3
 800399a:	430a      	orrs	r2, r1
 800399c:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800399e:	4b17      	ldr	r3, [pc, #92]	; (80039fc <HAL_ADC_ConfigChannel+0x120>)
 80039a0:	429c      	cmp	r4, r3
 80039a2:	d004      	beq.n	80039ae <HAL_ADC_ConfigChannel+0xd2>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039a4:	2300      	movs	r3, #0
 80039a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80039aa:	4618      	mov	r0, r3
 80039ac:	e023      	b.n	80039f6 <HAL_ADC_ConfigChannel+0x11a>
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80039ae:	2d12      	cmp	r5, #18
 80039b0:	d107      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0xe6>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80039b2:	4a13      	ldr	r2, [pc, #76]	; (8003a00 <HAL_ADC_ConfigChannel+0x124>)
 80039b4:	6853      	ldr	r3, [r2, #4]
 80039b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039ba:	6053      	str	r3, [r2, #4]
 80039bc:	e7f2      	b.n	80039a4 <HAL_ADC_ConfigChannel+0xc8>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039be:	2002      	movs	r0, #2
 80039c0:	e019      	b.n	80039f6 <HAL_ADC_ConfigChannel+0x11a>
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039c2:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <HAL_ADC_ConfigChannel+0x128>)
 80039c4:	429d      	cmp	r5, r3
 80039c6:	d001      	beq.n	80039cc <HAL_ADC_ConfigChannel+0xf0>
 80039c8:	2d11      	cmp	r5, #17
 80039ca:	d1eb      	bne.n	80039a4 <HAL_ADC_ConfigChannel+0xc8>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80039cc:	490c      	ldr	r1, [pc, #48]	; (8003a00 <HAL_ADC_ConfigChannel+0x124>)
 80039ce:	684a      	ldr	r2, [r1, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80039d0:	429d      	cmp	r5, r3
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80039d2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80039d6:	604a      	str	r2, [r1, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80039d8:	d1e4      	bne.n	80039a4 <HAL_ADC_ConfigChannel+0xc8>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039da:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <HAL_ADC_ConfigChannel+0x12c>)
 80039dc:	4a0b      	ldr	r2, [pc, #44]	; (8003a0c <HAL_ADC_ConfigChannel+0x130>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80039e4:	230a      	movs	r3, #10
 80039e6:	4353      	muls	r3, r2
      while(counter != 0U)
      {
        counter--;
 80039e8:	9301      	str	r3, [sp, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
      while(counter != 0U)
 80039ea:	9b01      	ldr	r3, [sp, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0d9      	beq.n	80039a4 <HAL_ADC_ConfigChannel+0xc8>
      {
        counter--;
 80039f0:	9b01      	ldr	r3, [sp, #4]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	e7f8      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x10c>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return HAL_OK;
}
 80039f6:	b003      	add	sp, #12
 80039f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40012000 	.word	0x40012000
 8003a00:	40012300 	.word	0x40012300
 8003a04:	10000012 	.word	0x10000012
 8003a08:	200001a0 	.word	0x200001a0
 8003a0c:	000f4240 	.word	0x000f4240

08003a10 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a10:	4a07      	ldr	r2, [pc, #28]	; (8003a30 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003a12:	68d3      	ldr	r3, [r2, #12]
 8003a14:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a18:	041b      	lsls	r3, r3, #16
 8003a1a:	0c1b      	lsrs	r3, r3, #16
 8003a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8003a20:	0200      	lsls	r0, r0, #8
 8003a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a26:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8003a2a:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8003a2c:	60d3      	str	r3, [r2, #12]
 8003a2e:	4770      	bx	lr
 8003a30:	e000ed00 	.word	0xe000ed00

08003a34 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a34:	4b17      	ldr	r3, [pc, #92]	; (8003a94 <HAL_NVIC_SetPriority+0x60>)
 8003a36:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a38:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a3c:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a3e:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a42:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a44:	2c04      	cmp	r4, #4
 8003a46:	bf28      	it	cs
 8003a48:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a4a:	2d06      	cmp	r5, #6

  return (
 8003a4c:	f04f 0501 	mov.w	r5, #1
 8003a50:	fa05 f404 	lsl.w	r4, r5, r4
 8003a54:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a58:	bf8c      	ite	hi
 8003a5a:	3b03      	subhi	r3, #3
 8003a5c:	2300      	movls	r3, #0

  return (
 8003a5e:	400c      	ands	r4, r1
 8003a60:	409c      	lsls	r4, r3
 8003a62:	fa05 f303 	lsl.w	r3, r5, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8003a6a:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8003a6c:	ea42 0204 	orr.w	r2, r2, r4
 8003a70:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a74:	bfaf      	iteee	ge
 8003a76:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a7a:	f000 000f 	andlt.w	r0, r0, #15
 8003a7e:	4b06      	ldrlt	r3, [pc, #24]	; (8003a98 <HAL_NVIC_SetPriority+0x64>)
 8003a80:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a82:	bfa5      	ittet	ge
 8003a84:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8003a88:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a8a:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a8c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8003a90:	bd30      	pop	{r4, r5, pc}
 8003a92:	bf00      	nop
 8003a94:	e000ed00 	.word	0xe000ed00
 8003a98:	e000ed14 	.word	0xe000ed14

08003a9c <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003a9c:	0942      	lsrs	r2, r0, #5
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	f000 001f 	and.w	r0, r0, #31
 8003aa4:	fa03 f000 	lsl.w	r0, r3, r0
 8003aa8:	4b01      	ldr	r3, [pc, #4]	; (8003ab0 <HAL_NVIC_EnableIRQ+0x14>)
 8003aaa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003aae:	4770      	bx	lr
 8003ab0:	e000e100 	.word	0xe000e100

08003ab4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ab4:	3801      	subs	r0, #1
 8003ab6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003aba:	d20a      	bcs.n	8003ad2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003abc:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003abe:	4a07      	ldr	r2, [pc, #28]	; (8003adc <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ac0:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac2:	21f0      	movs	r1, #240	; 0xf0
 8003ac4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ac8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aca:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003acc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ad2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	e000e010 	.word	0xe000e010
 8003adc:	e000ed00 	.word	0xe000ed00

08003ae0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003ae0:	4b04      	ldr	r3, [pc, #16]	; (8003af4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003ae2:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003ae4:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003ae6:	bf0c      	ite	eq
 8003ae8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003aec:	f022 0204 	bicne.w	r2, r2, #4
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	4770      	bx	lr
 8003af4:	e000e010 	.word	0xe000e010

08003af8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8003af8:	4770      	bx	lr

08003afa <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003afa:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8003afc:	f7ff fffc 	bl	8003af8 <HAL_SYSTICK_Callback>
 8003b00:	bd08      	pop	{r3, pc}
	...

08003b04 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b04:	6803      	ldr	r3, [r0, #0]
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b0c:	f023 0303 	bic.w	r3, r3, #3
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b10:	2118      	movs	r1, #24
 8003b12:	3a10      	subs	r2, #16
 8003b14:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b18:	4904      	ldr	r1, [pc, #16]	; (8003b2c <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8003b1a:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b1c:	bf88      	it	hi
 8003b1e:	3304      	addhi	r3, #4
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b20:	5c89      	ldrb	r1, [r1, r2]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b22:	6583      	str	r3, [r0, #88]	; 0x58
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b24:	65c1      	str	r1, [r0, #92]	; 0x5c
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8003b26:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	0801db3a 	.word	0x0801db3a

08003b30 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b30:	b570      	push	{r4, r5, r6, lr}
 8003b32:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8003b34:	f7ff fd24 	bl	8003580 <HAL_GetTick>
 8003b38:	4605      	mov	r5, r0
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b3a:	2c00      	cmp	r4, #0
 8003b3c:	d064      	beq.n	8003c08 <HAL_DMA_Init+0xd8>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b44:	6822      	ldr	r2, [r4, #0]
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b46:	2302      	movs	r3, #2
 8003b48:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b4c:	6813      	ldr	r3, [r2, #0]
 8003b4e:	f023 0301 	bic.w	r3, r3, #1
 8003b52:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b54:	6821      	ldr	r1, [r4, #0]
 8003b56:	680b      	ldr	r3, [r1, #0]
 8003b58:	07d8      	lsls	r0, r3, #31
 8003b5a:	d508      	bpl.n	8003b6e <HAL_DMA_Init+0x3e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b5c:	f7ff fd10 	bl	8003580 <HAL_GetTick>
 8003b60:	1b40      	subs	r0, r0, r5
 8003b62:	2805      	cmp	r0, #5
 8003b64:	d9f6      	bls.n	8003b54 <HAL_DMA_Init+0x24>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b66:	2320      	movs	r3, #32
 8003b68:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b6a:	2003      	movs	r0, #3
 8003b6c:	e051      	b.n	8003c12 <HAL_DMA_Init+0xe2>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b6e:	680b      	ldr	r3, [r1, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b70:	4a29      	ldr	r2, [pc, #164]	; (8003c18 <HAL_DMA_Init+0xe8>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b72:	6865      	ldr	r5, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b74:	69a0      	ldr	r0, [r4, #24]
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b76:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b78:	68a3      	ldr	r3, [r4, #8]
 8003b7a:	431d      	orrs	r5, r3
 8003b7c:	68e3      	ldr	r3, [r4, #12]
 8003b7e:	431d      	orrs	r5, r3
 8003b80:	6923      	ldr	r3, [r4, #16]
 8003b82:	431d      	orrs	r5, r3
 8003b84:	6963      	ldr	r3, [r4, #20]
 8003b86:	432b      	orrs	r3, r5
 8003b88:	69e5      	ldr	r5, [r4, #28]
 8003b8a:	4303      	orrs	r3, r0
 8003b8c:	432b      	orrs	r3, r5
 8003b8e:	6a25      	ldr	r5, [r4, #32]
 8003b90:	432b      	orrs	r3, r5
 8003b92:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b94:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003b96:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b98:	bf01      	itttt	eq
 8003b9a:	6b25      	ldreq	r5, [r4, #48]	; 0x30
 8003b9c:	6ae6      	ldreq	r6, [r4, #44]	; 0x2c
 8003b9e:	4335      	orreq	r5, r6
 8003ba0:	432b      	orreq	r3, r5
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ba2:	600b      	str	r3, [r1, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ba4:	694b      	ldr	r3, [r1, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ba6:	2a04      	cmp	r2, #4

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ba8:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003bac:	ea43 0302 	orr.w	r3, r3, r2

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bb0:	d11c      	bne.n	8003bec <HAL_DMA_Init+0xbc>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bb2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003bb4:	4313      	orrs	r3, r2
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bb6:	b920      	cbnz	r0, 8003bc2 <HAL_DMA_Init+0x92>
  {
    switch (tmp)
 8003bb8:	2a01      	cmp	r2, #1
 8003bba:	d00b      	beq.n	8003bd4 <HAL_DMA_Init+0xa4>
 8003bbc:	d313      	bcc.n	8003be6 <HAL_DMA_Init+0xb6>
 8003bbe:	2a02      	cmp	r2, #2
 8003bc0:	e010      	b.n	8003be4 <HAL_DMA_Init+0xb4>
        break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bc2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8003bc6:	d10a      	bne.n	8003bde <HAL_DMA_Init+0xae>
  {
    switch (tmp)
 8003bc8:	2a03      	cmp	r2, #3
 8003bca:	d80f      	bhi.n	8003bec <HAL_DMA_Init+0xbc>
 8003bcc:	e8df f002 	tbb	[pc, r2]
 8003bd0:	021e0b1e 	.word	0x021e0b1e
        break;
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bd4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003bd6:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 8003bda:	d107      	bne.n	8003bec <HAL_DMA_Init+0xbc>
 8003bdc:	e016      	b.n	8003c0c <HAL_DMA_Init+0xdc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bde:	2a02      	cmp	r2, #2
 8003be0:	d914      	bls.n	8003c0c <HAL_DMA_Init+0xdc>
 8003be2:	2a03      	cmp	r2, #3
 8003be4:	d102      	bne.n	8003bec <HAL_DMA_Init+0xbc>
      case DMA_FIFO_THRESHOLD_HALFFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003be6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003be8:	01d2      	lsls	r2, r2, #7
 8003bea:	d40f      	bmi.n	8003c0c <HAL_DMA_Init+0xdc>
      return HAL_ERROR; 
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003bec:	614b      	str	r3, [r1, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bee:	4620      	mov	r0, r4
 8003bf0:	f7ff ff88 	bl	8003b04 <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bf4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003bf6:	233f      	movs	r3, #63	; 0x3f
 8003bf8:	4093      	lsls	r3, r2
 8003bfa:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bfc:	2000      	movs	r0, #0
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bfe:	2301      	movs	r3, #1
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c00:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c02:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8003c06:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8003c08:	2001      	movs	r0, #1
 8003c0a:	bd70      	pop	{r4, r5, r6, pc}
    tmp |= hdma->Init.FIFOThreshold;
    
    if(DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c0c:	2340      	movs	r3, #64	; 0x40
 8003c0e:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c10:	2001      	movs	r0, #1
 8003c12:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 8003c16:	bd70      	pop	{r4, r5, r6, pc}
 8003c18:	f010803f 	.word	0xf010803f

08003c1c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003c1c:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c1e:	4605      	mov	r5, r0
 8003c20:	b1e8      	cbz	r0, 8003c5e <HAL_DMA_DeInit+0x42>
  {
    return HAL_ERROR;
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003c22:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8003c26:	b2e4      	uxtb	r4, r4
 8003c28:	2c02      	cmp	r4, #2
 8003c2a:	d01a      	beq.n	8003c62 <HAL_DMA_DeInit+0x46>
    /* Return error status */
    return HAL_BUSY;
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003c2c:	6803      	ldr	r3, [r0, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	f022 0201 	bic.w	r2, r2, #1
 8003c34:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003c36:	2400      	movs	r4, #0
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003c38:	2221      	movs	r2, #33	; 0x21

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003c3a:	601c      	str	r4, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003c3c:	605c      	str	r4, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003c3e:	609c      	str	r4, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003c40:	60dc      	str	r4, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003c42:	611c      	str	r4, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003c44:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c46:	f7ff ff5d 	bl	8003b04 <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c4a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003c4c:	233f      	movs	r3, #63	; 0x3f
 8003c4e:	4093      	lsls	r3, r2
 8003c50:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c52:	656c      	str	r4, [r5, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003c54:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003c58:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
 8003c5c:	e001      	b.n	8003c62 <HAL_DMA_DeInit+0x46>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8003c5e:	2001      	movs	r0, #1
 8003c60:	bd38      	pop	{r3, r4, r5, pc}
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
  {
    /* Return error status */
    return HAL_BUSY;
 8003c62:	4620      	mov	r0, r4

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
}
 8003c64:	bd38      	pop	{r3, r4, r5, pc}

08003c66 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c66:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c68:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8003c6c:	2c01      	cmp	r4, #1
 8003c6e:	d038      	beq.n	8003ce2 <HAL_DMA_Start_IT+0x7c>
 8003c70:	2401      	movs	r4, #1
 8003c72:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c76:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c7a:	6d86      	ldr	r6, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c7c:	2c01      	cmp	r4, #1
 8003c7e:	f04f 0500 	mov.w	r5, #0
 8003c82:	f04f 0402 	mov.w	r4, #2
 8003c86:	d128      	bne.n	8003cda <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c88:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c8c:	6804      	ldr	r4, [r0, #0]
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c8e:	6545      	str	r5, [r0, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c90:	6825      	ldr	r5, [r4, #0]
 8003c92:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8003c96:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c98:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c9a:	6883      	ldr	r3, [r0, #8]
 8003c9c:	2b40      	cmp	r3, #64	; 0x40
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c9e:	bf0e      	itee	eq
 8003ca0:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8003ca2:	60a1      	strne	r1, [r4, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8003ca4:	60e2      	strne	r2, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ca6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ca8:	bf08      	it	eq
 8003caa:	60e1      	streq	r1, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cac:	233f      	movs	r3, #63	; 0x3f
 8003cae:	4093      	lsls	r3, r2
 8003cb0:	60b3      	str	r3, [r6, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003cb2:	6823      	ldr	r3, [r4, #0]
 8003cb4:	f043 0316 	orr.w	r3, r3, #22
 8003cb8:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003cba:	6963      	ldr	r3, [r4, #20]
 8003cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cc0:	6163      	str	r3, [r4, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003cc2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003cc4:	b11b      	cbz	r3, 8003cce <HAL_DMA_Start_IT+0x68>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	f043 0308 	orr.w	r3, r3, #8
 8003ccc:	6023      	str	r3, [r4, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	f043 0301 	orr.w	r3, r3, #1
 8003cd4:	6023      	str	r3, [r4, #0]
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003cda:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003cde:	4620      	mov	r0, r4
 8003ce0:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ce2:	2002      	movs	r0, #2
    /* Return error status */
    status = HAL_BUSY;
  }
  
  return status;
}
 8003ce4:	bd70      	pop	{r4, r5, r6, pc}

08003ce6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ce6:	b570      	push	{r4, r5, r6, lr}
 8003ce8:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cea:	6d85      	ldr	r5, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8003cec:	f7ff fc48 	bl	8003580 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cf0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003cf4:	2b02      	cmp	r3, #2
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  
  uint32_t tickstart = HAL_GetTick();
 8003cf6:	4606      	mov	r6, r0
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cf8:	d006      	beq.n	8003d08 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cfa:	2380      	movs	r3, #128	; 0x80
 8003cfc:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cfe:	2300      	movs	r3, #0
 8003d00:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 8003d04:	2001      	movs	r0, #1
 8003d06:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	f022 0216 	bic.w	r2, r2, #22
 8003d10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d12:	695a      	ldr	r2, [r3, #20]
 8003d14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d1a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d1c:	b90a      	cbnz	r2, 8003d22 <HAL_DMA_Abort+0x3c>
 8003d1e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003d20:	b11a      	cbz	r2, 8003d2a <HAL_DMA_Abort+0x44>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	f022 0208 	bic.w	r2, r2, #8
 8003d28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	f022 0201 	bic.w	r2, r2, #1
 8003d30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	f010 0001 	ands.w	r0, r0, #1
 8003d3a:	d00d      	beq.n	8003d58 <HAL_DMA_Abort+0x72>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d3c:	f7ff fc20 	bl	8003580 <HAL_GetTick>
 8003d40:	1b80      	subs	r0, r0, r6
 8003d42:	2805      	cmp	r0, #5
 8003d44:	d9f5      	bls.n	8003d32 <HAL_DMA_Abort+0x4c>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d46:	2320      	movs	r3, #32
 8003d48:	6563      	str	r3, [r4, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d4a:	2003      	movs	r0, #3
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d52:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003d56:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d58:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003d5a:	233f      	movs	r3, #63	; 0x3f
 8003d5c:	4093      	lsls	r3, r2
 8003d5e:	60ab      	str	r3, [r5, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d60:	2301      	movs	r3, #1
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d62:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d66:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  }
  return HAL_OK;
}
 8003d6a:	bd70      	pop	{r4, r5, r6, pc}

08003d6c <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d6c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d003      	beq.n	8003d7c <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d74:	2380      	movs	r3, #128	; 0x80
 8003d76:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8003d78:	2001      	movs	r0, #1
 8003d7a:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d7c:	6802      	ldr	r2, [r0, #0]
    return HAL_ERROR;
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d7e:	2305      	movs	r3, #5
 8003d80:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d84:	6813      	ldr	r3, [r2, #0]
 8003d86:	f023 0301 	bic.w	r3, r3, #1
 8003d8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d8c:	2000      	movs	r0, #0
}
 8003d8e:	4770      	bx	lr

08003d90 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d96:	6d85      	ldr	r5, [r0, #88]	; 0x58
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8003d98:	4b59      	ldr	r3, [pc, #356]	; (8003f00 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d9a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8003d9c:	681f      	ldr	r7, [r3, #0]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;
 8003d9e:	682e      	ldr	r6, [r5, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003da0:	2308      	movs	r3, #8
 8003da2:	4093      	lsls	r3, r2
 8003da4:	421e      	tst	r6, r3
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003da6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003da8:	d00c      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003daa:	6801      	ldr	r1, [r0, #0]
 8003dac:	6808      	ldr	r0, [r1, #0]
 8003dae:	0740      	lsls	r0, r0, #29
 8003db0:	d508      	bpl.n	8003dc4 <HAL_DMA_IRQHandler+0x34>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003db2:	6808      	ldr	r0, [r1, #0]
 8003db4:	f020 0004 	bic.w	r0, r0, #4
 8003db8:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003dba:	60ab      	str	r3, [r5, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003dbc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dc4:	4b4f      	ldr	r3, [pc, #316]	; (8003f04 <HAL_DMA_IRQHandler+0x174>)
 8003dc6:	4093      	lsls	r3, r2
 8003dc8:	421e      	tst	r6, r3
 8003dca:	d008      	beq.n	8003dde <HAL_DMA_IRQHandler+0x4e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003dcc:	6821      	ldr	r1, [r4, #0]
 8003dce:	6949      	ldr	r1, [r1, #20]
 8003dd0:	0609      	lsls	r1, r1, #24
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003dd2:	bf41      	itttt	mi
 8003dd4:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003dd6:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 8003dd8:	f043 0302 	orrmi.w	r3, r3, #2
 8003ddc:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dde:	4b4a      	ldr	r3, [pc, #296]	; (8003f08 <HAL_DMA_IRQHandler+0x178>)
 8003de0:	4093      	lsls	r3, r2
 8003de2:	421e      	tst	r6, r3
 8003de4:	d008      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x68>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003de6:	6821      	ldr	r1, [r4, #0]
 8003de8:	6809      	ldr	r1, [r1, #0]
 8003dea:	0788      	lsls	r0, r1, #30
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003dec:	bf41      	itttt	mi
 8003dee:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003df0:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 8003df2:	f043 0304 	orrmi.w	r3, r3, #4
 8003df6:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003df8:	2310      	movs	r3, #16
 8003dfa:	fa03 f202 	lsl.w	r2, r3, r2
 8003dfe:	4216      	tst	r6, r2
 8003e00:	d017      	beq.n	8003e32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	6819      	ldr	r1, [r3, #0]
 8003e06:	0709      	lsls	r1, r1, #28
 8003e08:	d513      	bpl.n	8003e32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e0a:	60aa      	str	r2, [r5, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	0350      	lsls	r0, r2, #13
 8003e10:	d504      	bpl.n	8003e1c <HAL_DMA_IRQHandler+0x8c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	0319      	lsls	r1, r3, #12
 8003e16:	d508      	bpl.n	8003e2a <HAL_DMA_IRQHandler+0x9a>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e18:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003e1a:	e007      	b.n	8003e2c <HAL_DMA_IRQHandler+0x9c>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	05d2      	lsls	r2, r2, #23
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e20:	bf5e      	ittt	pl
 8003e22:	681a      	ldrpl	r2, [r3, #0]
 8003e24:	f022 0208 	bicpl.w	r2, r2, #8
 8003e28:	601a      	strpl	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e2c:	b10b      	cbz	r3, 8003e32 <HAL_DMA_IRQHandler+0xa2>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e2e:	4620      	mov	r0, r4
 8003e30:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e32:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003e34:	2220      	movs	r2, #32
 8003e36:	408a      	lsls	r2, r1
 8003e38:	4216      	tst	r6, r2
 8003e3a:	d03b      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x124>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e3c:	6823      	ldr	r3, [r4, #0]
 8003e3e:	6818      	ldr	r0, [r3, #0]
 8003e40:	06c6      	lsls	r6, r0, #27
 8003e42:	d537      	bpl.n	8003eb4 <HAL_DMA_IRQHandler+0x124>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e44:	60aa      	str	r2, [r5, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e46:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8003e4a:	2a05      	cmp	r2, #5
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e4c:	681a      	ldr	r2, [r3, #0]
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e4e:	d119      	bne.n	8003e84 <HAL_DMA_IRQHandler+0xf4>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e50:	f022 0216 	bic.w	r2, r2, #22
 8003e54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e56:	695a      	ldr	r2, [r3, #20]
 8003e58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e5e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003e60:	b90a      	cbnz	r2, 8003e66 <HAL_DMA_IRQHandler+0xd6>
 8003e62:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003e64:	b11a      	cbz	r2, 8003e6e <HAL_DMA_IRQHandler+0xde>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	f022 0208 	bic.w	r2, r2, #8
 8003e6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e6e:	233f      	movs	r3, #63	; 0x3f
 8003e70:	408b      	lsls	r3, r1
 8003e72:	60ab      	str	r3, [r5, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e74:	2300      	movs	r3, #0
 8003e76:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003e80:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003e82:	e037      	b.n	8003ef4 <HAL_DMA_IRQHandler+0x164>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e84:	0350      	lsls	r0, r2, #13
 8003e86:	d504      	bpl.n	8003e92 <HAL_DMA_IRQHandler+0x102>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	0319      	lsls	r1, r3, #12
 8003e8c:	d40e      	bmi.n	8003eac <HAL_DMA_IRQHandler+0x11c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003e90:	e00d      	b.n	8003eae <HAL_DMA_IRQHandler+0x11e>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8003e98:	d108      	bne.n	8003eac <HAL_DMA_IRQHandler+0x11c>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e9a:	6819      	ldr	r1, [r3, #0]
 8003e9c:	f021 0110 	bic.w	r1, r1, #16
 8003ea0:	6019      	str	r1, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ea2:	2301      	movs	r3, #1
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ea4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ea8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003eac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003eae:	b10b      	cbz	r3, 8003eb4 <HAL_DMA_IRQHandler+0x124>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003eb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003eb6:	b303      	cbz	r3, 8003efa <HAL_DMA_IRQHandler+0x16a>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003eb8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003eba:	07da      	lsls	r2, r3, #31
 8003ebc:	d519      	bpl.n	8003ef2 <HAL_DMA_IRQHandler+0x162>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ebe:	2305      	movs	r3, #5

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ec0:	6822      	ldr	r2, [r4, #0]
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ec2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ec6:	6813      	ldr	r3, [r2, #0]
 8003ec8:	f023 0301 	bic.w	r3, r3, #1
 8003ecc:	6013      	str	r3, [r2, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8003ece:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003ed2:	fbb7 f7f3 	udiv	r7, r7, r3
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);

      do
      {
        if (++count > timeout)
 8003ed6:	9b01      	ldr	r3, [sp, #4]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	429f      	cmp	r7, r3
 8003edc:	9301      	str	r3, [sp, #4]
 8003ede:	d302      	bcc.n	8003ee6 <HAL_DMA_IRQHandler+0x156>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ee0:	6813      	ldr	r3, [r2, #0]
 8003ee2:	07db      	lsls	r3, r3, #31
 8003ee4:	d4f7      	bmi.n	8003ed6 <HAL_DMA_IRQHandler+0x146>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003eec:	2301      	movs	r3, #1
 8003eee:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003ef2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003ef4:	b10b      	cbz	r3, 8003efa <HAL_DMA_IRQHandler+0x16a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ef6:	4620      	mov	r0, r4
 8003ef8:	4798      	blx	r3
    }
  }
}
 8003efa:	b003      	add	sp, #12
 8003efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003efe:	bf00      	nop
 8003f00:	200001a0 	.word	0x200001a0
 8003f04:	00800001 	.word	0x00800001
 8003f08:	00800004 	.word	0x00800004

08003f0c <HAL_DMA2D_Init>:
  * @param  hdma2d: pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003f0c:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003f0e:	4604      	mov	r4, r0
 8003f10:	b330      	cbz	r0, 8003f60 <HAL_DMA2D_Init+0x54>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003f12:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003f16:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003f1a:	b91b      	cbnz	r3, 8003f24 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003f1c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003f20:	f002 fd5a 	bl	80069d8 <HAL_DMA2D_MspInit>
  }

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003f24:	2302      	movs	r3, #2
 8003f26:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8003f32:	6862      	ldr	r2, [r4, #4]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f3a:	f022 0107 	bic.w	r1, r2, #7
 8003f3e:	68a2      	ldr	r2, [r4, #8]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8003f44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f46:	68e1      	ldr	r1, [r4, #12]
 8003f48:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8003f4c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003f50:	430a      	orrs	r2, r1
 8003f52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003f54:	2000      	movs	r0, #0

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003f56:	2301      	movs	r3, #1

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003f58:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003f5a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8003f5e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
  {
     return HAL_ERROR;
 8003f60:	2001      	movs	r0, #1

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;

  return HAL_OK;
}
 8003f62:	bd10      	pop	{r4, pc}

08003f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f68:	4f70      	ldr	r7, [pc, #448]	; (800412c <HAL_GPIO_Init+0x1c8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f6a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f6c:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 8004134 <HAL_GPIO_Init+0x1d0>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f70:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8004138 <HAL_GPIO_Init+0x1d4>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f74:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f76:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f78:	9301      	str	r3, [sp, #4]
 8003f7a:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8003f7c:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8003f7e:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8003f80:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8003f82:	ea34 0303 	bics.w	r3, r4, r3
 8003f86:	f040 80c9 	bne.w	800411c <HAL_GPIO_Init+0x1b8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f8a:	684d      	ldr	r5, [r1, #4]
 8003f8c:	f025 0a10 	bic.w	sl, r5, #16
 8003f90:	f1ba 0f02 	cmp.w	sl, #2
 8003f94:	d114      	bne.n	8003fc0 <HAL_GPIO_Init+0x5c>
 8003f96:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 8003f9a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8003f9e:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fa2:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8003fa6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003faa:	230f      	movs	r3, #15
 8003fac:	fa03 f30b 	lsl.w	r3, r3, fp
 8003fb0:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003fb4:	690b      	ldr	r3, [r1, #16]
 8003fb6:	fa03 f30b 	lsl.w	r3, r3, fp
 8003fba:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 8003fbc:	f8c9 3020 	str.w	r3, [r9, #32]
 8003fc0:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fc4:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fc8:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fca:	fa09 f90b 	lsl.w	r9, r9, fp
 8003fce:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fd2:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fd6:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fda:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fde:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fe2:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fe4:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8003fe8:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fea:	d80f      	bhi.n	800400c <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fec:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fee:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ff0:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ff4:	fa06 f60b 	lsl.w	r6, r6, fp
 8003ff8:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 8003ffa:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ffc:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ffe:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004002:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004006:	4096      	lsls	r6, r2
 8004008:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 800400a:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800400c:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800400e:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004012:	688b      	ldr	r3, [r1, #8]
 8004014:	fa03 f30b 	lsl.w	r3, r3, fp
 8004018:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 800401c:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800401e:	00eb      	lsls	r3, r5, #3
 8004020:	d57c      	bpl.n	800411c <HAL_GPIO_Init+0x1b8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	9303      	str	r3, [sp, #12]
 8004026:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800402a:	4b41      	ldr	r3, [pc, #260]	; (8004130 <HAL_GPIO_Init+0x1cc>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800402c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8004030:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8004034:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 8004038:	f022 0903 	bic.w	r9, r2, #3
 800403c:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8004040:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8004044:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 8004048:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800404a:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800404e:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004050:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8004054:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8004058:	260f      	movs	r6, #15
 800405a:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800405e:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8004060:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004064:	d024      	beq.n	80040b0 <HAL_GPIO_Init+0x14c>
 8004066:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800406a:	4298      	cmp	r0, r3
 800406c:	d022      	beq.n	80040b4 <HAL_GPIO_Init+0x150>
 800406e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004072:	4298      	cmp	r0, r3
 8004074:	d020      	beq.n	80040b8 <HAL_GPIO_Init+0x154>
 8004076:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800407a:	4298      	cmp	r0, r3
 800407c:	d01e      	beq.n	80040bc <HAL_GPIO_Init+0x158>
 800407e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004082:	4298      	cmp	r0, r3
 8004084:	d01c      	beq.n	80040c0 <HAL_GPIO_Init+0x15c>
 8004086:	4540      	cmp	r0, r8
 8004088:	d01c      	beq.n	80040c4 <HAL_GPIO_Init+0x160>
 800408a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800408e:	4298      	cmp	r0, r3
 8004090:	d01a      	beq.n	80040c8 <HAL_GPIO_Init+0x164>
 8004092:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004096:	4298      	cmp	r0, r3
 8004098:	d018      	beq.n	80040cc <HAL_GPIO_Init+0x168>
 800409a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800409e:	4298      	cmp	r0, r3
 80040a0:	d016      	beq.n	80040d0 <HAL_GPIO_Init+0x16c>
 80040a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040a6:	4298      	cmp	r0, r3
 80040a8:	bf14      	ite	ne
 80040aa:	230a      	movne	r3, #10
 80040ac:	2309      	moveq	r3, #9
 80040ae:	e010      	b.n	80040d2 <HAL_GPIO_Init+0x16e>
 80040b0:	2300      	movs	r3, #0
 80040b2:	e00e      	b.n	80040d2 <HAL_GPIO_Init+0x16e>
 80040b4:	2301      	movs	r3, #1
 80040b6:	e00c      	b.n	80040d2 <HAL_GPIO_Init+0x16e>
 80040b8:	2302      	movs	r3, #2
 80040ba:	e00a      	b.n	80040d2 <HAL_GPIO_Init+0x16e>
 80040bc:	2303      	movs	r3, #3
 80040be:	e008      	b.n	80040d2 <HAL_GPIO_Init+0x16e>
 80040c0:	2304      	movs	r3, #4
 80040c2:	e006      	b.n	80040d2 <HAL_GPIO_Init+0x16e>
 80040c4:	2305      	movs	r3, #5
 80040c6:	e004      	b.n	80040d2 <HAL_GPIO_Init+0x16e>
 80040c8:	2306      	movs	r3, #6
 80040ca:	e002      	b.n	80040d2 <HAL_GPIO_Init+0x16e>
 80040cc:	2307      	movs	r3, #7
 80040ce:	e000      	b.n	80040d2 <HAL_GPIO_Init+0x16e>
 80040d0:	2308      	movs	r3, #8
 80040d2:	fa03 f30a 	lsl.w	r3, r3, sl
 80040d6:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040d8:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040dc:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 80040de:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040e0:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80040e4:	bf0c      	ite	eq
 80040e6:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 80040e8:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 80040ea:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 80040ee:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040f2:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 80040f6:	bf0c      	ite	eq
 80040f8:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 80040fa:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 80040fc:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040fe:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004100:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8004104:	bf0c      	ite	eq
 8004106:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8004108:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 800410a:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 800410e:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004112:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8004114:	bf54      	ite	pl
 8004116:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8004118:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 800411a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800411c:	3201      	adds	r2, #1
 800411e:	2a10      	cmp	r2, #16
 8004120:	f47f af2c 	bne.w	8003f7c <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8004124:	b005      	add	sp, #20
 8004126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800412a:	bf00      	nop
 800412c:	40013c00 	.word	0x40013c00
 8004130:	40020000 	.word	0x40020000
 8004134:	40023800 	.word	0x40023800
 8004138:	40021400 	.word	0x40021400

0800413c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800413c:	b902      	cbnz	r2, 8004140 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800413e:	0409      	lsls	r1, r1, #16
 8004140:	6181      	str	r1, [r0, #24]
 8004142:	4770      	bx	lr

08004144 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8004144:	6943      	ldr	r3, [r0, #20]
 8004146:	4059      	eors	r1, r3
 8004148:	6141      	str	r1, [r0, #20]
 800414a:	4770      	bx	lr

0800414c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800414c:	6802      	ldr	r2, [r0, #0]
 800414e:	6953      	ldr	r3, [r2, #20]
 8004150:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8004154:	d00d      	beq.n	8004172 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004156:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800415a:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800415c:	2304      	movs	r3, #4
 800415e:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8004160:	2220      	movs	r2, #32
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->PreviousState = I2C_STATE_NONE;
 8004162:	2300      	movs	r3, #0
 8004164:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004166:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 800416a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
 800416e:	2001      	movs	r0, #1
 8004170:	4770      	bx	lr
  }
  return HAL_OK;
 8004172:	4618      	mov	r0, r3
}
 8004174:	4770      	bx	lr

08004176 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004176:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800417a:	9c08      	ldr	r4, [sp, #32]
 800417c:	4605      	mov	r5, r0
 800417e:	460e      	mov	r6, r1
 8004180:	4690      	mov	r8, r2
 8004182:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8004184:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8004188:	682b      	ldr	r3, [r5, #0]
 800418a:	f1b9 0f01 	cmp.w	r9, #1
 800418e:	bf0c      	ite	eq
 8004190:	6958      	ldreq	r0, [r3, #20]
 8004192:	6998      	ldrne	r0, [r3, #24]
 8004194:	43c0      	mvns	r0, r0
 8004196:	b280      	uxth	r0, r0
 8004198:	4230      	tst	r0, r6
 800419a:	bf0c      	ite	eq
 800419c:	2301      	moveq	r3, #1
 800419e:	2300      	movne	r3, #0
 80041a0:	4543      	cmp	r3, r8
 80041a2:	d112      	bne.n	80041ca <I2C_WaitOnFlagUntilTimeout+0x54>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80041a4:	1c7b      	adds	r3, r7, #1
 80041a6:	d0ef      	beq.n	8004188 <I2C_WaitOnFlagUntilTimeout+0x12>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80041a8:	b94f      	cbnz	r7, 80041be <I2C_WaitOnFlagUntilTimeout+0x48>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80041aa:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80041ac:	2220      	movs	r2, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80041ae:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
        
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041b0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 80041b4:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
        
        return HAL_TIMEOUT;
 80041b8:	2003      	movs	r0, #3
 80041ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80041be:	f7ff f9df 	bl	8003580 <HAL_GetTick>
 80041c2:	1b00      	subs	r0, r0, r4
 80041c4:	4287      	cmp	r7, r0
 80041c6:	d2df      	bcs.n	8004188 <I2C_WaitOnFlagUntilTimeout+0x12>
 80041c8:	e7ef      	b.n	80041aa <I2C_WaitOnFlagUntilTimeout+0x34>
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;
 80041ca:	2000      	movs	r0, #0
}
 80041cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080041d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041d4:	4604      	mov	r4, r0
 80041d6:	460e      	mov	r6, r1
 80041d8:	4617      	mov	r7, r2
 80041da:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041dc:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80041e0:	6825      	ldr	r5, [r4, #0]
 80041e2:	f1b8 0f01 	cmp.w	r8, #1
 80041e6:	bf0c      	ite	eq
 80041e8:	6968      	ldreq	r0, [r5, #20]
 80041ea:	69a8      	ldrne	r0, [r5, #24]
 80041ec:	43c0      	mvns	r0, r0
 80041ee:	b280      	uxth	r0, r0
 80041f0:	4230      	tst	r0, r6
 80041f2:	bf14      	ite	ne
 80041f4:	2001      	movne	r0, #1
 80041f6:	2000      	moveq	r0, #0
 80041f8:	b348      	cbz	r0, 800424e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x7e>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041fa:	696b      	ldr	r3, [r5, #20]
 80041fc:	055a      	lsls	r2, r3, #21
 80041fe:	d512      	bpl.n	8004226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x56>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004200:	682b      	ldr	r3, [r5, #0]
 8004202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004206:	602b      	str	r3, [r5, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004208:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800420c:	616b      	str	r3, [r5, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800420e:	2304      	movs	r3, #4
 8004210:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;
 8004212:	2220      	movs	r2, #32

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
      hi2c->PreviousState = I2C_STATE_NONE;
 8004214:	2300      	movs	r3, #0
 8004216:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004218:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;
 800421c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
 8004220:	2001      	movs	r0, #1
 8004222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004226:	1c7b      	adds	r3, r7, #1
 8004228:	d0da      	beq.n	80041e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800422a:	b94f      	cbnz	r7, 8004240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x70>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800422c:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800422e:	2220      	movs	r2, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004230:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004232:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8004236:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT;
 800423a:	2003      	movs	r0, #3
 800423c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004240:	f7ff f99e 	bl	8003580 <HAL_GetTick>
 8004244:	ebc9 0000 	rsb	r0, r9, r0
 8004248:	4287      	cmp	r7, r0
 800424a:	d2c9      	bcs.n	80041e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800424c:	e7ee      	b.n	800422c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5c>
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 800424e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004252 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8004252:	b570      	push	{r4, r5, r6, lr}
 8004254:	4604      	mov	r4, r0
 8004256:	460d      	mov	r5, r1
 8004258:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800425a:	6823      	ldr	r3, [r4, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	075b      	lsls	r3, r3, #29
 8004260:	d419      	bmi.n	8004296 <I2C_WaitOnBTFFlagUntilTimeout+0x44>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004262:	4620      	mov	r0, r4
 8004264:	f7ff ff72 	bl	800414c <I2C_IsAcknowledgeFailed>
 8004268:	b9b8      	cbnz	r0, 800429a <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    {
      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800426a:	1c6a      	adds	r2, r5, #1
 800426c:	d0f5      	beq.n	800425a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800426e:	b965      	cbnz	r5, 800428a <I2C_WaitOnBTFFlagUntilTimeout+0x38>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004270:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004272:	f043 0320 	orr.w	r3, r3, #32
 8004276:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8004278:	2220      	movs	r2, #32
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
        hi2c->PreviousState = I2C_STATE_NONE;
 800427a:	2300      	movs	r3, #0
 800427c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800427e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8004282:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004286:	2003      	movs	r0, #3
 8004288:	bd70      	pop	{r4, r5, r6, pc}
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800428a:	f7ff f979 	bl	8003580 <HAL_GetTick>
 800428e:	1b80      	subs	r0, r0, r6
 8004290:	4285      	cmp	r5, r0
 8004292:	d2e2      	bcs.n	800425a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8004294:	e7ec      	b.n	8004270 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004296:	2000      	movs	r0, #0
 8004298:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
    {
      return HAL_ERROR;
 800429a:	2001      	movs	r0, #1
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 800429c:	bd70      	pop	{r4, r5, r6, pc}

0800429e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 800429e:	b570      	push	{r4, r5, r6, lr}
 80042a0:	4604      	mov	r4, r0
 80042a2:	460d      	mov	r5, r1
 80042a4:	4616      	mov	r6, r2

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042a6:	6820      	ldr	r0, [r4, #0]
 80042a8:	6943      	ldr	r3, [r0, #20]
 80042aa:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80042ae:	d121      	bne.n	80042f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042b0:	6942      	ldr	r2, [r0, #20]
 80042b2:	06d2      	lsls	r2, r2, #27
 80042b4:	d50b      	bpl.n	80042ce <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042b6:	f06f 0210 	mvn.w	r2, #16
 80042ba:	6142      	str	r2, [r0, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;
 80042bc:	2220      	movs	r2, #32
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042be:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042c0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
      hi2c->PreviousState = I2C_STATE_NONE;
 80042c4:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
 80042c6:	2001      	movs	r0, #1
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;
 80042c8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
 80042cc:	bd70      	pop	{r4, r5, r6, pc}
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80042ce:	b95d      	cbnz	r5, 80042e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042d2:	f043 0320 	orr.w	r3, r3, #32
 80042d6:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80042d8:	2320      	movs	r3, #32
 80042da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042de:	2300      	movs	r3, #0
 80042e0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80042e4:	2003      	movs	r0, #3
 80042e6:	bd70      	pop	{r4, r5, r6, pc}

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80042e8:	f7ff f94a 	bl	8003580 <HAL_GetTick>
 80042ec:	1b80      	subs	r0, r0, r6
 80042ee:	4285      	cmp	r5, r0
 80042f0:	d2d9      	bcs.n	80042a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 80042f2:	e7ed      	b.n	80042d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
      __HAL_UNLOCK(hi2c);

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80042f4:	2000      	movs	r0, #0
}
 80042f6:	bd70      	pop	{r4, r5, r6, pc}

080042f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 80042f8:	b570      	push	{r4, r5, r6, lr}
 80042fa:	4604      	mov	r4, r0
 80042fc:	460d      	mov	r5, r1
 80042fe:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004300:	6823      	ldr	r3, [r4, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	061b      	lsls	r3, r3, #24
 8004306:	d419      	bmi.n	800433c <I2C_WaitOnTXEFlagUntilTimeout+0x44>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004308:	4620      	mov	r0, r4
 800430a:	f7ff ff1f 	bl	800414c <I2C_IsAcknowledgeFailed>
 800430e:	b9b8      	cbnz	r0, 8004340 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    {
      return HAL_ERROR;
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004310:	1c6a      	adds	r2, r5, #1
 8004312:	d0f5      	beq.n	8004300 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004314:	b965      	cbnz	r5, 8004330 <I2C_WaitOnTXEFlagUntilTimeout+0x38>
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004316:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004318:	f043 0320 	orr.w	r3, r3, #32
 800431c:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 800431e:	2220      	movs	r2, #32
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
        hi2c->PreviousState = I2C_STATE_NONE;
 8004320:	2300      	movs	r3, #0
 8004322:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004324:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8004328:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800432c:	2003      	movs	r0, #3
 800432e:	bd70      	pop	{r4, r5, r6, pc}
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004330:	f7ff f926 	bl	8003580 <HAL_GetTick>
 8004334:	1b80      	subs	r0, r0, r6
 8004336:	4285      	cmp	r5, r0
 8004338:	d2e2      	bcs.n	8004300 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 800433a:	e7ec      	b.n	8004316 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;      
 800433c:	2000      	movs	r0, #0
 800433e:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
    {
      return HAL_ERROR;
 8004340:	2001      	movs	r0, #1
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;      
}
 8004342:	bd70      	pop	{r4, r5, r6, pc}

08004344 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004344:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004348:	4615      	mov	r5, r2
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800434a:	6802      	ldr	r2, [r0, #0]
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800434c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800434e:	4698      	mov	r8, r3
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8004350:	6813      	ldr	r3, [r2, #0]
 8004352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004356:	6013      	str	r3, [r2, #0]
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004358:	460f      	mov	r7, r1
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800435a:	9600      	str	r6, [sp, #0]
 800435c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800435e:	2200      	movs	r2, #0
 8004360:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004364:	4604      	mov	r4, r0
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004366:	f7ff ff06 	bl	8004176 <I2C_WaitOnFlagUntilTimeout>
 800436a:	b968      	cbnz	r0, 8004388 <I2C_RequestMemoryWrite+0x44>
  {
    return HAL_TIMEOUT;
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800436c:	6823      	ldr	r3, [r4, #0]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800436e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004370:	491b      	ldr	r1, [pc, #108]	; (80043e0 <I2C_RequestMemoryWrite+0x9c>)
  {
    return HAL_TIMEOUT;
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004372:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8004376:	611f      	str	r7, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004378:	4620      	mov	r0, r4
 800437a:	4633      	mov	r3, r6
 800437c:	f7ff ff28 	bl	80041d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004380:	b120      	cbz	r0, 800438c <I2C_RequestMemoryWrite+0x48>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004382:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004384:	2b04      	cmp	r3, #4
 8004386:	d027      	beq.n	80043d8 <I2C_RequestMemoryWrite+0x94>
    {
      return HAL_ERROR;
    }
    else
    {
      return HAL_TIMEOUT;
 8004388:	2003      	movs	r0, #3
 800438a:	e026      	b.n	80043da <I2C_RequestMemoryWrite+0x96>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800438c:	6823      	ldr	r3, [r4, #0]
 800438e:	9003      	str	r0, [sp, #12]
 8004390:	695a      	ldr	r2, [r3, #20]
 8004392:	9203      	str	r2, [sp, #12]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	9303      	str	r3, [sp, #12]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004398:	4632      	mov	r2, r6
 800439a:	990a      	ldr	r1, [sp, #40]	; 0x28
      return HAL_TIMEOUT;
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800439c:	9b03      	ldr	r3, [sp, #12]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800439e:	4620      	mov	r0, r4
 80043a0:	f7ff ffaa 	bl	80042f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80043a4:	b958      	cbnz	r0, 80043be <I2C_RequestMemoryWrite+0x7a>
      return HAL_TIMEOUT;
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043a6:	f1b8 0f01 	cmp.w	r8, #1
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	d011      	beq.n	80043d2 <I2C_RequestMemoryWrite+0x8e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043ae:	0a2a      	lsrs	r2, r5, #8
 80043b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80043b4:	4632      	mov	r2, r6
 80043b6:	4620      	mov	r0, r4
 80043b8:	f7ff ff9e 	bl	80042f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80043bc:	b140      	cbz	r0, 80043d0 <I2C_RequestMemoryWrite+0x8c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043c0:	2b04      	cmp	r3, #4
 80043c2:	d1e1      	bne.n	8004388 <I2C_RequestMemoryWrite+0x44>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80043c4:	6822      	ldr	r2, [r4, #0]
 80043c6:	6813      	ldr	r3, [r2, #0]
 80043c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	e003      	b.n	80043d8 <I2C_RequestMemoryWrite+0x94>
        return HAL_TIMEOUT;
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	b2ed      	uxtb	r5, r5
 80043d4:	611d      	str	r5, [r3, #16]
 80043d6:	e000      	b.n	80043da <I2C_RequestMemoryWrite+0x96>
  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
    {
      return HAL_ERROR;
 80043d8:	2001      	movs	r0, #1
    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
  }

  return HAL_OK;
}
 80043da:	b004      	add	sp, #16
 80043dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043e0:	00010002 	.word	0x00010002

080043e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80043e8:	4698      	mov	r8, r3
  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80043ea:	6803      	ldr	r3, [r0, #0]
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043ec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80043ee:	4616      	mov	r6, r2
  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043f6:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043fe:	601a      	str	r2, [r3, #0]
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004400:	460f      	mov	r7, r1

  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004402:	9500      	str	r5, [sp, #0]
 8004404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004406:	2200      	movs	r2, #0
 8004408:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800440c:	4604      	mov	r4, r0

  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800440e:	f7ff feb2 	bl	8004176 <I2C_WaitOnFlagUntilTimeout>
 8004412:	2800      	cmp	r0, #0
 8004414:	d136      	bne.n	8004484 <I2C_RequestMemoryRead+0xa0>
  {
    return HAL_TIMEOUT;
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004416:	6823      	ldr	r3, [r4, #0]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004418:	492d      	ldr	r1, [pc, #180]	; (80044d0 <I2C_RequestMemoryRead+0xec>)
  {
    return HAL_TIMEOUT;
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800441a:	b2ff      	uxtb	r7, r7
 800441c:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8004420:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004422:	4620      	mov	r0, r4
 8004424:	462b      	mov	r3, r5
 8004426:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004428:	f7ff fed2 	bl	80041d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800442c:	b118      	cbz	r0, 8004436 <I2C_RequestMemoryRead+0x52>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800442e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004430:	2b04      	cmp	r3, #4
 8004432:	d127      	bne.n	8004484 <I2C_RequestMemoryRead+0xa0>
 8004434:	e030      	b.n	8004498 <I2C_RequestMemoryRead+0xb4>
      return HAL_TIMEOUT;
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	9003      	str	r0, [sp, #12]
 800443a:	695a      	ldr	r2, [r3, #20]
 800443c:	9203      	str	r2, [sp, #12]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	9303      	str	r3, [sp, #12]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004442:	462a      	mov	r2, r5
 8004444:	990a      	ldr	r1, [sp, #40]	; 0x28
      return HAL_TIMEOUT;
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004446:	9b03      	ldr	r3, [sp, #12]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004448:	4620      	mov	r0, r4
 800444a:	f7ff ff55 	bl	80042f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800444e:	b9d8      	cbnz	r0, 8004488 <I2C_RequestMemoryRead+0xa4>
      return HAL_TIMEOUT;
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004450:	f1b8 0f01 	cmp.w	r8, #1
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	d121      	bne.n	800449c <I2C_RequestMemoryRead+0xb8>
        return HAL_TIMEOUT;
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004458:	b2f6      	uxtb	r6, r6
 800445a:	611e      	str	r6, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800445c:	462a      	mov	r2, r5
 800445e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004460:	4620      	mov	r0, r4
 8004462:	f7ff ff49 	bl	80042f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004466:	4602      	mov	r2, r0
 8004468:	b970      	cbnz	r0, 8004488 <I2C_RequestMemoryRead+0xa4>
      return HAL_TIMEOUT;
    }
  }

  /* Generate Restart */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800446a:	6821      	ldr	r1, [r4, #0]
 800446c:	680b      	ldr	r3, [r1, #0]
 800446e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004472:	600b      	str	r3, [r1, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004474:	4620      	mov	r0, r4
 8004476:	9500      	str	r5, [sp, #0]
 8004478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800447a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800447e:	f7ff fe7a 	bl	8004176 <I2C_WaitOnFlagUntilTimeout>
 8004482:	b1b0      	cbz	r0, 80044b2 <I2C_RequestMemoryRead+0xce>
    {
      return HAL_ERROR;
    }
    else
    {
      return HAL_TIMEOUT;
 8004484:	2003      	movs	r0, #3
 8004486:	e020      	b.n	80044ca <I2C_RequestMemoryRead+0xe6>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004488:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800448a:	2b04      	cmp	r3, #4
 800448c:	d1fa      	bne.n	8004484 <I2C_RequestMemoryRead+0xa0>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800448e:	6822      	ldr	r2, [r4, #0]
 8004490:	6813      	ldr	r3, [r2, #0]
 8004492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004496:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8004498:	2001      	movs	r0, #1
 800449a:	e016      	b.n	80044ca <I2C_RequestMemoryRead+0xe6>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800449c:	0a32      	lsrs	r2, r6, #8
 800449e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80044a2:	462a      	mov	r2, r5
 80044a4:	4620      	mov	r0, r4
 80044a6:	f7ff ff27 	bl	80042f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80044aa:	2800      	cmp	r0, #0
 80044ac:	d1ec      	bne.n	8004488 <I2C_RequestMemoryRead+0xa4>
        return HAL_TIMEOUT;
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	e7d2      	b.n	8004458 <I2C_RequestMemoryRead+0x74>
  {
    return HAL_TIMEOUT;
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80044b2:	6823      	ldr	r3, [r4, #0]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044b6:	4906      	ldr	r1, [pc, #24]	; (80044d0 <I2C_RequestMemoryRead+0xec>)
  {
    return HAL_TIMEOUT;
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80044b8:	f047 0701 	orr.w	r7, r7, #1
 80044bc:	611f      	str	r7, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044be:	4620      	mov	r0, r4
 80044c0:	462b      	mov	r3, r5
 80044c2:	f7ff fe85 	bl	80041d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044c6:	2800      	cmp	r0, #0
 80044c8:	d1b1      	bne.n	800442e <I2C_RequestMemoryRead+0x4a>
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
}
 80044ca:	b004      	add	sp, #16
 80044cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044d0:	00010002 	.word	0x00010002

080044d4 <HAL_I2C_MspInit>:
 80044d4:	4770      	bx	lr
	...

080044d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044d8:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80044da:	4604      	mov	r4, r0
 80044dc:	2800      	cmp	r0, #0
 80044de:	d063      	beq.n	80045a8 <HAL_I2C_Init+0xd0>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80044e0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80044e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80044e8:	b91b      	cbnz	r3, 80044f2 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044ea:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044ee:	f7ff fff1 	bl	80044d4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044f2:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80044f4:	4d2d      	ldr	r5, [pc, #180]	; (80045ac <HAL_I2C_Init+0xd4>)
    hi2c->Lock = HAL_UNLOCKED;
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044f6:	2324      	movs	r3, #36	; 0x24
 80044f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044fc:	6813      	ldr	r3, [r2, #0]
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004504:	f000 ff08 	bl	8005318 <HAL_RCC_GetPCLK1Freq>
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8004508:	6863      	ldr	r3, [r4, #4]
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 800450a:	6822      	ldr	r2, [r4, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800450c:	4928      	ldr	r1, [pc, #160]	; (80045b0 <HAL_I2C_Init+0xd8>)
 800450e:	fbb0 f1f1 	udiv	r1, r0, r1
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8004512:	42ab      	cmp	r3, r5
 8004514:	462e      	mov	r6, r5
 8004516:	bf88      	it	hi
 8004518:	f44f 7596 	movhi.w	r5, #300	; 0x12c
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 800451c:	6051      	str	r1, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800451e:	bf82      	ittt	hi
 8004520:	4369      	mulhi	r1, r5
 8004522:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8004526:	fbb1 f1f5 	udivhi	r1, r1, r5

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800452a:	42b3      	cmp	r3, r6
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800452c:	f101 0101 	add.w	r1, r1, #1
 8004530:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8004532:	d808      	bhi.n	8004546 <HAL_I2C_Init+0x6e>
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	fbb0 f0f3 	udiv	r0, r0, r3
 800453a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800453e:	2b03      	cmp	r3, #3
 8004540:	bf98      	it	ls
 8004542:	2004      	movls	r0, #4
 8004544:	e016      	b.n	8004574 <HAL_I2C_Init+0x9c>
 8004546:	68a1      	ldr	r1, [r4, #8]
 8004548:	b949      	cbnz	r1, 800455e <HAL_I2C_Init+0x86>
 800454a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800454e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004552:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8004556:	b163      	cbz	r3, 8004572 <HAL_I2C_Init+0x9a>
 8004558:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800455c:	e00a      	b.n	8004574 <HAL_I2C_Init+0x9c>
 800455e:	2119      	movs	r1, #25
 8004560:	434b      	muls	r3, r1
 8004562:	fbb0 f0f3 	udiv	r0, r0, r3
 8004566:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800456a:	b113      	cbz	r3, 8004572 <HAL_I2C_Init+0x9a>
 800456c:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8004570:	e000      	b.n	8004574 <HAL_I2C_Init+0x9c>
 8004572:	2001      	movs	r0, #1

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004574:	69e1      	ldr	r1, [r4, #28]
 8004576:	6a23      	ldr	r3, [r4, #32]
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8004578:	61d0      	str	r0, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800457a:	430b      	orrs	r3, r1
 800457c:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800457e:	6921      	ldr	r1, [r4, #16]
 8004580:	68e3      	ldr	r3, [r4, #12]
 8004582:	430b      	orrs	r3, r1
 8004584:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8004586:	6961      	ldr	r1, [r4, #20]
 8004588:	69a3      	ldr	r3, [r4, #24]
 800458a:	430b      	orrs	r3, r1
 800458c:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800458e:	6813      	ldr	r3, [r2, #0]
 8004590:	f043 0301 	orr.w	r3, r3, #1
 8004594:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004596:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8004598:	2320      	movs	r3, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800459a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800459c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045a0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 80045a6:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 80045a8:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 80045aa:	bd70      	pop	{r4, r5, r6, pc}
 80045ac:	000186a0 	.word	0x000186a0
 80045b0:	000f4240 	.word	0x000f4240

080045b4 <HAL_I2C_MspDeInit>:
 80045b4:	4770      	bx	lr

080045b6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80045b6:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80045b8:	4604      	mov	r4, r0
 80045ba:	b198      	cbz	r0, 80045e4 <HAL_I2C_DeInit+0x2e>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80045bc:	6802      	ldr	r2, [r0, #0]
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045be:	2324      	movs	r3, #36	; 0x24
 80045c0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80045c4:	6813      	ldr	r3, [r2, #0]
 80045c6:	f023 0301 	bic.w	r3, r3, #1
 80045ca:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80045cc:	f7ff fff2 	bl	80045b4 <HAL_I2C_MspDeInit>

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045d0:	2000      	movs	r0, #0
 80045d2:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;
    
  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80045d4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_RESET;
 80045d8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045dc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045de:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    
  /* Release Lock */
  __HAL_UNLOCK(hi2c);

  return HAL_OK;
 80045e2:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 80045e4:	2001      	movs	r0, #1
    
  /* Release Lock */
  __HAL_UNLOCK(hi2c);

  return HAL_OK;
}
 80045e6:	bd10      	pop	{r4, pc}

080045e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ec:	4604      	mov	r4, r0
 80045ee:	b085      	sub	sp, #20
 80045f0:	469b      	mov	fp, r3
 80045f2:	9103      	str	r1, [sp, #12]
 80045f4:	4692      	mov	sl, r2
 80045f6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80045f8:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
  uint32_t tickstart = 0x00U;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045fc:	f7fe ffc0 	bl	8003580 <HAL_GetTick>
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8004600:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004604:	2b20      	cmp	r3, #32
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
  uint32_t tickstart = 0x00U;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004606:	4680      	mov	r8, r0
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8004608:	d001      	beq.n	800460e <HAL_I2C_Mem_Write+0x26>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800460a:	2002      	movs	r0, #2
 800460c:	e069      	b.n	80046e2 <HAL_I2C_Mem_Write+0xfa>
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800460e:	9000      	str	r0, [sp, #0]
 8004610:	2319      	movs	r3, #25
 8004612:	2201      	movs	r2, #1
 8004614:	4934      	ldr	r1, [pc, #208]	; (80046e8 <HAL_I2C_Mem_Write+0x100>)
 8004616:	4620      	mov	r0, r4
 8004618:	f7ff fdad 	bl	8004176 <I2C_WaitOnFlagUntilTimeout>
 800461c:	4681      	mov	r9, r0
 800461e:	2800      	cmp	r0, #0
 8004620:	d1f3      	bne.n	800460a <HAL_I2C_Mem_Write+0x22>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004622:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004626:	2b01      	cmp	r3, #1
 8004628:	d0ef      	beq.n	800460a <HAL_I2C_Mem_Write+0x22>
    
    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800462a:	6822      	ldr	r2, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800462c:	9903      	ldr	r1, [sp, #12]

    /* Process Locked */
    __HAL_LOCK(hi2c);
    
    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800462e:	6813      	ldr	r3, [r2, #0]
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004630:	2501      	movs	r5, #1
    
    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004632:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004636:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    
    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800463a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_BUSY_TX;
 800463c:	2321      	movs	r3, #33	; 0x21
 800463e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_MEM;
 8004642:	2340      	movs	r3, #64	; 0x40
 8004644:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004648:	4b28      	ldr	r3, [pc, #160]	; (80046ec <HAL_I2C_Mem_Write+0x104>)
    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;

    hi2c->State = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800464a:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800464c:	62e3      	str	r3, [r4, #44]	; 0x2c
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800464e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	f8cd 8004 	str.w	r8, [sp, #4]
 8004656:	465b      	mov	r3, fp
 8004658:	4652      	mov	r2, sl
 800465a:	4620      	mov	r0, r4
 800465c:	f7ff fe72 	bl	8004344 <I2C_RequestMemoryWrite>
 8004660:	b1b8      	cbz	r0, 8004692 <HAL_I2C_Mem_Write+0xaa>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004662:	6c23      	ldr	r3, [r4, #64]	; 0x40
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004664:	f884 903c 	strb.w	r9, [r4, #60]	; 0x3c
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004668:	2b04      	cmp	r3, #4
 800466a:	d101      	bne.n	8004670 <HAL_I2C_Mem_Write+0x88>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
        return HAL_ERROR;
 800466c:	4628      	mov	r0, r5
 800466e:	e038      	b.n	80046e2 <HAL_I2C_Mem_Write+0xfa>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
          return HAL_ERROR;
        }
        else
        {
          return HAL_TIMEOUT;
 8004670:	2003      	movs	r0, #3
 8004672:	e036      	b.n	80046e2 <HAL_I2C_Mem_Write+0xfa>
    }

    while(Size > 0U)
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004674:	f7ff fe40 	bl	80042f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004678:	b988      	cbnz	r0, 800469e <HAL_I2C_Mem_Write+0xb6>
          return HAL_TIMEOUT;
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*pData++);
 800467a:	6822      	ldr	r2, [r4, #0]
 800467c:	783b      	ldrb	r3, [r7, #0]
 800467e:	6113      	str	r3, [r2, #16]
      Size--;

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
 8004680:	6950      	ldr	r0, [r2, #20]
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*pData++);
      Size--;
 8004682:	1e73      	subs	r3, r6, #1

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
 8004684:	0740      	lsls	r0, r0, #29
          return HAL_TIMEOUT;
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*pData++);
 8004686:	f107 0101 	add.w	r1, r7, #1
      Size--;
 800468a:	b29b      	uxth	r3, r3

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
 800468c:	d411      	bmi.n	80046b2 <HAL_I2C_Mem_Write+0xca>
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800468e:	461e      	mov	r6, r3
 8004690:	460f      	mov	r7, r1
    }

    while(Size > 0U)
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004692:	4642      	mov	r2, r8
 8004694:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004696:	4620      	mov	r0, r4
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
      }
    }

    while(Size > 0U)
 8004698:	2e00      	cmp	r6, #0
 800469a:	d1eb      	bne.n	8004674 <HAL_I2C_Mem_Write+0x8c>
 800469c:	e011      	b.n	80046c2 <HAL_I2C_Mem_Write+0xda>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800469e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d1e5      	bne.n	8004670 <HAL_I2C_Mem_Write+0x88>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80046a4:	6822      	ldr	r2, [r4, #0]
 80046a6:	6813      	ldr	r3, [r2, #0]
 80046a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046ac:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80046ae:	2001      	movs	r0, #1
 80046b0:	e017      	b.n	80046e2 <HAL_I2C_Mem_Write+0xfa>

      /* Write data to DR */
      hi2c->Instance->DR = (*pData++);
      Size--;

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0eb      	beq.n	800468e <HAL_I2C_Mem_Write+0xa6>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*pData++);
 80046b6:	787b      	ldrb	r3, [r7, #1]
 80046b8:	6113      	str	r3, [r2, #16]
        Size--;
 80046ba:	3e02      	subs	r6, #2
      Size--;

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*pData++);
 80046bc:	1cb9      	adds	r1, r7, #2
        Size--;
 80046be:	b2b3      	uxth	r3, r6
 80046c0:	e7e5      	b.n	800468e <HAL_I2C_Mem_Write+0xa6>
      }
    }
    
    /* Wait until BTF flag is set */
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c2:	f7ff fdc6 	bl	8004252 <I2C_WaitOnBTFFlagUntilTimeout>
 80046c6:	2800      	cmp	r0, #0
 80046c8:	d1e9      	bne.n	800469e <HAL_I2C_Mem_Write+0xb6>
        return HAL_TIMEOUT;
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80046ca:	6822      	ldr	r2, [r4, #0]
 80046cc:	6813      	ldr	r3, [r2, #0]
 80046ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046d2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046d4:	2320      	movs	r3, #32
 80046d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046da:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;

    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046de:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  }
  else
  {
    return HAL_BUSY;
  }
}
 80046e2:	b005      	add	sp, #20
 80046e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046e8:	00100002 	.word	0x00100002
 80046ec:	ffff0000 	.word	0xffff0000

080046f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046f4:	4604      	mov	r4, r0
 80046f6:	b089      	sub	sp, #36	; 0x24
 80046f8:	469b      	mov	fp, r3
 80046fa:	9102      	str	r1, [sp, #8]
 80046fc:	9203      	str	r2, [sp, #12]
 80046fe:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8004700:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8004704:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
  uint32_t tickstart = 0x00U;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004708:	f7fe ff3a 	bl	8003580 <HAL_GetTick>
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 800470c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004710:	2b20      	cmp	r3, #32
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
  uint32_t tickstart = 0x00U;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004712:	4607      	mov	r7, r0
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8004714:	d002      	beq.n	800471c <HAL_I2C_Mem_Read+0x2c>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004716:	f04f 0b02 	mov.w	fp, #2
 800471a:	e0d5      	b.n	80048c8 <HAL_I2C_Mem_Read+0x1d8>
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800471c:	9000      	str	r0, [sp, #0]
 800471e:	2319      	movs	r3, #25
 8004720:	2201      	movs	r2, #1
 8004722:	496b      	ldr	r1, [pc, #428]	; (80048d0 <HAL_I2C_Mem_Read+0x1e0>)
 8004724:	4620      	mov	r0, r4
 8004726:	f7ff fd26 	bl	8004176 <I2C_WaitOnFlagUntilTimeout>
 800472a:	4681      	mov	r9, r0
 800472c:	2800      	cmp	r0, #0
 800472e:	d1f2      	bne.n	8004716 <HAL_I2C_Mem_Read+0x26>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004730:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004734:	2b01      	cmp	r3, #1
 8004736:	d0ee      	beq.n	8004716 <HAL_I2C_Mem_Read+0x26>
    
    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004738:	6822      	ldr	r2, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800473a:	9902      	ldr	r1, [sp, #8]

    /* Process Locked */
    __HAL_LOCK(hi2c);
    
    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800473c:	6813      	ldr	r3, [r2, #0]
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800473e:	f04f 0a01 	mov.w	sl, #1
    
    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004742:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004746:	f884 a03c 	strb.w	sl, [r4, #60]	; 0x3c
    
    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800474a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_BUSY_RX;
 800474c:	2322      	movs	r3, #34	; 0x22
 800474e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_MEM;
 8004752:	2340      	movs	r3, #64	; 0x40
 8004754:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004758:	4b5e      	ldr	r3, [pc, #376]	; (80048d4 <HAL_I2C_Mem_Read+0x1e4>)
    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;

    hi2c->State = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800475a:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800475c:	9701      	str	r7, [sp, #4]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;

    hi2c->State = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800475e:	62e3      	str	r3, [r4, #44]	; 0x2c
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004760:	f8cd 8000 	str.w	r8, [sp]
 8004764:	465b      	mov	r3, fp
 8004766:	9a03      	ldr	r2, [sp, #12]
 8004768:	4620      	mov	r0, r4
 800476a:	f7ff fe3b 	bl	80043e4 <I2C_RequestMemoryRead>
 800476e:	4683      	mov	fp, r0
 8004770:	b130      	cbz	r0, 8004780 <HAL_I2C_Mem_Read+0x90>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004772:	6c23      	ldr	r3, [r4, #64]	; 0x40
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004774:	f884 903c 	strb.w	r9, [r4, #60]	; 0x3c
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004778:	2b04      	cmp	r3, #4
 800477a:	d143      	bne.n	8004804 <HAL_I2C_Mem_Read+0x114>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
        return HAL_ERROR;
 800477c:	46d3      	mov	fp, sl
 800477e:	e0a3      	b.n	80048c8 <HAL_I2C_Mem_Read+0x1d8>
 8004780:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
      }
    }

    if(Size == 0U)
 8004782:	b955      	cbnz	r5, 800479a <HAL_I2C_Mem_Read+0xaa>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004784:	9004      	str	r0, [sp, #16]
 8004786:	695a      	ldr	r2, [r3, #20]
 8004788:	9204      	str	r2, [sp, #16]
 800478a:	699a      	ldr	r2, [r3, #24]
 800478c:	9204      	str	r2, [sp, #16]
 800478e:	9a04      	ldr	r2, [sp, #16]
      
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	e08e      	b.n	80048b8 <HAL_I2C_Mem_Read+0x1c8>
    }
    else if(Size == 1U)
 800479a:	2d01      	cmp	r5, #1
 800479c:	d10e      	bne.n	80047bc <HAL_I2C_Mem_Read+0xcc>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047a6:	9005      	str	r0, [sp, #20]
 80047a8:	695a      	ldr	r2, [r3, #20]
 80047aa:	9205      	str	r2, [sp, #20]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	9205      	str	r2, [sp, #20]
 80047b0:	9a05      	ldr	r2, [sp, #20]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	e016      	b.n	80047ea <HAL_I2C_Mem_Read+0xfa>
    }
    else if(Size == 2U)
 80047bc:	2d02      	cmp	r5, #2
 80047be:	d10e      	bne.n	80047de <HAL_I2C_Mem_Read+0xee>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c6:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047ce:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d0:	9006      	str	r0, [sp, #24]
 80047d2:	695a      	ldr	r2, [r3, #20]
 80047d4:	9206      	str	r2, [sp, #24]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	9306      	str	r3, [sp, #24]
 80047da:	9b06      	ldr	r3, [sp, #24]
 80047dc:	e005      	b.n	80047ea <HAL_I2C_Mem_Read+0xfa>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047de:	9007      	str	r0, [sp, #28]
 80047e0:	695a      	ldr	r2, [r3, #20]
 80047e2:	9207      	str	r2, [sp, #28]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	9307      	str	r3, [sp, #28]
 80047e8:	9b07      	ldr	r3, [sp, #28]
    }

    while(Size > 0U)
    {
      if(Size <= 3U)
 80047ea:	2d03      	cmp	r5, #3
 80047ec:	d84a      	bhi.n	8004884 <HAL_I2C_Mem_Read+0x194>
      {
        /* One byte */
        if(Size== 1U)
 80047ee:	2d01      	cmp	r5, #1
 80047f0:	d112      	bne.n	8004818 <HAL_I2C_Mem_Read+0x128>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80047f2:	463a      	mov	r2, r7
 80047f4:	4641      	mov	r1, r8
 80047f6:	4620      	mov	r0, r4
 80047f8:	f7ff fd51 	bl	800429e <I2C_WaitOnRXNEFlagUntilTimeout>
 80047fc:	b140      	cbz	r0, 8004810 <HAL_I2C_Mem_Read+0x120>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80047fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004800:	2b20      	cmp	r3, #32
 8004802:	d102      	bne.n	800480a <HAL_I2C_Mem_Read+0x11a>
            {
              return HAL_TIMEOUT;
 8004804:	f04f 0b03 	mov.w	fp, #3
 8004808:	e05e      	b.n	80048c8 <HAL_I2C_Mem_Read+0x1d8>
            }
            else
            {
              return HAL_ERROR;
 800480a:	f04f 0b01 	mov.w	fp, #1
 800480e:	e05b      	b.n	80048c8 <HAL_I2C_Mem_Read+0x1d8>
            }
          }

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	7033      	strb	r3, [r6, #0]
 8004816:	e04f      	b.n	80048b8 <HAL_I2C_Mem_Read+0x1c8>
          Size--;
        }
        /* Two bytes */
        else if(Size == 2U)
 8004818:	2d02      	cmp	r5, #2
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800481a:	9700      	str	r7, [sp, #0]
 800481c:	4643      	mov	r3, r8
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	492d      	ldr	r1, [pc, #180]	; (80048d8 <HAL_I2C_Mem_Read+0x1e8>)
 8004824:	4620      	mov	r0, r4
          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
          Size--;
        }
        /* Two bytes */
        else if(Size == 2U)
 8004826:	d10e      	bne.n	8004846 <HAL_I2C_Mem_Read+0x156>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004828:	f7ff fca5 	bl	8004176 <I2C_WaitOnFlagUntilTimeout>
 800482c:	2800      	cmp	r0, #0
 800482e:	d1e9      	bne.n	8004804 <HAL_I2C_Mem_Read+0x114>
          {
            return HAL_TIMEOUT;
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004838:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	7033      	strb	r3, [r6, #0]
          Size--;

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	7073      	strb	r3, [r6, #1]
 8004844:	e038      	b.n	80048b8 <HAL_I2C_Mem_Read+0x1c8>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004846:	f7ff fc96 	bl	8004176 <I2C_WaitOnFlagUntilTimeout>
 800484a:	4602      	mov	r2, r0
 800484c:	2800      	cmp	r0, #0
 800484e:	d1d9      	bne.n	8004804 <HAL_I2C_Mem_Read+0x114>
          {
            return HAL_TIMEOUT;
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	6819      	ldr	r1, [r3, #0]
 8004854:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004858:	6019      	str	r1, [r3, #0]

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	7033      	strb	r3, [r6, #0]
          Size--;

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800485e:	491e      	ldr	r1, [pc, #120]	; (80048d8 <HAL_I2C_Mem_Read+0x1e8>)
 8004860:	9700      	str	r7, [sp, #0]
 8004862:	4643      	mov	r3, r8
 8004864:	4620      	mov	r0, r4
 8004866:	f7ff fc86 	bl	8004176 <I2C_WaitOnFlagUntilTimeout>
 800486a:	2800      	cmp	r0, #0
 800486c:	d1ca      	bne.n	8004804 <HAL_I2C_Mem_Read+0x114>
          {
            return HAL_TIMEOUT;
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004876:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	7073      	strb	r3, [r6, #1]
          Size--;

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	70b3      	strb	r3, [r6, #2]
 8004882:	e019      	b.n	80048b8 <HAL_I2C_Mem_Read+0x1c8>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8004884:	463a      	mov	r2, r7
 8004886:	4641      	mov	r1, r8
 8004888:	4620      	mov	r0, r4
 800488a:	f7ff fd08 	bl	800429e <I2C_WaitOnRXNEFlagUntilTimeout>
 800488e:	2800      	cmp	r0, #0
 8004890:	d1b5      	bne.n	80047fe <HAL_I2C_Mem_Read+0x10e>
            return HAL_ERROR;
          }
        }

        /* Read data from DR */
        (*pData++) = hi2c->Instance->DR;
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	7033      	strb	r3, [r6, #0]
        Size--;

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	695a      	ldr	r2, [r3, #20]
 800489c:	0752      	lsls	r2, r2, #29
          }
        }

        /* Read data from DR */
        (*pData++) = hi2c->Instance->DR;
        Size--;
 800489e:	bf51      	iteee	pl
 80048a0:	f105 35ff 	addpl.w	r5, r5, #4294967295

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
        {
          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
          Size--;
 80048a4:	3d02      	submi	r5, #2
        Size--;

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
        {
          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 80048a6:	691b      	ldrmi	r3, [r3, #16]
 80048a8:	7073      	strbmi	r3, [r6, #1]
          }
        }

        /* Read data from DR */
        (*pData++) = hi2c->Instance->DR;
        Size--;
 80048aa:	bf55      	itete	pl
 80048ac:	b2ad      	uxthpl	r5, r5

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
        {
          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
          Size--;
 80048ae:	b2ad      	uxthmi	r5, r5
            return HAL_ERROR;
          }
        }

        /* Read data from DR */
        (*pData++) = hi2c->Instance->DR;
 80048b0:	3601      	addpl	r6, #1
        Size--;

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
        {
          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 80048b2:	3602      	addmi	r6, #2
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
    }

    while(Size > 0U)
 80048b4:	2d00      	cmp	r5, #0
 80048b6:	d198      	bne.n	80047ea <HAL_I2C_Mem_Read+0xfa>
          Size--;
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048b8:	2320      	movs	r3, #32
 80048ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048be:	2300      	movs	r3, #0
 80048c0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  }
  else
  {
    return HAL_BUSY;
  }
}
 80048c8:	4658      	mov	r0, fp
 80048ca:	b009      	add	sp, #36	; 0x24
 80048cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048d0:	00100002 	.word	0x00100002
 80048d4:	ffff0000 	.word	0xffff0000
 80048d8:	00010004 	.word	0x00010004

080048dc <HAL_I2C_GetState>:
  *         the configuration information for I2C module
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
  return hi2c->State;
 80048dc:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 80048e0:	4770      	bx	lr

080048e2 <LTDC_SetConfig>:
  * @param  LayerIdx:  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80048e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp = 0U;
  uint32_t tmp1 = 0U;
  uint32_t tmp2 = 0U;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80048e6:	6804      	ldr	r4, [r0, #0]
 80048e8:	684f      	ldr	r7, [r1, #4]
 80048ea:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80048ec:	f8d1 c000 	ldr.w	ip, [r1]
  uint32_t tmp1 = 0U;
  uint32_t tmp2 = 0U;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80048f0:	f104 0e84 	add.w	lr, r4, #132	; 0x84
 80048f4:	01d2      	lsls	r2, r2, #7
 80048f6:	eb02 030e 	add.w	r3, r2, lr
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80048fa:	f3c5 450b 	ubfx	r5, r5, #16, #12
  uint32_t tmp1 = 0U;
  uint32_t tmp2 = 0U;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80048fe:	6858      	ldr	r0, [r3, #4]
 8004900:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8004904:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004906:	68e0      	ldr	r0, [r4, #12]
 8004908:	19ee      	adds	r6, r5, r7
 800490a:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800490e:	f10c 0501 	add.w	r5, ip, #1
 8004912:	4428      	add	r0, r5
 8004914:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8004918:	6058      	str	r0, [r3, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800491a:	68e0      	ldr	r0, [r4, #12]
 800491c:	68cd      	ldr	r5, [r1, #12]
 800491e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004922:	1946      	adds	r6, r0, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004924:	6898      	ldr	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 8004926:	688d      	ldr	r5, [r1, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004928:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 800492c:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 800492e:	68e4      	ldr	r4, [r4, #12]
 8004930:	1c68      	adds	r0, r5, #1
 8004932:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8004936:	4420      	add	r0, r4
 8004938:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800493c:	6098      	str	r0, [r3, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800493e:	6918      	ldr	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004940:	690e      	ldr	r6, [r1, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
 8004942:	698d      	ldr	r5, [r1, #24]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004944:	f020 0007 	bic.w	r0, r0, #7
 8004948:	6118      	str	r0, [r3, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800494a:	f04f 0800 	mov.w	r8, #0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800494e:	611e      	str	r6, [r3, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004950:	6998      	ldr	r0, [r3, #24]
  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004952:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004956:	f891 9032 	ldrb.w	r9, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800495a:	f8c3 8018 	str.w	r8, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800495e:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 8004962:	ea40 6505 	orr.w	r5, r0, r5, lsl #24
 8004966:	ea45 2404 	orr.w	r4, r5, r4, lsl #8
 800496a:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800496e:	619c      	str	r4, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004970:	6958      	ldr	r0, [r3, #20]
 8004972:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8004976:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004978:	6948      	ldr	r0, [r1, #20]
 800497a:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800497c:	69d8      	ldr	r0, [r3, #28]
 800497e:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8004982:	f020 0007 	bic.w	r0, r0, #7
 8004986:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004988:	69cd      	ldr	r5, [r1, #28]
 800498a:	6a0c      	ldr	r4, [r1, #32]
 800498c:	432c      	orrs	r4, r5
 800498e:	61dc      	str	r4, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004990:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004992:	6a48      	ldr	r0, [r1, #36]	; 0x24
  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004994:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004998:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800499a:	b14e      	cbz	r6, 80049b0 <LTDC_SetConfig+0xce>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800499c:	2e01      	cmp	r6, #1
 800499e:	d009      	beq.n	80049b4 <LTDC_SetConfig+0xd2>
  {
    tmp = 3U;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80049a0:	1eb0      	subs	r0, r6, #2
 80049a2:	2802      	cmp	r0, #2
 80049a4:	d908      	bls.n	80049b8 <LTDC_SetConfig+0xd6>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80049a6:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 80049a8:	bf0c      	ite	eq
 80049aa:	2002      	moveq	r0, #2
 80049ac:	2001      	movne	r0, #1
 80049ae:	e004      	b.n	80049ba <LTDC_SetConfig+0xd8>
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
  {
    tmp = 4U;
 80049b0:	2004      	movs	r0, #4
 80049b2:	e002      	b.n	80049ba <LTDC_SetConfig+0xd8>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
  {
    tmp = 3U;
 80049b4:	2003      	movs	r0, #3
 80049b6:	e000      	b.n	80049ba <LTDC_SetConfig+0xd8>
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 80049b8:	2002      	movs	r0, #2
  {
    tmp = 1U;
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80049ba:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80049bc:	f004 24e0 	and.w	r4, r4, #3758153728	; 0xe000e000
 80049c0:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80049c2:	6a8c      	ldr	r4, [r1, #40]	; 0x28

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80049c4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    tmp = 1U;
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80049c6:	ebcc 0707 	rsb	r7, ip, r7
 80049ca:	4344      	muls	r4, r0
 80049cc:	4378      	muls	r0, r7
 80049ce:	3003      	adds	r0, #3
 80049d0:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80049d4:	62d8      	str	r0, [r3, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80049d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80049d8:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80049dc:	f020 0007 	bic.w	r0, r0, #7
 80049e0:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80049e2:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80049e4:	f852 300e 	ldr.w	r3, [r2, lr]
 80049e8:	f043 0301 	orr.w	r3, r3, #1
 80049ec:	f842 300e 	str.w	r3, [r2, lr]
 80049f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080049f4 <HAL_LTDC_Init>:
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80049f4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp = 0U, tmp1 = 0U;

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 80049f6:	4604      	mov	r4, r0
 80049f8:	2800      	cmp	r0, #0
 80049fa:	d06a      	beq.n	8004ad2 <HAL_LTDC_Init+0xde>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 80049fc:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8004a00:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004a04:	b91b      	cbnz	r3, 8004a0e <HAL_LTDC_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004a06:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004a0a:	f001 fff7 	bl	80069fc <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004a0e:	2302      	movs	r3, #2
 8004a10:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	699a      	ldr	r2, [r3, #24]
 8004a18:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004a1c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004a1e:	6999      	ldr	r1, [r3, #24]
 8004a20:	6862      	ldr	r2, [r4, #4]
 8004a22:	4311      	orrs	r1, r2
 8004a24:	68a2      	ldr	r2, [r4, #8]
 8004a26:	4311      	orrs	r1, r2
 8004a28:	68e2      	ldr	r2, [r4, #12]
 8004a2a:	4311      	orrs	r1, r2
 8004a2c:	6922      	ldr	r2, [r4, #16]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	619a      	str	r2, [r3, #24]
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004a32:	6899      	ldr	r1, [r3, #8]
 8004a34:	4a28      	ldr	r2, [pc, #160]	; (8004ad8 <HAL_LTDC_Init+0xe4>)
 8004a36:	400a      	ands	r2, r1
 8004a38:	609a      	str	r2, [r3, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004a3a:	6898      	ldr	r0, [r3, #8]
 8004a3c:	69a2      	ldr	r2, [r4, #24]
 8004a3e:	6961      	ldr	r1, [r4, #20]
 8004a40:	4302      	orrs	r2, r0
 8004a42:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004a46:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004a48:	68d9      	ldr	r1, [r3, #12]
 8004a4a:	4a23      	ldr	r2, [pc, #140]	; (8004ad8 <HAL_LTDC_Init+0xe4>)
 8004a4c:	400a      	ands	r2, r1
 8004a4e:	60da      	str	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004a50:	68d8      	ldr	r0, [r3, #12]
 8004a52:	6a22      	ldr	r2, [r4, #32]
 8004a54:	69e1      	ldr	r1, [r4, #28]
 8004a56:	4302      	orrs	r2, r0
 8004a58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004a5c:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004a5e:	6919      	ldr	r1, [r3, #16]
 8004a60:	4a1d      	ldr	r2, [pc, #116]	; (8004ad8 <HAL_LTDC_Init+0xe4>)
 8004a62:	400a      	ands	r2, r1
 8004a64:	611a      	str	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004a66:	6918      	ldr	r0, [r3, #16]
 8004a68:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004a6a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004a6c:	4302      	orrs	r2, r0
 8004a6e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004a72:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004a74:	6959      	ldr	r1, [r3, #20]
 8004a76:	4a18      	ldr	r2, [pc, #96]	; (8004ad8 <HAL_LTDC_Init+0xe4>)
 8004a78:	400a      	ands	r2, r1
 8004a7a:	615a      	str	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004a7c:	6958      	ldr	r0, [r3, #20]
 8004a7e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004a80:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004a82:	4302      	orrs	r2, r0
 8004a84:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004a88:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004a8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp = (hltdc->Init.TotalWidth << 16U);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004a8c:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  tmp = (hltdc->Init.TotalWidth << 16U);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004a90:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004a94:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8004a98:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004a9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a9c:	f894 5034 	ldrb.w	r5, [r4, #52]	; 0x34
 8004aa0:	4329      	orrs	r1, r5
 8004aa2:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 8004aa6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004aaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8004aac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aae:	f042 0204 	orr.w	r2, r2, #4
 8004ab2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8004ab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ab6:	f042 0202 	orr.w	r2, r2, #2
 8004aba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004abc:	699a      	ldr	r2, [r3, #24]
 8004abe:	f042 0201 	orr.w	r2, r2, #1
 8004ac2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8004ac4:	2000      	movs	r0, #0

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004ac6:	2301      	movs	r3, #1

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8004ac8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004acc:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  return HAL_OK;
 8004ad0:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t tmp = 0U, tmp1 = 0U;

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
  {
    return HAL_ERROR;
 8004ad2:	2001      	movs	r0, #1

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;

  return HAL_OK;
}
 8004ad4:	bd38      	pop	{r3, r4, r5, pc}
 8004ad6:	bf00      	nop
 8004ad8:	f000f800 	.word	0xf000f800

08004adc <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 8004adc:	b510      	push	{r4, lr}
 8004ade:	4604      	mov	r4, r0
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc); 
 8004ae0:	f002 f82e 	bl	8006b40 <HAL_LTDC_MspDeInit>

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 8004aea:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 8004aee:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);

  return HAL_OK;
}
 8004af2:	bd10      	pop	{r4, pc}

08004af4 <HAL_LTDC_ErrorCallback>:
 8004af4:	4770      	bx	lr

08004af6 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004af6:	4770      	bx	lr

08004af8 <HAL_LTDC_IRQHandler>:
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 8004af8:	6803      	ldr	r3, [r0, #0]
 8004afa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004afc:	0751      	lsls	r1, r2, #29
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004afe:	b510      	push	{r4, lr}
 8004b00:	4604      	mov	r4, r0
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 8004b02:	d515      	bpl.n	8004b30 <HAL_LTDC_IRQHandler+0x38>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_TE) != RESET)
 8004b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b06:	0752      	lsls	r2, r2, #29
 8004b08:	d512      	bpl.n	8004b30 <HAL_LTDC_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004b0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b0c:	f022 0204 	bic.w	r2, r2, #4
 8004b10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the transfer error flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004b12:	2204      	movs	r2, #4
 8004b14:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004b16:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8004b1a:	f043 0301 	orr.w	r3, r3, #1
 8004b1e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8004b22:	2300      	movs	r3, #0

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8004b24:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8004b28:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0

      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 8004b2c:	f7ff ffe2 	bl	8004af4 <HAL_LTDC_ErrorCallback>
    }
  }
  /* FIFO underrun Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b34:	0790      	lsls	r0, r2, #30
 8004b36:	d516      	bpl.n	8004b66 <HAL_LTDC_IRQHandler+0x6e>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
 8004b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b3a:	0791      	lsls	r1, r2, #30
 8004b3c:	d513      	bpl.n	8004b66 <HAL_LTDC_IRQHandler+0x6e>
    {
      /* Disable the FIFO underrun interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004b3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b40:	f022 0202 	bic.w	r2, r2, #2
 8004b44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the FIFO underrun flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004b46:	2202      	movs	r2, #2
 8004b48:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004b4a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8004b54:	2304      	movs	r3, #4
 8004b56:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
      
      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 8004b60:	4620      	mov	r0, r4
 8004b62:	f7ff ffc7 	bl	8004af4 <HAL_LTDC_ErrorCallback>
    }
  }
  /* Line Interrupt management ************************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b6a:	07d2      	lsls	r2, r2, #31
 8004b6c:	d510      	bpl.n	8004b90 <HAL_LTDC_IRQHandler+0x98>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
 8004b6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b70:	07d0      	lsls	r0, r2, #31
 8004b72:	d50d      	bpl.n	8004b90 <HAL_LTDC_IRQHandler+0x98>
    {
      /* Disable the Line interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b76:	f022 0201 	bic.w	r2, r2, #1
 8004b7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the Line interrupt flag */  
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8004b80:	2300      	movs	r3, #0

      /* Clear the Line interrupt flag */  
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 8004b82:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8004b86:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0

      /* Line interrupt Callback */
      HAL_LTDC_LineEventCallback(hltdc);
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	f001 ffe4 	bl	8006b58 <HAL_LTDC_LineEventCallback>
    }
  }
  /* Register reload Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_RR) != RESET)
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b94:	0711      	lsls	r1, r2, #28
 8004b96:	d511      	bpl.n	8004bbc <HAL_LTDC_IRQHandler+0xc4>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_RR) != RESET)
 8004b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b9a:	0712      	lsls	r2, r2, #28
 8004b9c:	d50e      	bpl.n	8004bbc <HAL_LTDC_IRQHandler+0xc4>
    {
      /* Disable the register reload interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ba0:	f022 0208 	bic.w	r2, r2, #8
 8004ba4:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Clear the register reload flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004ba6:	2208      	movs	r2, #8
 8004ba8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 8004baa:	2301      	movs	r3, #1
 8004bac:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
      
      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
      
      /* Register reload interrupt Callback */
      HAL_LTDC_ReloadEventCallback(hltdc);
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	f7ff ff9d 	bl	8004af6 <HAL_LTDC_ReloadEventCallback>
 8004bbc:	bd10      	pop	{r4, pc}

08004bbe <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8004bbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004bc0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8004bc4:	2b01      	cmp	r3, #1
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8004bc6:	4606      	mov	r6, r0
 8004bc8:	468e      	mov	lr, r1
 8004bca:	4694      	mov	ip, r2
 8004bcc:	f04f 0002 	mov.w	r0, #2
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004bd0:	d01d      	beq.n	8004c0e <HAL_LTDC_ConfigLayer+0x50>
 8004bd2:	2701      	movs	r7, #1
 8004bd4:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004bd8:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8004bdc:	2434      	movs	r4, #52	; 0x34
 8004bde:	460d      	mov	r5, r1
 8004be0:	fb04 6402 	mla	r4, r4, r2, r6
 8004be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004be6:	3438      	adds	r4, #56	; 0x38
 8004be8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bf2:	682b      	ldr	r3, [r5, #0]
 8004bf4:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004bf6:	4630      	mov	r0, r6
 8004bf8:	4662      	mov	r2, ip
 8004bfa:	4671      	mov	r1, lr
 8004bfc:	f7ff fe71 	bl	80048e2 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004c00:	6833      	ldr	r3, [r6, #0]

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004c02:	2000      	movs	r0, #0

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004c04:	625f      	str	r7, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004c06:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004c0a:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0

  return HAL_OK;
}
 8004c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004c10 <HAL_LTDC_ConfigColorKeying>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004c10:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8004c14:	2b01      	cmp	r3, #1
  *                   This parameter can be one of the following values:
  *                   0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 8004c16:	b510      	push	{r4, lr}
 8004c18:	f04f 0302 	mov.w	r3, #2
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004c1c:	d012      	beq.n	8004c44 <HAL_LTDC_ConfigColorKeying+0x34>

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Configures the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8004c1e:	6804      	ldr	r4, [r0, #0]
{
  /* Process locked */
  __HAL_LOCK(hltdc);

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004c20:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Configures the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8004c24:	f104 0384 	add.w	r3, r4, #132	; 0x84
 8004c28:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 8004c2c:	68d3      	ldr	r3, [r2, #12]
 8004c2e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004c32:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004c34:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Configures the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8004c36:	60d1      	str	r1, [r2, #12]

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004c38:	6263      	str	r3, [r4, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004c3a:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004c44:	4618      	mov	r0, r3

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);

  return HAL_OK;
}
 8004c46:	bd10      	pop	{r4, pc}

08004c48 <HAL_LTDC_ConfigCLUT>:
  *                   This parameter can be one of the following values:
  *                   0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigCLUT(LTDC_HandleTypeDef *hltdc, uint32_t *pCLUT, uint32_t CLUTSize, uint32_t LayerIdx)
{
 8004c48:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp = 0U;
  uint32_t counter = 0U;
  uint32_t pcounter = 0U;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004c4a:	f890 40a0 	ldrb.w	r4, [r0, #160]	; 0xa0
 8004c4e:	2c01      	cmp	r4, #1
 8004c50:	f04f 0402 	mov.w	r4, #2
 8004c54:	d02e      	beq.n	8004cb4 <HAL_LTDC_ConfigCLUT+0x6c>
 8004c56:	2501      	movs	r5, #1
 8004c58:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx)); 

  for(counter = 0U; (counter < CLUTSize); counter++)
  {
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8004c5c:	2534      	movs	r5, #52	; 0x34

  /* Process locked */
  __HAL_LOCK(hltdc);

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;  
 8004c5e:	f880 40a1 	strb.w	r4, [r0, #161]	; 0xa1
    }
    pcounter = (uint32_t)pCLUT + sizeof(*pCLUT);
    pCLUT = (uint32_t *)pcounter;

    /* Specifies the C-LUT address and RGB value */
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8004c62:	01df      	lsls	r7, r3, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;  

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx)); 

  for(counter = 0U; (counter < CLUTSize); counter++)
 8004c64:	2400      	movs	r4, #0
  {
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8004c66:	fb05 0303 	mla	r3, r5, r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;  

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx)); 

  for(counter = 0U; (counter < CLUTSize); counter++)
 8004c6a:	4294      	cmp	r4, r2
 8004c6c:	d01a      	beq.n	8004ca4 <HAL_LTDC_ConfigCLUT+0x5c>
  {
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8004c6e:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8004c70:	2d06      	cmp	r5, #6
 8004c72:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
    {
      tmp  = (((counter + 16U*counter) << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
    }
    else
    { 
      tmp  = ((counter << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8004c76:	bf15      	itete	ne
 8004c78:	f831 6024 	ldrhne.w	r6, [r1, r4, lsl #2]

  for(counter = 0U; (counter < CLUTSize); counter++)
  {
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
    {
      tmp  = (((counter + 16U*counter) << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8004c7c:	eb04 1604 	addeq.w	r6, r4, r4, lsl #4
    }
    else
    { 
      tmp  = ((counter << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8004c80:	f405 057f 	andne.w	r5, r5, #16711680	; 0xff0000

  for(counter = 0U; (counter < CLUTSize); counter++)
  {
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
    {
      tmp  = (((counter + 16U*counter) << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8004c84:	f025 457f 	biceq.w	r5, r5, #4278190080	; 0xff000000
    }
    else
    { 
      tmp  = ((counter << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8004c88:	bf14      	ite	ne
 8004c8a:	4335      	orrne	r5, r6

  for(counter = 0U; (counter < CLUTSize); counter++)
  {
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
    {
      tmp  = (((counter + 16U*counter) << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8004c8c:	ea45 6506 	orreq.w	r5, r5, r6, lsl #24
    }
    pcounter = (uint32_t)pCLUT + sizeof(*pCLUT);
    pCLUT = (uint32_t *)pcounter;

    /* Specifies the C-LUT address and RGB value */
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8004c90:	6806      	ldr	r6, [r0, #0]
 8004c92:	f106 0684 	add.w	r6, r6, #132	; 0x84
 8004c96:	443e      	add	r6, r7
    {
      tmp  = (((counter + 16U*counter) << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
    }
    else
    { 
      tmp  = ((counter << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8004c98:	bf18      	it	ne
 8004c9a:	ea45 6504 	orrne.w	r5, r5, r4, lsl #24
    }
    pcounter = (uint32_t)pCLUT + sizeof(*pCLUT);
    pCLUT = (uint32_t *)pcounter;

    /* Specifies the C-LUT address and RGB value */
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8004c9e:	6435      	str	r5, [r6, #64]	; 0x40
  hltdc->State = HAL_LTDC_STATE_BUSY;  

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx)); 

  for(counter = 0U; (counter < CLUTSize); counter++)
 8004ca0:	3401      	adds	r4, #1
 8004ca2:	e7e2      	b.n	8004c6a <HAL_LTDC_ConfigCLUT+0x22>
    /* Specifies the C-LUT address and RGB value */
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
  }
  
  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);  
 8004caa:	2300      	movs	r3, #0
 8004cac:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0

  return HAL_OK;
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t tmp = 0U;
  uint32_t counter = 0U;
  uint32_t pcounter = 0U;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004cb4:	4620      	mov	r0, r4

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);  

  return HAL_OK;
}
 8004cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cb8 <HAL_LTDC_EnableColorKeying>:
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{  
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004cb8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8004cbc:	2b01      	cmp	r3, #1
  *                   This parameter can be one of the following values:
  *                   0 or 1
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{  
 8004cbe:	b510      	push	{r4, lr}
 8004cc0:	f04f 0302 	mov.w	r3, #2
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004cc4:	d010      	beq.n	8004ce8 <HAL_LTDC_EnableColorKeying+0x30>

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8004cc6:	6802      	ldr	r2, [r0, #0]
{  
  /* Process locked */
  __HAL_LOCK(hltdc);

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004cc8:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8004ccc:	f102 0484 	add.w	r4, r2, #132	; 0x84
 8004cd0:	01c9      	lsls	r1, r1, #7
 8004cd2:	5863      	ldr	r3, [r4, r1]
 8004cd4:	f043 0302 	orr.w	r3, r3, #2
 8004cd8:	5063      	str	r3, [r4, r1]

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8004cde:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{  
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004ce8:	4618      	mov	r0, r3

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);

  return HAL_OK;  
}
 8004cea:	bd10      	pop	{r4, pc}

08004cec <HAL_LTDC_DisableColorKeying>:
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_DisableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004cec:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8004cf0:	2b01      	cmp	r3, #1
  *                   This parameter can be one of the following values:
  *                   0 or 1
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_DisableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8004cf2:	b510      	push	{r4, lr}
 8004cf4:	f04f 0302 	mov.w	r3, #2
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004cf8:	d010      	beq.n	8004d1c <HAL_LTDC_DisableColorKeying+0x30>

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Disable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8004cfa:	6802      	ldr	r2, [r0, #0]
{
  /* Process locked */
  __HAL_LOCK(hltdc);

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004cfc:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Disable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8004d00:	f102 0484 	add.w	r4, r2, #132	; 0x84
 8004d04:	01c9      	lsls	r1, r1, #7
 8004d06:	5863      	ldr	r3, [r4, r1]
 8004d08:	f023 0302 	bic.w	r3, r3, #2
 8004d0c:	5063      	str	r3, [r4, r1]

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8004d12:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004d16:	2300      	movs	r3, #0
 8004d18:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_DisableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004d1c:	4618      	mov	r0, r3

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);

  return HAL_OK;
}
 8004d1e:	bd10      	pop	{r4, pc}

08004d20 <HAL_LTDC_EnableCLUT>:
  */
HAL_StatusTypeDef HAL_LTDC_EnableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004d20:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8004d24:	2b01      	cmp	r3, #1
  *                   This parameter can be one of the following values:
  *                   0 or 1
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8004d26:	b510      	push	{r4, lr}
 8004d28:	f04f 0302 	mov.w	r3, #2

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004d2c:	d010      	beq.n	8004d50 <HAL_LTDC_EnableCLUT+0x30>

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Disable LTDC color lookup table by setting CLUTEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8004d2e:	6802      	ldr	r2, [r0, #0]

  /* Process locked */
  __HAL_LOCK(hltdc);

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004d30:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Disable LTDC color lookup table by setting CLUTEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8004d34:	f102 0484 	add.w	r4, r2, #132	; 0x84
 8004d38:	01c9      	lsls	r1, r1, #7
 8004d3a:	5863      	ldr	r3, [r4, r1]
 8004d3c:	f043 0310 	orr.w	r3, r3, #16
 8004d40:	5063      	str	r3, [r4, r1]

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8004d46:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  */
HAL_StatusTypeDef HAL_LTDC_EnableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004d50:	4618      	mov	r0, r3

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);

  return HAL_OK;
}
 8004d52:	bd10      	pop	{r4, pc}

08004d54 <HAL_LTDC_SetWindowPosition>:
  *                         This parameter can be one of the following values:
  *                         0 or 1
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
 8004d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d58:	4617      	mov	r7, r2
  LTDC_LayerCfgTypeDef *pLayerCfg;
  
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004d5a:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
 8004d5e:	2a01      	cmp	r2, #1
  *                         This parameter can be one of the following values:
  *                         0 or 1
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
 8004d60:	4605      	mov	r5, r0
 8004d62:	f04f 0402 	mov.w	r4, #2
  LTDC_LayerCfgTypeDef *pLayerCfg;
  
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004d66:	d020      	beq.n	8004daa <HAL_LTDC_SetWindowPosition+0x56>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004d68:	f880 40a1 	strb.w	r4, [r0, #161]	; 0xa1
  assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 8004d6c:	2434      	movs	r4, #52	; 0x34
 8004d6e:	435c      	muls	r4, r3
 8004d70:	1906      	adds	r6, r0, r4
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
  LTDC_LayerCfgTypeDef *pLayerCfg;
  
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004d72:	f04f 0801 	mov.w	r8, #1
 8004d76:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8004d7a:	6e32      	ldr	r2, [r6, #96]	; 0x60
  assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 8004d7c:	63b1      	str	r1, [r6, #56]	; 0x38
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8004d7e:	4411      	add	r1, r2

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8004d80:	6e72      	ldr	r2, [r6, #100]	; 0x64
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8004d82:	63f1      	str	r1, [r6, #60]	; 0x3c

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
 8004d84:	6437      	str	r7, [r6, #64]	; 0x40

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8004d86:	f104 0138 	add.w	r1, r4, #56	; 0x38
  pLayerCfg->WindowX0 = X0;
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8004d8a:	4417      	add	r7, r2

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004d8c:	4401      	add	r1, r0
 8004d8e:	461a      	mov	r2, r3
  pLayerCfg->WindowX0 = X0;
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8004d90:	6477      	str	r7, [r6, #68]	; 0x44

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004d92:	f7ff fda6 	bl	80048e2 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004d96:	682b      	ldr	r3, [r5, #0]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004d98:	2000      	movs	r0, #0

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004d9a:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004d9e:	f885 80a1 	strb.w	r8, [r5, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004da2:	f885 00a0 	strb.w	r0, [r5, #160]	; 0xa0

  return HAL_OK;
 8004da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
  LTDC_LayerCfgTypeDef *pLayerCfg;
  
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004daa:	4620      	mov	r0, r4

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);

  return HAL_OK;
}
 8004dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004db0 <HAL_LTDC_SetAlpha>:
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004db0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8004db4:	2b01      	cmp	r3, #1
  *                   This parameter can be one of the following values:
  *                   0 or 1
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 8004db6:	b570      	push	{r4, r5, r6, lr}
 8004db8:	f04f 0302 	mov.w	r3, #2
 8004dbc:	4604      	mov	r4, r0
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004dbe:	d015      	beq.n	8004dec <HAL_LTDC_SetAlpha+0x3c>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004dc0:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8004dc4:	2334      	movs	r3, #52	; 0x34
 8004dc6:	4353      	muls	r3, r2
 8004dc8:	18c6      	adds	r6, r0, r3
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004dca:	2501      	movs	r5, #1
 8004dcc:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8004dd0:	64f1      	str	r1, [r6, #76]	; 0x4c
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8004dd2:	f103 0138 	add.w	r1, r3, #56	; 0x38

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004dd6:	4401      	add	r1, r0
 8004dd8:	f7ff fd83 	bl	80048e2 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004ddc:	6823      	ldr	r3, [r4, #0]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004dde:	2000      	movs	r0, #0

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004de0:	625d      	str	r5, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004de2:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004de6:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0

  return HAL_OK;
 8004dea:	bd70      	pop	{r4, r5, r6, pc}
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004dec:	4618      	mov	r0, r3

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);

  return HAL_OK;
}
 8004dee:	bd70      	pop	{r4, r5, r6, pc}

08004df0 <HAL_LTDC_SetAddress>:
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004df0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8004df4:	2b01      	cmp	r3, #1
  *                   This parameter can be one of the following values:
  *                   0 or 1.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8004df6:	b570      	push	{r4, r5, r6, lr}
 8004df8:	f04f 0302 	mov.w	r3, #2
 8004dfc:	4604      	mov	r4, r0
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004dfe:	d015      	beq.n	8004e2c <HAL_LTDC_SetAddress+0x3c>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004e00:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8004e04:	2334      	movs	r3, #52	; 0x34
 8004e06:	4353      	muls	r3, r2
 8004e08:	18c6      	adds	r6, r0, r3
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004e0a:	2501      	movs	r5, #1
 8004e0c:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8004e10:	65f1      	str	r1, [r6, #92]	; 0x5c

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8004e12:	f103 0138 	add.w	r1, r3, #56	; 0x38

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004e16:	4401      	add	r1, r0
 8004e18:	f7ff fd63 	bl	80048e2 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004e1c:	6823      	ldr	r3, [r4, #0]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004e1e:	2000      	movs	r0, #0

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004e20:	625d      	str	r5, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004e22:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004e26:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0

  return HAL_OK;
 8004e2a:	bd70      	pop	{r4, r5, r6, pc}
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004e2c:	4618      	mov	r0, r3

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);

  return HAL_OK;
}
 8004e2e:	bd70      	pop	{r4, r5, r6, pc}

08004e30 <HAL_LTDC_ProgramLineEvent>:
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004e30:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	f04f 0302 	mov.w	r3, #2
 8004e3a:	d00e      	beq.n	8004e5a <HAL_LTDC_ProgramLineEvent+0x2a>

  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8004e3c:	6802      	ldr	r2, [r0, #0]
{
  /* Process locked */
  __HAL_LOCK(hltdc);

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004e3e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8004e42:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004e44:	f043 0301 	orr.w	r3, r3, #1
 8004e48:	6353      	str	r3, [r2, #52]	; 0x34

  /* Sets the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8004e4a:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <HAL_LTDC_ProgramLineEvent+0x30>)
 8004e4c:	6419      	str	r1, [r3, #64]	; 0x40

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004e54:	2300      	movs	r3, #0
 8004e56:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004e5a:	4618      	mov	r0, r3

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);

  return HAL_OK;
}
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	40016800 	.word	0x40016800

08004e64 <HAL_RCC_OscConfig>:
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e64:	6803      	ldr	r3, [r0, #0]
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e66:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004e6a:	4604      	mov	r4, r0
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e6c:	07d8      	lsls	r0, r3, #31
 8004e6e:	d403      	bmi.n	8004e78 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e70:	6823      	ldr	r3, [r4, #0]
 8004e72:	0799      	lsls	r1, r3, #30
 8004e74:	d437      	bmi.n	8004ee6 <HAL_RCC_OscConfig+0x82>
 8004e76:	e087      	b.n	8004f88 <HAL_RCC_OscConfig+0x124>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e78:	4ba7      	ldr	r3, [pc, #668]	; (8005118 <HAL_RCC_OscConfig+0x2b4>)
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	f002 020c 	and.w	r2, r2, #12
 8004e80:	2a04      	cmp	r2, #4
 8004e82:	d007      	beq.n	8004e94 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e84:	689a      	ldr	r2, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e86:	f002 020c 	and.w	r2, r2, #12
 8004e8a:	2a08      	cmp	r2, #8
 8004e8c:	d10b      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	025a      	lsls	r2, r3, #9
 8004e92:	d508      	bpl.n	8004ea6 <HAL_RCC_OscConfig+0x42>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e94:	4ba0      	ldr	r3, [pc, #640]	; (8005118 <HAL_RCC_OscConfig+0x2b4>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	039b      	lsls	r3, r3, #14
 8004e9a:	d5e9      	bpl.n	8004e70 <HAL_RCC_OscConfig+0xc>
 8004e9c:	6863      	ldr	r3, [r4, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1e6      	bne.n	8004e70 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8004ea2:	2001      	movs	r0, #1
 8004ea4:	e134      	b.n	8005110 <HAL_RCC_OscConfig+0x2ac>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ea6:	4b9d      	ldr	r3, [pc, #628]	; (800511c <HAL_RCC_OscConfig+0x2b8>)
 8004ea8:	7922      	ldrb	r2, [r4, #4]
 8004eaa:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004eac:	6863      	ldr	r3, [r4, #4]
 8004eae:	b16b      	cbz	r3, 8004ecc <HAL_RCC_OscConfig+0x68>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb0:	f7fe fb66 	bl	8003580 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb4:	4d98      	ldr	r5, [pc, #608]	; (8005118 <HAL_RCC_OscConfig+0x2b4>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb6:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb8:	682b      	ldr	r3, [r5, #0]
 8004eba:	039f      	lsls	r7, r3, #14
 8004ebc:	d4d8      	bmi.n	8004e70 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ebe:	f7fe fb5f 	bl	8003580 <HAL_GetTick>
 8004ec2:	1b80      	subs	r0, r0, r6
 8004ec4:	2864      	cmp	r0, #100	; 0x64
 8004ec6:	d9f7      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x54>
          {
            return HAL_TIMEOUT;
 8004ec8:	2003      	movs	r0, #3
 8004eca:	e121      	b.n	8005110 <HAL_RCC_OscConfig+0x2ac>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ecc:	f7fe fb58 	bl	8003580 <HAL_GetTick>

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ed0:	4d91      	ldr	r5, [pc, #580]	; (8005118 <HAL_RCC_OscConfig+0x2b4>)
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed2:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ed4:	682b      	ldr	r3, [r5, #0]
 8004ed6:	0398      	lsls	r0, r3, #14
 8004ed8:	d5ca      	bpl.n	8004e70 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004eda:	f7fe fb51 	bl	8003580 <HAL_GetTick>
 8004ede:	1b80      	subs	r0, r0, r6
 8004ee0:	2864      	cmp	r0, #100	; 0x64
 8004ee2:	d9f7      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x70>
 8004ee4:	e7f0      	b.n	8004ec8 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ee6:	4b8c      	ldr	r3, [pc, #560]	; (8005118 <HAL_RCC_OscConfig+0x2b4>)
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	f012 0f0c 	tst.w	r2, #12
 8004eee:	d007      	beq.n	8004f00 <HAL_RCC_OscConfig+0x9c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ef0:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ef2:	f002 020c 	and.w	r2, r2, #12
 8004ef6:	2a08      	cmp	r2, #8
 8004ef8:	d117      	bne.n	8004f2a <HAL_RCC_OscConfig+0xc6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	0259      	lsls	r1, r3, #9
 8004efe:	d414      	bmi.n	8004f2a <HAL_RCC_OscConfig+0xc6>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f00:	4b85      	ldr	r3, [pc, #532]	; (8005118 <HAL_RCC_OscConfig+0x2b4>)
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	0792      	lsls	r2, r2, #30
 8004f06:	d502      	bpl.n	8004f0e <HAL_RCC_OscConfig+0xaa>
 8004f08:	68e2      	ldr	r2, [r4, #12]
 8004f0a:	2a01      	cmp	r2, #1
 8004f0c:	d1c9      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x3e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	21f8      	movs	r1, #248	; 0xf8
 8004f12:	fa91 f1a1 	rbit	r1, r1
 8004f16:	6920      	ldr	r0, [r4, #16]
 8004f18:	fab1 f181 	clz	r1, r1
 8004f1c:	fa00 f101 	lsl.w	r1, r0, r1
 8004f20:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004f24:	430a      	orrs	r2, r1
 8004f26:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f28:	e02e      	b.n	8004f88 <HAL_RCC_OscConfig+0x124>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f2a:	68e2      	ldr	r2, [r4, #12]
 8004f2c:	4b7c      	ldr	r3, [pc, #496]	; (8005120 <HAL_RCC_OscConfig+0x2bc>)
 8004f2e:	b1ea      	cbz	r2, 8004f6c <HAL_RCC_OscConfig+0x108>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f30:	2201      	movs	r2, #1
 8004f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f34:	f7fe fb24 	bl	8003580 <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f38:	4d77      	ldr	r5, [pc, #476]	; (8005118 <HAL_RCC_OscConfig+0x2b4>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3a:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f3c:	682b      	ldr	r3, [r5, #0]
 8004f3e:	4876      	ldr	r0, [pc, #472]	; (8005118 <HAL_RCC_OscConfig+0x2b4>)
 8004f40:	079b      	lsls	r3, r3, #30
 8004f42:	d405      	bmi.n	8004f50 <HAL_RCC_OscConfig+0xec>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f44:	f7fe fb1c 	bl	8003580 <HAL_GetTick>
 8004f48:	1b80      	subs	r0, r0, r6
 8004f4a:	2802      	cmp	r0, #2
 8004f4c:	d9f6      	bls.n	8004f3c <HAL_RCC_OscConfig+0xd8>
 8004f4e:	e7bb      	b.n	8004ec8 <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f50:	6803      	ldr	r3, [r0, #0]
 8004f52:	22f8      	movs	r2, #248	; 0xf8
 8004f54:	fa92 f2a2 	rbit	r2, r2
 8004f58:	6921      	ldr	r1, [r4, #16]
 8004f5a:	fab2 f282 	clz	r2, r2
 8004f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f62:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004f66:	4313      	orrs	r3, r2
 8004f68:	6003      	str	r3, [r0, #0]
 8004f6a:	e00d      	b.n	8004f88 <HAL_RCC_OscConfig+0x124>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6e:	f7fe fb07 	bl	8003580 <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f72:	4d69      	ldr	r5, [pc, #420]	; (8005118 <HAL_RCC_OscConfig+0x2b4>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f74:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f76:	682b      	ldr	r3, [r5, #0]
 8004f78:	079f      	lsls	r7, r3, #30
 8004f7a:	d505      	bpl.n	8004f88 <HAL_RCC_OscConfig+0x124>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f7c:	f7fe fb00 	bl	8003580 <HAL_GetTick>
 8004f80:	1b80      	subs	r0, r0, r6
 8004f82:	2802      	cmp	r0, #2
 8004f84:	d9f7      	bls.n	8004f76 <HAL_RCC_OscConfig+0x112>
 8004f86:	e79f      	b.n	8004ec8 <HAL_RCC_OscConfig+0x64>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f88:	6823      	ldr	r3, [r4, #0]
 8004f8a:	071e      	lsls	r6, r3, #28
 8004f8c:	d403      	bmi.n	8004f96 <HAL_RCC_OscConfig+0x132>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	075d      	lsls	r5, r3, #29
 8004f92:	d545      	bpl.n	8005020 <HAL_RCC_OscConfig+0x1bc>
 8004f94:	e01f      	b.n	8004fd6 <HAL_RCC_OscConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f96:	6962      	ldr	r2, [r4, #20]
 8004f98:	4b62      	ldr	r3, [pc, #392]	; (8005124 <HAL_RCC_OscConfig+0x2c0>)
 8004f9a:	b172      	cbz	r2, 8004fba <HAL_RCC_OscConfig+0x156>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa0:	f7fe faee 	bl	8003580 <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fa4:	4d5c      	ldr	r5, [pc, #368]	; (8005118 <HAL_RCC_OscConfig+0x2b4>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa6:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fa8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004faa:	0798      	lsls	r0, r3, #30
 8004fac:	d4ef      	bmi.n	8004f8e <HAL_RCC_OscConfig+0x12a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fae:	f7fe fae7 	bl	8003580 <HAL_GetTick>
 8004fb2:	1b80      	subs	r0, r0, r6
 8004fb4:	2802      	cmp	r0, #2
 8004fb6:	d9f7      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x144>
 8004fb8:	e786      	b.n	8004ec8 <HAL_RCC_OscConfig+0x64>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fba:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fbc:	f7fe fae0 	bl	8003580 <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc0:	4d55      	ldr	r5, [pc, #340]	; (8005118 <HAL_RCC_OscConfig+0x2b4>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc2:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004fc6:	0799      	lsls	r1, r3, #30
 8004fc8:	d5e1      	bpl.n	8004f8e <HAL_RCC_OscConfig+0x12a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fca:	f7fe fad9 	bl	8003580 <HAL_GetTick>
 8004fce:	1b80      	subs	r0, r0, r6
 8004fd0:	2802      	cmp	r0, #2
 8004fd2:	d9f7      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x160>
 8004fd4:	e778      	b.n	8004ec8 <HAL_RCC_OscConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	9301      	str	r3, [sp, #4]
 8004fda:	4b4f      	ldr	r3, [pc, #316]	; (8005118 <HAL_RCC_OscConfig+0x2b4>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004fdc:	4d52      	ldr	r5, [pc, #328]	; (8005128 <HAL_RCC_OscConfig+0x2c4>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fe0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004fe4:	641a      	str	r2, [r3, #64]	; 0x40
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ff0:	682b      	ldr	r3, [r5, #0]
 8004ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff6:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8004ff8:	f7fe fac2 	bl	8003580 <HAL_GetTick>
 8004ffc:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ffe:	682b      	ldr	r3, [r5, #0]
 8005000:	05da      	lsls	r2, r3, #23
 8005002:	d510      	bpl.n	8005026 <HAL_RCC_OscConfig+0x1c2>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005004:	4b49      	ldr	r3, [pc, #292]	; (800512c <HAL_RCC_OscConfig+0x2c8>)
 8005006:	7a22      	ldrb	r2, [r4, #8]
 8005008:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800500a:	68a3      	ldr	r3, [r4, #8]
 800500c:	b1bb      	cbz	r3, 800503e <HAL_RCC_OscConfig+0x1da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500e:	f7fe fab7 	bl	8003580 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005012:	4d41      	ldr	r5, [pc, #260]	; (8005118 <HAL_RCC_OscConfig+0x2b4>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005014:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005016:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800501a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800501c:	079b      	lsls	r3, r3, #30
 800501e:	d508      	bpl.n	8005032 <HAL_RCC_OscConfig+0x1ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005020:	69a2      	ldr	r2, [r4, #24]
 8005022:	b9da      	cbnz	r2, 800505c <HAL_RCC_OscConfig+0x1f8>
 8005024:	e059      	b.n	80050da <HAL_RCC_OscConfig+0x276>
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005026:	f7fe faab 	bl	8003580 <HAL_GetTick>
 800502a:	1b80      	subs	r0, r0, r6
 800502c:	2802      	cmp	r0, #2
 800502e:	d9e6      	bls.n	8004ffe <HAL_RCC_OscConfig+0x19a>
 8005030:	e74a      	b.n	8004ec8 <HAL_RCC_OscConfig+0x64>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005032:	f7fe faa5 	bl	8003580 <HAL_GetTick>
 8005036:	1b80      	subs	r0, r0, r6
 8005038:	42b8      	cmp	r0, r7
 800503a:	d9ee      	bls.n	800501a <HAL_RCC_OscConfig+0x1b6>
 800503c:	e744      	b.n	8004ec8 <HAL_RCC_OscConfig+0x64>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800503e:	f7fe fa9f 	bl	8003580 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005042:	4d35      	ldr	r5, [pc, #212]	; (8005118 <HAL_RCC_OscConfig+0x2b4>)
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005044:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005046:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800504a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800504c:	0798      	lsls	r0, r3, #30
 800504e:	d5e7      	bpl.n	8005020 <HAL_RCC_OscConfig+0x1bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005050:	f7fe fa96 	bl	8003580 <HAL_GetTick>
 8005054:	1b80      	subs	r0, r0, r6
 8005056:	42b8      	cmp	r0, r7
 8005058:	d9f7      	bls.n	800504a <HAL_RCC_OscConfig+0x1e6>
 800505a:	e735      	b.n	8004ec8 <HAL_RCC_OscConfig+0x64>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800505c:	4d2e      	ldr	r5, [pc, #184]	; (8005118 <HAL_RCC_OscConfig+0x2b4>)
 800505e:	68ab      	ldr	r3, [r5, #8]
 8005060:	f003 030c 	and.w	r3, r3, #12
 8005064:	2b08      	cmp	r3, #8
 8005066:	f43f af1c 	beq.w	8004ea2 <HAL_RCC_OscConfig+0x3e>
 800506a:	4e31      	ldr	r6, [pc, #196]	; (8005130 <HAL_RCC_OscConfig+0x2cc>)
 800506c:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800506e:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005070:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005072:	d141      	bne.n	80050f8 <HAL_RCC_OscConfig+0x294>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005074:	f7fe fa84 	bl	8003580 <HAL_GetTick>
 8005078:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800507a:	682b      	ldr	r3, [r5, #0]
 800507c:	4f26      	ldr	r7, [pc, #152]	; (8005118 <HAL_RCC_OscConfig+0x2b4>)
 800507e:	0199      	lsls	r1, r3, #6
 8005080:	d42d      	bmi.n	80050de <HAL_RCC_OscConfig+0x27a>
 8005082:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8005086:	fa92 f2a2 	rbit	r2, r2
 800508a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800508e:	fab2 fe82 	clz	lr, r2
 8005092:	fa93 f3a3 	rbit	r3, r3
 8005096:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 800509a:	fab3 f583 	clz	r5, r3
 800509e:	fa92 f2a2 	rbit	r2, r2
 80050a2:	69e0      	ldr	r0, [r4, #28]
 80050a4:	6a23      	ldr	r3, [r4, #32]
 80050a6:	fab2 f182 	clz	r1, r2
 80050aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80050ac:	4303      	orrs	r3, r0
 80050ae:	fa02 f20e 	lsl.w	r2, r2, lr
 80050b2:	ea43 0002 	orr.w	r0, r3, r2
 80050b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80050b8:	085a      	lsrs	r2, r3, #1
 80050ba:	3a01      	subs	r2, #1
 80050bc:	fa02 f305 	lsl.w	r3, r2, r5
 80050c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80050c2:	4303      	orrs	r3, r0
 80050c4:	408a      	lsls	r2, r1
 80050c6:	4313      	orrs	r3, r2
 80050c8:	607b      	str	r3, [r7, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050ca:	2301      	movs	r3, #1
 80050cc:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ce:	f7fe fa57 	bl	8003580 <HAL_GetTick>
 80050d2:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	019a      	lsls	r2, r3, #6
 80050d8:	d508      	bpl.n	80050ec <HAL_RCC_OscConfig+0x288>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80050da:	2000      	movs	r0, #0
 80050dc:	e018      	b.n	8005110 <HAL_RCC_OscConfig+0x2ac>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050de:	f7fe fa4f 	bl	8003580 <HAL_GetTick>
 80050e2:	ebc8 0000 	rsb	r0, r8, r0
 80050e6:	2802      	cmp	r0, #2
 80050e8:	d9c7      	bls.n	800507a <HAL_RCC_OscConfig+0x216>
 80050ea:	e6ed      	b.n	8004ec8 <HAL_RCC_OscConfig+0x64>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ec:	f7fe fa48 	bl	8003580 <HAL_GetTick>
 80050f0:	1b00      	subs	r0, r0, r4
 80050f2:	2802      	cmp	r0, #2
 80050f4:	d9ee      	bls.n	80050d4 <HAL_RCC_OscConfig+0x270>
 80050f6:	e6e7      	b.n	8004ec8 <HAL_RCC_OscConfig+0x64>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f8:	f7fe fa42 	bl	8003580 <HAL_GetTick>
 80050fc:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050fe:	682b      	ldr	r3, [r5, #0]
 8005100:	019b      	lsls	r3, r3, #6
 8005102:	d5ea      	bpl.n	80050da <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005104:	f7fe fa3c 	bl	8003580 <HAL_GetTick>
 8005108:	1b00      	subs	r0, r0, r4
 800510a:	2802      	cmp	r0, #2
 800510c:	d9f7      	bls.n	80050fe <HAL_RCC_OscConfig+0x29a>
 800510e:	e6db      	b.n	8004ec8 <HAL_RCC_OscConfig+0x64>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8005110:	b002      	add	sp, #8
 8005112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005116:	bf00      	nop
 8005118:	40023800 	.word	0x40023800
 800511c:	40023802 	.word	0x40023802
 8005120:	42470000 	.word	0x42470000
 8005124:	42470e80 	.word	0x42470e80
 8005128:	40007000 	.word	0x40007000
 800512c:	40023870 	.word	0x40023870
 8005130:	42470060 	.word	0x42470060

08005134 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005134:	491b      	ldr	r1, [pc, #108]	; (80051a4 <HAL_RCC_GetSysClockFreq+0x70>)
 8005136:	688b      	ldr	r3, [r1, #8]
 8005138:	f003 030c 	and.w	r3, r3, #12
 800513c:	2b04      	cmp	r3, #4
 800513e:	d02c      	beq.n	800519a <HAL_RCC_GetSysClockFreq+0x66>
 8005140:	2b08      	cmp	r3, #8
 8005142:	d12c      	bne.n	800519e <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005144:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005146:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005148:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800514c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005150:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8005154:	684b      	ldr	r3, [r1, #4]
 8005156:	fa92 f2a2 	rbit	r2, r2
 800515a:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800515e:	fab2 f282 	clz	r2, r2
 8005162:	ea01 0103 	and.w	r1, r1, r3
 8005166:	fa21 f102 	lsr.w	r1, r1, r2
 800516a:	bf14      	ite	ne
 800516c:	4a0e      	ldrne	r2, [pc, #56]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800516e:	4a0f      	ldreq	r2, [pc, #60]	; (80051ac <HAL_RCC_GetSysClockFreq+0x78>)
 8005170:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8005174:	4a0b      	ldr	r2, [pc, #44]	; (80051a4 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8005176:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 800517a:	6852      	ldr	r2, [r2, #4]
 800517c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8005180:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8005184:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8005188:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 800518c:	fa22 f000 	lsr.w	r0, r2, r0
 8005190:	3001      	adds	r0, #1
 8005192:	0040      	lsls	r0, r0, #1
 8005194:	fbb3 f0f0 	udiv	r0, r3, r0
 8005198:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800519a:	4803      	ldr	r0, [pc, #12]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x74>)
 800519c:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800519e:	4803      	ldr	r0, [pc, #12]	; (80051ac <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40023800 	.word	0x40023800
 80051a8:	007a1200 	.word	0x007a1200
 80051ac:	00f42400 	.word	0x00f42400

080051b0 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80051b0:	4b55      	ldr	r3, [pc, #340]	; (8005308 <HAL_RCC_ClockConfig+0x158>)
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	f002 020f 	and.w	r2, r2, #15
 80051b8:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051be:	4605      	mov	r5, r0
 80051c0:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80051c2:	d30a      	bcc.n	80051da <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051c4:	6829      	ldr	r1, [r5, #0]
 80051c6:	0788      	lsls	r0, r1, #30
 80051c8:	d511      	bpl.n	80051ee <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051ca:	4850      	ldr	r0, [pc, #320]	; (800530c <HAL_RCC_ClockConfig+0x15c>)
 80051cc:	6883      	ldr	r3, [r0, #8]
 80051ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051d2:	68ab      	ldr	r3, [r5, #8]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	6083      	str	r3, [r0, #8]
 80051d8:	e009      	b.n	80051ee <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051da:	b2ca      	uxtb	r2, r1
 80051dc:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 030f 	and.w	r3, r3, #15
 80051e4:	4299      	cmp	r1, r3
 80051e6:	d0ed      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 80051e8:	2001      	movs	r0, #1
 80051ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051ee:	07c9      	lsls	r1, r1, #31
 80051f0:	d406      	bmi.n	8005200 <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80051f2:	4b45      	ldr	r3, [pc, #276]	; (8005308 <HAL_RCC_ClockConfig+0x158>)
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	f002 020f 	and.w	r2, r2, #15
 80051fa:	4296      	cmp	r6, r2
 80051fc:	d351      	bcc.n	80052a2 <HAL_RCC_ClockConfig+0xf2>
 80051fe:	e057      	b.n	80052b0 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005200:	686b      	ldr	r3, [r5, #4]
 8005202:	4a42      	ldr	r2, [pc, #264]	; (800530c <HAL_RCC_ClockConfig+0x15c>)
 8005204:	2b01      	cmp	r3, #1
 8005206:	d103      	bne.n	8005210 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005208:	6812      	ldr	r2, [r2, #0]
 800520a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800520e:	e008      	b.n	8005222 <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8005210:	1e99      	subs	r1, r3, #2
 8005212:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005214:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8005216:	d802      	bhi.n	800521e <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005218:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800521c:	e001      	b.n	8005222 <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800521e:	f012 0f02 	tst.w	r2, #2
 8005222:	d0e1      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005224:	4c39      	ldr	r4, [pc, #228]	; (800530c <HAL_RCC_ClockConfig+0x15c>)
 8005226:	68a2      	ldr	r2, [r4, #8]
 8005228:	f022 0203 	bic.w	r2, r2, #3
 800522c:	4313      	orrs	r3, r2
 800522e:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005230:	f7fe f9a6 	bl	8003580 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005234:	686b      	ldr	r3, [r5, #4]
 8005236:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005238:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800523a:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800523e:	d10c      	bne.n	800525a <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005240:	68a3      	ldr	r3, [r4, #8]
 8005242:	f003 030c 	and.w	r3, r3, #12
 8005246:	2b04      	cmp	r3, #4
 8005248:	d0d3      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800524a:	f7fe f999 	bl	8003580 <HAL_GetTick>
 800524e:	1bc0      	subs	r0, r0, r7
 8005250:	4540      	cmp	r0, r8
 8005252:	d9f5      	bls.n	8005240 <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 8005254:	2003      	movs	r0, #3
 8005256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800525a:	2b02      	cmp	r3, #2
 800525c:	d10a      	bne.n	8005274 <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800525e:	68a3      	ldr	r3, [r4, #8]
 8005260:	f003 030c 	and.w	r3, r3, #12
 8005264:	2b08      	cmp	r3, #8
 8005266:	d0c4      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005268:	f7fe f98a 	bl	8003580 <HAL_GetTick>
 800526c:	1bc0      	subs	r0, r0, r7
 800526e:	4540      	cmp	r0, r8
 8005270:	d9f5      	bls.n	800525e <HAL_RCC_ClockConfig+0xae>
 8005272:	e7ef      	b.n	8005254 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8005274:	2b03      	cmp	r3, #3
 8005276:	d10f      	bne.n	8005298 <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8005278:	68a3      	ldr	r3, [r4, #8]
 800527a:	f003 030c 	and.w	r3, r3, #12
 800527e:	2b0c      	cmp	r3, #12
 8005280:	d0b7      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005282:	f7fe f97d 	bl	8003580 <HAL_GetTick>
 8005286:	1bc0      	subs	r0, r0, r7
 8005288:	4540      	cmp	r0, r8
 800528a:	d9f5      	bls.n	8005278 <HAL_RCC_ClockConfig+0xc8>
 800528c:	e7e2      	b.n	8005254 <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800528e:	f7fe f977 	bl	8003580 <HAL_GetTick>
 8005292:	1bc0      	subs	r0, r0, r7
 8005294:	4540      	cmp	r0, r8
 8005296:	d8dd      	bhi.n	8005254 <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005298:	68a3      	ldr	r3, [r4, #8]
 800529a:	f013 0f0c 	tst.w	r3, #12
 800529e:	d1f6      	bne.n	800528e <HAL_RCC_ClockConfig+0xde>
 80052a0:	e7a7      	b.n	80051f2 <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052a2:	b2f2      	uxtb	r2, r6
 80052a4:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	429e      	cmp	r6, r3
 80052ae:	d19b      	bne.n	80051e8 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052b0:	6829      	ldr	r1, [r5, #0]
 80052b2:	074a      	lsls	r2, r1, #29
 80052b4:	d506      	bpl.n	80052c4 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052b6:	4815      	ldr	r0, [pc, #84]	; (800530c <HAL_RCC_ClockConfig+0x15c>)
 80052b8:	6883      	ldr	r3, [r0, #8]
 80052ba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052be:	68eb      	ldr	r3, [r5, #12]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052c4:	070b      	lsls	r3, r1, #28
 80052c6:	d507      	bpl.n	80052d8 <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052c8:	4a10      	ldr	r2, [pc, #64]	; (800530c <HAL_RCC_ClockConfig+0x15c>)
 80052ca:	6929      	ldr	r1, [r5, #16]
 80052cc:	6893      	ldr	r3, [r2, #8]
 80052ce:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80052d2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80052d6:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80052d8:	f7ff ff2c 	bl	8005134 <HAL_RCC_GetSysClockFreq>
 80052dc:	4b0b      	ldr	r3, [pc, #44]	; (800530c <HAL_RCC_ClockConfig+0x15c>)
 80052de:	22f0      	movs	r2, #240	; 0xf0
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	fa92 f2a2 	rbit	r2, r2
 80052e6:	fab2 f282 	clz	r2, r2
 80052ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052ee:	40d3      	lsrs	r3, r2
 80052f0:	4a07      	ldr	r2, [pc, #28]	; (8005310 <HAL_RCC_ClockConfig+0x160>)
 80052f2:	5cd3      	ldrb	r3, [r2, r3]
 80052f4:	40d8      	lsrs	r0, r3
 80052f6:	4b07      	ldr	r3, [pc, #28]	; (8005314 <HAL_RCC_ClockConfig+0x164>)
 80052f8:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80052fa:	2000      	movs	r0, #0
 80052fc:	f7fe f90a 	bl	8003514 <HAL_InitTick>
  
  return HAL_OK;
 8005300:	2000      	movs	r0, #0
}
 8005302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005306:	bf00      	nop
 8005308:	40023c00 	.word	0x40023c00
 800530c:	40023800 	.word	0x40023800
 8005310:	0801db42 	.word	0x0801db42
 8005314:	200001a0 	.word	0x200001a0

08005318 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8005318:	4b08      	ldr	r3, [pc, #32]	; (800533c <HAL_RCC_GetPCLK1Freq+0x24>)
 800531a:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	fa92 f2a2 	rbit	r2, r2
 8005324:	fab2 f282 	clz	r2, r2
 8005328:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800532c:	40d3      	lsrs	r3, r2
 800532e:	4a04      	ldr	r2, [pc, #16]	; (8005340 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005330:	5cd3      	ldrb	r3, [r2, r3]
 8005332:	4a04      	ldr	r2, [pc, #16]	; (8005344 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8005334:	6810      	ldr	r0, [r2, #0]
}
 8005336:	40d8      	lsrs	r0, r3
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	40023800 	.word	0x40023800
 8005340:	0801db42 	.word	0x0801db42
 8005344:	200001a0 	.word	0x200001a0

08005348 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8005348:	4b08      	ldr	r3, [pc, #32]	; (800536c <HAL_RCC_GetPCLK2Freq+0x24>)
 800534a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	fa92 f2a2 	rbit	r2, r2
 8005354:	fab2 f282 	clz	r2, r2
 8005358:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800535c:	40d3      	lsrs	r3, r2
 800535e:	4a04      	ldr	r2, [pc, #16]	; (8005370 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005360:	5cd3      	ldrb	r3, [r2, r3]
 8005362:	4a04      	ldr	r2, [pc, #16]	; (8005374 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8005364:	6810      	ldr	r0, [r2, #0]
} 
 8005366:	40d8      	lsrs	r0, r3
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	40023800 	.word	0x40023800
 8005370:	0801db42 	.word	0x0801db42
 8005374:	200001a0 	.word	0x200001a0

08005378 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005378:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ----------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division   
     factor is common parameters for both peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) || 
 800537c:	6803      	ldr	r3, [r0, #0]
 800537e:	079a      	lsls	r2, r3, #30
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005380:	4604      	mov	r4, r0
  
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ----------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division   
     factor is common parameters for both peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) || 
 8005382:	d105      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x18>
    
  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) || 
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	f013 0f0c 	tst.w	r3, #12
 800538a:	f000 80d5 	beq.w	8005538 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800538e:	e057      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xc8>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
        
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();    
 8005390:	4da5      	ldr	r5, [pc, #660]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005392:	4ea6      	ldr	r6, [pc, #664]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
        
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();    
 8005394:	2300      	movs	r3, #0
 8005396:	602b      	str	r3, [r5, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005398:	f7fe f8f2 	bl	8003580 <HAL_GetTick>
 800539c:	4607      	mov	r7, r0
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800539e:	6833      	ldr	r3, [r6, #0]
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	d506      	bpl.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80053a4:	f7fe f8ec 	bl	8003580 <HAL_GetTick>
 80053a8:	1bc0      	subs	r0, r0, r7
 80053aa:	2802      	cmp	r0, #2
 80053ac:	d9f7      	bls.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x26>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053ae:	2003      	movs	r0, #3
 80053b0:	e137      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    }
    
    /*---------------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added   
      only for I2S configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80053b2:	6820      	ldr	r0, [r4, #0]
 80053b4:	07c7      	lsls	r7, r0, #31
 80053b6:	d514      	bpl.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80053b8:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80053bc:	fa91 f1a1 	rbit	r1, r1
 80053c0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80053c4:	fab1 f181 	clz	r1, r1
 80053c8:	fa93 f3a3 	rbit	r3, r3
 80053cc:	fab3 f283 	clz	r2, r3
 80053d0:	6863      	ldr	r3, [r4, #4]
 80053d2:	fa03 f101 	lsl.w	r1, r3, r1
 80053d6:	68a3      	ldr	r3, [r4, #8]
 80053d8:	4093      	lsls	r3, r2
 80053da:	4a94      	ldr	r2, [pc, #592]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80053dc:	430b      	orrs	r3, r1
 80053de:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }
  
    /*---------------------------- SAI configuration -------------------------------*/ 
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must  
       be added only for SAI configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80053e2:	0786      	lsls	r6, r0, #30
 80053e4:	d51d      	bpl.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
      
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80053e6:	4e91      	ldr	r6, [pc, #580]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80053e8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80053ec:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
 80053f0:	fa93 f3a3 	rbit	r3, r3
 80053f4:	fab3 f083 	clz	r0, r3
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80053f8:	68e3      	ldr	r3, [r4, #12]
 80053fa:	6862      	ldr	r2, [r4, #4]
 80053fc:	061b      	lsls	r3, r3, #24
 80053fe:	ea43 1282 	orr.w	r2, r3, r2, lsl #6
 8005402:	f001 43e0 	and.w	r3, r1, #1879048192	; 0x70000000
 8005406:	40c3      	lsrs	r3, r0
 8005408:	ea42 7303 	orr.w	r3, r2, r3, lsl #28
 800540c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005410:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8005414:	69e2      	ldr	r2, [r4, #28]
 8005416:	f023 031f 	bic.w	r3, r3, #31
 800541a:	3a01      	subs	r2, #1
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005422:	2301      	movs	r3, #1
 8005424:	602b      	str	r3, [r5, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005426:	f7fe f8ab 	bl	8003580 <HAL_GetTick>
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800542a:	4d80      	ldr	r5, [pc, #512]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
    }
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
    /* Get tick */
    tickstart = HAL_GetTick();
 800542c:	4606      	mov	r6, r0
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800542e:	682b      	ldr	r3, [r5, #0]
 8005430:	0118      	lsls	r0, r3, #4
 8005432:	d4a7      	bmi.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xc>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005434:	f7fe f8a4 	bl	8003580 <HAL_GetTick>
 8005438:	1b80      	subs	r0, r0, r6
 800543a:	2802      	cmp	r0, #2
 800543c:	d9f7      	bls.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xb6>
 800543e:	e7b6      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x36>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8005440:	4d7b      	ldr	r5, [pc, #492]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005442:	4f7a      	ldr	r7, [pc, #488]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8005444:	2300      	movs	r3, #0
 8005446:	602b      	str	r3, [r5, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005448:	f7fe f89a 	bl	8003580 <HAL_GetTick>
 800544c:	4680      	mov	r8, r0
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	4e76      	ldr	r6, [pc, #472]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8005452:	009a      	lsls	r2, r3, #2
 8005454:	f100 8088 	bmi.w	8005568 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    }
    
    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must  
       be added only for SAI configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005458:	6827      	ldr	r7, [r4, #0]
 800545a:	077b      	lsls	r3, r7, #29
 800545c:	d531      	bpl.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
      
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 800545e:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 8005462:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8005466:	fa91 fca1 	rbit	ip, r1
 800546a:	f647 78c0 	movw	r8, #32704	; 0x7fc0
 800546e:	fabc fc8c 	clz	ip, ip
 8005472:	fa98 f8a8 	rbit	r8, r8
 8005476:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800547a:	fab8 f888 	clz	r8, r8
 800547e:	fa9e f0ae 	rbit	r0, lr
 8005482:	fab0 fe80 	clz	lr, r0
 8005486:	fa91 f1a1 	rbit	r1, r1
 800548a:	6920      	ldr	r0, [r4, #16]
 800548c:	fa00 f308 	lsl.w	r3, r0, r8
 8005490:	6960      	ldr	r0, [r4, #20]
 8005492:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8005496:	fa22 f20c 	lsr.w	r2, r2, ip
 800549a:	fab1 f181 	clz	r1, r1
 800549e:	fa00 f00e 	lsl.w	r0, r0, lr
 80054a2:	4318      	orrs	r0, r3
 80054a4:	fa02 f301 	lsl.w	r3, r2, r1
 80054a8:	4303      	orrs	r3, r0
 80054aa:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054ae:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80054b2:	6a22      	ldr	r2, [r4, #32]
 80054b4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80054b8:	3a01      	subs	r2, #1
 80054ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80054be:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }
    
    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80054c2:	073e      	lsls	r6, r7, #28
 80054c4:	d52f      	bpl.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 80054c6:	4f59      	ldr	r7, [pc, #356]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80054c8:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80054cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80054d0:	fa91 fea1 	rbit	lr, r1
 80054d4:	f647 7cc0 	movw	ip, #32704	; 0x7fc0
 80054d8:	fabe fe8e 	clz	lr, lr
 80054dc:	fa9c fcac 	rbit	ip, ip
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80054e0:	fabc fc8c 	clz	ip, ip
 80054e4:	fa91 f1a1 	rbit	r1, r1
 80054e8:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 80054ec:	fab1 f181 	clz	r1, r1
 80054f0:	fa90 f0a0 	rbit	r0, r0
 80054f4:	6923      	ldr	r3, [r4, #16]
 80054f6:	fab0 f680 	clz	r6, r0
 80054fa:	69a0      	ldr	r0, [r4, #24]
 80054fc:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8005500:	fa03 f30c 	lsl.w	r3, r3, ip
 8005504:	fa22 f20e 	lsr.w	r2, r2, lr
 8005508:	40b0      	lsls	r0, r6
 800550a:	4318      	orrs	r0, r3
 800550c:	fa02 f301 	lsl.w	r3, r2, r1
 8005510:	4303      	orrs	r3, r0
 8005512:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005516:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800551a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800551e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005520:	4313      	orrs	r3, r2
 8005522:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    }    
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005526:	2301      	movs	r3, #1
 8005528:	602b      	str	r3, [r5, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800552a:	f7fe f829 	bl	8003580 <HAL_GetTick>
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800552e:	4d3f      	ldr	r5, [pc, #252]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }    
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
    /* Get tick */
    tickstart = HAL_GetTick();
 8005530:	4606      	mov	r6, r0
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005532:	682b      	ldr	r3, [r5, #0]
 8005534:	0098      	lsls	r0, r3, #2
 8005536:	d51f      	bpl.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x200>
    }  
  }
  /*--------------------------------------------------------------------------*/
    
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005538:	6823      	ldr	r3, [r4, #0]
 800553a:	0699      	lsls	r1, r3, #26
 800553c:	d568      	bpl.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800553e:	2300      	movs	r3, #0
 8005540:	9301      	str	r3, [sp, #4]
 8005542:	4b3a      	ldr	r3, [pc, #232]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
      
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005544:	4d3b      	ldr	r5, [pc, #236]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005546:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005548:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800554c:	641a      	str	r2, [r3, #64]	; 0x40
 800554e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005554:	9301      	str	r3, [sp, #4]
 8005556:	9b01      	ldr	r3, [sp, #4]
      
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800555e:	602b      	str	r3, [r5, #0]
      
    /* Get tick */
    tickstart = HAL_GetTick();
 8005560:	f7fe f80e 	bl	8003580 <HAL_GetTick>
 8005564:	4606      	mov	r6, r0
      
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005566:	e013      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x218>
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005568:	f7fe f80a 	bl	8003580 <HAL_GetTick>
 800556c:	ebc8 0000 	rsb	r0, r8, r0
 8005570:	2802      	cmp	r0, #2
 8005572:	f67f af6c 	bls.w	800544e <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8005576:	e71a      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x36>
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005578:	f7fe f802 	bl	8003580 <HAL_GetTick>
 800557c:	1b80      	subs	r0, r0, r6
 800557e:	2802      	cmp	r0, #2
 8005580:	d9d7      	bls.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 8005582:	e714      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x36>
    /* Get tick */
    tickstart = HAL_GetTick();
      
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005584:	f7fd fffc 	bl	8003580 <HAL_GetTick>
 8005588:	1b80      	subs	r0, r0, r6
 800558a:	2802      	cmp	r0, #2
 800558c:	f63f af0f 	bhi.w	80053ae <HAL_RCCEx_PeriphCLKConfig+0x36>
    PWR->CR |= PWR_CR_DBP;
      
    /* Get tick */
    tickstart = HAL_GetTick();
      
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005590:	682b      	ldr	r3, [r5, #0]
 8005592:	05d9      	lsls	r1, r3, #23
 8005594:	d5f6      	bpl.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005596:	4d25      	ldr	r5, [pc, #148]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8005598:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800559a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800559e:	d10f      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x248>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80055a2:	f402 7340 	and.w	r3, r2, #768	; 0x300
 80055a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055aa:	4b20      	ldr	r3, [pc, #128]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80055ac:	d127      	bne.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x286>
 80055ae:	6899      	ldr	r1, [r3, #8]
 80055b0:	f421 10f8 	bic.w	r0, r1, #2031616	; 0x1f0000
 80055b4:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 80055b8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80055bc:	4301      	orrs	r1, r0
 80055be:	e021      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80055c2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d0ea      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055ca:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055cc:	4a1a      	ldr	r2, [pc, #104]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80055ce:	2101      	movs	r1, #1
 80055d0:	6011      	str	r1, [r2, #0]
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055d6:	2100      	movs	r1, #0
 80055d8:	6011      	str	r1, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80055da:	672b      	str	r3, [r5, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055dc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80055de:	07da      	lsls	r2, r3, #31
 80055e0:	d5de      	bpl.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80055e2:	f7fd ffcd 	bl	8003580 <HAL_GetTick>
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055e6:	f241 3788 	movw	r7, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80055ea:	4606      	mov	r6, r0
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80055ee:	079b      	lsls	r3, r3, #30
 80055f0:	d4d6      	bmi.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055f2:	f7fd ffc5 	bl	8003580 <HAL_GetTick>
 80055f6:	1b80      	subs	r0, r0, r6
 80055f8:	42b8      	cmp	r0, r7
 80055fa:	d9f7      	bls.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x274>
 80055fc:	e6d7      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x36>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055fe:	6899      	ldr	r1, [r3, #8]
 8005600:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8005604:	6099      	str	r1, [r3, #8]
 8005606:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005608:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800560c:	430a      	orrs	r2, r1
 800560e:	671a      	str	r2, [r3, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005610:	6820      	ldr	r0, [r4, #0]
 8005612:	f010 0010 	ands.w	r0, r0, #16
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005616:	bf1f      	itttt	ne
 8005618:	4b08      	ldrne	r3, [pc, #32]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800561a:	f894 202c 	ldrbne.w	r2, [r4, #44]	; 0x2c
 800561e:	601a      	strne	r2, [r3, #0]
  }
  return HAL_OK;
 8005620:	2000      	movne	r0, #0
}
 8005622:	b002      	add	sp, #8
 8005624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005628:	42470068 	.word	0x42470068
 800562c:	40023800 	.word	0x40023800
 8005630:	42470070 	.word	0x42470070
 8005634:	40007000 	.word	0x40007000
 8005638:	42470e40 	.word	0x42470e40
 800563c:	424711e0 	.word	0x424711e0

08005640 <HAL_RNG_MspInit>:
 8005640:	4770      	bx	lr

08005642 <HAL_RNG_Init>:
  * @param  hrng: pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{ 
 8005642:	b510      	push	{r4, lr}
  /* Check the RNG handle allocation */
  if(hrng == NULL)
 8005644:	4604      	mov	r4, r0
 8005646:	b1b8      	cbz	r0, 8005678 <HAL_RNG_Init+0x36>
  {
    return HAL_ERROR;
  }
  
  __HAL_LOCK(hrng);
 8005648:	7903      	ldrb	r3, [r0, #4]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d016      	beq.n	800567c <HAL_RNG_Init+0x3a>
 800564e:	2301      	movs	r3, #1
 8005650:	7103      	strb	r3, [r0, #4]
  
  if(hrng->State == HAL_RNG_STATE_RESET)
 8005652:	7943      	ldrb	r3, [r0, #5]
 8005654:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005658:	b913      	cbnz	r3, 8005660 <HAL_RNG_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800565a:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800565c:	f7ff fff0 	bl	8005640 <HAL_RNG_MspInit>
  
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005660:	6822      	ldr	r2, [r4, #0]
    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
  }
  
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005662:	2302      	movs	r3, #2
 8005664:	7163      	strb	r3, [r4, #5]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005666:	6813      	ldr	r3, [r2, #0]
 8005668:	f043 0304 	orr.w	r3, r3, #4
 800566c:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
  
  __HAL_UNLOCK(hrng);
 800566e:	2000      	movs	r0, #0

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005670:	2301      	movs	r3, #1
 8005672:	7163      	strb	r3, [r4, #5]
  
  __HAL_UNLOCK(hrng);
 8005674:	7120      	strb	r0, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8005676:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{ 
  /* Check the RNG handle allocation */
  if(hrng == NULL)
  {
    return HAL_ERROR;
 8005678:	2001      	movs	r0, #1
 800567a:	bd10      	pop	{r4, pc}
  }
  
  __HAL_LOCK(hrng);
 800567c:	2002      	movs	r0, #2
  
  __HAL_UNLOCK(hrng);
  
  /* Return function status */
  return HAL_OK;
}
 800567e:	bd10      	pop	{r4, pc}

08005680 <HAL_SDRAM_MspInit>:
 8005680:	4770      	bx	lr

08005682 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing: Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005682:	b538      	push	{r3, r4, r5, lr}
 8005684:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005686:	4604      	mov	r4, r0
 8005688:	b1c8      	cbz	r0, 80056be <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800568a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800568e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005692:	b91b      	cbnz	r3, 800569c <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005694:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005698:	f7ff fff2 	bl	8005680 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800569c:	2302      	movs	r3, #2
 800569e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80056a2:	1d21      	adds	r1, r4, #4
 80056a4:	6820      	ldr	r0, [r4, #0]
 80056a6:	f000 ffe7 	bl	8006678 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80056aa:	6862      	ldr	r2, [r4, #4]
 80056ac:	6820      	ldr	r0, [r4, #0]
 80056ae:	4629      	mov	r1, r5
 80056b0:	f001 f823 	bl	80066fa <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80056b4:	2301      	movs	r3, #1
 80056b6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 80056ba:	2000      	movs	r0, #0
 80056bc:	bd38      	pop	{r3, r4, r5, pc}
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
  {
    return HAL_ERROR;
 80056be:	2001      	movs	r0, #1
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
  
  return HAL_OK;
}
 80056c0:	bd38      	pop	{r3, r4, r5, pc}

080056c2 <HAL_SDRAM_SendCommand>:
  * @param  Command: SDRAM command structure
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80056c2:	b538      	push	{r3, r4, r5, lr}
 80056c4:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80056c6:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80056ca:	b2c0      	uxtb	r0, r0
 80056cc:	2802      	cmp	r0, #2
  * @param  Command: SDRAM command structure
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80056ce:	460d      	mov	r5, r1
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80056d0:	d00d      	beq.n	80056ee <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80056d2:	2302      	movs	r3, #2
 80056d4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80056d8:	6820      	ldr	r0, [r4, #0]
 80056da:	f001 f85a 	bl	8006792 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80056de:	682b      	ldr	r3, [r5, #0]
 80056e0:	2b02      	cmp	r3, #2
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80056e2:	bf0c      	ite	eq
 80056e4:	2305      	moveq	r3, #5
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80056e6:	2301      	movne	r3, #1
 80056e8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80056ec:	2000      	movs	r0, #0
}
 80056ee:	bd38      	pop	{r3, r4, r5, pc}

080056f0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate: The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80056f0:	b510      	push	{r4, lr}
 80056f2:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80056f4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80056f8:	b2c0      	uxtb	r0, r0
 80056fa:	2802      	cmp	r0, #2
 80056fc:	d009      	beq.n	8005712 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80056fe:	2302      	movs	r3, #2
 8005700:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005704:	6820      	ldr	r0, [r4, #0]
 8005706:	f001 f86a 	bl	80067de <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800570a:	2301      	movs	r3, #1
 800570c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 8005710:	2000      	movs	r0, #0
}
 8005712:	bd10      	pop	{r4, pc}

08005714 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8005714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005718:	9e06      	ldr	r6, [sp, #24]
 800571a:	4604      	mov	r4, r0
 800571c:	4688      	mov	r8, r1
 800571e:	4617      	mov	r7, r2
 8005720:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8005722:	6822      	ldr	r2, [r4, #0]
 8005724:	6893      	ldr	r3, [r2, #8]
 8005726:	ea38 0303 	bics.w	r3, r8, r3
 800572a:	bf0c      	ite	eq
 800572c:	2301      	moveq	r3, #1
 800572e:	2300      	movne	r3, #0
 8005730:	429f      	cmp	r7, r3
 8005732:	d033      	beq.n	800579c <SPI_WaitFlagStateUntilTimeout+0x88>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005734:	1c6b      	adds	r3, r5, #1
 8005736:	d0f5      	beq.n	8005724 <SPI_WaitFlagStateUntilTimeout+0x10>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8005738:	b94d      	cbnz	r5, 800574e <SPI_WaitFlagStateUntilTimeout+0x3a>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005742:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005744:	6862      	ldr	r2, [r4, #4]
 8005746:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800574a:	d111      	bne.n	8005770 <SPI_WaitFlagStateUntilTimeout+0x5c>
 800574c:	e005      	b.n	800575a <SPI_WaitFlagStateUntilTimeout+0x46>
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800574e:	f7fd ff17 	bl	8003580 <HAL_GetTick>
 8005752:	1b80      	subs	r0, r0, r6
 8005754:	4285      	cmp	r5, r0
 8005756:	d8e4      	bhi.n	8005722 <SPI_WaitFlagStateUntilTimeout+0xe>
 8005758:	e7ef      	b.n	800573a <SPI_WaitFlagStateUntilTimeout+0x26>
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800575a:	68a2      	ldr	r2, [r4, #8]
 800575c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005760:	d002      	beq.n	8005768 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005762:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005766:	d103      	bne.n	8005770 <SPI_WaitFlagStateUntilTimeout+0x5c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800576e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005770:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005772:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005776:	d108      	bne.n	800578a <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
 8005778:	6819      	ldr	r1, [r3, #0]
 800577a:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 800577e:	400a      	ands	r2, r1
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005788:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 800578a:	2301      	movs	r3, #1
 800578c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005790:	2300      	movs	r3, #0
 8005792:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8005796:	2003      	movs	r0, #3
 8005798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800579c:	2000      	movs	r0, #0
}
 800579e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080057a2 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057a2:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057a4:	460b      	mov	r3, r1
 80057a6:	9200      	str	r2, [sp, #0]
 80057a8:	2180      	movs	r1, #128	; 0x80
 80057aa:	2200      	movs	r2, #0
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057ac:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057ae:	f7ff ffb1 	bl	8005714 <SPI_WaitFlagStateUntilTimeout>
 80057b2:	b120      	cbz	r0, 80057be <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80057b6:	f043 0320 	orr.w	r3, r3, #32
 80057ba:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 80057bc:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 80057be:	b002      	add	sp, #8
 80057c0:	bd10      	pop	{r4, pc}

080057c2 <HAL_SPI_MspInit>:
 80057c2:	4770      	bx	lr

080057c4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057c4:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80057c6:	4604      	mov	r4, r0
 80057c8:	2800      	cmp	r0, #0
 80057ca:	d036      	beq.n	800583a <HAL_SPI_Init+0x76>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057cc:	2300      	movs	r3, #0
 80057ce:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80057d0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80057d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80057d8:	b91b      	cbnz	r3, 80057e2 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057da:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057de:	f7ff fff0 	bl	80057c2 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80057e2:	68a1      	ldr	r1, [r4, #8]
 80057e4:	6860      	ldr	r0, [r4, #4]
 80057e6:	4308      	orrs	r0, r1
 80057e8:	68e1      	ldr	r1, [r4, #12]
 80057ea:	4308      	orrs	r0, r1
 80057ec:	6921      	ldr	r1, [r4, #16]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057ee:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80057f0:	4308      	orrs	r0, r1
 80057f2:	6961      	ldr	r1, [r4, #20]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057f4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057f8:	6823      	ldr	r3, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80057fa:	4308      	orrs	r0, r1
 80057fc:	69e1      	ldr	r1, [r4, #28]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057fe:	681a      	ldr	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005800:	4308      	orrs	r0, r1
 8005802:	6a21      	ldr	r1, [r4, #32]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005808:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800580a:	4308      	orrs	r0, r1
 800580c:	69a2      	ldr	r2, [r4, #24]
 800580e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005810:	4308      	orrs	r0, r1
 8005812:	f402 7100 	and.w	r1, r2, #512	; 0x200
 8005816:	4301      	orrs	r1, r0
 8005818:	6019      	str	r1, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800581a:	0c12      	lsrs	r2, r2, #16
 800581c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800581e:	f002 0204 	and.w	r2, r2, #4
 8005822:	430a      	orrs	r2, r1
 8005824:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005826:	69da      	ldr	r2, [r3, #28]
 8005828:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800582c:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800582e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8005830:	2301      	movs	r3, #1
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005832:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005834:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8005838:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
    return HAL_ERROR;
 800583a:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
}
 800583c:	bd10      	pop	{r4, pc}

0800583e <HAL_SPI_MspDeInit>:
 800583e:	4770      	bx	lr

08005840 <HAL_SPI_DeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005840:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8005842:	4604      	mov	r4, r0
 8005844:	b180      	cbz	r0, 8005868 <HAL_SPI_DeInit+0x28>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005846:	6802      	ldr	r2, [r0, #0]
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005848:	2302      	movs	r3, #2
 800584a:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800584e:	6813      	ldr	r3, [r2, #0]
 8005850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005854:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005856:	f7ff fff2 	bl	800583e <HAL_SPI_MspDeInit>

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800585a:	2000      	movs	r0, #0
 800585c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800585e:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State = HAL_SPI_STATE_RESET;
 8005862:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);

  return HAL_OK;
 8005866:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
    return HAL_ERROR;
 8005868:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hspi);

  return HAL_OK;
}
 800586a:	bd10      	pop	{r4, pc}

0800586c <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800586c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005870:	461e      	mov	r6, r3

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005872:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8005876:	2b01      	cmp	r3, #1
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005878:	4604      	mov	r4, r0
 800587a:	460d      	mov	r5, r1
 800587c:	4690      	mov	r8, r2

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800587e:	f000 809e 	beq.w	80059be <HAL_SPI_Transmit+0x152>
 8005882:	2301      	movs	r3, #1
 8005884:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005888:	f7fd fe7a 	bl	8003580 <HAL_GetTick>
 800588c:	4607      	mov	r7, r0

  if(hspi->State != HAL_SPI_STATE_READY)
 800588e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8005892:	b2c0      	uxtb	r0, r0
 8005894:	2801      	cmp	r0, #1
 8005896:	f040 808a 	bne.w	80059ae <HAL_SPI_Transmit+0x142>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if((pData == NULL ) || (Size == 0U))
 800589a:	2d00      	cmp	r5, #0
 800589c:	f000 8088 	beq.w	80059b0 <HAL_SPI_Transmit+0x144>
 80058a0:	f1b8 0f00 	cmp.w	r8, #0
 80058a4:	f000 8084 	beq.w	80059b0 <HAL_SPI_Transmit+0x144>
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058a8:	2303      	movs	r3, #3
 80058aa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058ae:	2300      	movs	r3, #0
 80058b0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058b2:	63a3      	str	r3, [r4, #56]	; 0x38
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;
 80058b4:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
  hspi->RxXferSize  = 0U;
 80058b8:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80058ba:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80058bc:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80058be:	6423      	str	r3, [r4, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058c0:	68a3      	ldr	r3, [r4, #8]
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058c2:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->RxXferCount = 0U;
  hspi->TxISR       = NULL;
  hspi->RxISR       = NULL;

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058c8:	6823      	ldr	r3, [r4, #0]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
 80058ca:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
  {
    SPI_1LINE_TX(hspi);
 80058ce:	bf02      	ittt	eq
 80058d0:	681a      	ldreq	r2, [r3, #0]
 80058d2:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 80058d6:	601a      	streq	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	0652      	lsls	r2, r2, #25
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058dc:	bf5e      	ittt	pl
 80058de:	681a      	ldrpl	r2, [r3, #0]
 80058e0:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80058e4:	601a      	strpl	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058e6:	68e2      	ldr	r2, [r4, #12]
 80058e8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80058ec:	6862      	ldr	r2, [r4, #4]
 80058ee:	d11e      	bne.n	800592e <HAL_SPI_Transmit+0xc2>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80058f0:	b172      	cbz	r2, 8005910 <HAL_SPI_Transmit+0xa4>
 80058f2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80058f4:	b292      	uxth	r2, r2
 80058f6:	2a01      	cmp	r2, #1
 80058f8:	d103      	bne.n	8005902 <HAL_SPI_Transmit+0x96>
 80058fa:	e009      	b.n	8005910 <HAL_SPI_Transmit+0xa4>
          hspi->TxXferCount--;
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80058fc:	b1ae      	cbz	r6, 800592a <HAL_SPI_Transmit+0xbe>
 80058fe:	1c71      	adds	r1, r6, #1
 8005900:	d10e      	bne.n	8005920 <HAL_SPI_Transmit+0xb4>
      hspi->Instance->DR = *((uint16_t *)pData);
      pData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005902:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005904:	b29b      	uxth	r3, r3
 8005906:	b1d3      	cbz	r3, 800593e <HAL_SPI_Transmit+0xd2>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	0790      	lsls	r0, r2, #30
 800590e:	d5f5      	bpl.n	80058fc <HAL_SPI_Transmit+0x90>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8005910:	f835 2b02 	ldrh.w	r2, [r5], #2
 8005914:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
          hspi->TxXferCount--;
 8005916:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005918:	3b01      	subs	r3, #1
 800591a:	b29b      	uxth	r3, r3
 800591c:	86e3      	strh	r3, [r4, #54]	; 0x36
 800591e:	e7f0      	b.n	8005902 <HAL_SPI_Transmit+0x96>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8005920:	f7fd fe2e 	bl	8003580 <HAL_GetTick>
 8005924:	1bc0      	subs	r0, r0, r7
 8005926:	4286      	cmp	r6, r0
 8005928:	d8eb      	bhi.n	8005902 <HAL_SPI_Transmit+0x96>
        {
          errorcode = HAL_TIMEOUT;
 800592a:	2003      	movs	r0, #3
 800592c:	e040      	b.n	80059b0 <HAL_SPI_Transmit+0x144>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 800592e:	b1a2      	cbz	r2, 800595a <HAL_SPI_Transmit+0xee>
 8005930:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005932:	b292      	uxth	r2, r2
 8005934:	2a01      	cmp	r2, #1
 8005936:	d010      	beq.n	800595a <HAL_SPI_Transmit+0xee>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
      pData += sizeof(uint8_t);
      hspi->TxXferCount--;
    }
    while (hspi->TxXferCount > 0U)
 8005938:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800593a:	b29b      	uxth	r3, r3
 800593c:	b94b      	cbnz	r3, 8005952 <HAL_SPI_Transmit+0xe6>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800593e:	9700      	str	r7, [sp, #0]
 8005940:	4633      	mov	r3, r6
 8005942:	2201      	movs	r2, #1
 8005944:	2102      	movs	r1, #2
 8005946:	4620      	mov	r0, r4
 8005948:	f7ff fee4 	bl	8005714 <SPI_WaitFlagStateUntilTimeout>
 800594c:	2800      	cmp	r0, #0
 800594e:	d1ec      	bne.n	800592a <HAL_SPI_Transmit+0xbe>
 8005950:	e015      	b.n	800597e <HAL_SPI_Transmit+0x112>
      hspi->TxXferCount--;
    }
    while (hspi->TxXferCount > 0U)
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	0792      	lsls	r2, r2, #30
 8005958:	d507      	bpl.n	800596a <HAL_SPI_Transmit+0xfe>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 800595a:	f815 2b01 	ldrb.w	r2, [r5], #1
 800595e:	731a      	strb	r2, [r3, #12]
        pData += sizeof(uint8_t);
        hspi->TxXferCount--;
 8005960:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005962:	3b01      	subs	r3, #1
 8005964:	b29b      	uxth	r3, r3
 8005966:	86e3      	strh	r3, [r4, #54]	; 0x36
 8005968:	e7e6      	b.n	8005938 <HAL_SPI_Transmit+0xcc>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800596a:	2e00      	cmp	r6, #0
 800596c:	d0dd      	beq.n	800592a <HAL_SPI_Transmit+0xbe>
 800596e:	1c73      	adds	r3, r6, #1
 8005970:	d0e2      	beq.n	8005938 <HAL_SPI_Transmit+0xcc>
 8005972:	f7fd fe05 	bl	8003580 <HAL_GetTick>
 8005976:	1bc0      	subs	r0, r0, r7
 8005978:	4286      	cmp	r6, r0
 800597a:	d8dd      	bhi.n	8005938 <HAL_SPI_Transmit+0xcc>
 800597c:	e7d5      	b.n	800592a <HAL_SPI_Transmit+0xbe>
    errorcode = HAL_TIMEOUT;
    goto error;
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800597e:	463a      	mov	r2, r7
 8005980:	4631      	mov	r1, r6
 8005982:	4620      	mov	r0, r4
 8005984:	f7ff ff0d 	bl	80057a2 <SPI_CheckFlag_BSY>
 8005988:	b118      	cbz	r0, 8005992 <HAL_SPI_Transmit+0x126>
  {
    errorcode = HAL_ERROR;
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800598a:	2320      	movs	r3, #32
 800598c:	6563      	str	r3, [r4, #84]	; 0x54
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
  {
    errorcode = HAL_ERROR;
 800598e:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
    goto error;
 8005990:	e00e      	b.n	80059b0 <HAL_SPI_Transmit+0x144>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005992:	68a3      	ldr	r3, [r4, #8]
 8005994:	b933      	cbnz	r3, 80059a4 <HAL_SPI_Transmit+0x138>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005996:	9303      	str	r3, [sp, #12]
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	9203      	str	r2, [sp, #12]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	9303      	str	r3, [sp, #12]
 80059a2:	9b03      	ldr	r3, [sp, #12]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();

  if(hspi->State != HAL_SPI_STATE_READY)
  {
    errorcode = HAL_BUSY;
 80059a6:	3000      	adds	r0, #0
 80059a8:	bf18      	it	ne
 80059aa:	2001      	movne	r0, #1
 80059ac:	e000      	b.n	80059b0 <HAL_SPI_Transmit+0x144>
 80059ae:	2002      	movs	r0, #2
  {
    errorcode = HAL_ERROR;
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 80059b0:	2301      	movs	r3, #1
 80059b2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059b6:	2300      	movs	r3, #0
 80059b8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 80059bc:	e000      	b.n	80059c0 <HAL_SPI_Transmit+0x154>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059be:	2002      	movs	r0, #2
error:
  hspi->State = HAL_SPI_STATE_READY;
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
  return errorcode;
}
 80059c0:	b004      	add	sp, #16
 80059c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080059c6 <HAL_SPI_GetState>:
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
  /* Return SPI handle state */
  return hspi->State;
 80059c6:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 80059ca:	4770      	bx	lr

080059cc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059cc:	6a03      	ldr	r3, [r0, #32]
 80059ce:	f023 0301 	bic.w	r3, r3, #1
 80059d2:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059d4:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80059d6:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059d8:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059da:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059dc:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059de:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059e2:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059e4:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059e8:	688b      	ldr	r3, [r1, #8]
 80059ea:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80059ec:	4c0c      	ldr	r4, [pc, #48]	; (8005a20 <TIM_OC1_SetConfig+0x54>)
 80059ee:	42a0      	cmp	r0, r4
 80059f0:	d009      	beq.n	8005a06 <TIM_OC1_SetConfig+0x3a>
 80059f2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80059f6:	42a0      	cmp	r0, r4
 80059f8:	d005      	beq.n	8005a06 <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059fa:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059fc:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059fe:	6185      	str	r5, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a00:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8005a02:	6203      	str	r3, [r0, #32]
} 
 8005a04:	bd70      	pop	{r4, r5, r6, pc}
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a06:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a08:	694e      	ldr	r6, [r1, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a0a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a0e:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a10:	698c      	ldr	r4, [r1, #24]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a12:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a16:	4334      	orrs	r4, r6
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a18:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a1c:	4322      	orrs	r2, r4
 8005a1e:	e7ec      	b.n	80059fa <TIM_OC1_SetConfig+0x2e>
 8005a20:	40010000 	.word	0x40010000

08005a24 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a24:	6a03      	ldr	r3, [r0, #32]
 8005a26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a2a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a2c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8005a2e:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a30:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a32:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a34:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8005a36:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a3a:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a3c:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a3e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a42:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8005a46:	4d0e      	ldr	r5, [pc, #56]	; (8005a80 <TIM_OC3_SetConfig+0x5c>)
 8005a48:	42a8      	cmp	r0, r5
 8005a4a:	d009      	beq.n	8005a60 <TIM_OC3_SetConfig+0x3c>
 8005a4c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005a50:	42a8      	cmp	r0, r5
 8005a52:	d005      	beq.n	8005a60 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a54:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a56:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a58:	61c4      	str	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a5a:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a5c:	6203      	str	r3, [r0, #32]
}
 8005a5e:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a60:	68cd      	ldr	r5, [r1, #12]
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a66:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a6a:	694d      	ldr	r5, [r1, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a6c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a70:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a74:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a7a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8005a7e:	e7e9      	b.n	8005a54 <TIM_OC3_SetConfig+0x30>
 8005a80:	40010000 	.word	0x40010000

08005a84 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a84:	6a03      	ldr	r3, [r0, #32]
 8005a86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a8a:	6203      	str	r3, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a8c:	b530      	push	{r4, r5, lr}

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a8e:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8005a90:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a92:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a94:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a96:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a9a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a9e:	688d      	ldr	r5, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005aa0:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005aa4:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8005aa8:	4d09      	ldr	r5, [pc, #36]	; (8005ad0 <TIM_OC4_SetConfig+0x4c>)
 8005aaa:	42a8      	cmp	r0, r5
 8005aac:	d009      	beq.n	8005ac2 <TIM_OC4_SetConfig+0x3e>
 8005aae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005ab2:	42a8      	cmp	r0, r5
 8005ab4:	d005      	beq.n	8005ac2 <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab6:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ab8:	684b      	ldr	r3, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8005aba:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005abc:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005abe:	6204      	str	r4, [r0, #32]
}
 8005ac0:	bd30      	pop	{r4, r5, pc}
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ac2:	694d      	ldr	r5, [r1, #20]
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ac4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ac8:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8005acc:	e7f3      	b.n	8005ab6 <TIM_OC4_SetConfig+0x32>
 8005ace:	bf00      	nop
 8005ad0:	40010000 	.word	0x40010000

08005ad4 <HAL_TIM_Base_Start>:
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005ad4:	6802      	ldr	r2, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005adc:	6813      	ldr	r3, [r2, #0]
 8005ade:	f043 0301 	orr.w	r3, r3, #1
 8005ae2:	6013      	str	r3, [r2, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
}
 8005aea:	2000      	movs	r0, #0
 8005aec:	4770      	bx	lr

08005aee <HAL_TIM_Base_Stop>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8005aee:	2302      	movs	r3, #2
 8005af0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005af4:	6803      	ldr	r3, [r0, #0]
 8005af6:	6a19      	ldr	r1, [r3, #32]
 8005af8:	f241 1211 	movw	r2, #4369	; 0x1111
 8005afc:	400a      	ands	r2, r1
 8005afe:	b942      	cbnz	r2, 8005b12 <HAL_TIM_Base_Stop+0x24>
 8005b00:	6a19      	ldr	r1, [r3, #32]
 8005b02:	f240 4244 	movw	r2, #1092	; 0x444
 8005b06:	400a      	ands	r2, r1
 8005b08:	b91a      	cbnz	r2, 8005b12 <HAL_TIM_Base_Stop+0x24>
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	f022 0201 	bic.w	r2, r2, #1
 8005b10:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8005b12:	2301      	movs	r3, #1
 8005b14:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
}
 8005b18:	2000      	movs	r0, #0
 8005b1a:	4770      	bx	lr

08005b1c <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b1c:	6803      	ldr	r3, [r0, #0]
 8005b1e:	68da      	ldr	r2, [r3, #12]
 8005b20:	f042 0201 	orr.w	r2, r2, #1
 8005b24:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	f042 0201 	orr.w	r2, r2, #1
 8005b2c:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8005b2e:	2000      	movs	r0, #0
 8005b30:	4770      	bx	lr

08005b32 <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005b32:	6803      	ldr	r3, [r0, #0]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	f022 0201 	bic.w	r2, r2, #1
 8005b3a:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b3c:	6a19      	ldr	r1, [r3, #32]
 8005b3e:	f241 1211 	movw	r2, #4369	; 0x1111
 8005b42:	400a      	ands	r2, r1
 8005b44:	b942      	cbnz	r2, 8005b58 <HAL_TIM_Base_Stop_IT+0x26>
 8005b46:	6a19      	ldr	r1, [r3, #32]
 8005b48:	f240 4244 	movw	r2, #1092	; 0x444
 8005b4c:	400a      	ands	r2, r1
 8005b4e:	b91a      	cbnz	r2, 8005b58 <HAL_TIM_Base_Stop_IT+0x26>
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	f022 0201 	bic.w	r2, r2, #1
 8005b56:	601a      	str	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
}
 8005b58:	2000      	movs	r0, #0
 8005b5a:	4770      	bx	lr

08005b5c <HAL_TIM_PWM_MspInit>:
 8005b5c:	4770      	bx	lr

08005b5e <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8005b5e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8005b62:	2b01      	cmp	r3, #1
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8005b64:	b570      	push	{r4, r5, r6, lr}
 8005b66:	f04f 0302 	mov.w	r3, #2
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8005b6a:	f000 80b0 	beq.w	8005cce <HAL_TIM_ConfigClockSource+0x170>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8005b6e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b72:	6803      	ldr	r3, [r0, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8005b74:	2201      	movs	r2, #1
 8005b76:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b7a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b7c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005b80:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8005b84:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8005b86:	680a      	ldr	r2, [r1, #0]
 8005b88:	2a40      	cmp	r2, #64	; 0x40
 8005b8a:	d077      	beq.n	8005c7c <HAL_TIM_ConfigClockSource+0x11e>
 8005b8c:	d818      	bhi.n	8005bc0 <HAL_TIM_ConfigClockSource+0x62>
 8005b8e:	2a10      	cmp	r2, #16
 8005b90:	f000 808b 	beq.w	8005caa <HAL_TIM_ConfigClockSource+0x14c>
 8005b94:	d808      	bhi.n	8005ba8 <HAL_TIM_ConfigClockSource+0x4a>
 8005b96:	2a00      	cmp	r2, #0
 8005b98:	f040 8093 	bne.w	8005cc2 <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8005b9c:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8005b9e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8005ba2:	f042 0207 	orr.w	r2, r2, #7
 8005ba6:	e08b      	b.n	8005cc0 <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8005ba8:	2a20      	cmp	r2, #32
 8005baa:	f000 8084 	beq.w	8005cb6 <HAL_TIM_ConfigClockSource+0x158>
 8005bae:	2a30      	cmp	r2, #48	; 0x30
 8005bb0:	f040 8087 	bne.w	8005cc2 <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8005bb4:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8005bb6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8005bba:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8005bbe:	e07f      	b.n	8005cc0 <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8005bc0:	2a70      	cmp	r2, #112	; 0x70
 8005bc2:	d035      	beq.n	8005c30 <HAL_TIM_ConfigClockSource+0xd2>
 8005bc4:	d81b      	bhi.n	8005bfe <HAL_TIM_ConfigClockSource+0xa0>
 8005bc6:	2a50      	cmp	r2, #80	; 0x50
 8005bc8:	d041      	beq.n	8005c4e <HAL_TIM_ConfigClockSource+0xf0>
 8005bca:	2a60      	cmp	r2, #96	; 0x60
 8005bcc:	d179      	bne.n	8005cc2 <HAL_TIM_ConfigClockSource+0x164>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bce:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance, 
 8005bd0:	684d      	ldr	r5, [r1, #4]
 8005bd2:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bd4:	f024 0410 	bic.w	r4, r4, #16
 8005bd8:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bda:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8005bdc:	6a1a      	ldr	r2, [r3, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bde:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005be2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005be6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bea:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bee:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bf0:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8005bf2:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8005bf4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8005bf8:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8005bfc:	e060      	b.n	8005cc0 <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8005bfe:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8005c02:	d011      	beq.n	8005c28 <HAL_TIM_ConfigClockSource+0xca>
 8005c04:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005c08:	d15b      	bne.n	8005cc2 <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8005c0a:	689c      	ldr	r4, [r3, #8]
 8005c0c:	688d      	ldr	r5, [r1, #8]
 8005c0e:	684a      	ldr	r2, [r1, #4]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8005c10:	68c9      	ldr	r1, [r1, #12]
 8005c12:	432a      	orrs	r2, r5
 8005c14:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8005c18:	4322      	orrs	r2, r4
 8005c1a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c1e:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance, 
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c20:	689a      	ldr	r2, [r3, #8]
 8005c22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c26:	e04b      	b.n	8005cc0 <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_INTERNAL:
    { 
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	f022 0207 	bic.w	r2, r2, #7
 8005c2e:	e047      	b.n	8005cc0 <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8005c30:	689c      	ldr	r4, [r3, #8]
 8005c32:	688d      	ldr	r5, [r1, #8]
 8005c34:	684a      	ldr	r2, [r1, #4]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8005c36:	68c9      	ldr	r1, [r1, #12]
 8005c38:	432a      	orrs	r2, r5
 8005c3a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8005c3e:	4322      	orrs	r2, r4
 8005c40:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c44:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance, 
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 8005c46:	689a      	ldr	r2, [r3, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c48:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8005c4c:	e038      	b.n	8005cc0 <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c4e:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c50:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance, 
 8005c52:	684d      	ldr	r5, [r1, #4]
 8005c54:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c56:	f024 0401 	bic.w	r4, r4, #1
 8005c5a:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8005c5c:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c5e:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c62:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8005c66:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c68:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c6c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c6e:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8005c70:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8005c72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8005c76:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8005c7a:	e021      	b.n	8005cc0 <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c7c:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c7e:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance, 
 8005c80:	684d      	ldr	r5, [r1, #4]
 8005c82:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c84:	f024 0401 	bic.w	r4, r4, #1
 8005c88:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8005c8a:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c8c:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c90:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8005c94:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c96:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c9a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c9c:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8005c9e:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8005ca0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8005ca4:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8005ca8:	e00a      	b.n	8005cc0 <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8005caa:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8005cac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8005cb0:	f042 0217 	orr.w	r2, r2, #23
 8005cb4:	e004      	b.n	8005cc0 <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8005cb6:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8005cb8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8005cbc:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8005cc0:	609a      	str	r2, [r3, #8]
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8005cc8:	2300      	movs	r3, #0
 8005cca:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8005cce:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
}
 8005cd0:	bd70      	pop	{r4, r5, r6, pc}

08005cd2 <HAL_TIM_OC_DelayElapsedCallback>:
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_TIM_IC_CaptureCallback>:
 8005cd4:	4770      	bx	lr

08005cd6 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_TIM_TriggerCallback>:
 8005cd8:	4770      	bx	lr

08005cda <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cda:	6803      	ldr	r3, [r0, #0]
 8005cdc:	691a      	ldr	r2, [r3, #16]
 8005cde:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ce0:	b510      	push	{r4, lr}
 8005ce2:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ce4:	d514      	bpl.n	8005d10 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8005ce6:	68da      	ldr	r2, [r3, #12]
 8005ce8:	0792      	lsls	r2, r2, #30
 8005cea:	d511      	bpl.n	8005d10 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cec:	f06f 0202 	mvn.w	r2, #2
 8005cf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cf2:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cf4:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cf6:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cf8:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cfa:	d002      	beq.n	8005d02 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8005cfc:	f7ff ffea 	bl	8005cd4 <HAL_TIM_IC_CaptureCallback>
 8005d00:	e004      	b.n	8005d0c <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d02:	f7ff ffe6 	bl	8005cd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d06:	4620      	mov	r0, r4
 8005d08:	f7ff ffe5 	bl	8005cd6 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d10:	6823      	ldr	r3, [r4, #0]
 8005d12:	691a      	ldr	r2, [r3, #16]
 8005d14:	0750      	lsls	r0, r2, #29
 8005d16:	d516      	bpl.n	8005d46 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	0751      	lsls	r1, r2, #29
 8005d1c:	d513      	bpl.n	8005d46 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d1e:	f06f 0204 	mvn.w	r2, #4
 8005d22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d24:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d26:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d28:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d2c:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8005d2e:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d30:	d002      	beq.n	8005d38 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8005d32:	f7ff ffcf 	bl	8005cd4 <HAL_TIM_IC_CaptureCallback>
 8005d36:	e004      	b.n	8005d42 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d38:	f7ff ffcb 	bl	8005cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	f7ff ffca 	bl	8005cd6 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d42:	2300      	movs	r3, #0
 8005d44:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	691a      	ldr	r2, [r3, #16]
 8005d4a:	0712      	lsls	r2, r2, #28
 8005d4c:	d515      	bpl.n	8005d7a <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8005d4e:	68da      	ldr	r2, [r3, #12]
 8005d50:	0710      	lsls	r0, r2, #28
 8005d52:	d512      	bpl.n	8005d7a <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d54:	f06f 0208 	mvn.w	r2, #8
 8005d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d5a:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d5c:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d5e:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d60:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8005d62:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d64:	d002      	beq.n	8005d6c <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8005d66:	f7ff ffb5 	bl	8005cd4 <HAL_TIM_IC_CaptureCallback>
 8005d6a:	e004      	b.n	8005d76 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d6c:	f7ff ffb1 	bl	8005cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8005d70:	4620      	mov	r0, r4
 8005d72:	f7ff ffb0 	bl	8005cd6 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d76:	2300      	movs	r3, #0
 8005d78:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	691a      	ldr	r2, [r3, #16]
 8005d7e:	06d2      	lsls	r2, r2, #27
 8005d80:	d516      	bpl.n	8005db0 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	06d0      	lsls	r0, r2, #27
 8005d86:	d513      	bpl.n	8005db0 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d88:	f06f 0210 	mvn.w	r2, #16
 8005d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d8e:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d90:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d92:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d96:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8005d98:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d9a:	d002      	beq.n	8005da2 <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8005d9c:	f7ff ff9a 	bl	8005cd4 <HAL_TIM_IC_CaptureCallback>
 8005da0:	e004      	b.n	8005dac <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005da2:	f7ff ff96 	bl	8005cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da6:	4620      	mov	r0, r4
 8005da8:	f7ff ff95 	bl	8005cd6 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dac:	2300      	movs	r3, #0
 8005dae:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005db0:	6823      	ldr	r3, [r4, #0]
 8005db2:	691a      	ldr	r2, [r3, #16]
 8005db4:	07d1      	lsls	r1, r2, #31
 8005db6:	d508      	bpl.n	8005dca <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	07d2      	lsls	r2, r2, #31
 8005dbc:	d505      	bpl.n	8005dca <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dbe:	f06f 0201 	mvn.w	r2, #1
 8005dc2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f7fb ff0f 	bl	8001be8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	691a      	ldr	r2, [r3, #16]
 8005dce:	0610      	lsls	r0, r2, #24
 8005dd0:	d508      	bpl.n	8005de4 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8005dd2:	68da      	ldr	r2, [r3, #12]
 8005dd4:	0611      	lsls	r1, r2, #24
 8005dd6:	d505      	bpl.n	8005de4 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ddc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005dde:	4620      	mov	r0, r4
 8005de0:	f000 f9c7 	bl	8006172 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	691a      	ldr	r2, [r3, #16]
 8005de8:	0652      	lsls	r2, r2, #25
 8005dea:	d508      	bpl.n	8005dfe <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	0650      	lsls	r0, r2, #25
 8005df0:	d505      	bpl.n	8005dfe <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005df2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005df6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f7ff ff6d 	bl	8005cd8 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	691a      	ldr	r2, [r3, #16]
 8005e02:	0691      	lsls	r1, r2, #26
 8005e04:	d50a      	bpl.n	8005e1c <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8005e06:	68da      	ldr	r2, [r3, #12]
 8005e08:	0692      	lsls	r2, r2, #26
 8005e0a:	d507      	bpl.n	8005e1c <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e0c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8005e10:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e12:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8005e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8005e18:	f000 b9aa 	b.w	8006170 <HAL_TIMEx_CommutationCallback>
 8005e1c:	bd10      	pop	{r4, pc}
	...

08005e20 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8005e20:	4a2e      	ldr	r2, [pc, #184]	; (8005edc <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8005e22:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8005e24:	4290      	cmp	r0, r2
 8005e26:	d012      	beq.n	8005e4e <TIM_Base_SetConfig+0x2e>
 8005e28:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005e2c:	d00f      	beq.n	8005e4e <TIM_Base_SetConfig+0x2e>
 8005e2e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005e32:	4290      	cmp	r0, r2
 8005e34:	d00b      	beq.n	8005e4e <TIM_Base_SetConfig+0x2e>
 8005e36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e3a:	4290      	cmp	r0, r2
 8005e3c:	d007      	beq.n	8005e4e <TIM_Base_SetConfig+0x2e>
 8005e3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e42:	4290      	cmp	r0, r2
 8005e44:	d003      	beq.n	8005e4e <TIM_Base_SetConfig+0x2e>
 8005e46:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005e4a:	4290      	cmp	r0, r2
 8005e4c:	d118      	bne.n	8005e80 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8005e4e:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005e54:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8005e56:	4a21      	ldr	r2, [pc, #132]	; (8005edc <TIM_Base_SetConfig+0xbc>)
 8005e58:	4290      	cmp	r0, r2
 8005e5a:	d037      	beq.n	8005ecc <TIM_Base_SetConfig+0xac>
 8005e5c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005e60:	d034      	beq.n	8005ecc <TIM_Base_SetConfig+0xac>
 8005e62:	4a1f      	ldr	r2, [pc, #124]	; (8005ee0 <TIM_Base_SetConfig+0xc0>)
 8005e64:	4290      	cmp	r0, r2
 8005e66:	d031      	beq.n	8005ecc <TIM_Base_SetConfig+0xac>
 8005e68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e6c:	4290      	cmp	r0, r2
 8005e6e:	d02d      	beq.n	8005ecc <TIM_Base_SetConfig+0xac>
 8005e70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e74:	4290      	cmp	r0, r2
 8005e76:	d029      	beq.n	8005ecc <TIM_Base_SetConfig+0xac>
 8005e78:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005e7c:	4290      	cmp	r0, r2
 8005e7e:	d025      	beq.n	8005ecc <TIM_Base_SetConfig+0xac>
 8005e80:	4a18      	ldr	r2, [pc, #96]	; (8005ee4 <TIM_Base_SetConfig+0xc4>)
 8005e82:	4290      	cmp	r0, r2
 8005e84:	d022      	beq.n	8005ecc <TIM_Base_SetConfig+0xac>
 8005e86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e8a:	4290      	cmp	r0, r2
 8005e8c:	d01e      	beq.n	8005ecc <TIM_Base_SetConfig+0xac>
 8005e8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e92:	4290      	cmp	r0, r2
 8005e94:	d01a      	beq.n	8005ecc <TIM_Base_SetConfig+0xac>
 8005e96:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8005e9a:	4290      	cmp	r0, r2
 8005e9c:	d016      	beq.n	8005ecc <TIM_Base_SetConfig+0xac>
 8005e9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ea2:	4290      	cmp	r0, r2
 8005ea4:	d012      	beq.n	8005ecc <TIM_Base_SetConfig+0xac>
 8005ea6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005eaa:	4290      	cmp	r0, r2
 8005eac:	d00e      	beq.n	8005ecc <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8005eae:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005eb0:	688b      	ldr	r3, [r1, #8]
 8005eb2:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8005eb4:	680b      	ldr	r3, [r1, #0]
 8005eb6:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8005eb8:	4b08      	ldr	r3, [pc, #32]	; (8005edc <TIM_Base_SetConfig+0xbc>)
 8005eba:	4298      	cmp	r0, r3
 8005ebc:	d00b      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb6>
 8005ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ec2:	4298      	cmp	r0, r3
 8005ec4:	d007      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	6143      	str	r3, [r0, #20]
}
 8005eca:	4770      	bx	lr
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ecc:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	e7eb      	b.n	8005eae <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ed6:	690b      	ldr	r3, [r1, #16]
 8005ed8:	6303      	str	r3, [r0, #48]	; 0x30
 8005eda:	e7f4      	b.n	8005ec6 <TIM_Base_SetConfig+0xa6>
 8005edc:	40010000 	.word	0x40010000
 8005ee0:	40000400 	.word	0x40000400
 8005ee4:	40014000 	.word	0x40014000

08005ee8 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8005ee8:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8005eea:	4604      	mov	r4, r0
 8005eec:	b1a0      	cbz	r0, 8005f18 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8005eee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005ef2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005ef6:	b91b      	cbnz	r3, 8005f00 <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ef8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005efc:	f7fc fa14 	bl	8002328 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8005f00:	2302      	movs	r3, #2
 8005f02:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8005f06:	6820      	ldr	r0, [r4, #0]
 8005f08:	1d21      	adds	r1, r4, #4
 8005f0a:	f7ff ff89 	bl	8005e20 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8005f14:	2000      	movs	r0, #0
 8005f16:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8005f18:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8005f1a:	bd10      	pop	{r4, pc}

08005f1c <HAL_TIM_PWM_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f1c:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8005f1e:	4604      	mov	r4, r0
 8005f20:	b1a0      	cbz	r0, 8005f4c <HAL_TIM_PWM_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8005f22:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005f26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005f2a:	b91b      	cbnz	r3, 8005f34 <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f2c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f30:	f7ff fe14 	bl	8005b5c <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8005f34:	2302      	movs	r3, #2
 8005f36:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8005f3a:	6820      	ldr	r0, [r4, #0]
 8005f3c:	1d21      	adds	r1, r4, #4
 8005f3e:	f7ff ff6f 	bl	8005e20 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8005f42:	2301      	movs	r3, #1
 8005f44:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8005f48:	2000      	movs	r0, #0
 8005f4a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8005f4c:	2001      	movs	r0, #1
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}  
 8005f4e:	bd10      	pop	{r4, pc}

08005f50 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f50:	6a03      	ldr	r3, [r0, #32]
 8005f52:	f023 0310 	bic.w	r3, r3, #16
 8005f56:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8005f58:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8005f5a:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f5c:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f5e:	6984      	ldr	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f60:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f62:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f66:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f6a:	688d      	ldr	r5, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f6c:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f70:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8005f74:	4d0e      	ldr	r5, [pc, #56]	; (8005fb0 <TIM_OC2_SetConfig+0x60>)
 8005f76:	42a8      	cmp	r0, r5
 8005f78:	d009      	beq.n	8005f8e <TIM_OC2_SetConfig+0x3e>
 8005f7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005f7e:	42a8      	cmp	r0, r5
 8005f80:	d005      	beq.n	8005f8e <TIM_OC2_SetConfig+0x3e>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f82:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f84:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f86:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f88:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f8a:	6203      	str	r3, [r0, #32]
}
 8005f8c:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f8e:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f94:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f98:	694d      	ldr	r5, [r1, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f9a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f9e:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fa2:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fa8:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8005fac:	e7e9      	b.n	8005f82 <TIM_OC2_SetConfig+0x32>
 8005fae:	bf00      	nop
 8005fb0:	40010000 	.word	0x40010000

08005fb4 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8005fb4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005fb6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8005fba:	2b01      	cmp	r3, #1
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8005fbc:	4604      	mov	r4, r0
 8005fbe:	460d      	mov	r5, r1
 8005fc0:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8005fc4:	d058      	beq.n	8006078 <HAL_TIM_PWM_ConfigChannel+0xc4>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8005fcc:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
    
  switch (Channel)
 8005fd0:	2a0c      	cmp	r2, #12
 8005fd2:	d84b      	bhi.n	800606c <HAL_TIM_PWM_ConfigChannel+0xb8>
 8005fd4:	e8df f002 	tbb	[pc, r2]
 8005fd8:	4a4a4a07 	.word	0x4a4a4a07
 8005fdc:	4a4a4a17 	.word	0x4a4a4a17
 8005fe0:	4a4a4a29 	.word	0x4a4a4a29
 8005fe4:	39          	.byte	0x39
 8005fe5:	00          	.byte	0x00
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fe6:	6820      	ldr	r0, [r4, #0]
 8005fe8:	f7ff fcf0 	bl	80059cc <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	699a      	ldr	r2, [r3, #24]
 8005ff0:	f042 0208 	orr.w	r2, r2, #8
 8005ff4:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ff6:	699a      	ldr	r2, [r3, #24]
 8005ff8:	f022 0204 	bic.w	r2, r2, #4
 8005ffc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ffe:	6999      	ldr	r1, [r3, #24]
 8006000:	692a      	ldr	r2, [r5, #16]
 8006002:	430a      	orrs	r2, r1
 8006004:	e00f      	b.n	8006026 <HAL_TIM_PWM_ConfigChannel+0x72>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006006:	6820      	ldr	r0, [r4, #0]
 8006008:	f7ff ffa2 	bl	8005f50 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800600c:	6823      	ldr	r3, [r4, #0]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800600e:	6909      	ldr	r1, [r1, #16]
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006010:	699a      	ldr	r2, [r3, #24]
 8006012:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006016:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006018:	699a      	ldr	r2, [r3, #24]
 800601a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800601e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006020:	699a      	ldr	r2, [r3, #24]
 8006022:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006026:	619a      	str	r2, [r3, #24]
    }
    break;
 8006028:	e020      	b.n	800606c <HAL_TIM_PWM_ConfigChannel+0xb8>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800602a:	6820      	ldr	r0, [r4, #0]
 800602c:	f7ff fcfa 	bl	8005a24 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	69da      	ldr	r2, [r3, #28]
 8006034:	f042 0208 	orr.w	r2, r2, #8
 8006038:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800603a:	69da      	ldr	r2, [r3, #28]
 800603c:	f022 0204 	bic.w	r2, r2, #4
 8006040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8006042:	69d9      	ldr	r1, [r3, #28]
 8006044:	692a      	ldr	r2, [r5, #16]
 8006046:	430a      	orrs	r2, r1
 8006048:	e00f      	b.n	800606a <HAL_TIM_PWM_ConfigChannel+0xb6>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800604a:	6820      	ldr	r0, [r4, #0]
 800604c:	f7ff fd1a 	bl	8005a84 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006050:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8006052:	6909      	ldr	r1, [r1, #16]
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006054:	69da      	ldr	r2, [r3, #28]
 8006056:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800605a:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800605c:	69da      	ldr	r2, [r3, #28]
 800605e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006062:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8006064:	69da      	ldr	r2, [r3, #28]
 8006066:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800606a:	61da      	str	r2, [r3, #28]
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 800606c:	2301      	movs	r3, #1
    
  __HAL_UNLOCK(htim);
 800606e:	2000      	movs	r0, #0
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8006070:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8006074:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 8006078:	bd38      	pop	{r3, r4, r5, pc}

0800607a <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800607a:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800607c:	2301      	movs	r3, #1
 800607e:	6a04      	ldr	r4, [r0, #32]
 8006080:	408b      	lsls	r3, r1
 8006082:	ea24 0303 	bic.w	r3, r4, r3
 8006086:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8006088:	6a03      	ldr	r3, [r0, #32]
 800608a:	408a      	lsls	r2, r1
 800608c:	ea42 0103 	orr.w	r1, r2, r3
 8006090:	6201      	str	r1, [r0, #32]
 8006092:	bd10      	pop	{r4, pc}

08006094 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006094:	b510      	push	{r4, lr}
 8006096:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006098:	2201      	movs	r2, #1
 800609a:	6800      	ldr	r0, [r0, #0]
 800609c:	f7ff ffed 	bl	800607a <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	4a08      	ldr	r2, [pc, #32]	; (80060c4 <HAL_TIM_PWM_Start+0x30>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d003      	beq.n	80060b0 <HAL_TIM_PWM_Start+0x1c>
 80060a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d103      	bne.n	80060b8 <HAL_TIM_PWM_Start+0x24>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060b6:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	f042 0201 	orr.w	r2, r2, #1
 80060be:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 80060c0:	2000      	movs	r0, #0
 80060c2:	bd10      	pop	{r4, pc}
 80060c4:	40010000 	.word	0x40010000

080060c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{ 
 80060c8:	b510      	push	{r4, lr}
 80060ca:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
    
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80060cc:	2200      	movs	r2, #0
 80060ce:	6800      	ldr	r0, [r0, #0]
 80060d0:	f7ff ffd3 	bl	800607a <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	4a14      	ldr	r2, [pc, #80]	; (8006128 <HAL_TIM_PWM_Stop+0x60>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d003      	beq.n	80060e4 <HAL_TIM_PWM_Stop+0x1c>
 80060dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d10d      	bne.n	8006100 <HAL_TIM_PWM_Stop+0x38>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80060e4:	6a19      	ldr	r1, [r3, #32]
 80060e6:	f241 1211 	movw	r2, #4369	; 0x1111
 80060ea:	400a      	ands	r2, r1
 80060ec:	b942      	cbnz	r2, 8006100 <HAL_TIM_PWM_Stop+0x38>
 80060ee:	6a19      	ldr	r1, [r3, #32]
 80060f0:	f240 4244 	movw	r2, #1092	; 0x444
 80060f4:	400a      	ands	r2, r1
 80060f6:	b91a      	cbnz	r2, 8006100 <HAL_TIM_PWM_Stop+0x38>
 80060f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060fe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006100:	6a19      	ldr	r1, [r3, #32]
 8006102:	f241 1211 	movw	r2, #4369	; 0x1111
 8006106:	400a      	ands	r2, r1
 8006108:	b942      	cbnz	r2, 800611c <HAL_TIM_PWM_Stop+0x54>
 800610a:	6a19      	ldr	r1, [r3, #32]
 800610c:	f240 4244 	movw	r2, #1092	; 0x444
 8006110:	400a      	ands	r2, r1
 8006112:	b91a      	cbnz	r2, 800611c <HAL_TIM_PWM_Stop+0x54>
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	f022 0201 	bic.w	r2, r2, #1
 800611a:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800611c:	2301      	movs	r3, #1
 800611e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
} 
 8006122:	2000      	movs	r0, #0
 8006124:	bd10      	pop	{r4, pc}
 8006126:	bf00      	nop
 8006128:	40010000 	.word	0x40010000

0800612c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800612c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8006130:	2b01      	cmp	r3, #1
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8006132:	b510      	push	{r4, lr}
 8006134:	f04f 0302 	mov.w	r3, #2
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8006138:	d018      	beq.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800613a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800613e:	6803      	ldr	r3, [r0, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006146:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8006148:	685c      	ldr	r4, [r3, #4]
 800614a:	680a      	ldr	r2, [r1, #0]
 800614c:	4322      	orrs	r2, r4
 800614e:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8006150:	689a      	ldr	r2, [r3, #8]
 8006152:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006156:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8006158:	689c      	ldr	r4, [r3, #8]
 800615a:	684a      	ldr	r2, [r1, #4]
 800615c:	4322      	orrs	r2, r4
 800615e:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8006160:	2301      	movs	r3, #1
 8006162:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8006166:	2300      	movs	r3, #0
 8006168:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800616c:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 800616e:	bd10      	pop	{r4, pc}

08006170 <HAL_TIMEx_CommutationCallback>:
 8006170:	4770      	bx	lr

08006172 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006172:	4770      	bx	lr

08006174 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006174:	6803      	ldr	r3, [r0, #0]
 8006176:	68da      	ldr	r2, [r3, #12]
 8006178:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800617c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800617e:	695a      	ldr	r2, [r3, #20]
 8006180:	f022 0201 	bic.w	r2, r2, #1
 8006184:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006186:	2320      	movs	r3, #32
 8006188:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800618c:	4770      	bx	lr
	...

08006190 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8006194:	6807      	ldr	r7, [r0, #0]
 8006196:	693b      	ldr	r3, [r7, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006198:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800619a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800619e:	68c3      	ldr	r3, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061a0:	68a1      	ldr	r1, [r4, #8]
 80061a2:	69c0      	ldr	r0, [r0, #28]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80061a4:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061a6:	6922      	ldr	r2, [r4, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80061a8:	613b      	str	r3, [r7, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80061aa:	68fb      	ldr	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061ac:	4311      	orrs	r1, r2
 80061ae:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80061b0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061b4:	430a      	orrs	r2, r1
 80061b6:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80061b8:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061bc:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80061be:	60fb      	str	r3, [r7, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80061c0:	697b      	ldr	r3, [r7, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80061c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80061c6:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061c8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80061cc:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80061d0:	617b      	str	r3, [r7, #20]
 80061d2:	4b7c      	ldr	r3, [pc, #496]	; (80063c4 <UART_SetConfig+0x234>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061d4:	d17c      	bne.n	80062d0 <UART_SetConfig+0x140>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80061d6:	429f      	cmp	r7, r3
 80061d8:	d003      	beq.n	80061e2 <UART_SetConfig+0x52>
 80061da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061de:	429f      	cmp	r7, r3
 80061e0:	d131      	bne.n	8006246 <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80061e2:	f7ff f8b1 	bl	8005348 <HAL_RCC_GetPCLK2Freq>
 80061e6:	6863      	ldr	r3, [r4, #4]
 80061e8:	2519      	movs	r5, #25
 80061ea:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80061ee:	4368      	muls	r0, r5
 80061f0:	fbb0 f8f8 	udiv	r8, r0, r8
 80061f4:	f7ff f8a8 	bl	8005348 <HAL_RCC_GetPCLK2Freq>
 80061f8:	6866      	ldr	r6, [r4, #4]
 80061fa:	4368      	muls	r0, r5
 80061fc:	0076      	lsls	r6, r6, #1
 80061fe:	fbb0 f6f6 	udiv	r6, r0, r6
 8006202:	f7ff f8a1 	bl	8005348 <HAL_RCC_GetPCLK2Freq>
 8006206:	6863      	ldr	r3, [r4, #4]
 8006208:	f04f 0964 	mov.w	r9, #100	; 0x64
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	4368      	muls	r0, r5
 8006210:	fbb0 f0f3 	udiv	r0, r0, r3
 8006214:	fbb0 f0f9 	udiv	r0, r0, r9
 8006218:	fb09 6610 	mls	r6, r9, r0, r6
 800621c:	f7ff f894 	bl	8005348 <HAL_RCC_GetPCLK2Freq>
 8006220:	fbb8 f8f9 	udiv	r8, r8, r9
 8006224:	6861      	ldr	r1, [r4, #4]
 8006226:	00f6      	lsls	r6, r6, #3
 8006228:	3632      	adds	r6, #50	; 0x32
 800622a:	fbb6 f6f9 	udiv	r6, r6, r9
 800622e:	0076      	lsls	r6, r6, #1
 8006230:	4368      	muls	r0, r5
 8006232:	0049      	lsls	r1, r1, #1
 8006234:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8006238:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 800623c:	fbb0 faf1 	udiv	sl, r0, r1
 8006240:	f7ff f882 	bl	8005348 <HAL_RCC_GetPCLK2Freq>
 8006244:	e030      	b.n	80062a8 <UART_SetConfig+0x118>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006246:	f7ff f867 	bl	8005318 <HAL_RCC_GetPCLK1Freq>
 800624a:	6863      	ldr	r3, [r4, #4]
 800624c:	2519      	movs	r5, #25
 800624e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8006252:	4368      	muls	r0, r5
 8006254:	fbb0 f8f8 	udiv	r8, r0, r8
 8006258:	f7ff f85e 	bl	8005318 <HAL_RCC_GetPCLK1Freq>
 800625c:	6866      	ldr	r6, [r4, #4]
 800625e:	4368      	muls	r0, r5
 8006260:	0076      	lsls	r6, r6, #1
 8006262:	fbb0 f6f6 	udiv	r6, r0, r6
 8006266:	f7ff f857 	bl	8005318 <HAL_RCC_GetPCLK1Freq>
 800626a:	6863      	ldr	r3, [r4, #4]
 800626c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8006270:	005b      	lsls	r3, r3, #1
 8006272:	4368      	muls	r0, r5
 8006274:	fbb0 f0f3 	udiv	r0, r0, r3
 8006278:	fbb0 f0f9 	udiv	r0, r0, r9
 800627c:	fb09 6610 	mls	r6, r9, r0, r6
 8006280:	f7ff f84a 	bl	8005318 <HAL_RCC_GetPCLK1Freq>
 8006284:	fbb8 f8f9 	udiv	r8, r8, r9
 8006288:	00f6      	lsls	r6, r6, #3
 800628a:	6861      	ldr	r1, [r4, #4]
 800628c:	3632      	adds	r6, #50	; 0x32
 800628e:	fbb6 f6f9 	udiv	r6, r6, r9
 8006292:	0076      	lsls	r6, r6, #1
 8006294:	4368      	muls	r0, r5
 8006296:	0049      	lsls	r1, r1, #1
 8006298:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800629c:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 80062a0:	fbb0 faf1 	udiv	sl, r0, r1
 80062a4:	f7ff f838 	bl	8005318 <HAL_RCC_GetPCLK1Freq>
 80062a8:	4345      	muls	r5, r0
 80062aa:	6860      	ldr	r0, [r4, #4]
 80062ac:	0040      	lsls	r0, r0, #1
 80062ae:	fbb5 f0f0 	udiv	r0, r5, r0
 80062b2:	fbb0 f0f9 	udiv	r0, r0, r9
 80062b6:	fb09 a210 	mls	r2, r9, r0, sl
 80062ba:	00d2      	lsls	r2, r2, #3
 80062bc:	3232      	adds	r2, #50	; 0x32
 80062be:	fbb2 f3f9 	udiv	r3, r2, r9
 80062c2:	f003 0307 	and.w	r3, r3, #7
 80062c6:	4443      	add	r3, r8
 80062c8:	441e      	add	r6, r3
 80062ca:	60be      	str	r6, [r7, #8]
 80062cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80062d0:	429f      	cmp	r7, r3
 80062d2:	d002      	beq.n	80062da <UART_SetConfig+0x14a>
 80062d4:	4b3c      	ldr	r3, [pc, #240]	; (80063c8 <UART_SetConfig+0x238>)
 80062d6:	429f      	cmp	r7, r3
 80062d8:	d130      	bne.n	800633c <UART_SetConfig+0x1ac>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80062da:	f7ff f835 	bl	8005348 <HAL_RCC_GetPCLK2Freq>
 80062de:	6863      	ldr	r3, [r4, #4]
 80062e0:	2519      	movs	r5, #25
 80062e2:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80062e6:	4368      	muls	r0, r5
 80062e8:	fbb0 f8f8 	udiv	r8, r0, r8
 80062ec:	f7ff f82c 	bl	8005348 <HAL_RCC_GetPCLK2Freq>
 80062f0:	6866      	ldr	r6, [r4, #4]
 80062f2:	4368      	muls	r0, r5
 80062f4:	00b6      	lsls	r6, r6, #2
 80062f6:	fbb0 f6f6 	udiv	r6, r0, r6
 80062fa:	f7ff f825 	bl	8005348 <HAL_RCC_GetPCLK2Freq>
 80062fe:	6863      	ldr	r3, [r4, #4]
 8006300:	f04f 0964 	mov.w	r9, #100	; 0x64
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4368      	muls	r0, r5
 8006308:	fbb0 f0f3 	udiv	r0, r0, r3
 800630c:	fbb0 f0f9 	udiv	r0, r0, r9
 8006310:	fb09 6610 	mls	r6, r9, r0, r6
 8006314:	f7ff f818 	bl	8005348 <HAL_RCC_GetPCLK2Freq>
 8006318:	fbb8 f8f9 	udiv	r8, r8, r9
 800631c:	6861      	ldr	r1, [r4, #4]
 800631e:	0136      	lsls	r6, r6, #4
 8006320:	4368      	muls	r0, r5
 8006322:	0089      	lsls	r1, r1, #2
 8006324:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8006328:	3632      	adds	r6, #50	; 0x32
 800632a:	fbb0 faf1 	udiv	sl, r0, r1
 800632e:	fbb6 f6f9 	udiv	r6, r6, r9
 8006332:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8006336:	f7ff f807 	bl	8005348 <HAL_RCC_GetPCLK2Freq>
 800633a:	e02f      	b.n	800639c <UART_SetConfig+0x20c>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800633c:	f7fe ffec 	bl	8005318 <HAL_RCC_GetPCLK1Freq>
 8006340:	6863      	ldr	r3, [r4, #4]
 8006342:	2519      	movs	r5, #25
 8006344:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8006348:	4368      	muls	r0, r5
 800634a:	fbb0 f8f8 	udiv	r8, r0, r8
 800634e:	f7fe ffe3 	bl	8005318 <HAL_RCC_GetPCLK1Freq>
 8006352:	6866      	ldr	r6, [r4, #4]
 8006354:	4368      	muls	r0, r5
 8006356:	00b6      	lsls	r6, r6, #2
 8006358:	fbb0 f6f6 	udiv	r6, r0, r6
 800635c:	f7fe ffdc 	bl	8005318 <HAL_RCC_GetPCLK1Freq>
 8006360:	6863      	ldr	r3, [r4, #4]
 8006362:	f04f 0964 	mov.w	r9, #100	; 0x64
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4368      	muls	r0, r5
 800636a:	fbb0 f0f3 	udiv	r0, r0, r3
 800636e:	fbb0 f0f9 	udiv	r0, r0, r9
 8006372:	fb09 6610 	mls	r6, r9, r0, r6
 8006376:	f7fe ffcf 	bl	8005318 <HAL_RCC_GetPCLK1Freq>
 800637a:	fbb8 f8f9 	udiv	r8, r8, r9
 800637e:	6861      	ldr	r1, [r4, #4]
 8006380:	0136      	lsls	r6, r6, #4
 8006382:	3632      	adds	r6, #50	; 0x32
 8006384:	4368      	muls	r0, r5
 8006386:	fbb6 f6f9 	udiv	r6, r6, r9
 800638a:	0089      	lsls	r1, r1, #2
 800638c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8006390:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8006394:	fbb0 faf1 	udiv	sl, r0, r1
 8006398:	f7fe ffbe 	bl	8005318 <HAL_RCC_GetPCLK1Freq>
 800639c:	4345      	muls	r5, r0
 800639e:	6860      	ldr	r0, [r4, #4]
 80063a0:	0080      	lsls	r0, r0, #2
 80063a2:	fbb5 f0f0 	udiv	r0, r5, r0
 80063a6:	fbb0 f0f9 	udiv	r0, r0, r9
 80063aa:	fb09 a210 	mls	r2, r9, r0, sl
 80063ae:	0112      	lsls	r2, r2, #4
 80063b0:	3232      	adds	r2, #50	; 0x32
 80063b2:	fbb2 f3f9 	udiv	r3, r2, r9
 80063b6:	f003 030f 	and.w	r3, r3, #15
 80063ba:	4433      	add	r3, r6
 80063bc:	4443      	add	r3, r8
 80063be:	60bb      	str	r3, [r7, #8]
 80063c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063c4:	40011000 	.word	0x40011000
 80063c8:	40011400 	.word	0x40011400

080063cc <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063cc:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 80063ce:	4604      	mov	r4, r0
 80063d0:	b340      	cbz	r0, 8006424 <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80063d2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80063d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80063da:	b91b      	cbnz	r3, 80063e4 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063dc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80063e0:	f7fb ff36 	bl	8002250 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063e4:	6822      	ldr	r2, [r4, #0]
    huart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063e6:	2324      	movs	r3, #36	; 0x24
 80063e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063ec:	68d3      	ldr	r3, [r2, #12]
 80063ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063f2:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063f4:	4620      	mov	r0, r4
 80063f6:	f7ff fecb 	bl	8006190 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	691a      	ldr	r2, [r3, #16]
 80063fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006402:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006404:	695a      	ldr	r2, [r3, #20]
 8006406:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800640a:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800640c:	68da      	ldr	r2, [r3, #12]
 800640e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006412:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006414:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8006416:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006418:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800641a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800641e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 8006422:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8006424:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8006426:	bd10      	pop	{r4, pc}

08006428 <HAL_UART_Transmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8006428:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800642c:	2b20      	cmp	r3, #32
 800642e:	d118      	bne.n	8006462 <HAL_UART_Transmit_IT+0x3a>
  {
    if((pData == NULL ) || (Size == 0U)) 
 8006430:	b1a9      	cbz	r1, 800645e <HAL_UART_Transmit_IT+0x36>
 8006432:	b1a2      	cbz	r2, 800645e <HAL_UART_Transmit_IT+0x36>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8006434:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8006438:	2b01      	cmp	r3, #1
 800643a:	d012      	beq.n	8006462 <HAL_UART_Transmit_IT+0x3a>
    
    huart->pTxBuffPtr = pData;
 800643c:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 800643e:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8006440:	84c2      	strh	r2, [r0, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006442:	2300      	movs	r3, #0

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Transmit data register empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006444:	6801      	ldr	r1, [r0, #0]
    
    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006446:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006448:	2221      	movs	r2, #33	; 0x21
 800644a:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Transmit data register empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800644e:	68ca      	ldr	r2, [r1, #12]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006450:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006454:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006458:	60ca      	str	r2, [r1, #12]
    
    return HAL_OK;
 800645a:	4618      	mov	r0, r3
 800645c:	4770      	bx	lr
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U)) 
    {
      return HAL_ERROR;
 800645e:	2001      	movs	r0, #1
 8006460:	4770      	bx	lr
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;   
 8006462:	2002      	movs	r0, #2
  }
}
 8006464:	4770      	bx	lr

08006466 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 8006466:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800646a:	2b20      	cmp	r3, #32
 800646c:	d11c      	bne.n	80064a8 <HAL_UART_Receive_IT+0x42>
  {
    if((pData == NULL ) || (Size == 0U)) 
 800646e:	b1c9      	cbz	r1, 80064a4 <HAL_UART_Receive_IT+0x3e>
 8006470:	b1c2      	cbz	r2, 80064a4 <HAL_UART_Receive_IT+0x3e>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8006472:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8006476:	2b01      	cmp	r3, #1
 8006478:	d016      	beq.n	80064a8 <HAL_UART_Receive_IT+0x42>
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
 800647a:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 800647c:	85c2      	strh	r2, [r0, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647e:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006480:	2222      	movs	r2, #34	; 0x22
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006482:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006484:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006488:	6802      	ldr	r2, [r0, #0]
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
    
    huart->pRxBuffPtr = pData;
 800648a:	6281      	str	r1, [r0, #40]	; 0x28
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800648c:	6951      	ldr	r1, [r2, #20]
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800648e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006492:	f041 0101 	orr.w	r1, r1, #1
 8006496:	6151      	str	r1, [r2, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006498:	68d1      	ldr	r1, [r2, #12]
 800649a:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 800649e:	60d1      	str	r1, [r2, #12]
    
    return HAL_OK;
 80064a0:	4618      	mov	r0, r3
 80064a2:	4770      	bx	lr
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U)) 
    {
      return HAL_ERROR;
 80064a4:	2001      	movs	r0, #1
 80064a6:	4770      	bx	lr
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY; 
 80064a8:	2002      	movs	r0, #2
  }
}
 80064aa:	4770      	bx	lr

080064ac <UART_Receive_IT>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80064ac:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80064b0:	2b22      	cmp	r3, #34	; 0x22
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064b2:	b510      	push	{r4, lr}
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80064b4:	d132      	bne.n	800651c <UART_Receive_IT+0x70>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80064b6:	6883      	ldr	r3, [r0, #8]
 80064b8:	6901      	ldr	r1, [r0, #16]
 80064ba:	6802      	ldr	r2, [r0, #0]
 80064bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80064c2:	d10b      	bne.n	80064dc <UART_Receive_IT+0x30>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 80064c4:	6852      	ldr	r2, [r2, #4]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
 80064c6:	b921      	cbnz	r1, 80064d2 <UART_Receive_IT+0x26>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 80064c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064cc:	f823 2b02 	strh.w	r2, [r3], #2
 80064d0:	e002      	b.n	80064d8 <UART_Receive_IT+0x2c>
        huart->pRxBuffPtr += 2U;
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FFU);
 80064d2:	b2d2      	uxtb	r2, r2
 80064d4:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 80064d8:	6283      	str	r3, [r0, #40]	; 0x28
 80064da:	e00a      	b.n	80064f2 <UART_Receive_IT+0x46>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80064dc:	b919      	cbnz	r1, 80064e6 <UART_Receive_IT+0x3a>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FFU);
 80064de:	1c59      	adds	r1, r3, #1
 80064e0:	6281      	str	r1, [r0, #40]	; 0x28
 80064e2:	6852      	ldr	r2, [r2, #4]
 80064e4:	e004      	b.n	80064f0 <UART_Receive_IT+0x44>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
 80064e6:	6852      	ldr	r2, [r2, #4]
 80064e8:	1c59      	adds	r1, r3, #1
 80064ea:	6281      	str	r1, [r0, #40]	; 0x28
 80064ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80064f0:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 80064f2:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80064f4:	3c01      	subs	r4, #1
 80064f6:	b2a4      	uxth	r4, r4
 80064f8:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80064fa:	b98c      	cbnz	r4, 8006520 <UART_Receive_IT+0x74>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064fc:	6803      	ldr	r3, [r0, #0]
 80064fe:	68da      	ldr	r2, [r3, #12]
 8006500:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006504:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006506:	695a      	ldr	r2, [r3, #20]
 8006508:	f022 0201 	bic.w	r2, r2, #1
 800650c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800650e:	2320      	movs	r3, #32
 8006510:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8006514:	f7fb fdca 	bl	80020ac <HAL_UART_RxCpltCallback>
 8006518:	4620      	mov	r0, r4
 800651a:	bd10      	pop	{r4, pc}
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800651c:	2002      	movs	r0, #2
 800651e:	bd10      	pop	{r4, pc}
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
      }
    }

    if(--huart->RxXferCount == 0U)
 8006520:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006522:	bd10      	pop	{r4, pc}

08006524 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006524:	4770      	bx	lr
	...

08006528 <HAL_UART_IRQHandler>:
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006528:	6803      	ldr	r3, [r0, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800652c:	68d9      	ldr	r1, [r3, #12]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800652e:	b570      	push	{r4, r5, r6, lr}
   uint32_t errorflags = 0x00U;
   uint32_t dmarequest = 0x00U;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if(errorflags == RESET)
 8006530:	0716      	lsls	r6, r2, #28
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006532:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006534:	695d      	ldr	r5, [r3, #20]
   uint32_t errorflags = 0x00U;
   uint32_t dmarequest = 0x00U;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if(errorflags == RESET)
 8006536:	d107      	bne.n	8006548 <HAL_UART_IRQHandler+0x20>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006538:	0696      	lsls	r6, r2, #26
 800653a:	d55a      	bpl.n	80065f2 <HAL_UART_IRQHandler+0xca>
 800653c:	068d      	lsls	r5, r1, #26
 800653e:	d558      	bpl.n	80065f2 <HAL_UART_IRQHandler+0xca>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
  }
}
 8006540:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if(errorflags == RESET)
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
    {
      UART_Receive_IT(huart);
 8006544:	f7ff bfb2 	b.w	80064ac <UART_Receive_IT>
      return;
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006548:	f015 0001 	ands.w	r0, r5, #1
 800654c:	d102      	bne.n	8006554 <HAL_UART_IRQHandler+0x2c>
 800654e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8006552:	d04e      	beq.n	80065f2 <HAL_UART_IRQHandler+0xca>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006554:	07d3      	lsls	r3, r2, #31
 8006556:	d505      	bpl.n	8006564 <HAL_UART_IRQHandler+0x3c>
 8006558:	05ce      	lsls	r6, r1, #23
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800655a:	bf42      	ittt	mi
 800655c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800655e:	f043 0301 	orrmi.w	r3, r3, #1
 8006562:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006564:	0755      	lsls	r5, r2, #29
 8006566:	d504      	bpl.n	8006572 <HAL_UART_IRQHandler+0x4a>
 8006568:	b118      	cbz	r0, 8006572 <HAL_UART_IRQHandler+0x4a>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800656a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800656c:	f043 0302 	orr.w	r3, r3, #2
 8006570:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006572:	0793      	lsls	r3, r2, #30
 8006574:	d504      	bpl.n	8006580 <HAL_UART_IRQHandler+0x58>
 8006576:	b118      	cbz	r0, 8006580 <HAL_UART_IRQHandler+0x58>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006578:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800657a:	f043 0304 	orr.w	r3, r3, #4
 800657e:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006580:	0716      	lsls	r6, r2, #28
 8006582:	d504      	bpl.n	800658e <HAL_UART_IRQHandler+0x66>
 8006584:	b118      	cbz	r0, 800658e <HAL_UART_IRQHandler+0x66>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006586:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006588:	f043 0308 	orr.w	r3, r3, #8
 800658c:	63e3      	str	r3, [r4, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800658e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006590:	2b00      	cmp	r3, #0
 8006592:	d066      	beq.n	8006662 <HAL_UART_IRQHandler+0x13a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006594:	0695      	lsls	r5, r2, #26
 8006596:	d504      	bpl.n	80065a2 <HAL_UART_IRQHandler+0x7a>
 8006598:	0688      	lsls	r0, r1, #26
 800659a:	d502      	bpl.n	80065a2 <HAL_UART_IRQHandler+0x7a>
      {
        UART_Receive_IT(huart);
 800659c:	4620      	mov	r0, r4
 800659e:	f7ff ff85 	bl	80064ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	695b      	ldr	r3, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065a6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80065a8:	0711      	lsls	r1, r2, #28
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065aa:	4620      	mov	r0, r4
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065ac:	d402      	bmi.n	80065b4 <HAL_UART_IRQHandler+0x8c>
 80065ae:	f013 0540 	ands.w	r5, r3, #64	; 0x40
 80065b2:	d01a      	beq.n	80065ea <HAL_UART_IRQHandler+0xc2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065b4:	f7ff fdde 	bl	8006174 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b8:	6823      	ldr	r3, [r4, #0]
 80065ba:	695a      	ldr	r2, [r3, #20]
 80065bc:	0652      	lsls	r2, r2, #25
 80065be:	d510      	bpl.n	80065e2 <HAL_UART_IRQHandler+0xba>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065c0:	695a      	ldr	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80065c2:	6b60      	ldr	r0, [r4, #52]	; 0x34
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065c8:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80065ca:	b150      	cbz	r0, 80065e2 <HAL_UART_IRQHandler+0xba>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065cc:	4b25      	ldr	r3, [pc, #148]	; (8006664 <HAL_UART_IRQHandler+0x13c>)
 80065ce:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065d0:	f7fd fbcc 	bl	8003d6c <HAL_DMA_Abort_IT>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	d044      	beq.n	8006662 <HAL_UART_IRQHandler+0x13a>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065d8:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
  }
}
 80065da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065de:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80065e0:	4718      	bx	r3
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80065e2:	4620      	mov	r0, r4
 80065e4:	f7ff ff9e 	bl	8006524 <HAL_UART_ErrorCallback>
 80065e8:	bd70      	pop	{r4, r5, r6, pc}
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80065ea:	f7ff ff9b 	bl	8006524 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ee:	63e5      	str	r5, [r4, #60]	; 0x3c
 80065f0:	bd70      	pop	{r4, r5, r6, pc}
    }
    return;
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065f2:	0616      	lsls	r6, r2, #24
 80065f4:	d527      	bpl.n	8006646 <HAL_UART_IRQHandler+0x11e>
 80065f6:	060d      	lsls	r5, r1, #24
 80065f8:	d525      	bpl.n	8006646 <HAL_UART_IRQHandler+0x11e>
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80065fa:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80065fe:	2a21      	cmp	r2, #33	; 0x21
 8006600:	d12f      	bne.n	8006662 <HAL_UART_IRQHandler+0x13a>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006602:	68a2      	ldr	r2, [r4, #8]
 8006604:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8006608:	6a22      	ldr	r2, [r4, #32]
 800660a:	d10a      	bne.n	8006622 <HAL_UART_IRQHandler+0xfa>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FFU);
 800660c:	8811      	ldrh	r1, [r2, #0]
 800660e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8006612:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8006614:	6921      	ldr	r1, [r4, #16]
 8006616:	b909      	cbnz	r1, 800661c <HAL_UART_IRQHandler+0xf4>
      {
        huart->pTxBuffPtr += 2U;
 8006618:	3202      	adds	r2, #2
 800661a:	e000      	b.n	800661e <HAL_UART_IRQHandler+0xf6>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800661c:	3201      	adds	r2, #1
 800661e:	6222      	str	r2, [r4, #32]
 8006620:	e003      	b.n	800662a <HAL_UART_IRQHandler+0x102>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FFU);
 8006622:	1c51      	adds	r1, r2, #1
 8006624:	6221      	str	r1, [r4, #32]
 8006626:	7812      	ldrb	r2, [r2, #0]
 8006628:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 800662a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800662c:	3a01      	subs	r2, #1
 800662e:	b292      	uxth	r2, r2
 8006630:	84e2      	strh	r2, [r4, #38]	; 0x26
 8006632:	b9b2      	cbnz	r2, 8006662 <HAL_UART_IRQHandler+0x13a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800663a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006642:	60da      	str	r2, [r3, #12]
 8006644:	bd70      	pop	{r4, r5, r6, pc}
    UART_Transmit_IT(huart);
    return;
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006646:	0650      	lsls	r0, r2, #25
 8006648:	d50b      	bpl.n	8006662 <HAL_UART_IRQHandler+0x13a>
 800664a:	064a      	lsls	r2, r1, #25
 800664c:	d509      	bpl.n	8006662 <HAL_UART_IRQHandler+0x13a>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800664e:	68da      	ldr	r2, [r3, #12]
 8006650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006654:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006656:	2320      	movs	r3, #32
 8006658:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 800665c:	4620      	mov	r0, r4
 800665e:	f7fb fd41 	bl	80020e4 <HAL_UART_TxCpltCallback>
 8006662:	bd70      	pop	{r4, r5, r6, pc}
 8006664:	08006669 	.word	0x08006669

08006668 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006668:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800666a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0;
 800666c:	2300      	movs	r3, #0
 800666e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0;
 8006670:	84c3      	strh	r3, [r0, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8006672:	f7ff ff57 	bl	8006524 <HAL_UART_ErrorCallback>
 8006676:	bd08      	pop	{r3, pc}

08006678 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006678:	680b      	ldr	r3, [r1, #0]
 800667a:	6a0a      	ldr	r2, [r1, #32]
 800667c:	2b01      	cmp	r3, #1
  * @param  Device: Pointer to SDRAM device instance
  * @param  Init: Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800667e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006682:	688b      	ldr	r3, [r1, #8]
 8006684:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8006688:	68cf      	ldr	r7, [r1, #12]
 800668a:	690e      	ldr	r6, [r1, #16]
 800668c:	694d      	ldr	r5, [r1, #20]
 800668e:	698c      	ldr	r4, [r1, #24]
 8006690:	f8d1 a01c 	ldr.w	sl, [r1, #28]
 8006694:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006698:	6801      	ldr	r1, [r0, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800669a:	d013      	beq.n	80066c4 <FMC_SDRAM_Init+0x4c>
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800669c:	ea4e 0e03 	orr.w	lr, lr, r3
 80066a0:	ea4e 0707 	orr.w	r7, lr, r7
 80066a4:	433e      	orrs	r6, r7
 80066a6:	4335      	orrs	r5, r6
 80066a8:	432c      	orrs	r4, r5
  if (Init->SDBank != FMC_SDRAM_BANK2) 
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80066aa:	f421 48ff 	bic.w	r8, r1, #32640	; 0x7f80
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80066ae:	ea44 010a 	orr.w	r1, r4, sl
 80066b2:	430a      	orrs	r2, r1
  if (Init->SDBank != FMC_SDRAM_BANK2) 
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80066b4:	f028 087f 	bic.w	r8, r8, #127	; 0x7f
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80066b8:	ea42 0309 	orr.w	r3, r2, r9
 80066bc:	ea43 0308 	orr.w	r3, r3, r8
                                               Init->WriteProtection    |\
                                               Init->SDClockPeriod      |\
                                               Init->ReadBurst          |\
                                               Init->ReadPipeDelay
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80066c0:	6003      	str	r3, [r0, #0]
 80066c2:	e017      	b.n	80066f4 <FMC_SDRAM_Init+0x7c>
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80066c4:	ea4a 0202 	orr.w	r2, sl, r2
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80066c8:	ea4e 0e03 	orr.w	lr, lr, r3
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80066cc:	ea42 0909 	orr.w	r9, r2, r9
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80066d0:	ea4e 0707 	orr.w	r7, lr, r7
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay);  
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80066d4:	6842      	ldr	r2, [r0, #4]
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80066d6:	433e      	orrs	r6, r7
                        Init->ReadPipeDelay);  
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80066d8:	f422 4cff 	bic.w	ip, r2, #32640	; 0x7f80
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80066dc:	4335      	orrs	r5, r6
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80066de:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
                        Init->ReadPipeDelay);  
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80066e2:	f02c 0c7f 	bic.w	ip, ip, #127	; 0x7f
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80066e6:	432c      	orrs	r4, r5
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80066e8:	ea49 0101 	orr.w	r1, r9, r1
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80066ec:	ea44 040c 	orr.w	r4, r4, ip
                       Init->MemoryDataWidth    |\
                       Init->InternalBankNumber |\
                       Init->CASLatency         |\
                       Init->WriteProtection);

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80066f0:	6001      	str	r1, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80066f2:	6044      	str	r4, [r0, #4]
  }  
  
  return HAL_OK;
}
 80066f4:	2000      	movs	r0, #0
 80066f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080066fa <FMC_SDRAM_Timing_Init>:
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Bank: SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80066fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80066fc:	2a01      	cmp	r2, #1
 80066fe:	f101 0404 	add.w	r4, r1, #4
 8006702:	680e      	ldr	r6, [r1, #0]
 8006704:	690a      	ldr	r2, [r1, #16]
 8006706:	f8d1 e014 	ldr.w	lr, [r1, #20]
 800670a:	698b      	ldr	r3, [r1, #24]
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800670c:	6887      	ldr	r7, [r0, #8]
 800670e:	e894 1030 	ldmia.w	r4, {r4, r5, ip}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006712:	d019      	beq.n	8006748 <FMC_SDRAM_Timing_Init+0x4e>
 8006714:	3e01      	subs	r6, #1
 8006716:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
 800671a:	3c01      	subs	r4, #1
 800671c:	4337      	orrs	r7, r6
 800671e:	ea47 1604 	orr.w	r6, r7, r4, lsl #4
 8006722:	3d01      	subs	r5, #1
 8006724:	f10c 31ff 	add.w	r1, ip, #4294967295
 8006728:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
 800672c:	3a01      	subs	r2, #1
 800672e:	ea45 3401 	orr.w	r4, r5, r1, lsl #12
 8006732:	ea44 4102 	orr.w	r1, r4, r2, lsl #16
 8006736:	f10e 32ff 	add.w	r2, lr, #4294967295
 800673a:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800673e:	3b01      	subs	r3, #1
 8006740:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
                       (((Timing->RPDelay)-1U) << 20U)             |\
                       (((Timing->RCDDelay)-1U) << 24U));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006744:	6083      	str	r3, [r0, #8]
 8006746:	e022      	b.n	800678e <FMC_SDRAM_Timing_Init+0x94>
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8006748:	f10e 3eff 	add.w	lr, lr, #4294967295
 800674c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8006750:	ea4f 5c0e 	mov.w	ip, lr, lsl #20
 8006754:	ea4c 3e01 	orr.w	lr, ip, r1, lsl #12
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006758:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
                        (((Timing->RPDelay)-1) << 20)); 
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800675c:	68c1      	ldr	r1, [r0, #12]
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800675e:	f427 4770 	bic.w	r7, r7, #61440	; 0xf000
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8006762:	ea4e 0c07 	orr.w	ip, lr, r7
 8006766:	3e01      	subs	r6, #1
 8006768:	f001 4e70 	and.w	lr, r1, #4026531840	; 0xf0000000
 800676c:	3c01      	subs	r4, #1
 800676e:	ea46 070e 	orr.w	r7, r6, lr
 8006772:	ea47 1604 	orr.w	r6, r7, r4, lsl #4
 8006776:	1e6c      	subs	r4, r5, #1
 8006778:	ea46 2404 	orr.w	r4, r6, r4, lsl #8
 800677c:	3a01      	subs	r2, #1
 800677e:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1)           |\
 8006782:	3b01      	subs	r3, #1
 8006784:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
                       (((Timing->RCDDelay)-1) << 24)));   

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006788:	f8c0 c008 	str.w	ip, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800678c:	60c3      	str	r3, [r0, #12]
  }
  return HAL_OK;
}
 800678e:	2000      	movs	r0, #0
 8006790:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006792 <FMC_SDRAM_SendCommand>:
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Timeout: Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006792:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t tmpr = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	9301      	str	r3, [sp, #4]
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Timeout: Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006798:	4604      	mov	r4, r0
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800679a:	e891 0009 	ldmia.w	r1, {r0, r3}
 800679e:	4303      	orrs	r3, r0
 80067a0:	68c8      	ldr	r0, [r1, #12]
 80067a2:	ea43 2040 	orr.w	r0, r3, r0, lsl #9
 80067a6:	688b      	ldr	r3, [r1, #8]
 80067a8:	3b01      	subs	r3, #1
 80067aa:	ea40 1343 	orr.w	r3, r0, r3, lsl #5
 80067ae:	9301      	str	r3, [sp, #4]
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
                    ((Command->ModeRegisterDefinition) << 9U)
                    );
    
  Device->SDCMR = tmpr;
 80067b0:	9b01      	ldr	r3, [sp, #4]
 80067b2:	6123      	str	r3, [r4, #16]
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Timeout: Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80067b4:	4615      	mov	r5, r2
                    );
    
  Device->SDCMR = tmpr;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80067b6:	f7fc fee3 	bl	8003580 <HAL_GetTick>
 80067ba:	4606      	mov	r6, r0

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80067bc:	69a0      	ldr	r0, [r4, #24]
 80067be:	f010 0020 	ands.w	r0, r0, #32
 80067c2:	d00a      	beq.n	80067da <FMC_SDRAM_SendCommand+0x48>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80067c4:	1c6b      	adds	r3, r5, #1
 80067c6:	d0f9      	beq.n	80067bc <FMC_SDRAM_SendCommand+0x2a>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80067c8:	b90d      	cbnz	r5, 80067ce <FMC_SDRAM_SendCommand+0x3c>
      {
        return HAL_TIMEOUT;
 80067ca:	2003      	movs	r0, #3
 80067cc:	e005      	b.n	80067da <FMC_SDRAM_SendCommand+0x48>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80067ce:	f7fc fed7 	bl	8003580 <HAL_GetTick>
 80067d2:	1b80      	subs	r0, r0, r6
 80067d4:	4285      	cmp	r5, r0
 80067d6:	d2f1      	bcs.n	80067bc <FMC_SDRAM_SendCommand+0x2a>
 80067d8:	e7f7      	b.n	80067ca <FMC_SDRAM_SendCommand+0x38>
      }
    }
  }

  return HAL_OK;
}
 80067da:	b002      	add	sp, #8
 80067dc:	bd70      	pop	{r4, r5, r6, pc}

080067de <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80067de:	6943      	ldr	r3, [r0, #20]
 80067e0:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 80067e4:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 80067e6:	2000      	movs	r0, #0
 80067e8:	4770      	bx	lr
	...

080067ec <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 80067ec:	b508      	push	{r3, lr}
  //
  // Assign memory to STemWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 80067ee:	4805      	ldr	r0, [pc, #20]	; (8006804 <GUI_X_Config+0x18>)
 80067f0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80067f4:	f00a f94a 	bl	8010a8c <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 80067f8:	4803      	ldr	r0, [pc, #12]	; (8006808 <GUI_X_Config+0x1c>)
}
 80067fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 80067fe:	f009 bcd5 	b.w	80101ac <GUI_SetDefaultFont>
 8006802:	bf00      	nop
 8006804:	20001ac0 	.word	0x20001ac0
 8006808:	0801dbdc 	.word	0x0801dbdc

0800680c <DMA2D_CopyBuffer.isra.1>:
/**
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index
  * @retval Status ( 0 : 0k , 1: error)
  */
static void DMA2D_CopyBuffer(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
 800680c:	b530      	push	{r4, r5, lr}
{
  U32 PixelFormat;

  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
  DMA2D->CR      = 0x00000000UL | (1 << 9);
 800680e:	4c0c      	ldr	r4, [pc, #48]	; (8006840 <DMA2D_CopyBuffer.isra.1+0x34>)
 8006810:	f44f 7500 	mov.w	r5, #512	; 0x200
 8006814:	6025      	str	r5, [r4, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;
 8006816:	60e0      	str	r0, [r4, #12]
  DMA2D->OMAR    = (U32)pDst;
 8006818:	63e1      	str	r1, [r4, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;
 800681a:	9903      	ldr	r1, [sp, #12]
 800681c:	6121      	str	r1, [r4, #16]
  DMA2D->OOR     = OffLineDst;
 800681e:	9904      	ldr	r1, [sp, #16]
 8006820:	6421      	str	r1, [r4, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = PixelFormat;

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 8006822:	b29b      	uxth	r3, r3
 8006824:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  DMA2D->OMAR    = (U32)pDst;
  DMA2D->FGOR    = OffLineSrc;
  DMA2D->OOR     = OffLineDst;

  /* Set up pixel format */
  DMA2D->FGPFCCR = PixelFormat;
 8006828:	2100      	movs	r1, #0
 800682a:	61e1      	str	r1, [r4, #28]

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 800682c:	6462      	str	r2, [r4, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;
 800682e:	6823      	ldr	r3, [r4, #0]
 8006830:	f043 0301 	orr.w	r3, r3, #1
 8006834:	6023      	str	r3, [r4, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START)
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	07db      	lsls	r3, r3, #31
 800683a:	d4fc      	bmi.n	8006836 <DMA2D_CopyBuffer.isra.1+0x2a>
    {
    }
}
 800683c:	bd30      	pop	{r4, r5, pc}
 800683e:	bf00      	nop
 8006840:	4002b000 	.word	0x4002b000

08006844 <CUSTOM_CopyRect>:
  * @param  xSize:       X size.
  * @param  ySize:       Y size.
  * @retval None
  */
static void CUSTOM_CopyRect(int LayerIndex, int x0, int y0, int x1, int y1, int xSize, int ySize)
{
 8006844:	b5f0      	push	{r4, r5, r6, r7, lr}
  U32 AddrSrc, AddrDst;

  AddrSrc = layer_prop[LayerIndex].address + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8006846:	4e0e      	ldr	r6, [pc, #56]	; (8006880 <CUSTOM_CopyRect+0x3c>)
  * @param  xSize:       X size.
  * @param  ySize:       Y size.
  * @retval None
  */
static void CUSTOM_CopyRect(int LayerIndex, int x0, int y0, int x1, int y1, int xSize, int ySize)
{
 8006848:	9f06      	ldr	r7, [sp, #24]
  U32 AddrSrc, AddrDst;

  AddrSrc = layer_prop[LayerIndex].address + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 800684a:	241c      	movs	r4, #28
 800684c:	4360      	muls	r0, r4
 800684e:	1835      	adds	r5, r6, r0
 8006850:	5830      	ldr	r0, [r6, r0]
 8006852:	68ec      	ldr	r4, [r5, #12]
 8006854:	696e      	ldr	r6, [r5, #20]
  AddrDst = layer_prop[LayerIndex].address + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, layer_prop[LayerIndex].xSize - xSize);
 8006856:	9d05      	ldr	r5, [sp, #20]
 8006858:	ebc7 0e04 	rsb	lr, r7, r4
 800685c:	fb05 3504 	mla	r5, r5, r4, r3
 8006860:	fb02 1404 	mla	r4, r2, r4, r1
 8006864:	f8cd e018 	str.w	lr, [sp, #24]
 8006868:	fb06 0105 	mla	r1, r6, r5, r0
 800686c:	f8cd e014 	str.w	lr, [sp, #20]
 8006870:	9b07      	ldr	r3, [sp, #28]
 8006872:	463a      	mov	r2, r7
 8006874:	fb06 0004 	mla	r0, r6, r4, r0
}
 8006878:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
{
  U32 AddrSrc, AddrDst;

  AddrSrc = layer_prop[LayerIndex].address + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
  AddrDst = layer_prop[LayerIndex].address + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, layer_prop[LayerIndex].xSize - xSize);
 800687c:	f7ff bfc6 	b.w	800680c <DMA2D_CopyBuffer.isra.1>
 8006880:	20001584 	.word	0x20001584

08006884 <CUSTOM_FillRect>:
  * @param  y1:          Y1 position
  * @param  PixelIndex:  Pixel index.
  * @retval None
  */
static void CUSTOM_FillRect(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex)
{
 8006884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006888:	9d08      	ldr	r5, [sp, #32]
 800688a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800688c:	4681      	mov	r9, r0
 800688e:	460c      	mov	r4, r1
 8006890:	4616      	mov	r6, r2
 8006892:	4698      	mov	r8, r3
  U32 BufferSize, AddrDst;
  int xSize, ySize;

  if (GUI_GetDrawMode() == GUI_DM_XOR)
 8006894:	f009 f9fa 	bl	800fc8c <GUI_GetDrawMode>
 8006898:	2801      	cmp	r0, #1
 800689a:	d111      	bne.n	80068c0 <CUSTOM_FillRect+0x3c>
    {
      LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 800689c:	2200      	movs	r2, #0
 800689e:	2119      	movs	r1, #25
 80068a0:	4648      	mov	r0, r9
 80068a2:	f007 fd83 	bl	800e3ac <LCD_SetDevFunc>
      LCD_FillRect(x0, y0, x1, y1);
 80068a6:	4642      	mov	r2, r8
 80068a8:	4631      	mov	r1, r6
 80068aa:	4620      	mov	r0, r4
 80068ac:	462b      	mov	r3, r5
 80068ae:	f007 ff05 	bl	800e6bc <LCD_FillRect>
      LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 80068b2:	4648      	mov	r0, r9
 80068b4:	4a1d      	ldr	r2, [pc, #116]	; (800692c <CUSTOM_FillRect+0xa8>)
 80068b6:	2119      	movs	r1, #25
      ySize = y1 - y0 + 1;
      BufferSize = GetBufferSize(LayerIndex);
      AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
      DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
    }
}
 80068b8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  if (GUI_GetDrawMode() == GUI_DM_XOR)
    {
      LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
      LCD_FillRect(x0, y0, x1, y1);
      LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 80068bc:	f007 bd76 	b.w	800e3ac <LCD_SetDevFunc>
    }
  else
    {
      xSize = x1 - x0 + 1;
 80068c0:	ebc4 0308 	rsb	r3, r4, r8
      ySize = y1 - y0 + 1;
      BufferSize = GetBufferSize(LayerIndex);
      AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80068c4:	f04f 0e1c 	mov.w	lr, #28
 80068c8:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8006938 <CUSTOM_FillRect+0xb4>
 80068cc:	fb0e fe09 	mul.w	lr, lr, r9
 80068d0:	eb08 0c0e 	add.w	ip, r8, lr

  /* Set up pixel format */
  DMA2D->OPFCCR  = PixelFormat;

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 80068d4:	1bad      	subs	r5, r5, r6
  else
    {
      xSize = x1 - x0 + 1;
      ySize = y1 - y0 + 1;
      BufferSize = GetBufferSize(LayerIndex);
      AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80068d6:	f8dc 000c 	ldr.w	r0, [ip, #12]
 80068da:	f8dc 2010 	ldr.w	r2, [ip, #16]
 80068de:	f8dc 9014 	ldr.w	r9, [ip, #20]
 80068e2:	f8dc c008 	ldr.w	ip, [ip, #8]
 80068e6:	4342      	muls	r2, r0
 80068e8:	fb09 f102 	mul.w	r1, r9, r2
 80068ec:	f858 200e 	ldr.w	r2, [r8, lr]
 80068f0:	fb00 4406 	mla	r4, r0, r6, r4
 80068f4:	fb0c 2201 	mla	r2, ip, r1, r2
 80068f8:	fb09 2204 	mla	r2, r9, r4, r2

  /* Set up pixel format */
  DMA2D->OPFCCR  = PixelFormat;

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 80068fc:	3501      	adds	r5, #1
  U32 PixelFormat;

  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);

  /* Set up mode */
  DMA2D->CR      = 0x00030000UL | (1 << 9);
 80068fe:	4c0c      	ldr	r4, [pc, #48]	; (8006930 <CUSTOM_FillRect+0xac>)
 8006900:	490c      	ldr	r1, [pc, #48]	; (8006934 <CUSTOM_FillRect+0xb0>)
 8006902:	6021      	str	r1, [r4, #0]
      LCD_FillRect(x0, y0, x1, y1);
      LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
    }
  else
    {
      xSize = x1 - x0 + 1;
 8006904:	3301      	adds	r3, #1

  /* Set up pixel format */
  DMA2D->OPFCCR  = PixelFormat;

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 8006906:	b2ad      	uxth	r5, r5

  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);

  /* Set up mode */
  DMA2D->CR      = 0x00030000UL | (1 << 9);
  DMA2D->OCOLR   = ColorIndex;
 8006908:	63a7      	str	r7, [r4, #56]	; 0x38
    {
      xSize = x1 - x0 + 1;
      ySize = y1 - y0 + 1;
      BufferSize = GetBufferSize(LayerIndex);
      AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
      DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 800690a:	1ac0      	subs	r0, r0, r3
  /* Set up mode */
  DMA2D->CR      = 0x00030000UL | (1 << 9);
  DMA2D->OCOLR   = ColorIndex;

  /* Set up pointers */
  DMA2D->OMAR    = (U32)pDst;
 800690c:	63e2      	str	r2, [r4, #60]	; 0x3c

  /* Set up pixel format */
  DMA2D->OPFCCR  = PixelFormat;

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 800690e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16

  /* Set up offsets */
  DMA2D->OOR     = OffLine;

  /* Set up pixel format */
  DMA2D->OPFCCR  = PixelFormat;
 8006912:	2200      	movs	r2, #0

  /* Set up pointers */
  DMA2D->OMAR    = (U32)pDst;

  /* Set up offsets */
  DMA2D->OOR     = OffLine;
 8006914:	6420      	str	r0, [r4, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->OPFCCR  = PixelFormat;
 8006916:	6362      	str	r2, [r4, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 8006918:	6465      	str	r5, [r4, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	f043 0301 	orr.w	r3, r3, #1
 8006920:	6023      	str	r3, [r4, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START)
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	07db      	lsls	r3, r3, #31
 8006926:	d4fc      	bmi.n	8006922 <CUSTOM_FillRect+0x9e>
      ySize = y1 - y0 + 1;
      BufferSize = GetBufferSize(LayerIndex);
      AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
      DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
    }
}
 8006928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800692c:	08006885 	.word	0x08006885
 8006930:	4002b000 	.word	0x4002b000
 8006934:	00030200 	.word	0x00030200
 8006938:	20001584 	.word	0x20001584

0800693c <CUSTOM_CopyBuffer>:
  * @param  IndexSrc:    index source
  * @param  IndexDst:    index destination
  * @retval None
  */
static void CUSTOM_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst)
{
 800693c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  */
static U32 GetBufferSize(U32 LayerIndex)
{
  U32 BufferSize;

  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 800693e:	231c      	movs	r3, #28
 8006940:	4f0b      	ldr	r7, [pc, #44]	; (8006970 <CUSTOM_CopyBuffer+0x34>)
 8006942:	4358      	muls	r0, r3
 8006944:	183c      	adds	r4, r7, r0
  * @param  IndexSrc:    index source
  * @param  IndexDst:    index destination
  * @retval None
  */
static void CUSTOM_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst)
{
 8006946:	4616      	mov	r6, r2
  */
static U32 GetBufferSize(U32 LayerIndex)
{
  U32 BufferSize;

  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8006948:	6923      	ldr	r3, [r4, #16]
 800694a:	68e2      	ldr	r2, [r4, #12]
 800694c:	6965      	ldr	r5, [r4, #20]
static void CUSTOM_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst)
{
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
 800694e:	583f      	ldr	r7, [r7, r0]
  */
static U32 GetBufferSize(U32 LayerIndex)
{
  U32 BufferSize;

  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8006950:	fb03 fe02 	mul.w	lr, r3, r2
 8006954:	fb05 f50e 	mul.w	r5, r5, lr
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
  AddrDst    = layer_prop[LayerIndex].address + BufferSize * IndexDst;
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 8006958:	fb05 7001 	mla	r0, r5, r1, r7
 800695c:	2100      	movs	r1, #0
 800695e:	9101      	str	r1, [sp, #4]
 8006960:	9100      	str	r1, [sp, #0]
 8006962:	fb05 7106 	mla	r1, r5, r6, r7
 8006966:	f7ff ff51 	bl	800680c <DMA2D_CopyBuffer.isra.1>
  layer_prop[LayerIndex].buffer_index = IndexDst;
 800696a:	60a6      	str	r6, [r4, #8]
}
 800696c:	b003      	add	sp, #12
 800696e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006970:	20001584 	.word	0x20001584

08006974 <CUSTOM_DrawBitmap32bpp>:
  * @param  xSize: X size
  * @param  ySize: Y size
  * @retval None
  */
static void CUSTOM_DrawBitmap32bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 8006974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8006978:	f04f 0c1c 	mov.w	ip, #28
 800697c:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80069d4 <CUSTOM_DrawBitmap32bpp+0x60>
  * @param  xSize: X size
  * @param  ySize: Y size
  * @retval None
  */
static void CUSTOM_DrawBitmap32bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 8006980:	9e07      	ldr	r6, [sp, #28]
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8006982:	fb0c fc00 	mul.w	ip, ip, r0
 8006986:	eb08 090c 	add.w	r9, r8, ip
  * @param  xSize: X size
  * @param  ySize: Y size
  * @retval None
  */
static void CUSTOM_DrawBitmap32bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 800698a:	461f      	mov	r7, r3
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800698c:	f8d9 e00c 	ldr.w	lr, [r9, #12]
  OffLineSrc = (BytesPerLine / 4) - xSize;
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8006990:	f8d9 4010 	ldr.w	r4, [r9, #16]
 8006994:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8006998:	f8d9 9008 	ldr.w	r9, [r9, #8]
  * @param  xSize: X size
  * @param  ySize: Y size
  * @retval None
  */
static void CUSTOM_DrawBitmap32bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 800699c:	9b08      	ldr	r3, [sp, #32]

  BufferSize = GetBufferSize(LayerIndex);
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
  OffLineSrc = (BytesPerLine / 4) - xSize;
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 800699e:	fb04 f40e 	mul.w	r4, r4, lr
 80069a2:	fb00 f504 	mul.w	r5, r0, r4
 80069a6:	f858 400c 	ldr.w	r4, [r8, ip]
 80069aa:	fb02 110e 	mla	r1, r2, lr, r1
 80069ae:	ebc6 020e 	rsb	r2, r6, lr
 80069b2:	fb09 4405 	mla	r4, r9, r5, r4
 80069b6:	9208      	str	r2, [sp, #32]
 80069b8:	2504      	movs	r5, #4
 80069ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069bc:	fb92 f2f5 	sdiv	r2, r2, r5
 80069c0:	1b92      	subs	r2, r2, r6
 80069c2:	9207      	str	r2, [sp, #28]
 80069c4:	fb00 4101 	mla	r1, r0, r1, r4
 80069c8:	4632      	mov	r2, r6
 80069ca:	4638      	mov	r0, r7
}
 80069cc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}

  BufferSize = GetBufferSize(LayerIndex);
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
  OffLineSrc = (BytesPerLine / 4) - xSize;
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 80069d0:	f7ff bf1c 	b.w	800680c <DMA2D_CopyBuffer.isra.1>
 80069d4:	20001584 	.word	0x20001584

080069d8 <HAL_DMA2D_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80069d8:	b082      	sub	sp, #8
  /* Enable peripheral */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80069da:	2300      	movs	r3, #0
 80069dc:	9301      	str	r3, [sp, #4]
 80069de:	4b06      	ldr	r3, [pc, #24]	; (80069f8 <HAL_DMA2D_MspInit+0x20>)
 80069e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069e2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80069e6:	631a      	str	r2, [r3, #48]	; 0x30
 80069e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069ee:	9301      	str	r3, [sp, #4]
 80069f0:	9b01      	ldr	r3, [sp, #4]
}
 80069f2:	b002      	add	sp, #8
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	40023800 	.word	0x40023800

080069fc <HAL_LTDC_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80069fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069fe:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_Init_Structure;
  
  /* Enable peripherals and GPIO Clocks */  
  /* Enable the LTDC Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8006a00:	4b48      	ldr	r3, [pc, #288]	; (8006b24 <HAL_LTDC_MspInit+0x128>)
  HAL_GPIO_Init(GPIOA, &GPIO_Init_Structure);

 /* GPIOB configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | \
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_Init_Structure);
 8006a02:	4f49      	ldr	r7, [pc, #292]	; (8006b28 <HAL_LTDC_MspInit+0x12c>)
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Pull = GPIO_NOPULL;
  GPIO_Init_Structure.Speed = GPIO_SPEED_FAST;
  GPIO_Init_Structure.Alternate= GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOA, &GPIO_Init_Structure);
 8006a04:	4849      	ldr	r0, [pc, #292]	; (8006b2c <HAL_LTDC_MspInit+0x130>)
  HAL_GPIO_Init(GPIOF, &GPIO_Init_Structure);     

 /* GPIOG configuration */  
  GPIO_Init_Structure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 8006a06:	4e4a      	ldr	r6, [pc, #296]	; (8006b30 <HAL_LTDC_MspInit+0x134>)
{
  GPIO_InitTypeDef GPIO_Init_Structure;
  
  /* Enable peripherals and GPIO Clocks */  
  /* Enable the LTDC Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8006a08:	2400      	movs	r4, #0
 8006a0a:	9400      	str	r4, [sp, #0]
 8006a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a0e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006a12:	645a      	str	r2, [r3, #68]	; 0x44
 8006a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a16:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8006a1a:	9200      	str	r2, [sp, #0]
 8006a1c:	9a00      	ldr	r2, [sp, #0]
  
  /* Enable GPIO Clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a1e:	9401      	str	r4, [sp, #4]
 8006a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a22:	f042 0201 	orr.w	r2, r2, #1
 8006a26:	631a      	str	r2, [r3, #48]	; 0x30
 8006a28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a2a:	f002 0201 	and.w	r2, r2, #1
 8006a2e:	9201      	str	r2, [sp, #4]
 8006a30:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a32:	9402      	str	r4, [sp, #8]
 8006a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a36:	f042 0202 	orr.w	r2, r2, #2
 8006a3a:	631a      	str	r2, [r3, #48]	; 0x30
 8006a3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a3e:	f002 0202 	and.w	r2, r2, #2
 8006a42:	9202      	str	r2, [sp, #8]
 8006a44:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a46:	9403      	str	r4, [sp, #12]
 8006a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a4a:	f042 0204 	orr.w	r2, r2, #4
 8006a4e:	631a      	str	r2, [r3, #48]	; 0x30
 8006a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a52:	f002 0204 	and.w	r2, r2, #4
 8006a56:	9203      	str	r2, [sp, #12]
 8006a58:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a5a:	9404      	str	r4, [sp, #16]
 8006a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a5e:	f042 0208 	orr.w	r2, r2, #8
 8006a62:	631a      	str	r2, [r3, #48]	; 0x30
 8006a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a66:	f002 0208 	and.w	r2, r2, #8
 8006a6a:	9204      	str	r2, [sp, #16]
 8006a6c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006a6e:	9405      	str	r4, [sp, #20]
 8006a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a72:	f042 0220 	orr.w	r2, r2, #32
 8006a76:	631a      	str	r2, [r3, #48]	; 0x30
 8006a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a7a:	f002 0220 	and.w	r2, r2, #32
 8006a7e:	9205      	str	r2, [sp, #20]
 8006a80:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006a82:	9406      	str	r4, [sp, #24]
 8006a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a8a:	631a      	str	r2, [r3, #48]	; 0x30
 8006a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30

  /* GPIOA configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Pull = GPIO_NOPULL;
 8006a8e:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a94:	9306      	str	r3, [sp, #24]
 8006a96:	9b06      	ldr	r3, [sp, #24]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8006a98:	f641 0358 	movw	r3, #6232	; 0x1858
 8006a9c:	9307      	str	r3, [sp, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Pull = GPIO_NOPULL;
  GPIO_Init_Structure.Speed = GPIO_SPEED_FAST;
  GPIO_Init_Structure.Alternate= GPIO_AF14_LTDC;
 8006a9e:	250e      	movs	r5, #14
  */

  /* GPIOA configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8006aa0:	2302      	movs	r3, #2
  GPIO_Init_Structure.Pull = GPIO_NOPULL;
  GPIO_Init_Structure.Speed = GPIO_SPEED_FAST;
  GPIO_Init_Structure.Alternate= GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOA, &GPIO_Init_Structure);
 8006aa2:	a907      	add	r1, sp, #28
  */

  /* GPIOA configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8006aa4:	9308      	str	r3, [sp, #32]
  GPIO_Init_Structure.Pull = GPIO_NOPULL;
  GPIO_Init_Structure.Speed = GPIO_SPEED_FAST;
 8006aa6:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_Init_Structure.Alternate= GPIO_AF14_LTDC;
 8006aa8:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_Init_Structure);
 8006aaa:	f7fd fa5b 	bl	8003f64 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | \
 8006aae:	f44f 6370 	mov.w	r3, #3840	; 0xf00
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_Init_Structure);
 8006ab2:	a907      	add	r1, sp, #28
 8006ab4:	4638      	mov	r0, r7
  GPIO_Init_Structure.Speed = GPIO_SPEED_FAST;
  GPIO_Init_Structure.Alternate= GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOA, &GPIO_Init_Structure);

 /* GPIOB configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | \
 8006ab6:	9307      	str	r3, [sp, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_Init_Structure);
 8006ab8:	f7fd fa54 	bl	8003f64 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8006abc:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
  HAL_GPIO_Init(GPIOC, &GPIO_Init_Structure);
 8006ac0:	a907      	add	r1, sp, #28
 8006ac2:	481c      	ldr	r0, [pc, #112]	; (8006b34 <HAL_LTDC_MspInit+0x138>)
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | \
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_Init_Structure);

 /* GPIOC configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8006ac4:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_Init_Structure);
 8006ac6:	f7fd fa4d 	bl	8003f64 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8006aca:	2348      	movs	r3, #72	; 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8006acc:	a907      	add	r1, sp, #28
 8006ace:	481a      	ldr	r0, [pc, #104]	; (8006b38 <HAL_LTDC_MspInit+0x13c>)
 /* GPIOC configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOC, &GPIO_Init_Structure);

 /* GPIOD configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8006ad0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8006ad2:	f7fd fa47 	bl	8003f64 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_10;
 8006ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOF, &GPIO_Init_Structure);     
 8006ada:	a907      	add	r1, sp, #28
 8006adc:	4817      	ldr	r0, [pc, #92]	; (8006b3c <HAL_LTDC_MspInit+0x140>)
 /* GPIOD configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
  
 /* GPIOF configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_10;
 8006ade:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_Init_Structure);     
 8006ae0:	f7fd fa40 	bl	8003f64 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_Init_Structure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8006ae4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 8006ae8:	a907      	add	r1, sp, #28
 8006aea:	4630      	mov	r0, r6
 /* GPIOF configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_10;
  HAL_GPIO_Init(GPIOF, &GPIO_Init_Structure);     

 /* GPIOG configuration */  
  GPIO_Init_Structure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8006aec:	9307      	str	r3, [sp, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 8006aee:	f7fd fa39 	bl	8003f64 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_Init_Structure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8006af2:	2303      	movs	r3, #3
 8006af4:	9307      	str	r3, [sp, #28]
  GPIO_Init_Structure.Alternate= GPIO_AF9_LTDC;
  HAL_GPIO_Init(GPIOB, &GPIO_Init_Structure);
 8006af6:	a907      	add	r1, sp, #28
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 
  /* GPIOB configuration */  
  GPIO_Init_Structure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
  GPIO_Init_Structure.Alternate= GPIO_AF9_LTDC;
 8006af8:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOB, &GPIO_Init_Structure);
 8006afa:	4638      	mov	r0, r7
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 
  /* GPIOB configuration */  
  GPIO_Init_Structure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
  GPIO_Init_Structure.Alternate= GPIO_AF9_LTDC;
 8006afc:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_Init_Structure);
 8006afe:	f7fd fa31 	bl	8003f64 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_Init_Structure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8006b02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 8006b06:	a907      	add	r1, sp, #28
 8006b08:	4630      	mov	r0, r6
  GPIO_Init_Structure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
  GPIO_Init_Structure.Alternate= GPIO_AF9_LTDC;
  HAL_GPIO_Init(GPIOB, &GPIO_Init_Structure);

  /* GPIOG configuration */  
  GPIO_Init_Structure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8006b0a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 8006b0c:	f7fd fa2a 	bl	8003f64 <HAL_GPIO_Init>

  /* Set LTDC Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(LTDC_IRQn, 0xE, 0);
 8006b10:	4622      	mov	r2, r4
 8006b12:	4629      	mov	r1, r5
 8006b14:	2058      	movs	r0, #88	; 0x58
 8006b16:	f7fc ff8d 	bl	8003a34 <HAL_NVIC_SetPriority>
  
  /* Enable LTDC Interrupt */
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8006b1a:	2058      	movs	r0, #88	; 0x58
 8006b1c:	f7fc ffbe 	bl	8003a9c <HAL_NVIC_EnableIRQ>
}
 8006b20:	b00d      	add	sp, #52	; 0x34
 8006b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b24:	40023800 	.word	0x40023800
 8006b28:	40020400 	.word	0x40020400
 8006b2c:	40020000 	.word	0x40020000
 8006b30:	40021800 	.word	0x40021800
 8006b34:	40020800 	.word	0x40020800
 8006b38:	40020c00 	.word	0x40020c00
 8006b3c:	40021400 	.word	0x40021400

08006b40 <HAL_LTDC_MspDeInit>:
  */
void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* hltdc)
{
  /* Reset peripherals */
  /* Enable LTDC reset state */
  __HAL_RCC_LTDC_FORCE_RESET();
 8006b40:	4b04      	ldr	r3, [pc, #16]	; (8006b54 <HAL_LTDC_MspDeInit+0x14>)
 8006b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b44:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006b48:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Release LTDC from reset state */ 
  __HAL_RCC_LTDC_RELEASE_RESET();
 8006b4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b4c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8006b50:	625a      	str	r2, [r3, #36]	; 0x24
 8006b52:	4770      	bx	lr
 8006b54:	40023800 	.word	0x40023800

08006b58 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the specified LTDC.
  * @retval None
  */
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc)
{
 8006b58:	b538      	push	{r3, r4, r5, lr}
  U32 Addr;
  U32 layer;

  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
    {
      if (layer_prop[layer].pending_buffer >= 0)
 8006b5a:	4c11      	ldr	r4, [pc, #68]	; (8006ba0 <HAL_LTDC_LineEventCallback+0x48>)
 8006b5c:	6863      	ldr	r3, [r4, #4]
 8006b5e:	2b00      	cmp	r3, #0
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the specified LTDC.
  * @retval None
  */
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc)
{
 8006b60:	4605      	mov	r5, r0
  U32 Addr;
  U32 layer;

  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
    {
      if (layer_prop[layer].pending_buffer >= 0)
 8006b62:	db17      	blt.n	8006b94 <HAL_LTDC_LineEventCallback+0x3c>
        {
          /* Calculate address of buffer to be used  as visible frame buffer */
          Addr = layer_prop[layer].address + \
 8006b64:	68e2      	ldr	r2, [r4, #12]
 8006b66:	6923      	ldr	r3, [r4, #16]
                 layer_prop[layer].xSize * layer_prop[layer].ySize * layer_prop[layer].pending_buffer * layer_prop[layer].BytesPerPixel;
 8006b68:	6861      	ldr	r1, [r4, #4]
  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
    {
      if (layer_prop[layer].pending_buffer >= 0)
        {
          /* Calculate address of buffer to be used  as visible frame buffer */
          Addr = layer_prop[layer].address + \
 8006b6a:	4353      	muls	r3, r2
 8006b6c:	fb01 f203 	mul.w	r2, r1, r3
 8006b70:	6961      	ldr	r1, [r4, #20]
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	fb01 3302 	mla	r3, r1, r2, r3
                 layer_prop[layer].xSize * layer_prop[layer].ySize * layer_prop[layer].pending_buffer * layer_prop[layer].BytesPerPixel;

          __HAL_LTDC_LAYER(hltdc, layer)->CFBAR = Addr;
 8006b78:	6802      	ldr	r2, [r0, #0]
 8006b7a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

          __HAL_LTDC_RELOAD_CONFIG(hltdc);
 8006b7e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006b80:	f043 0301 	orr.w	r3, r3, #1
 8006b84:	6253      	str	r3, [r2, #36]	; 0x24

          /* Notify STemWin that buffer is used */
          GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);
 8006b86:	6861      	ldr	r1, [r4, #4]
 8006b88:	2000      	movs	r0, #0
 8006b8a:	f008 ffff 	bl	800fb8c <GUI_MULTIBUF_ConfirmEx>

          /* Clear pending buffer flag of layer */
          layer_prop[layer].pending_buffer = -1;
 8006b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b92:	6063      	str	r3, [r4, #4]
        }
    }

  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8006b94:	4628      	mov	r0, r5
 8006b96:	2100      	movs	r1, #0
}
 8006b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
          /* Clear pending buffer flag of layer */
          layer_prop[layer].pending_buffer = -1;
        }
    }

  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8006b9c:	f7fe b948 	b.w	8004e30 <HAL_LTDC_ProgramLineEvent>
 8006ba0:	20001584 	.word	0x20001584

08006ba4 <LCD_X_Config>:
  *          display driver configuration
  * @param  None
  * @retval None
  */
void LCD_X_Config(void)
{
 8006ba4:	b570      	push	{r4, r5, r6, lr}
  */
static void LCD_LL_Init(void)
{
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  /* DeInit */
  HAL_LTDC_DeInit(&hltdc);
 8006ba6:	4c48      	ldr	r4, [pc, #288]	; (8006cc8 <LCD_X_Config+0x124>)
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f7fd ff97 	bl	8004adc <HAL_LTDC_DeInit>

  /* Initializaton of ILI9341 component*/
  ili9341_Init();
 8006bae:	f7fb fe49 	bl	8002844 <ili9341_Init>

  /* Set LCD Timings */
  hltdc.Init.HorizontalSync = 9; //9
 8006bb2:	2309      	movs	r3, #9
 8006bb4:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 1;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8006bba:	231d      	movs	r3, #29
 8006bbc:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 3;
  hltdc.Init.AccumulatedActiveH = 323;
 8006bbe:	f240 1343 	movw	r3, #323	; 0x143
 8006bc2:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.AccumulatedActiveW = 269;
 8006bc4:	f240 130d 	movw	r3, #269	; 0x10d
 8006bc8:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.TotalHeigh = 327;
 8006bca:	f240 1347 	movw	r3, #327	; 0x147
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 MHz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 MHz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 MHz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/8 = 6 MHz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8006bce:	483f      	ldr	r0, [pc, #252]	; (8006ccc <LCD_X_Config+0x128>)
  hltdc.Init.VerticalSync = 1;
  hltdc.Init.AccumulatedHBP = 29;
  hltdc.Init.AccumulatedVBP = 3;
  hltdc.Init.AccumulatedActiveH = 323;
  hltdc.Init.AccumulatedActiveW = 269;
  hltdc.Init.TotalHeigh = 327;
 8006bd0:	6323      	str	r3, [r4, #48]	; 0x30
  hltdc.Init.TotalWidth = 279;
 8006bd2:	f240 1317 	movw	r3, #279	; 0x117
 8006bd6:	62e3      	str	r3, [r4, #44]	; 0x2c
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 MHz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 MHz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 MHz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/8 = 6 MHz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8006bd8:	2308      	movs	r3, #8
 8006bda:	6003      	str	r3, [r0, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8006bdc:	23c0      	movs	r3, #192	; 0xc0
 8006bde:	6103      	str	r3, [r0, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8006be0:	2304      	movs	r3, #4
  hltdc.Init.AccumulatedActiveW = 269;
  hltdc.Init.TotalHeigh = 327;
  hltdc.Init.TotalWidth = 279;

  /* background value */
  hltdc.Init.Backcolor.Blue = 0;
 8006be2:	2500      	movs	r5, #0
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 MHz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 MHz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/8 = 6 MHz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8006be4:	6183      	str	r3, [r0, #24]

  /* Set LCD Timings */
  hltdc.Init.HorizontalSync = 9; //9
  hltdc.Init.VerticalSync = 1;
  hltdc.Init.AccumulatedHBP = 29;
  hltdc.Init.AccumulatedVBP = 3;
 8006be6:	2603      	movs	r6, #3
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 MHz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/8 = 6 MHz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8006be8:	f44f 3300 	mov.w	r3, #131072	; 0x20000

  /* Set LCD Timings */
  hltdc.Init.HorizontalSync = 9; //9
  hltdc.Init.VerticalSync = 1;
  hltdc.Init.AccumulatedHBP = 29;
  hltdc.Init.AccumulatedVBP = 3;
 8006bec:	6226      	str	r6, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 269;
  hltdc.Init.TotalHeigh = 327;
  hltdc.Init.TotalWidth = 279;

  /* background value */
  hltdc.Init.Backcolor.Blue = 0;
 8006bee:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8006bf2:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8006bf6:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 MHz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/8 = 6 MHz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8006bfa:	6243      	str	r3, [r0, #36]	; 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8006bfc:	f7fe fbbc 	bl	8005378 <HAL_RCCEx_PeriphCLKConfig>
  /* Polarity */
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
  hltdc.Instance = LTDC;
 8006c00:	4b33      	ldr	r3, [pc, #204]	; (8006cd0 <LCD_X_Config+0x12c>)
 8006c02:	6023      	str	r3, [r4, #0]

  HAL_LTDC_Init(&hltdc);
 8006c04:	4620      	mov	r0, r4
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);

  /* Polarity */
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8006c06:	6065      	str	r5, [r4, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8006c08:	60a5      	str	r5, [r4, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8006c0a:	60e5      	str	r5, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8006c0c:	6125      	str	r5, [r4, #16]
  hltdc.Instance = LTDC;

  HAL_LTDC_Init(&hltdc);
 8006c0e:	f7fd fef1 	bl	80049f4 <HAL_LTDC_Init>
  HAL_LTDC_ProgramLineEvent(&hltdc, 0);
 8006c12:	4629      	mov	r1, r5
 8006c14:	4620      	mov	r0, r4
 8006c16:	f7fe f90b 	bl	8004e30 <HAL_LTDC_ProgramLineEvent>

  /* Configure the DMA2D  default mode */
  hdma2d.Init.Mode         = DMA2D_R2M;
 8006c1a:	482e      	ldr	r0, [pc, #184]	; (8006cd4 <LCD_X_Config+0x130>)
 8006c1c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8006c20:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode    = DMA2D_ARGB8888;
  hdma2d.Init.OutputOffset = 0x0;

  hdma2d.Instance          = DMA2D;
 8006c22:	4b2d      	ldr	r3, [pc, #180]	; (8006cd8 <LCD_X_Config+0x134>)
  HAL_LTDC_Init(&hltdc);
  HAL_LTDC_ProgramLineEvent(&hltdc, 0);

  /* Configure the DMA2D  default mode */
  hdma2d.Init.Mode         = DMA2D_R2M;
  hdma2d.Init.ColorMode    = DMA2D_ARGB8888;
 8006c24:	6085      	str	r5, [r0, #8]
  hdma2d.Init.OutputOffset = 0x0;
 8006c26:	60c5      	str	r5, [r0, #12]

  hdma2d.Instance          = DMA2D;
 8006c28:	6003      	str	r3, [r0, #0]

  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8006c2a:	f7fd f96f 	bl	8003f0c <HAL_DMA2D_Init>
 8006c2e:	4604      	mov	r4, r0
 8006c30:	b100      	cbz	r0, 8006c34 <LCD_X_Config+0x90>
 8006c32:	e7fe      	b.n	8006c32 <LCD_X_Config+0x8e>

  /* At first initialize use of multiple buffers on demand */
#if (NUM_BUFFERS > 1)
  for (i = 0; i < GUI_NUM_LAYERS; i++)
    {
      GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
 8006c34:	4631      	mov	r1, r6
 8006c36:	f008 ffc1 	bl	800fbbc <GUI_MULTIBUF_ConfigEx>
    }
#endif

  /* Set display driver and color conversion for 1st layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 8006c3a:	4623      	mov	r3, r4
 8006c3c:	4622      	mov	r2, r4
 8006c3e:	4927      	ldr	r1, [pc, #156]	; (8006cdc <LCD_X_Config+0x138>)
 8006c40:	4827      	ldr	r0, [pc, #156]	; (8006ce0 <LCD_X_Config+0x13c>)
 8006c42:	f009 fa49 	bl	80100d8 <GUI_DEVICE_CreateAndLink>

  /* Set size of 1st layer */
  if (LCD_GetSwapXYEx(0))
 8006c46:	4620      	mov	r0, r4
 8006c48:	f007 fc00 	bl	800e44c <LCD_GetSwapXYEx>
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	b150      	cbz	r0, 8006c66 <LCD_X_Config+0xc2>
    {
      LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 8006c50:	22f0      	movs	r2, #240	; 0xf0
 8006c52:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006c56:	4620      	mov	r0, r4
 8006c58:	f007 fb48 	bl	800e2ec <LCD_SetSizeEx>
      LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 8006c5c:	22f0      	movs	r2, #240	; 0xf0
 8006c5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006c62:	4620      	mov	r0, r4
 8006c64:	e008      	b.n	8006c78 <LCD_X_Config+0xd4>
    }
  else
    {
      LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 8006c66:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006c6a:	21f0      	movs	r1, #240	; 0xf0
 8006c6c:	f007 fb3e 	bl	800e2ec <LCD_SetSizeEx>
      LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8006c70:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006c74:	21f0      	movs	r1, #240	; 0xf0
 8006c76:	4628      	mov	r0, r5
    }
#endif


  /*Initialize GUI Layer structure */
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 8006c78:	4c1a      	ldr	r4, [pc, #104]	; (8006ce4 <LCD_X_Config+0x140>)
      LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
    }
  else
    {
      LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
      LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8006c7a:	f007 fb1f 	bl	800e2bc <LCD_SetVSizeEx>

  /* Setting up VRam address and custom functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++)
    {

      layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 8006c7e:	4b17      	ldr	r3, [pc, #92]	; (8006cdc <LCD_X_Config+0x138>)
    }
#endif


  /*Initialize GUI Layer structure */
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 8006c80:	4919      	ldr	r1, [pc, #100]	; (8006ce8 <LCD_X_Config+0x144>)

  /* Setting up VRam address and custom functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++)
    {

      layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 8006c82:	61a3      	str	r3, [r4, #24]

      layer_prop[i].pending_buffer = -1;
 8006c84:	f04f 33ff 	mov.w	r3, #4294967295
 8006c88:	6063      	str	r3, [r4, #4]
    }
#endif


  /*Initialize GUI Layer structure */
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 8006c8a:	6021      	str	r1, [r4, #0]
      layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];

      layer_prop[i].pending_buffer = -1;

      /* Set VRAM address */
      LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	f007 faff 	bl	800e290 <LCD_SetVRAMAddrEx>

      /* Remember color depth for further operations */
      layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8006c92:	2000      	movs	r0, #0
 8006c94:	f007 fbce 	bl	800e434 <LCD_GetBitsPerPixelEx>
 8006c98:	10c0      	asrs	r0, r0, #3
 8006c9a:	6160      	str	r0, [r4, #20]

      /* Set custom functions for several operations */
      LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))CUSTOM_CopyBuffer);
 8006c9c:	4a13      	ldr	r2, [pc, #76]	; (8006cec <LCD_X_Config+0x148>)
 8006c9e:	2121      	movs	r1, #33	; 0x21
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	f007 fb83 	bl	800e3ac <LCD_SetDevFunc>
      LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))CUSTOM_CopyRect);
 8006ca6:	4a12      	ldr	r2, [pc, #72]	; (8006cf0 <LCD_X_Config+0x14c>)
 8006ca8:	2123      	movs	r1, #35	; 0x23
 8006caa:	2000      	movs	r0, #0
 8006cac:	f007 fb7e 	bl	800e3ac <LCD_SetDevFunc>
      LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 8006cb0:	4a10      	ldr	r2, [pc, #64]	; (8006cf4 <LCD_X_Config+0x150>)
 8006cb2:	2119      	movs	r1, #25
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	f007 fb79 	bl	800e3ac <LCD_SetDevFunc>

      /* Set up drawing routine for 32bpp bitmap using DMA2D */
      if (LCD_LL_GetPixelformat(i) == LTDC_PIXEL_FORMAT_ARGB8888)
        {
          LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_32BPP, (void(*)(void))CUSTOM_DrawBitmap32bpp);     /* Set up drawing routine for 32bpp bitmap using DMA2D. Makes only sense with ARGB8888 */
 8006cba:	4a0f      	ldr	r2, [pc, #60]	; (8006cf8 <LCD_X_Config+0x154>)
 8006cbc:	2128      	movs	r1, #40	; 0x28
 8006cbe:	2000      	movs	r0, #0
        }
    }
}
 8006cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);

      /* Set up drawing routine for 32bpp bitmap using DMA2D */
      if (LCD_LL_GetPixelformat(i) == LTDC_PIXEL_FORMAT_ARGB8888)
        {
          LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_32BPP, (void(*)(void))CUSTOM_DrawBitmap32bpp);     /* Set up drawing routine for 32bpp bitmap using DMA2D. Makes only sense with ARGB8888 */
 8006cc4:	f007 bb72 	b.w	800e3ac <LCD_SetDevFunc>
 8006cc8:	20021ac0 	.word	0x20021ac0
 8006ccc:	200015a0 	.word	0x200015a0
 8006cd0:	40016800 	.word	0x40016800
 8006cd4:	20001544 	.word	0x20001544
 8006cd8:	4002b000 	.word	0x4002b000
 8006cdc:	08020b28 	.word	0x08020b28
 8006ce0:	080209c8 	.word	0x080209c8
 8006ce4:	20001584 	.word	0x20001584
 8006ce8:	d0200000 	.word	0xd0200000
 8006cec:	0800693d 	.word	0x0800693d
 8006cf0:	08006845 	.word	0x08006845
 8006cf4:	08006885 	.word	0x08006885
 8006cf8:	08006975 	.word	0x08006975

08006cfc <LCD_X_DisplayDriver>:
  * @param  Cmd       :Please refer to the details in the switch statement below
  * @param  pData     :Pointer to a LCD_X_DATA structure
  * @retval Status (-1 : Error,  0 : Ok)
  */
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData)
{
 8006cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  int r = 0;
  U32 addr;
  int xPos, yPos;
  U32 Color;

  switch (Cmd)
 8006cfe:	3901      	subs	r1, #1
  * @param  Cmd       :Please refer to the details in the switch statement below
  * @param  pData     :Pointer to a LCD_X_DATA structure
  * @retval Status (-1 : Error,  0 : Ok)
  */
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData)
{
 8006d00:	b08f      	sub	sp, #60	; 0x3c
 8006d02:	4604      	mov	r4, r0
 8006d04:	4615      	mov	r5, r2
  int r = 0;
  U32 addr;
  int xPos, yPos;
  U32 Color;

  switch (Cmd)
 8006d06:	290d      	cmp	r1, #13
 8006d08:	f200 80ac 	bhi.w	8006e64 <LCD_X_DisplayDriver+0x168>
 8006d0c:	e8df f001 	tbb	[pc, r1]
 8006d10:	4b34aa07 	.word	0x4b34aa07
 8006d14:	74775852 	.word	0x74775852
 8006d18:	90aa8a5f 	.word	0x90aa8a5f
 8006d1c:	449a      	.short	0x449a
  */
static void LCD_LL_LayerInit(U32 LayerIndex)
{
  LTDC_LayerCfgTypeDef             layer_cfg;

  if (LayerIndex < GUI_NUM_LAYERS)
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	f040 809e 	bne.w	8006e60 <LCD_X_DisplayDriver+0x164>
      layer_cfg.WindowX0 = 0;
      layer_cfg.WindowX1 = XSIZE_PHYS;
      layer_cfg.WindowY0 = 0;
      layer_cfg.WindowY1 = YSIZE_PHYS;
      layer_cfg.PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
      layer_cfg.FBStartAdress = layer_prop[LayerIndex].address;
 8006d24:	4951      	ldr	r1, [pc, #324]	; (8006e6c <LCD_X_DisplayDriver+0x170>)
  LTDC_LayerCfgTypeDef             layer_cfg;

  if (LayerIndex < GUI_NUM_LAYERS)
    {
      /* Layer configuration */
      layer_cfg.WindowX0 = 0;
 8006d26:	9001      	str	r0, [sp, #4]
      layer_cfg.WindowX1 = XSIZE_PHYS;
      layer_cfg.WindowY0 = 0;
      layer_cfg.WindowY1 = YSIZE_PHYS;
      layer_cfg.PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
      layer_cfg.FBStartAdress = layer_prop[LayerIndex].address;
 8006d28:	6809      	ldr	r1, [r1, #0]
 8006d2a:	910a      	str	r1, [sp, #40]	; 0x28
      layer_cfg.Alpha = 255;
 8006d2c:	21ff      	movs	r1, #255	; 0xff
 8006d2e:	9106      	str	r1, [sp, #24]
      layer_cfg.Alpha0 = 0;
      layer_cfg.Backcolor.Blue = 0;
      layer_cfg.Backcolor.Green = 0;
      layer_cfg.Backcolor.Red = 0;
      layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8006d30:	f44f 61c0 	mov.w	r1, #1536	; 0x600

  if (LayerIndex < GUI_NUM_LAYERS)
    {
      /* Layer configuration */
      layer_cfg.WindowX0 = 0;
      layer_cfg.WindowX1 = XSIZE_PHYS;
 8006d34:	22f0      	movs	r2, #240	; 0xf0
      layer_cfg.Alpha = 255;
      layer_cfg.Alpha0 = 0;
      layer_cfg.Backcolor.Blue = 0;
      layer_cfg.Backcolor.Green = 0;
      layer_cfg.Backcolor.Red = 0;
      layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8006d36:	9108      	str	r1, [sp, #32]
      layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006d38:	2107      	movs	r1, #7
    {
      /* Layer configuration */
      layer_cfg.WindowX0 = 0;
      layer_cfg.WindowX1 = XSIZE_PHYS;
      layer_cfg.WindowY0 = 0;
      layer_cfg.WindowY1 = YSIZE_PHYS;
 8006d3a:	f44f 73a0 	mov.w	r3, #320	; 0x140

  if (LayerIndex < GUI_NUM_LAYERS)
    {
      /* Layer configuration */
      layer_cfg.WindowX0 = 0;
      layer_cfg.WindowX1 = XSIZE_PHYS;
 8006d3e:	9202      	str	r2, [sp, #8]
      layer_cfg.WindowY0 = 0;
 8006d40:	9003      	str	r0, [sp, #12]
      layer_cfg.WindowY1 = YSIZE_PHYS;
      layer_cfg.PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 8006d42:	9005      	str	r0, [sp, #20]
      layer_cfg.FBStartAdress = layer_prop[LayerIndex].address;
      layer_cfg.Alpha = 255;
      layer_cfg.Alpha0 = 0;
 8006d44:	9007      	str	r0, [sp, #28]
      layer_cfg.Backcolor.Blue = 0;
 8006d46:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
      layer_cfg.Backcolor.Green = 0;
 8006d4a:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
      layer_cfg.Backcolor.Red = 0;
 8006d4e:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
      layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
      layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006d52:	9109      	str	r1, [sp, #36]	; 0x24
      layer_cfg.ImageWidth = XSIZE_PHYS;
 8006d54:	920b      	str	r2, [sp, #44]	; 0x2c
      layer_cfg.ImageHeight = YSIZE_PHYS;
      HAL_LTDC_ConfigLayer(&hltdc, &layer_cfg, LayerIndex);
 8006d56:	a901      	add	r1, sp, #4
 8006d58:	4602      	mov	r2, r0
 8006d5a:	4845      	ldr	r0, [pc, #276]	; (8006e70 <LCD_X_DisplayDriver+0x174>)
    {
      /* Layer configuration */
      layer_cfg.WindowX0 = 0;
      layer_cfg.WindowX1 = XSIZE_PHYS;
      layer_cfg.WindowY0 = 0;
      layer_cfg.WindowY1 = YSIZE_PHYS;
 8006d5c:	9304      	str	r3, [sp, #16]
      layer_cfg.Backcolor.Green = 0;
      layer_cfg.Backcolor.Red = 0;
      layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
      layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
      layer_cfg.ImageWidth = XSIZE_PHYS;
      layer_cfg.ImageHeight = YSIZE_PHYS;
 8006d5e:	930c      	str	r3, [sp, #48]	; 0x30
      HAL_LTDC_ConfigLayer(&hltdc, &layer_cfg, LayerIndex);
 8006d60:	f7fd ff2d 	bl	8004bbe <HAL_LTDC_ConfigLayer>

      /* Enable LUT on demand */
      if (LCD_GetBitsPerPixelEx(LayerIndex) <= 8)
 8006d64:	4620      	mov	r0, r4
 8006d66:	f007 fb65 	bl	800e434 <LCD_GetBitsPerPixelEx>
 8006d6a:	2808      	cmp	r0, #8
 8006d6c:	dc78      	bgt.n	8006e60 <LCD_X_DisplayDriver+0x164>
        {
          /* Enable usage of LUT for all modes with <= 8bpp*/
          HAL_LTDC_EnableCLUT(&hltdc, LayerIndex);
 8006d6e:	4621      	mov	r1, r4
 8006d70:	483f      	ldr	r0, [pc, #252]	; (8006e70 <LCD_X_DisplayDriver+0x174>)
 8006d72:	f7fd ffd5 	bl	8004d20 <HAL_LTDC_EnableCLUT>
 8006d76:	e073      	b.n	8006e60 <LCD_X_DisplayDriver+0x164>
    case LCD_X_INITCONTROLLER:
      LCD_LL_LayerInit(LayerIndex);
      break;

    case LCD_X_SETORG:
      addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 8006d78:	4e3c      	ldr	r6, [pc, #240]	; (8006e6c <LCD_X_DisplayDriver+0x170>)
 8006d7a:	231c      	movs	r3, #28
 8006d7c:	4343      	muls	r3, r0
 8006d7e:	18f7      	adds	r7, r6, r3
      HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 8006d80:	6850      	ldr	r0, [r2, #4]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	6979      	ldr	r1, [r7, #20]
 8006d86:	58f3      	ldr	r3, [r6, r3]
 8006d88:	4350      	muls	r0, r2
 8006d8a:	fb01 3100 	mla	r1, r1, r0, r3
 8006d8e:	4622      	mov	r2, r4
 8006d90:	4837      	ldr	r0, [pc, #220]	; (8006e70 <LCD_X_DisplayDriver+0x174>)
 8006d92:	f7fe f82d 	bl	8004df0 <HAL_LTDC_SetAddress>
 8006d96:	e063      	b.n	8006e60 <LCD_X_DisplayDriver+0x164>
      break;

    case LCD_X_SHOWBUFFER:
      layer_prop[LayerIndex].pending_buffer = ((LCD_X_SHOWBUFFER_INFO *)pData)->Index;
 8006d98:	4934      	ldr	r1, [pc, #208]	; (8006e6c <LCD_X_DisplayDriver+0x170>)
 8006d9a:	6812      	ldr	r2, [r2, #0]
 8006d9c:	231c      	movs	r3, #28
 8006d9e:	fb03 1400 	mla	r4, r3, r0, r1
 8006da2:	6062      	str	r2, [r4, #4]
 8006da4:	e05c      	b.n	8006e60 <LCD_X_DisplayDriver+0x164>
      break;

    case LCD_X_SETLUTENTRY:
      HAL_LTDC_ConfigCLUT(&hltdc, (uint32_t *) & (((LCD_X_SETLUTENTRY_INFO *)pData)->Color), 1, LayerIndex);
 8006da6:	4603      	mov	r3, r0
 8006da8:	2201      	movs	r2, #1
 8006daa:	4629      	mov	r1, r5
 8006dac:	4830      	ldr	r0, [pc, #192]	; (8006e70 <LCD_X_DisplayDriver+0x174>)
 8006dae:	f7fd ff4b 	bl	8004c48 <HAL_LTDC_ConfigCLUT>
 8006db2:	e055      	b.n	8006e60 <LCD_X_DisplayDriver+0x164>
      break;

    case LCD_X_ON:
      __HAL_LTDC_ENABLE(&hltdc);
 8006db4:	4b2e      	ldr	r3, [pc, #184]	; (8006e70 <LCD_X_DisplayDriver+0x174>)
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	6993      	ldr	r3, [r2, #24]
 8006dba:	f043 0301 	orr.w	r3, r3, #1
 8006dbe:	e004      	b.n	8006dca <LCD_X_DisplayDriver+0xce>
      break;

    case LCD_X_OFF:
      __HAL_LTDC_DISABLE(&hltdc);
 8006dc0:	4b2b      	ldr	r3, [pc, #172]	; (8006e70 <LCD_X_DisplayDriver+0x174>)
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	6993      	ldr	r3, [r2, #24]
 8006dc6:	f023 0301 	bic.w	r3, r3, #1
 8006dca:	6193      	str	r3, [r2, #24]
 8006dcc:	e048      	b.n	8006e60 <LCD_X_DisplayDriver+0x164>
      break;

    case LCD_X_SETVIS:
      if (((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
 8006dce:	6813      	ldr	r3, [r2, #0]
 8006dd0:	4a27      	ldr	r2, [pc, #156]	; (8006e70 <LCD_X_DisplayDriver+0x174>)
 8006dd2:	2b01      	cmp	r3, #1
        {
          __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex);
 8006dd4:	6813      	ldr	r3, [r2, #0]
        }
      else
        {
          __HAL_LTDC_LAYER_DISABLE(&hltdc, LayerIndex);
        }
      __HAL_LTDC_RELOAD_CONFIG(&hltdc);
 8006dd6:	6812      	ldr	r2, [r2, #0]
      break;

    case LCD_X_SETVIS:
      if (((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
        {
          __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex);
 8006dd8:	f103 0384 	add.w	r3, r3, #132	; 0x84
 8006ddc:	ea4f 14c0 	mov.w	r4, r0, lsl #7
 8006de0:	5919      	ldr	r1, [r3, r4]
 8006de2:	bf0c      	ite	eq
 8006de4:	f041 0101 	orreq.w	r1, r1, #1
        }
      else
        {
          __HAL_LTDC_LAYER_DISABLE(&hltdc, LayerIndex);
 8006de8:	f021 0101 	bicne.w	r1, r1, #1
 8006dec:	5119      	str	r1, [r3, r4]
        }
      __HAL_LTDC_RELOAD_CONFIG(&hltdc);
 8006dee:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006df0:	f043 0301 	orr.w	r3, r3, #1
 8006df4:	6253      	str	r3, [r2, #36]	; 0x24
 8006df6:	e033      	b.n	8006e60 <LCD_X_DisplayDriver+0x164>
      break;

    case LCD_X_SETPOS:
      HAL_LTDC_SetWindowPosition(&hltdc,
 8006df8:	4603      	mov	r3, r0
 8006dfa:	ca06      	ldmia	r2, {r1, r2}
 8006dfc:	e00e      	b.n	8006e1c <LCD_X_DisplayDriver+0x120>
                                 ((LCD_X_SETPOS_INFO *)pData)->yPos,
                                 LayerIndex);
      break;

    case LCD_X_SETSIZE:
      GUI_GetLayerPosEx(LayerIndex, &xPos, &yPos);
 8006dfe:	aa01      	add	r2, sp, #4
 8006e00:	4669      	mov	r1, sp
 8006e02:	f008 fd4f 	bl	800f8a4 <GUI_GetLayerPosEx>
      layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 8006e06:	4a19      	ldr	r2, [pc, #100]	; (8006e6c <LCD_X_DisplayDriver+0x170>)
 8006e08:	231c      	movs	r3, #28
 8006e0a:	fb03 2304 	mla	r3, r3, r4, r2
 8006e0e:	682a      	ldr	r2, [r5, #0]
 8006e10:	60da      	str	r2, [r3, #12]
      layer_prop[LayerIndex].ySize = ((LCD_X_SETSIZE_INFO *)pData)->ySize;
 8006e12:	686a      	ldr	r2, [r5, #4]
 8006e14:	611a      	str	r2, [r3, #16]
      HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 8006e16:	e89d 0006 	ldmia.w	sp, {r1, r2}
 8006e1a:	4623      	mov	r3, r4
 8006e1c:	4814      	ldr	r0, [pc, #80]	; (8006e70 <LCD_X_DisplayDriver+0x174>)
 8006e1e:	f7fd ff99 	bl	8004d54 <HAL_LTDC_SetWindowPosition>
 8006e22:	e01d      	b.n	8006e60 <LCD_X_DisplayDriver+0x164>
      break;

    case LCD_X_SETALPHA:
      HAL_LTDC_SetAlpha(&hltdc, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
 8006e24:	4602      	mov	r2, r0
 8006e26:	6829      	ldr	r1, [r5, #0]
 8006e28:	4811      	ldr	r0, [pc, #68]	; (8006e70 <LCD_X_DisplayDriver+0x174>)
 8006e2a:	f7fd ffc1 	bl	8004db0 <HAL_LTDC_SetAlpha>
 8006e2e:	e017      	b.n	8006e60 <LCD_X_DisplayDriver+0x164>
      break;

    case LCD_X_SETCHROMAMODE:
      if (((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 8006e30:	6815      	ldr	r5, [r2, #0]
        {
          HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 8006e32:	4601      	mov	r1, r0
 8006e34:	480e      	ldr	r0, [pc, #56]	; (8006e70 <LCD_X_DisplayDriver+0x174>)
    case LCD_X_SETALPHA:
      HAL_LTDC_SetAlpha(&hltdc, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
      break;

    case LCD_X_SETCHROMAMODE:
      if (((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 8006e36:	b115      	cbz	r5, 8006e3e <LCD_X_DisplayDriver+0x142>
        {
          HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 8006e38:	f7fd ff3e 	bl	8004cb8 <HAL_LTDC_EnableColorKeying>
 8006e3c:	e010      	b.n	8006e60 <LCD_X_DisplayDriver+0x164>
        }
      else
        {
          HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);
 8006e3e:	f7fd ff55 	bl	8004cec <HAL_LTDC_DisableColorKeying>
 8006e42:	e00d      	b.n	8006e60 <LCD_X_DisplayDriver+0x164>
        }
      break;

    case LCD_X_SETCHROMA:

      Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) | \
 8006e44:	6813      	ldr	r3, [r2, #0]
              (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) | \
              ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);

      HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
 8006e46:	0419      	lsls	r1, r3, #16
 8006e48:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006e4c:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8006e50:	4311      	orrs	r1, r2
 8006e52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006e56:	4602      	mov	r2, r0
 8006e58:	4319      	orrs	r1, r3
 8006e5a:	4805      	ldr	r0, [pc, #20]	; (8006e70 <LCD_X_DisplayDriver+0x174>)
 8006e5c:	f7fd fed8 	bl	8004c10 <HAL_LTDC_ConfigColorKeying>
  * @param  pData     :Pointer to a LCD_X_DATA structure
  * @retval Status (-1 : Error,  0 : Ok)
  */
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData)
{
  int r = 0;
 8006e60:	2000      	movs	r0, #0
      Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) | \
              (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) | \
              ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);

      HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
      break;
 8006e62:	e001      	b.n	8006e68 <LCD_X_DisplayDriver+0x16c>

    default:
      r = -1;
 8006e64:	f04f 30ff 	mov.w	r0, #4294967295
    }
  return r;
}
 8006e68:	b00f      	add	sp, #60	; 0x3c
 8006e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e6c:	20001584 	.word	0x20001584
 8006e70:	20021ac0 	.word	0x20021ac0

08006e74 <GUI_X_GetTime>:
  and delay function. Default time unit (tick), normally is
  1 ms.
*/

GUI_TIMER_TIME GUI_X_GetTime(void) { 
  return OS_TimeMS; 
 8006e74:	4b01      	ldr	r3, [pc, #4]	; (8006e7c <GUI_X_GetTime+0x8>)
 8006e76:	6818      	ldr	r0, [r3, #0]
}
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	20021b68 	.word	0x20021b68

08006e80 <GUI_X_Init>:
 8006e80:	4770      	bx	lr

08006e82 <WINDOW_Callback>:
 8006e82:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e86:	6845      	ldr	r5, [r0, #4]
 8006e88:	4604      	mov	r4, r0
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	f009 fdd8 	bl	8010a40 <GUI_ALLOC_LockH>
 8006e90:	af02      	add	r7, sp, #8
 8006e92:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8006e94:	f847 0d08 	str.w	r0, [r7, #-8]!
 8006e98:	f8d0 9034 	ldr.w	r9, [r0, #52]	; 0x34
 8006e9c:	f8d0 8040 	ldr.w	r8, [r0, #64]	; 0x40
 8006ea0:	4668      	mov	r0, sp
 8006ea2:	f009 fddb 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	2b1f      	cmp	r3, #31
 8006eaa:	d02f      	beq.n	8006f0c <WINDOW_Callback+0x8a>
 8006eac:	dc06      	bgt.n	8006ebc <WINDOW_Callback+0x3a>
 8006eae:	2b0f      	cmp	r3, #15
 8006eb0:	d060      	beq.n	8006f74 <WINDOW_Callback+0xf2>
 8006eb2:	2b1e      	cmp	r3, #30
 8006eb4:	d015      	beq.n	8006ee2 <WINDOW_Callback+0x60>
 8006eb6:	2b0e      	cmp	r3, #14
 8006eb8:	d169      	bne.n	8006f8e <WINDOW_Callback+0x10c>
 8006eba:	e04a      	b.n	8006f52 <WINDOW_Callback+0xd0>
 8006ebc:	2b22      	cmp	r3, #34	; 0x22
 8006ebe:	d063      	beq.n	8006f88 <WINDOW_Callback+0x106>
 8006ec0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ec2:	d002      	beq.n	8006eca <WINDOW_Callback+0x48>
 8006ec4:	2b20      	cmp	r3, #32
 8006ec6:	d162      	bne.n	8006f8e <WINDOW_Callback+0x10c>
 8006ec8:	e025      	b.n	8006f16 <WINDOW_Callback+0x94>
 8006eca:	4628      	mov	r0, r5
 8006ecc:	f009 fdb8 	bl	8010a40 <GUI_ALLOC_LockH>
 8006ed0:	68e3      	ldr	r3, [r4, #12]
 8006ed2:	9000      	str	r0, [sp, #0]
 8006ed4:	b10b      	cbz	r3, 8006eda <WINDOW_Callback+0x58>
 8006ed6:	63c3      	str	r3, [r0, #60]	; 0x3c
 8006ed8:	e001      	b.n	8006ede <WINDOW_Callback+0x5c>
 8006eda:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006edc:	60e3      	str	r3, [r4, #12]
 8006ede:	4668      	mov	r0, sp
 8006ee0:	e034      	b.n	8006f4c <WINDOW_Callback+0xca>
 8006ee2:	68e4      	ldr	r4, [r4, #12]
 8006ee4:	2c01      	cmp	r4, #1
 8006ee6:	d15b      	bne.n	8006fa0 <WINDOW_Callback+0x11e>
 8006ee8:	4630      	mov	r0, r6
 8006eea:	f004 f835 	bl	800af58 <WM_IsWindow>
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	d03c      	beq.n	8006f6c <WINDOW_Callback+0xea>
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	f003 fd82 	bl	800a9fc <WM_SetFocus>
 8006ef8:	4630      	mov	r0, r6
 8006efa:	f004 f85f 	bl	800afbc <WM_HasFocus>
 8006efe:	2800      	cmp	r0, #0
 8006f00:	d04e      	beq.n	8006fa0 <WINDOW_Callback+0x11e>
 8006f02:	4630      	mov	r0, r6
 8006f04:	4621      	mov	r1, r4
 8006f06:	f000 f913 	bl	8007130 <WIDGET_OrState>
 8006f0a:	e049      	b.n	8006fa0 <WINDOW_Callback+0x11e>
 8006f0c:	4628      	mov	r0, r5
 8006f0e:	4621      	mov	r1, r4
 8006f10:	f000 f942 	bl	8007198 <WIDGET_HandleActive>
 8006f14:	e044      	b.n	8006fa0 <WINDOW_Callback+0x11e>
 8006f16:	4628      	mov	r0, r5
 8006f18:	f009 fd92 	bl	8010a40 <GUI_ALLOC_LockH>
 8006f1c:	68e4      	ldr	r4, [r4, #12]
 8006f1e:	9001      	str	r0, [sp, #4]
 8006f20:	b19c      	cbz	r4, 8006f4a <WINDOW_Callback+0xc8>
 8006f22:	6860      	ldr	r0, [r4, #4]
 8006f24:	4629      	mov	r1, r5
 8006f26:	f003 fbd0 	bl	800a6ca <WM__IsAncestorOrSelf>
 8006f2a:	b930      	cbnz	r0, 8006f3a <WINDOW_Callback+0xb8>
 8006f2c:	6820      	ldr	r0, [r4, #0]
 8006f2e:	4629      	mov	r1, r5
 8006f30:	f003 fbba 	bl	800a6a8 <WM__IsAncestor>
 8006f34:	b148      	cbz	r0, 8006f4a <WINDOW_Callback+0xc8>
 8006f36:	6822      	ldr	r2, [r4, #0]
 8006f38:	e005      	b.n	8006f46 <WINDOW_Callback+0xc4>
 8006f3a:	6860      	ldr	r0, [r4, #4]
 8006f3c:	4629      	mov	r1, r5
 8006f3e:	f003 fbb3 	bl	800a6a8 <WM__IsAncestor>
 8006f42:	b110      	cbz	r0, 8006f4a <WINDOW_Callback+0xc8>
 8006f44:	6862      	ldr	r2, [r4, #4]
 8006f46:	9b01      	ldr	r3, [sp, #4]
 8006f48:	639a      	str	r2, [r3, #56]	; 0x38
 8006f4a:	a801      	add	r0, sp, #4
 8006f4c:	f009 fd86 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8006f50:	e026      	b.n	8006fa0 <WINDOW_Callback+0x11e>
 8006f52:	68e3      	ldr	r3, [r4, #12]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	2a00      	cmp	r2, #0
 8006f58:	dd19      	ble.n	8006f8e <WINDOW_Callback+0x10c>
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b09      	cmp	r3, #9
 8006f5e:	d005      	beq.n	8006f6c <WINDOW_Callback+0xea>
 8006f60:	2b0a      	cmp	r3, #10
 8006f62:	d114      	bne.n	8006f8e <WINDOW_Callback+0x10c>
 8006f64:	4628      	mov	r0, r5
 8006f66:	f003 fce7 	bl	800a938 <WM_SetFocusOnPrevChild>
 8006f6a:	e019      	b.n	8006fa0 <WINDOW_Callback+0x11e>
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	f003 fd13 	bl	800a998 <WM_SetFocusOnNextChild>
 8006f72:	e015      	b.n	8006fa0 <WINDOW_Callback+0x11e>
 8006f74:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8006f78:	4598      	cmp	r8, r3
 8006f7a:	d008      	beq.n	8006f8e <WINDOW_Callback+0x10c>
 8006f7c:	4640      	mov	r0, r8
 8006f7e:	f007 fe65 	bl	800ec4c <LCD_SetBkColor>
 8006f82:	f009 f94b 	bl	801021c <GUI_Clear>
 8006f86:	e002      	b.n	8006f8e <WINDOW_Callback+0x10c>
 8006f88:	f8c4 800c 	str.w	r8, [r4, #12]
 8006f8c:	e008      	b.n	8006fa0 <WINDOW_Callback+0x11e>
 8006f8e:	f1b9 0f00 	cmp.w	r9, #0
 8006f92:	d002      	beq.n	8006f9a <WINDOW_Callback+0x118>
 8006f94:	4620      	mov	r0, r4
 8006f96:	47c8      	blx	r9
 8006f98:	e002      	b.n	8006fa0 <WINDOW_Callback+0x11e>
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f005 fad4 	bl	800c548 <WM_DefaultProc>
 8006fa0:	b003      	add	sp, #12
 8006fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08006fa8 <WINDOW_CreateUser>:
 8006fa8:	b510      	push	{r4, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	9c08      	ldr	r4, [sp, #32]
 8006fae:	9400      	str	r4, [sp, #0]
 8006fb0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006fb2:	9401      	str	r4, [sp, #4]
 8006fb4:	4c0f      	ldr	r4, [pc, #60]	; (8006ff4 <WINDOW_CreateUser+0x4c>)
 8006fb6:	9402      	str	r4, [sp, #8]
 8006fb8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8006fba:	3418      	adds	r4, #24
 8006fbc:	9403      	str	r4, [sp, #12]
 8006fbe:	f004 fed5 	bl	800bd6c <WM_CreateWindowAsChild>
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	b190      	cbz	r0, 8006fec <WINDOW_CreateUser+0x44>
 8006fc6:	f009 fd3b 	bl	8010a40 <GUI_ALLOC_LockH>
 8006fca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fcc:	9005      	str	r0, [sp, #20]
 8006fce:	2210      	movs	r2, #16
 8006fd0:	f000 f8da 	bl	8007188 <WIDGET__Init>
 8006fd4:	a806      	add	r0, sp, #24
 8006fd6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006fd8:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8006fdc:	6351      	str	r1, [r2, #52]	; 0x34
 8006fde:	2100      	movs	r1, #0
 8006fe0:	6391      	str	r1, [r2, #56]	; 0x38
 8006fe2:	4905      	ldr	r1, [pc, #20]	; (8006ff8 <WINDOW_CreateUser+0x50>)
 8006fe4:	6809      	ldr	r1, [r1, #0]
 8006fe6:	6411      	str	r1, [r2, #64]	; 0x40
 8006fe8:	f009 fd38 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8006fec:	4620      	mov	r0, r4
 8006fee:	b006      	add	sp, #24
 8006ff0:	bd10      	pop	{r4, pc}
 8006ff2:	bf00      	nop
 8006ff4:	08006e83 	.word	0x08006e83
 8006ff8:	200001a4 	.word	0x200001a4

08006ffc <WINDOW_CreateIndirect>:
 8006ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ffe:	b087      	sub	sp, #28
 8007000:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 8007004:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8007008:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 800700c:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8007010:	9100      	str	r1, [sp, #0]
 8007012:	8a41      	ldrh	r1, [r0, #18]
 8007014:	9101      	str	r1, [sp, #4]
 8007016:	2100      	movs	r1, #0
 8007018:	9102      	str	r1, [sp, #8]
 800701a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800701e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007020:	9103      	str	r1, [sp, #12]
 8007022:	9404      	str	r4, [sp, #16]
 8007024:	6984      	ldr	r4, [r0, #24]
 8007026:	9405      	str	r4, [sp, #20]
 8007028:	eb0e 0002 	add.w	r0, lr, r2
 800702c:	18f9      	adds	r1, r7, r3
 800702e:	4632      	mov	r2, r6
 8007030:	462b      	mov	r3, r5
 8007032:	f7ff ffb9 	bl	8006fa8 <WINDOW_CreateUser>
 8007036:	b007      	add	sp, #28
 8007038:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800703a <_EffectRequiresRedraw>:
 800703a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800703c:	460d      	mov	r5, r1
 800703e:	f100 0108 	add.w	r1, r0, #8
 8007042:	4602      	mov	r2, r0
 8007044:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007046:	c903      	ldmia	r1, {r0, r1}
 8007048:	681c      	ldr	r4, [r3, #0]
 800704a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800704e:	4610      	mov	r0, r2
 8007050:	4669      	mov	r1, sp
 8007052:	f003 fb03 	bl	800a65c <WM__Screen2Client>
 8007056:	f9b5 2000 	ldrsh.w	r2, [r5]
 800705a:	f9bd 3000 	ldrsh.w	r3, [sp]
 800705e:	4422      	add	r2, r4
 8007060:	429a      	cmp	r2, r3
 8007062:	dc17      	bgt.n	8007094 <_EffectRequiresRedraw+0x5a>
 8007064:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8007068:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800706c:	1b12      	subs	r2, r2, r4
 800706e:	429a      	cmp	r2, r3
 8007070:	db10      	blt.n	8007094 <_EffectRequiresRedraw+0x5a>
 8007072:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8007076:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 800707a:	4422      	add	r2, r4
 800707c:	429a      	cmp	r2, r3
 800707e:	dc09      	bgt.n	8007094 <_EffectRequiresRedraw+0x5a>
 8007080:	f9b5 0006 	ldrsh.w	r0, [r5, #6]
 8007084:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8007088:	1b04      	subs	r4, r0, r4
 800708a:	429c      	cmp	r4, r3
 800708c:	bfac      	ite	ge
 800708e:	2000      	movge	r0, #0
 8007090:	2001      	movlt	r0, #1
 8007092:	e000      	b.n	8007096 <_EffectRequiresRedraw+0x5c>
 8007094:	2001      	movs	r0, #1
 8007096:	b003      	add	sp, #12
 8007098:	bd30      	pop	{r4, r5, pc}

0800709a <WIDGET__RotateRect90>:
 800709a:	f9b0 3000 	ldrsh.w	r3, [r0]
 800709e:	b570      	push	{r4, r5, r6, lr}
 80070a0:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 80070a4:	8815      	ldrh	r5, [r2, #0]
 80070a6:	88d0      	ldrh	r0, [r2, #6]
 80070a8:	8894      	ldrh	r4, [r2, #4]
 80070aa:	8852      	ldrh	r2, [r2, #2]
 80070ac:	804d      	strh	r5, [r1, #2]
 80070ae:	1af3      	subs	r3, r6, r3
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	1a18      	subs	r0, r3, r0
 80070b4:	1a9b      	subs	r3, r3, r2
 80070b6:	8008      	strh	r0, [r1, #0]
 80070b8:	808b      	strh	r3, [r1, #4]
 80070ba:	80cc      	strh	r4, [r1, #6]
 80070bc:	bd70      	pop	{r4, r5, r6, pc}

080070be <WIDGET__GetClientRect>:
 80070be:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80070c0:	071b      	lsls	r3, r3, #28
 80070c2:	b513      	push	{r0, r1, r4, lr}
 80070c4:	460c      	mov	r4, r1
 80070c6:	d50f      	bpl.n	80070e8 <WIDGET__GetClientRect+0x2a>
 80070c8:	4668      	mov	r0, sp
 80070ca:	f004 f887 	bl	800b1dc <WM_GetClientRect>
 80070ce:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80070d2:	8023      	strh	r3, [r4, #0]
 80070d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80070d8:	80a3      	strh	r3, [r4, #4]
 80070da:	f8bd 3000 	ldrh.w	r3, [sp]
 80070de:	8063      	strh	r3, [r4, #2]
 80070e0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80070e4:	80e3      	strh	r3, [r4, #6]
 80070e6:	e002      	b.n	80070ee <WIDGET__GetClientRect+0x30>
 80070e8:	4608      	mov	r0, r1
 80070ea:	f004 f877 	bl	800b1dc <WM_GetClientRect>
 80070ee:	b002      	add	sp, #8
 80070f0:	bd10      	pop	{r4, pc}

080070f2 <WIDGET__GetInsideRect>:
 80070f2:	b538      	push	{r3, r4, r5, lr}
 80070f4:	4604      	mov	r4, r0
 80070f6:	460d      	mov	r5, r1
 80070f8:	f004 fdaf 	bl	800bc5a <WM__GetClientRectWin>
 80070fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80070fe:	4628      	mov	r0, r5
 8007100:	4629      	mov	r1, r5
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007108:	f007 be1e 	b.w	800ed48 <GUI__ReduceRect>

0800710c <WIDGET_SetState>:
 800710c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800710e:	460c      	mov	r4, r1
 8007110:	4605      	mov	r5, r0
 8007112:	f009 fc95 	bl	8010a40 <GUI_ALLOC_LockH>
 8007116:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8007118:	9001      	str	r0, [sp, #4]
 800711a:	4294      	cmp	r4, r2
 800711c:	d003      	beq.n	8007126 <WIDGET_SetState+0x1a>
 800711e:	8644      	strh	r4, [r0, #50]	; 0x32
 8007120:	4628      	mov	r0, r5
 8007122:	f004 fde2 	bl	800bcea <WM_InvalidateWindow>
 8007126:	a801      	add	r0, sp, #4
 8007128:	f009 fc98 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800712c:	b003      	add	sp, #12
 800712e:	bd30      	pop	{r4, r5, pc}

08007130 <WIDGET_OrState>:
 8007130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007132:	460c      	mov	r4, r1
 8007134:	4605      	mov	r5, r0
 8007136:	b178      	cbz	r0, 8007158 <WIDGET_OrState+0x28>
 8007138:	f009 fc82 	bl	8010a40 <GUI_ALLOC_LockH>
 800713c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800713e:	9001      	str	r0, [sp, #4]
 8007140:	ea04 0102 	and.w	r1, r4, r2
 8007144:	428c      	cmp	r4, r1
 8007146:	d004      	beq.n	8007152 <WIDGET_OrState+0x22>
 8007148:	4314      	orrs	r4, r2
 800714a:	8644      	strh	r4, [r0, #50]	; 0x32
 800714c:	4628      	mov	r0, r5
 800714e:	f004 fdcc 	bl	800bcea <WM_InvalidateWindow>
 8007152:	a801      	add	r0, sp, #4
 8007154:	f009 fc82 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007158:	b003      	add	sp, #12
 800715a:	bd30      	pop	{r4, r5, pc}

0800715c <WIDGET_AndState>:
 800715c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800715e:	460d      	mov	r5, r1
 8007160:	4604      	mov	r4, r0
 8007162:	b170      	cbz	r0, 8007182 <WIDGET_AndState+0x26>
 8007164:	f009 fc6c 	bl	8010a40 <GUI_ALLOC_LockH>
 8007168:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800716a:	9001      	str	r0, [sp, #4]
 800716c:	ea22 0105 	bic.w	r1, r2, r5
 8007170:	428a      	cmp	r2, r1
 8007172:	d003      	beq.n	800717c <WIDGET_AndState+0x20>
 8007174:	8641      	strh	r1, [r0, #50]	; 0x32
 8007176:	4620      	mov	r0, r4
 8007178:	f004 fdb7 	bl	800bcea <WM_InvalidateWindow>
 800717c:	a801      	add	r0, sp, #4
 800717e:	f009 fc6d 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007182:	b003      	add	sp, #12
 8007184:	bd30      	pop	{r4, r5, pc}
	...

08007188 <WIDGET__Init>:
 8007188:	4b02      	ldr	r3, [pc, #8]	; (8007194 <WIDGET__Init+0xc>)
 800718a:	8642      	strh	r2, [r0, #50]	; 0x32
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	62c3      	str	r3, [r0, #44]	; 0x2c
 8007190:	8601      	strh	r1, [r0, #48]	; 0x30
 8007192:	4770      	bx	lr
 8007194:	200001a8 	.word	0x200001a8

08007198 <WIDGET_HandleActive>:
 8007198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800719a:	460d      	mov	r5, r1
 800719c:	b085      	sub	sp, #20
 800719e:	4606      	mov	r6, r0
 80071a0:	2800      	cmp	r0, #0
 80071a2:	f000 8093 	beq.w	80072cc <WIDGET_HandleActive+0x134>
 80071a6:	f009 fc4b 	bl	8010a40 <GUI_ALLOC_LockH>
 80071aa:	682b      	ldr	r3, [r5, #0]
 80071ac:	9002      	str	r0, [sp, #8]
 80071ae:	2b16      	cmp	r3, #22
 80071b0:	d052      	beq.n	8007258 <WIDGET_HandleActive+0xc0>
 80071b2:	dc0c      	bgt.n	80071ce <WIDGET_HandleActive+0x36>
 80071b4:	2b11      	cmp	r3, #17
 80071b6:	d033      	beq.n	8007220 <WIDGET_HandleActive+0x88>
 80071b8:	dc02      	bgt.n	80071c0 <WIDGET_HandleActive+0x28>
 80071ba:	2b0d      	cmp	r3, #13
 80071bc:	d03e      	beq.n	800723c <WIDGET_HandleActive+0xa4>
 80071be:	e07e      	b.n	80072be <WIDGET_HandleActive+0x126>
 80071c0:	2b14      	cmp	r3, #20
 80071c2:	d077      	beq.n	80072b4 <WIDGET_HandleActive+0x11c>
 80071c4:	2b15      	cmp	r3, #21
 80071c6:	d17a      	bne.n	80072be <WIDGET_HandleActive+0x126>
 80071c8:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 80071cc:	e070      	b.n	80072b0 <WIDGET_HandleActive+0x118>
 80071ce:	2b1f      	cmp	r3, #31
 80071d0:	d06b      	beq.n	80072aa <WIDGET_HandleActive+0x112>
 80071d2:	dc02      	bgt.n	80071da <WIDGET_HandleActive+0x42>
 80071d4:	2b1e      	cmp	r3, #30
 80071d6:	d042      	beq.n	800725e <WIDGET_HandleActive+0xc6>
 80071d8:	e071      	b.n	80072be <WIDGET_HandleActive+0x126>
 80071da:	2b31      	cmp	r3, #49	; 0x31
 80071dc:	d01e      	beq.n	800721c <WIDGET_HandleActive+0x84>
 80071de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071e2:	d16c      	bne.n	80072be <WIDGET_HandleActive+0x126>
 80071e4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80071e6:	6819      	ldr	r1, [r3, #0]
 80071e8:	68eb      	ldr	r3, [r5, #12]
 80071ea:	62c3      	str	r3, [r0, #44]	; 0x2c
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	a802      	add	r0, sp, #8
 80071f0:	1acd      	subs	r5, r1, r3
 80071f2:	f009 fc33 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80071f6:	4630      	mov	r0, r6
 80071f8:	f009 fc22 	bl	8010a40 <GUI_ALLOC_LockH>
 80071fc:	ac04      	add	r4, sp, #16
 80071fe:	4269      	negs	r1, r5
 8007200:	f844 0d04 	str.w	r0, [r4, #-4]!
 8007204:	460a      	mov	r2, r1
 8007206:	462b      	mov	r3, r5
 8007208:	9500      	str	r5, [sp, #0]
 800720a:	f003 f98e 	bl	800a52a <WM__UpdateChildPositions>
 800720e:	4620      	mov	r0, r4
 8007210:	f009 fc24 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007214:	4630      	mov	r0, r6
 8007216:	f004 fd68 	bl	800bcea <WM_InvalidateWindow>
 800721a:	e04e      	b.n	80072ba <WIDGET_HandleActive+0x122>
 800721c:	2400      	movs	r4, #0
 800721e:	e03f      	b.n	80072a0 <WIDGET_HandleActive+0x108>
 8007220:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8007222:	06d9      	lsls	r1, r3, #27
 8007224:	d54b      	bpl.n	80072be <WIDGET_HandleActive+0x126>
 8007226:	68eb      	ldr	r3, [r5, #12]
 8007228:	7a1b      	ldrb	r3, [r3, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d047      	beq.n	80072be <WIDGET_HandleActive+0x126>
 800722e:	a802      	add	r0, sp, #8
 8007230:	f009 fc14 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007234:	4630      	mov	r0, r6
 8007236:	f003 fbe1 	bl	800a9fc <WM_SetFocus>
 800723a:	e040      	b.n	80072be <WIDGET_HandleActive+0x126>
 800723c:	68eb      	ldr	r3, [r5, #12]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d03c      	beq.n	80072be <WIDGET_HandleActive+0x126>
 8007244:	7a1b      	ldrb	r3, [r3, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d039      	beq.n	80072be <WIDGET_HandleActive+0x126>
 800724a:	a802      	add	r0, sp, #8
 800724c:	f009 fc06 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007250:	4630      	mov	r0, r6
 8007252:	f004 f80b 	bl	800b26c <WM_BringToTop>
 8007256:	e030      	b.n	80072ba <WIDGET_HandleActive+0x122>
 8007258:	68eb      	ldr	r3, [r5, #12]
 800725a:	8603      	strh	r3, [r0, #48]	; 0x30
 800725c:	e02d      	b.n	80072ba <WIDGET_HandleActive+0x122>
 800725e:	68eb      	ldr	r3, [r5, #12]
 8007260:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 8007262:	2b01      	cmp	r3, #1
 8007264:	d108      	bne.n	8007278 <WIDGET_HandleActive+0xe0>
 8007266:	06ca      	lsls	r2, r1, #27
 8007268:	d50d      	bpl.n	8007286 <WIDGET_HandleActive+0xee>
 800726a:	4630      	mov	r0, r6
 800726c:	f041 0101 	orr.w	r1, r1, #1
 8007270:	f7ff ff4c 	bl	800710c <WIDGET_SetState>
 8007274:	2708      	movs	r7, #8
 8007276:	e008      	b.n	800728a <WIDGET_HandleActive+0xf2>
 8007278:	f021 0101 	bic.w	r1, r1, #1
 800727c:	4630      	mov	r0, r6
 800727e:	f7ff ff45 	bl	800710c <WIDGET_SetState>
 8007282:	2709      	movs	r7, #9
 8007284:	e001      	b.n	800728a <WIDGET_HandleActive+0xf2>
 8007286:	f04f 37ff 	mov.w	r7, #4294967295
 800728a:	a802      	add	r0, sp, #8
 800728c:	f009 fbe6 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007290:	1c7b      	adds	r3, r7, #1
 8007292:	f04f 0400 	mov.w	r4, #0
 8007296:	d005      	beq.n	80072a4 <WIDGET_HandleActive+0x10c>
 8007298:	4630      	mov	r0, r6
 800729a:	4639      	mov	r1, r7
 800729c:	f003 fd73 	bl	800ad86 <WM_NotifyParent>
 80072a0:	60ec      	str	r4, [r5, #12]
 80072a2:	e00d      	b.n	80072c0 <WIDGET_HandleActive+0x128>
 80072a4:	2301      	movs	r3, #1
 80072a6:	60eb      	str	r3, [r5, #12]
 80072a8:	e00a      	b.n	80072c0 <WIDGET_HandleActive+0x128>
 80072aa:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80072ac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80072b0:	60eb      	str	r3, [r5, #12]
 80072b2:	e002      	b.n	80072ba <WIDGET_HandleActive+0x122>
 80072b4:	68e9      	ldr	r1, [r5, #12]
 80072b6:	f7ff ff1c 	bl	80070f2 <WIDGET__GetInsideRect>
 80072ba:	2400      	movs	r4, #0
 80072bc:	e000      	b.n	80072c0 <WIDGET_HandleActive+0x128>
 80072be:	2401      	movs	r4, #1
 80072c0:	9b02      	ldr	r3, [sp, #8]
 80072c2:	b123      	cbz	r3, 80072ce <WIDGET_HandleActive+0x136>
 80072c4:	a802      	add	r0, sp, #8
 80072c6:	f009 fbc9 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80072ca:	e000      	b.n	80072ce <WIDGET_HandleActive+0x136>
 80072cc:	2401      	movs	r4, #1
 80072ce:	4620      	mov	r0, r4
 80072d0:	b005      	add	sp, #20
 80072d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080072d4 <WIDGET__SetScrollState>:
 80072d4:	b570      	push	{r4, r5, r6, lr}
 80072d6:	460d      	mov	r5, r1
 80072d8:	21fe      	movs	r1, #254	; 0xfe
 80072da:	4616      	mov	r6, r2
 80072dc:	4604      	mov	r4, r0
 80072de:	f003 ff40 	bl	800b162 <WM_GetDialogItem>
 80072e2:	4629      	mov	r1, r5
 80072e4:	f003 fb0d 	bl	800a902 <WM_SetScrollState>
 80072e8:	4620      	mov	r0, r4
 80072ea:	21ff      	movs	r1, #255	; 0xff
 80072ec:	f003 ff39 	bl	800b162 <WM_GetDialogItem>
 80072f0:	4631      	mov	r1, r6
 80072f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80072f6:	f003 bb04 	b.w	800a902 <WM_SetScrollState>

080072fa <WIDGET__FillRectEx>:
 80072fa:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80072fc:	071b      	lsls	r3, r3, #28
 80072fe:	b507      	push	{r0, r1, r2, lr}
 8007300:	460a      	mov	r2, r1
 8007302:	d503      	bpl.n	800730c <WIDGET__FillRectEx+0x12>
 8007304:	4669      	mov	r1, sp
 8007306:	f7ff fec8 	bl	800709a <WIDGET__RotateRect90>
 800730a:	466a      	mov	r2, sp
 800730c:	4610      	mov	r0, r2
 800730e:	f008 fcc3 	bl	800fc98 <GUI_FillRectEx>
 8007312:	b003      	add	sp, #12
 8007314:	f85d fb04 	ldr.w	pc, [sp], #4

08007318 <WIDGET__DrawTriangle>:
 8007318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731a:	461c      	mov	r4, r3
 800731c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800731e:	9f06      	ldr	r7, [sp, #24]
 8007320:	071b      	lsls	r3, r3, #28
 8007322:	460d      	mov	r5, r1
 8007324:	4616      	mov	r6, r2
 8007326:	d50a      	bpl.n	800733e <WIDGET__DrawTriangle+0x26>
 8007328:	2c00      	cmp	r4, #0
 800732a:	db07      	blt.n	800733c <WIDGET__DrawTriangle+0x24>
 800732c:	4628      	mov	r0, r5
 800732e:	1b31      	subs	r1, r6, r4
 8007330:	19a2      	adds	r2, r4, r6
 8007332:	f008 fd25 	bl	800fd80 <GUI_DrawHLine>
 8007336:	3c01      	subs	r4, #1
 8007338:	443d      	add	r5, r7
 800733a:	e7f5      	b.n	8007328 <WIDGET__DrawTriangle+0x10>
 800733c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800733e:	2c00      	cmp	r4, #0
 8007340:	db07      	blt.n	8007352 <WIDGET__DrawTriangle+0x3a>
 8007342:	4628      	mov	r0, r5
 8007344:	1b31      	subs	r1, r6, r4
 8007346:	19a2      	adds	r2, r4, r6
 8007348:	f008 fcf8 	bl	800fd3c <GUI_DrawVLine>
 800734c:	3c01      	subs	r4, #1
 800734e:	443d      	add	r5, r7
 8007350:	e7f5      	b.n	800733e <WIDGET__DrawTriangle+0x26>
 8007352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007354 <WIDGET__EFFECT_DrawDownRect>:
 8007354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007356:	4605      	mov	r5, r0
 8007358:	460c      	mov	r4, r1
 800735a:	b919      	cbnz	r1, 8007364 <WIDGET__EFFECT_DrawDownRect+0x10>
 800735c:	4668      	mov	r0, sp
 800735e:	f003 ff3d 	bl	800b1dc <WM_GetClientRect>
 8007362:	466c      	mov	r4, sp
 8007364:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8007366:	071b      	lsls	r3, r3, #28
 8007368:	d505      	bpl.n	8007376 <WIDGET__EFFECT_DrawDownRect+0x22>
 800736a:	4622      	mov	r2, r4
 800736c:	4628      	mov	r0, r5
 800736e:	4669      	mov	r1, sp
 8007370:	f7ff fe93 	bl	800709a <WIDGET__RotateRect90>
 8007374:	466c      	mov	r4, sp
 8007376:	4628      	mov	r0, r5
 8007378:	4621      	mov	r1, r4
 800737a:	f7ff fe5e 	bl	800703a <_EffectRequiresRedraw>
 800737e:	b118      	cbz	r0, 8007388 <WIDGET__EFFECT_DrawDownRect+0x34>
 8007380:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007382:	4620      	mov	r0, r4
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	4798      	blx	r3
 8007388:	b003      	add	sp, #12
 800738a:	bd30      	pop	{r4, r5, pc}

0800738c <WIDGET__EFFECT_DrawDown>:
 800738c:	2100      	movs	r1, #0
 800738e:	f7ff bfe1 	b.w	8007354 <WIDGET__EFFECT_DrawDownRect>

08007392 <TEXT_SetTextColor>:
 8007392:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007394:	460c      	mov	r4, r1
 8007396:	4605      	mov	r5, r0
 8007398:	b160      	cbz	r0, 80073b4 <TEXT_SetTextColor+0x22>
 800739a:	f009 fb51 	bl	8010a40 <GUI_ALLOC_LockH>
 800739e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80073a0:	9001      	str	r0, [sp, #4]
 80073a2:	42a2      	cmp	r2, r4
 80073a4:	d003      	beq.n	80073ae <TEXT_SetTextColor+0x1c>
 80073a6:	6384      	str	r4, [r0, #56]	; 0x38
 80073a8:	4628      	mov	r0, r5
 80073aa:	f004 fc9e 	bl	800bcea <WM_InvalidateWindow>
 80073ae:	a801      	add	r0, sp, #4
 80073b0:	f009 fb54 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80073b4:	b003      	add	sp, #12
 80073b6:	bd30      	pop	{r4, r5, pc}

080073b8 <TEXT_SetText>:
 80073b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073ba:	460c      	mov	r4, r1
 80073bc:	4605      	mov	r5, r0
 80073be:	b300      	cbz	r0, 8007402 <TEXT_SetText+0x4a>
 80073c0:	f009 fb3e 	bl	8010a40 <GUI_ALLOC_LockH>
 80073c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80073c6:	9000      	str	r0, [sp, #0]
 80073c8:	4668      	mov	r0, sp
 80073ca:	9301      	str	r3, [sp, #4]
 80073cc:	f009 fb46 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80073d0:	4621      	mov	r1, r4
 80073d2:	a801      	add	r0, sp, #4
 80073d4:	f007 fc7d 	bl	800ecd2 <GUI__SetText>
 80073d8:	f1d0 0401 	rsbs	r4, r0, #1
 80073dc:	bf38      	it	cc
 80073de:	2400      	movcc	r4, #0
 80073e0:	b984      	cbnz	r4, 8007404 <TEXT_SetText+0x4c>
 80073e2:	4628      	mov	r0, r5
 80073e4:	f009 fb2c 	bl	8010a40 <GUI_ALLOC_LockH>
 80073e8:	9a01      	ldr	r2, [sp, #4]
 80073ea:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80073ec:	9000      	str	r0, [sp, #0]
 80073ee:	4291      	cmp	r1, r2
 80073f0:	bf18      	it	ne
 80073f2:	6442      	strne	r2, [r0, #68]	; 0x44
 80073f4:	4668      	mov	r0, sp
 80073f6:	f009 fb31 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80073fa:	4628      	mov	r0, r5
 80073fc:	f004 fc75 	bl	800bcea <WM_InvalidateWindow>
 8007400:	e000      	b.n	8007404 <TEXT_SetText+0x4c>
 8007402:	2401      	movs	r4, #1
 8007404:	4620      	mov	r0, r4
 8007406:	b003      	add	sp, #12
 8007408:	bd30      	pop	{r4, r5, pc}

0800740a <TEXT_SetFont>:
 800740a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800740c:	460c      	mov	r4, r1
 800740e:	4605      	mov	r5, r0
 8007410:	b160      	cbz	r0, 800742c <TEXT_SetFont+0x22>
 8007412:	f009 fb15 	bl	8010a40 <GUI_ALLOC_LockH>
 8007416:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007418:	9001      	str	r0, [sp, #4]
 800741a:	42a2      	cmp	r2, r4
 800741c:	d003      	beq.n	8007426 <TEXT_SetFont+0x1c>
 800741e:	6344      	str	r4, [r0, #52]	; 0x34
 8007420:	4628      	mov	r0, r5
 8007422:	f004 fc62 	bl	800bcea <WM_InvalidateWindow>
 8007426:	a801      	add	r0, sp, #4
 8007428:	f009 fb18 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800742c:	b003      	add	sp, #12
 800742e:	bd30      	pop	{r4, r5, pc}

08007430 <TEXT_CreateIndirect>:
 8007430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007432:	b087      	sub	sp, #28
 8007434:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 8007438:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 800743c:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 8007440:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8007444:	9100      	str	r1, [sp, #0]
 8007446:	2102      	movs	r1, #2
 8007448:	9101      	str	r1, [sp, #4]
 800744a:	8a41      	ldrh	r1, [r0, #18]
 800744c:	9102      	str	r1, [sp, #8]
 800744e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8007452:	9103      	str	r1, [sp, #12]
 8007454:	6844      	ldr	r4, [r0, #4]
 8007456:	9404      	str	r4, [sp, #16]
 8007458:	6984      	ldr	r4, [r0, #24]
 800745a:	9405      	str	r4, [sp, #20]
 800745c:	eb0e 0002 	add.w	r0, lr, r2
 8007460:	18f9      	adds	r1, r7, r3
 8007462:	4632      	mov	r2, r6
 8007464:	462b      	mov	r3, r5
 8007466:	f000 f865 	bl	8007534 <TEXT_CreateUser>
 800746a:	b007      	add	sp, #28
 800746c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800746e <TEXT_Callback>:
 800746e:	b530      	push	{r4, r5, lr}
 8007470:	6845      	ldr	r5, [r0, #4]
 8007472:	4604      	mov	r4, r0
 8007474:	b085      	sub	sp, #20
 8007476:	4628      	mov	r0, r5
 8007478:	4621      	mov	r1, r4
 800747a:	f7ff fe8d 	bl	8007198 <WIDGET_HandleActive>
 800747e:	2800      	cmp	r0, #0
 8007480:	d056      	beq.n	8007530 <TEXT_Callback+0xc2>
 8007482:	6823      	ldr	r3, [r4, #0]
 8007484:	2b0f      	cmp	r3, #15
 8007486:	d01e      	beq.n	80074c6 <TEXT_Callback+0x58>
 8007488:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800748c:	d00e      	beq.n	80074ac <TEXT_Callback+0x3e>
 800748e:	2b0b      	cmp	r3, #11
 8007490:	d14b      	bne.n	800752a <TEXT_Callback+0xbc>
 8007492:	4628      	mov	r0, r5
 8007494:	f009 fad4 	bl	8010a40 <GUI_ALLOC_LockH>
 8007498:	ad04      	add	r5, sp, #16
 800749a:	f845 0d08 	str.w	r0, [r5, #-8]!
 800749e:	3044      	adds	r0, #68	; 0x44
 80074a0:	f009 fd2a 	bl	8010ef8 <GUI_ALLOC_FreePtr>
 80074a4:	4628      	mov	r0, r5
 80074a6:	f009 fad9 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80074aa:	e03e      	b.n	800752a <TEXT_Callback+0xbc>
 80074ac:	68e3      	ldr	r3, [r4, #12]
 80074ae:	b12b      	cbz	r3, 80074bc <TEXT_Callback+0x4e>
 80074b0:	7a1b      	ldrb	r3, [r3, #8]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	bf0c      	ite	eq
 80074b6:	2102      	moveq	r1, #2
 80074b8:	2101      	movne	r1, #1
 80074ba:	e000      	b.n	80074be <TEXT_Callback+0x50>
 80074bc:	2103      	movs	r1, #3
 80074be:	4628      	mov	r0, r5
 80074c0:	f003 fc61 	bl	800ad86 <WM_NotifyParent>
 80074c4:	e031      	b.n	800752a <TEXT_Callback+0xbc>
 80074c6:	4628      	mov	r0, r5
 80074c8:	f009 faba 	bl	8010a40 <GUI_ALLOC_LockH>
 80074cc:	9000      	str	r0, [sp, #0]
 80074ce:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80074d0:	f007 fbc4 	bl	800ec5c <LCD_SetColor>
 80074d4:	9b00      	ldr	r3, [sp, #0]
 80074d6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80074d8:	f008 f998 	bl	800f80c <GUI_SetFont>
 80074dc:	4628      	mov	r0, r5
 80074de:	f003 f9e3 	bl	800a8a8 <WM_GetHasTrans>
 80074e2:	b928      	cbnz	r0, 80074f0 <TEXT_Callback+0x82>
 80074e4:	9b00      	ldr	r3, [sp, #0]
 80074e6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80074e8:	f007 fbb0 	bl	800ec4c <LCD_SetBkColor>
 80074ec:	f008 fe96 	bl	801021c <GUI_Clear>
 80074f0:	9b00      	ldr	r3, [sp, #0]
 80074f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f4:	b1ab      	cbz	r3, 8007522 <TEXT_Callback+0xb4>
 80074f6:	2002      	movs	r0, #2
 80074f8:	f008 f97e 	bl	800f7f8 <GUI_SetTextMode>
 80074fc:	a802      	add	r0, sp, #8
 80074fe:	f003 fe6d 	bl	800b1dc <WM_GetClientRect>
 8007502:	9b00      	ldr	r3, [sp, #0]
 8007504:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8007506:	f009 fa9b 	bl	8010a40 <GUI_ALLOC_LockH>
 800750a:	9b00      	ldr	r3, [sp, #0]
 800750c:	9001      	str	r0, [sp, #4]
 800750e:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8007512:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007516:	a902      	add	r1, sp, #8
 8007518:	f008 fcb6 	bl	800fe88 <GUI_DispStringInRectWrap>
 800751c:	a801      	add	r0, sp, #4
 800751e:	f009 fa9d 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007522:	4668      	mov	r0, sp
 8007524:	f009 fa9a 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007528:	e002      	b.n	8007530 <TEXT_Callback+0xc2>
 800752a:	4620      	mov	r0, r4
 800752c:	f005 f80c 	bl	800c548 <WM_DefaultProc>
 8007530:	b005      	add	sp, #20
 8007532:	bd30      	pop	{r4, r5, pc}

08007534 <TEXT_CreateUser>:
 8007534:	b570      	push	{r4, r5, r6, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800753a:	9500      	str	r5, [sp, #0]
 800753c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800753e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007540:	f045 0501 	orr.w	r5, r5, #1
 8007544:	9501      	str	r5, [sp, #4]
 8007546:	4d1a      	ldr	r5, [pc, #104]	; (80075b0 <TEXT_CreateUser+0x7c>)
 8007548:	9502      	str	r5, [sp, #8]
 800754a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800754c:	3520      	adds	r5, #32
 800754e:	9503      	str	r5, [sp, #12]
 8007550:	f004 fc0c 	bl	800bd6c <WM_CreateWindowAsChild>
 8007554:	4605      	mov	r5, r0
 8007556:	b340      	cbz	r0, 80075aa <TEXT_CreateUser+0x76>
 8007558:	b18c      	cbz	r4, 800757e <TEXT_CreateUser+0x4a>
 800755a:	4620      	mov	r0, r4
 800755c:	f7f8 fe48 	bl	80001f0 <strlen>
 8007560:	3001      	adds	r0, #1
 8007562:	f009 fcde 	bl	8010f22 <GUI_ALLOC_AllocZero>
 8007566:	4606      	mov	r6, r0
 8007568:	b150      	cbz	r0, 8007580 <TEXT_CreateUser+0x4c>
 800756a:	f009 fa69 	bl	8010a40 <GUI_ALLOC_LockH>
 800756e:	4621      	mov	r1, r4
 8007570:	9005      	str	r0, [sp, #20]
 8007572:	f011 fb91 	bl	8018c98 <strcpy>
 8007576:	a805      	add	r0, sp, #20
 8007578:	f009 fa70 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800757c:	e000      	b.n	8007580 <TEXT_CreateUser+0x4c>
 800757e:	4626      	mov	r6, r4
 8007580:	4628      	mov	r0, r5
 8007582:	f009 fa5d 	bl	8010a40 <GUI_ALLOC_LockH>
 8007586:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007588:	9005      	str	r0, [sp, #20]
 800758a:	2200      	movs	r2, #0
 800758c:	f7ff fdfc 	bl	8007188 <WIDGET__Init>
 8007590:	9c05      	ldr	r4, [sp, #20]
 8007592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007594:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8007598:	4b06      	ldr	r3, [pc, #24]	; (80075b4 <TEXT_CreateUser+0x80>)
 800759a:	6466      	str	r6, [r4, #68]	; 0x44
 800759c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800759e:	3434      	adds	r4, #52	; 0x34
 80075a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80075a4:	a805      	add	r0, sp, #20
 80075a6:	f009 fa59 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80075aa:	4628      	mov	r0, r5
 80075ac:	b006      	add	sp, #24
 80075ae:	bd70      	pop	{r4, r5, r6, pc}
 80075b0:	0800746f 	.word	0x0800746f
 80075b4:	200001ac 	.word	0x200001ac

080075b8 <RADIO_SetText>:
 80075b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80075bc:	460c      	mov	r4, r1
 80075be:	4616      	mov	r6, r2
 80075c0:	4607      	mov	r7, r0
 80075c2:	b1e0      	cbz	r0, 80075fe <RADIO_SetText+0x46>
 80075c4:	f009 fa3c 	bl	8010a40 <GUI_ALLOC_LockH>
 80075c8:	4605      	mov	r5, r0
 80075ca:	a802      	add	r0, sp, #8
 80075cc:	f8d5 805c 	ldr.w	r8, [r5, #92]	; 0x5c
 80075d0:	f840 5d04 	str.w	r5, [r0, #-4]!
 80075d4:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
 80075d8:	f009 fa40 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80075dc:	42ae      	cmp	r6, r5
 80075de:	d20e      	bcs.n	80075fe <RADIO_SetText+0x46>
 80075e0:	b124      	cbz	r4, 80075ec <RADIO_SetText+0x34>
 80075e2:	4620      	mov	r0, r4
 80075e4:	f007 fb42 	bl	800ec6c <GUI__strlen>
 80075e8:	1c43      	adds	r3, r0, #1
 80075ea:	e000      	b.n	80075ee <RADIO_SetText+0x36>
 80075ec:	4623      	mov	r3, r4
 80075ee:	4640      	mov	r0, r8
 80075f0:	4631      	mov	r1, r6
 80075f2:	4622      	mov	r2, r4
 80075f4:	f001 f8a3 	bl	800873e <GUI_ARRAY_SetItem>
 80075f8:	4638      	mov	r0, r7
 80075fa:	f004 fb76 	bl	800bcea <WM_InvalidateWindow>
 80075fe:	b002      	add	sp, #8
 8007600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007604 <RADIO_CreateIndirect>:
 8007604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007606:	b089      	sub	sp, #36	; 0x24
 8007608:	6944      	ldr	r4, [r0, #20]
 800760a:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 800760e:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8007612:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 8007616:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 800761a:	9100      	str	r1, [sp, #0]
 800761c:	8a41      	ldrh	r1, [r0, #18]
 800761e:	9101      	str	r1, [sp, #4]
 8007620:	2100      	movs	r1, #0
 8007622:	9102      	str	r1, [sp, #8]
 8007624:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8007628:	9103      	str	r1, [sp, #12]
 800762a:	b2e1      	uxtb	r1, r4
 800762c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8007630:	9104      	str	r1, [sp, #16]
 8007632:	9405      	str	r4, [sp, #20]
 8007634:	6984      	ldr	r4, [r0, #24]
 8007636:	9406      	str	r4, [sp, #24]
 8007638:	eb0e 0002 	add.w	r0, lr, r2
 800763c:	18f9      	adds	r1, r7, r3
 800763e:	4632      	mov	r2, r6
 8007640:	462b      	mov	r3, r5
 8007642:	f000 f839 	bl	80076b8 <RADIO_CreateUser>
 8007646:	b009      	add	sp, #36	; 0x24
 8007648:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800764a <RADIO__GetButtonSize>:
 800764a:	b530      	push	{r4, r5, lr}
 800764c:	b08b      	sub	sp, #44	; 0x2c
 800764e:	4605      	mov	r5, r0
 8007650:	f009 f9f6 	bl	8010a40 <GUI_ALLOC_LockH>
 8007654:	ab0a      	add	r3, sp, #40	; 0x28
 8007656:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8007658:	f843 0d28 	str.w	r0, [r3, #-40]!
 800765c:	6894      	ldr	r4, [r2, #8]
 800765e:	4668      	mov	r0, sp
 8007660:	f009 f9fc 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007664:	2319      	movs	r3, #25
 8007666:	9302      	str	r3, [sp, #8]
 8007668:	9501      	str	r5, [sp, #4]
 800766a:	6863      	ldr	r3, [r4, #4]
 800766c:	a801      	add	r0, sp, #4
 800766e:	4798      	blx	r3
 8007670:	b00b      	add	sp, #44	; 0x2c
 8007672:	bd30      	pop	{r4, r5, pc}

08007674 <RADIO__SetValue>:
 8007674:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007676:	460c      	mov	r4, r1
 8007678:	4605      	mov	r5, r0
 800767a:	f009 f9e1 	bl	8010a40 <GUI_ALLOC_LockH>
 800767e:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 8007682:	9001      	str	r0, [sp, #4]
 8007684:	4294      	cmp	r4, r2
 8007686:	bfa8      	it	ge
 8007688:	f102 34ff 	addge.w	r4, r2, #4294967295
 800768c:	f9b0 2060 	ldrsh.w	r2, [r0, #96]	; 0x60
 8007690:	4294      	cmp	r4, r2
 8007692:	d00c      	beq.n	80076ae <RADIO__SetValue+0x3a>
 8007694:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
 8007698:	4628      	mov	r0, r5
 800769a:	f004 fb26 	bl	800bcea <WM_InvalidateWindow>
 800769e:	a801      	add	r0, sp, #4
 80076a0:	f009 f9dc 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80076a4:	4628      	mov	r0, r5
 80076a6:	2105      	movs	r1, #5
 80076a8:	f003 fb6d 	bl	800ad86 <WM_NotifyParent>
 80076ac:	e002      	b.n	80076b4 <RADIO__SetValue+0x40>
 80076ae:	a801      	add	r0, sp, #4
 80076b0:	f009 f9d4 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80076b4:	b003      	add	sp, #12
 80076b6:	bd30      	pop	{r4, r5, pc}

080076b8 <RADIO_CreateUser>:
 80076b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076bc:	b087      	sub	sp, #28
 80076be:	4c33      	ldr	r4, [pc, #204]	; (800778c <RADIO_CreateUser+0xd4>)
 80076c0:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80076c2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80076c4:	6924      	ldr	r4, [r4, #16]
 80076c6:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 80076ca:	8865      	ldrh	r5, [r4, #2]
 80076cc:	2f00      	cmp	r7, #0
 80076ce:	bfd8      	it	le
 80076d0:	2714      	movle	r7, #20
 80076d2:	2e00      	cmp	r6, #0
 80076d4:	bfd8      	it	le
 80076d6:	2602      	movle	r6, #2
 80076d8:	b91b      	cbnz	r3, 80076e2 <RADIO_CreateUser+0x2a>
 80076da:	3504      	adds	r5, #4
 80076dc:	1e73      	subs	r3, r6, #1
 80076de:	fb07 5303 	mla	r3, r7, r3, r5
 80076e2:	b90a      	cbnz	r2, 80076e8 <RADIO_CreateUser+0x30>
 80076e4:	8822      	ldrh	r2, [r4, #0]
 80076e6:	3204      	adds	r2, #4
 80076e8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80076ea:	f8cd a000 	str.w	sl, [sp]
 80076ee:	f044 0401 	orr.w	r4, r4, #1
 80076f2:	9401      	str	r4, [sp, #4]
 80076f4:	4c26      	ldr	r4, [pc, #152]	; (8007790 <RADIO_CreateUser+0xd8>)
 80076f6:	9402      	str	r4, [sp, #8]
 80076f8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80076fa:	343c      	adds	r4, #60	; 0x3c
 80076fc:	9403      	str	r4, [sp, #12]
 80076fe:	f004 fb35 	bl	800bd6c <WM_CreateWindowAsChild>
 8007702:	4680      	mov	r8, r0
 8007704:	2800      	cmp	r0, #0
 8007706:	d03c      	beq.n	8007782 <RADIO_CreateUser+0xca>
 8007708:	f001 f890 	bl	800882c <GUI_ARRAY_Create>
 800770c:	2400      	movs	r4, #0
 800770e:	4605      	mov	r5, r0
 8007710:	2100      	movs	r1, #0
 8007712:	4628      	mov	r0, r5
 8007714:	460a      	mov	r2, r1
 8007716:	3401      	adds	r4, #1
 8007718:	f000 ff9e 	bl	8008658 <GUI_ARRAY_AddItem>
 800771c:	42b4      	cmp	r4, r6
 800771e:	dbf7      	blt.n	8007710 <RADIO_CreateUser+0x58>
 8007720:	4640      	mov	r0, r8
 8007722:	f009 f98d 	bl	8010a40 <GUI_ALLOC_LockH>
 8007726:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007728:	65c5      	str	r5, [r0, #92]	; 0x5c
 800772a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800772e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007730:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007794 <RADIO_CreateUser+0xdc>
 8007734:	9005      	str	r0, [sp, #20]
 8007736:	f042 0210 	orr.w	r2, r2, #16
 800773a:	f7ff fd25 	bl	8007188 <WIDGET__Init>
 800773e:	4d13      	ldr	r5, [pc, #76]	; (800778c <RADIO_CreateUser+0xd4>)
 8007740:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007744:	f8db 3000 	ldr.w	r3, [fp]
 8007748:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
 800774c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800774e:	f109 0434 	add.w	r4, r9, #52	; 0x34
 8007752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007758:	682b      	ldr	r3, [r5, #0]
 800775a:	6023      	str	r3, [r4, #0]
 800775c:	4650      	mov	r0, sl
 800775e:	f003 fd4b 	bl	800b1f8 <WM_GetBkColor>
 8007762:	f8c9 0034 	str.w	r0, [r9, #52]	; 0x34
 8007766:	a806      	add	r0, sp, #24
 8007768:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800776c:	f8a3 6064 	strh.w	r6, [r3, #100]	; 0x64
 8007770:	f8a3 7062 	strh.w	r7, [r3, #98]	; 0x62
 8007774:	f009 f972 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007778:	f8db 3000 	ldr.w	r3, [fp]
 800777c:	4640      	mov	r0, r8
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	4798      	blx	r3
 8007782:	4640      	mov	r0, r8
 8007784:	b007      	add	sp, #28
 8007786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800778a:	bf00      	nop
 800778c:	200001bc 	.word	0x200001bc
 8007790:	0800780b 	.word	0x0800780b
 8007794:	200001e0 	.word	0x200001e0

08007798 <RADIO_SetValue>:
 8007798:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800779a:	460c      	mov	r4, r1
 800779c:	4605      	mov	r5, r0
 800779e:	b1a8      	cbz	r0, 80077cc <RADIO_SetValue+0x34>
 80077a0:	f009 f94e 	bl	8010a40 <GUI_ALLOC_LockH>
 80077a4:	ab02      	add	r3, sp, #8
 80077a6:	f890 6066 	ldrb.w	r6, [r0, #102]	; 0x66
 80077aa:	f843 0d04 	str.w	r0, [r3, #-4]!
 80077ae:	4618      	mov	r0, r3
 80077b0:	f009 f954 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80077b4:	4628      	mov	r0, r5
 80077b6:	b12e      	cbz	r6, 80077c4 <RADIO_SetValue+0x2c>
 80077b8:	4b05      	ldr	r3, [pc, #20]	; (80077d0 <RADIO_SetValue+0x38>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	b113      	cbz	r3, 80077c4 <RADIO_SetValue+0x2c>
 80077be:	4621      	mov	r1, r4
 80077c0:	4798      	blx	r3
 80077c2:	e003      	b.n	80077cc <RADIO_SetValue+0x34>
 80077c4:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
 80077c8:	f7ff ff54 	bl	8007674 <RADIO__SetValue>
 80077cc:	b002      	add	sp, #8
 80077ce:	bd70      	pop	{r4, r5, r6, pc}
 80077d0:	20021b6c 	.word	0x20021b6c

080077d4 <RADIO_AddValue>:
 80077d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077d6:	460c      	mov	r4, r1
 80077d8:	4606      	mov	r6, r0
 80077da:	b168      	cbz	r0, 80077f8 <RADIO_AddValue+0x24>
 80077dc:	f009 f930 	bl	8010a40 <GUI_ALLOC_LockH>
 80077e0:	4602      	mov	r2, r0
 80077e2:	a802      	add	r0, sp, #8
 80077e4:	f9b2 5060 	ldrsh.w	r5, [r2, #96]	; 0x60
 80077e8:	f840 2d04 	str.w	r2, [r0, #-4]!
 80077ec:	f009 f936 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80077f0:	4630      	mov	r0, r6
 80077f2:	1929      	adds	r1, r5, r4
 80077f4:	f7ff ffd0 	bl	8007798 <RADIO_SetValue>
 80077f8:	b002      	add	sp, #8
 80077fa:	bd70      	pop	{r4, r5, r6, pc}

080077fc <RADIO_Dec>:
 80077fc:	f04f 31ff 	mov.w	r1, #4294967295
 8007800:	f7ff bfe8 	b.w	80077d4 <RADIO_AddValue>

08007804 <RADIO_Inc>:
 8007804:	2101      	movs	r1, #1
 8007806:	f7ff bfe5 	b.w	80077d4 <RADIO_AddValue>

0800780a <RADIO_Callback>:
 800780a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800780e:	6844      	ldr	r4, [r0, #4]
 8007810:	4605      	mov	r5, r0
 8007812:	4629      	mov	r1, r5
 8007814:	4620      	mov	r0, r4
 8007816:	f7ff fcbf 	bl	8007198 <WIDGET_HandleActive>
 800781a:	2800      	cmp	r0, #0
 800781c:	f000 809a 	beq.w	8007954 <RADIO_Callback+0x14a>
 8007820:	682b      	ldr	r3, [r5, #0]
 8007822:	2b0f      	cmp	r3, #15
 8007824:	d00c      	beq.n	8007840 <RADIO_Callback+0x36>
 8007826:	dc05      	bgt.n	8007834 <RADIO_Callback+0x2a>
 8007828:	2b0b      	cmp	r3, #11
 800782a:	f000 8084 	beq.w	8007936 <RADIO_Callback+0x12c>
 800782e:	2b0e      	cmp	r3, #14
 8007830:	d06d      	beq.n	800790e <RADIO_Callback+0x104>
 8007832:	e08c      	b.n	800794e <RADIO_Callback+0x144>
 8007834:	2b2b      	cmp	r3, #43	; 0x2b
 8007836:	d013      	beq.n	8007860 <RADIO_Callback+0x56>
 8007838:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800783c:	d01d      	beq.n	800787a <RADIO_Callback+0x70>
 800783e:	e086      	b.n	800794e <RADIO_Callback+0x144>
 8007840:	4620      	mov	r0, r4
 8007842:	f009 f8fd 	bl	8010a40 <GUI_ALLOC_LockH>
 8007846:	ab02      	add	r3, sp, #8
 8007848:	f843 0d04 	str.w	r0, [r3, #-4]!
 800784c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800784e:	6815      	ldr	r5, [r2, #0]
 8007850:	4618      	mov	r0, r3
 8007852:	f009 f903 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007856:	2d00      	cmp	r5, #0
 8007858:	d07c      	beq.n	8007954 <RADIO_Callback+0x14a>
 800785a:	4620      	mov	r0, r4
 800785c:	47a8      	blx	r5
 800785e:	e079      	b.n	8007954 <RADIO_Callback+0x14a>
 8007860:	4620      	mov	r0, r4
 8007862:	f009 f8ed 	bl	8010a40 <GUI_ALLOC_LockH>
 8007866:	ab02      	add	r3, sp, #8
 8007868:	f843 0d04 	str.w	r0, [r3, #-4]!
 800786c:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
 8007870:	60ea      	str	r2, [r5, #12]
 8007872:	4618      	mov	r0, r3
 8007874:	f009 f8f2 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007878:	e06c      	b.n	8007954 <RADIO_Callback+0x14a>
 800787a:	4620      	mov	r0, r4
 800787c:	68ee      	ldr	r6, [r5, #12]
 800787e:	f009 f8df 	bl	8010a40 <GUI_ALLOC_LockH>
 8007882:	9001      	str	r0, [sp, #4]
 8007884:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8007888:	f8b0 7062 	ldrh.w	r7, [r0, #98]	; 0x62
 800788c:	b143      	cbz	r3, 80078a0 <RADIO_Callback+0x96>
 800788e:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 8007892:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8007896:	ebc3 0909 	rsb	r9, r3, r9
 800789a:	f109 0901 	add.w	r9, r9, #1
 800789e:	e006      	b.n	80078ae <RADIO_Callback+0xa4>
 80078a0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	4620      	mov	r0, r4
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4798      	blx	r3
 80078aa:	f100 0904 	add.w	r9, r0, #4
 80078ae:	a802      	add	r0, sp, #8
 80078b0:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 80078b4:	f8b3 8030 	ldrh.w	r8, [r3, #48]	; 0x30
 80078b8:	f009 f8d0 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80078bc:	68eb      	ldr	r3, [r5, #12]
 80078be:	b1a3      	cbz	r3, 80078ea <RADIO_Callback+0xe0>
 80078c0:	7a33      	ldrb	r3, [r6, #8]
 80078c2:	b1ab      	cbz	r3, 80078f0 <RADIO_Callback+0xe6>
 80078c4:	6873      	ldr	r3, [r6, #4]
 80078c6:	fb93 f1f7 	sdiv	r1, r3, r7
 80078ca:	fb07 3711 	mls	r7, r7, r1, r3
 80078ce:	454f      	cmp	r7, r9
 80078d0:	dc02      	bgt.n	80078d8 <RADIO_Callback+0xce>
 80078d2:	4620      	mov	r0, r4
 80078d4:	f7ff ff60 	bl	8007798 <RADIO_SetValue>
 80078d8:	4620      	mov	r0, r4
 80078da:	f003 fb48 	bl	800af6e <WM_IsFocussable>
 80078de:	b150      	cbz	r0, 80078f6 <RADIO_Callback+0xec>
 80078e0:	4620      	mov	r0, r4
 80078e2:	f003 f88b 	bl	800a9fc <WM_SetFocus>
 80078e6:	2600      	movs	r6, #0
 80078e8:	e006      	b.n	80078f8 <RADIO_Callback+0xee>
 80078ea:	461e      	mov	r6, r3
 80078ec:	2103      	movs	r1, #3
 80078ee:	e004      	b.n	80078fa <RADIO_Callback+0xf0>
 80078f0:	2601      	movs	r6, #1
 80078f2:	2102      	movs	r1, #2
 80078f4:	e001      	b.n	80078fa <RADIO_Callback+0xf0>
 80078f6:	4606      	mov	r6, r0
 80078f8:	2101      	movs	r1, #1
 80078fa:	4620      	mov	r0, r4
 80078fc:	f003 fa43 	bl	800ad86 <WM_NotifyParent>
 8007900:	2e01      	cmp	r6, #1
 8007902:	d124      	bne.n	800794e <RADIO_Callback+0x144>
 8007904:	fa0f f088 	sxth.w	r0, r8
 8007908:	f008 f8e0 	bl	800facc <GUI_StoreKey>
 800790c:	e01f      	b.n	800794e <RADIO_Callback+0x144>
 800790e:	68eb      	ldr	r3, [r5, #12]
 8007910:	685a      	ldr	r2, [r3, #4]
 8007912:	2a00      	cmp	r2, #0
 8007914:	dd1b      	ble.n	800794e <RADIO_Callback+0x144>
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	3b10      	subs	r3, #16
 800791a:	2b03      	cmp	r3, #3
 800791c:	d817      	bhi.n	800794e <RADIO_Callback+0x144>
 800791e:	e8df f003 	tbb	[pc, r3]
 8007922:	0606      	.short	0x0606
 8007924:	0202      	.short	0x0202
 8007926:	4620      	mov	r0, r4
 8007928:	f7ff ff6c 	bl	8007804 <RADIO_Inc>
 800792c:	e00f      	b.n	800794e <RADIO_Callback+0x144>
 800792e:	4620      	mov	r0, r4
 8007930:	f7ff ff64 	bl	80077fc <RADIO_Dec>
 8007934:	e00b      	b.n	800794e <RADIO_Callback+0x144>
 8007936:	4620      	mov	r0, r4
 8007938:	f009 f882 	bl	8010a40 <GUI_ALLOC_LockH>
 800793c:	ac02      	add	r4, sp, #8
 800793e:	f844 0d04 	str.w	r0, [r4, #-4]!
 8007942:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8007944:	f000 fed2 	bl	80086ec <GUI_ARRAY_Delete>
 8007948:	4620      	mov	r0, r4
 800794a:	f009 f887 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800794e:	4628      	mov	r0, r5
 8007950:	f004 fdfa 	bl	800c548 <WM_DefaultProc>
 8007954:	b003      	add	sp, #12
 8007956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800795a <RADIO_GetValue>:
 800795a:	b513      	push	{r0, r1, r4, lr}
 800795c:	4604      	mov	r4, r0
 800795e:	b148      	cbz	r0, 8007974 <RADIO_GetValue+0x1a>
 8007960:	f009 f86e 	bl	8010a40 <GUI_ALLOC_LockH>
 8007964:	ab02      	add	r3, sp, #8
 8007966:	f9b0 4060 	ldrsh.w	r4, [r0, #96]	; 0x60
 800796a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800796e:	4618      	mov	r0, r3
 8007970:	f009 f874 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007974:	4620      	mov	r0, r4
 8007976:	b002      	add	sp, #8
 8007978:	bd10      	pop	{r4, pc}

0800797a <_AdjustRect>:
 800797a:	b538      	push	{r3, r4, r5, lr}
 800797c:	4605      	mov	r5, r0
 800797e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8007980:	460c      	mov	r4, r1
 8007982:	f008 f963 	bl	800fc4c <GUI_GetYSizeOfFont>
 8007986:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800798a:	b90b      	cbnz	r3, 8007990 <_AdjustRect+0x16>
 800798c:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8007990:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 8007992:	4283      	cmp	r3, r0
 8007994:	bfac      	ite	ge
 8007996:	18d0      	addge	r0, r2, r3
 8007998:	1810      	addlt	r0, r2, r0
 800799a:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 800799c:	f013 0f08 	tst.w	r3, #8
 80079a0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80079a2:	d009      	beq.n	80079b8 <_AdjustRect+0x3e>
 80079a4:	075a      	lsls	r2, r3, #29
 80079a6:	d503      	bpl.n	80079b0 <_AdjustRect+0x36>
 80079a8:	8823      	ldrh	r3, [r4, #0]
 80079aa:	4418      	add	r0, r3
 80079ac:	8020      	strh	r0, [r4, #0]
 80079ae:	bd38      	pop	{r3, r4, r5, pc}
 80079b0:	88a3      	ldrh	r3, [r4, #4]
 80079b2:	1a18      	subs	r0, r3, r0
 80079b4:	80a0      	strh	r0, [r4, #4]
 80079b6:	bd38      	pop	{r3, r4, r5, pc}
 80079b8:	075b      	lsls	r3, r3, #29
 80079ba:	d503      	bpl.n	80079c4 <_AdjustRect+0x4a>
 80079bc:	88e3      	ldrh	r3, [r4, #6]
 80079be:	1a18      	subs	r0, r3, r0
 80079c0:	80e0      	strh	r0, [r4, #6]
 80079c2:	bd38      	pop	{r3, r4, r5, pc}
 80079c4:	8863      	ldrh	r3, [r4, #2]
 80079c6:	4418      	add	r0, r3
 80079c8:	8060      	strh	r0, [r4, #2]
 80079ca:	bd38      	pop	{r3, r4, r5, pc}

080079cc <_GetScrollbarH>:
 80079cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079ce:	f009 f837 	bl	8010a40 <GUI_ALLOC_LockH>
 80079d2:	ad02      	add	r5, sp, #8
 80079d4:	69c4      	ldr	r4, [r0, #28]
 80079d6:	f845 0d04 	str.w	r0, [r5, #-4]!
 80079da:	4628      	mov	r0, r5
 80079dc:	f009 f83e 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80079e0:	b154      	cbz	r4, 80079f8 <_GetScrollbarH+0x2c>
 80079e2:	4620      	mov	r0, r4
 80079e4:	f003 fb7d 	bl	800b0e2 <WM_GetId>
 80079e8:	28ff      	cmp	r0, #255	; 0xff
 80079ea:	d005      	beq.n	80079f8 <_GetScrollbarH+0x2c>
 80079ec:	4620      	mov	r0, r4
 80079ee:	f009 f827 	bl	8010a40 <GUI_ALLOC_LockH>
 80079f2:	9001      	str	r0, [sp, #4]
 80079f4:	6a04      	ldr	r4, [r0, #32]
 80079f6:	e7f0      	b.n	80079da <_GetScrollbarH+0xe>
 80079f8:	4620      	mov	r0, r4
 80079fa:	b003      	add	sp, #12
 80079fc:	bd30      	pop	{r4, r5, pc}

080079fe <_GetEnable>:
 80079fe:	b513      	push	{r0, r1, r4, lr}
 8007a00:	460c      	mov	r4, r1
 8007a02:	f009 f81d 	bl	8010a40 <GUI_ALLOC_LockH>
 8007a06:	9001      	str	r0, [sp, #4]
 8007a08:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8007a0a:	f000 fe16 	bl	800863a <GUI_ARRAY_GetNumItems>
 8007a0e:	4284      	cmp	r4, r0
 8007a10:	d20e      	bcs.n	8007a30 <_GetEnable+0x32>
 8007a12:	9b01      	ldr	r3, [sp, #4]
 8007a14:	4621      	mov	r1, r4
 8007a16:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007a18:	f000 fef5 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 8007a1c:	ab02      	add	r3, sp, #8
 8007a1e:	7904      	ldrb	r4, [r0, #4]
 8007a20:	f843 0d08 	str.w	r0, [r3, #-8]!
 8007a24:	4668      	mov	r0, sp
 8007a26:	f004 0401 	and.w	r4, r4, #1
 8007a2a:	f009 f817 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007a2e:	e000      	b.n	8007a32 <_GetEnable+0x34>
 8007a30:	2400      	movs	r4, #0
 8007a32:	a801      	add	r0, sp, #4
 8007a34:	f009 f812 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007a38:	4620      	mov	r0, r4
 8007a3a:	b002      	add	sp, #8
 8007a3c:	bd10      	pop	{r4, pc}

08007a3e <_AddScrollbar>:
 8007a3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a42:	b089      	sub	sp, #36	; 0x24
 8007a44:	4689      	mov	r9, r1
 8007a46:	4690      	mov	r8, r2
 8007a48:	4605      	mov	r5, r0
 8007a4a:	461f      	mov	r7, r3
 8007a4c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8007a4e:	f008 fff7 	bl	8010a40 <GUI_ALLOC_LockH>
 8007a52:	ac08      	add	r4, sp, #32
 8007a54:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007a56:	f844 0d04 	str.w	r0, [r4, #-4]!
 8007a5a:	f8b0 a032 	ldrh.w	sl, [r0, #50]	; 0x32
 8007a5e:	9305      	str	r3, [sp, #20]
 8007a60:	4620      	mov	r0, r4
 8007a62:	f008 fffb 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007a66:	4628      	mov	r0, r5
 8007a68:	f7ff ffb0 	bl	80079cc <_GetScrollbarH>
 8007a6c:	4683      	mov	fp, r0
 8007a6e:	b9a0      	cbnz	r0, 8007a9a <_AddScrollbar+0x5c>
 8007a70:	f00a 0308 	and.w	r3, sl, #8
 8007a74:	21ff      	movs	r1, #255	; 0xff
 8007a76:	2202      	movs	r2, #2
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	9500      	str	r5, [sp, #0]
 8007a7c:	9101      	str	r1, [sp, #4]
 8007a7e:	9202      	str	r2, [sp, #8]
 8007a80:	b103      	cbz	r3, 8007a84 <_AddScrollbar+0x46>
 8007a82:	2308      	movs	r3, #8
 8007a84:	9303      	str	r3, [sp, #12]
 8007a86:	4641      	mov	r1, r8
 8007a88:	4648      	mov	r0, r9
 8007a8a:	463a      	mov	r2, r7
 8007a8c:	4633      	mov	r3, r6
 8007a8e:	f009 fbda 	bl	8011246 <SCROLLBAR_Create>
 8007a92:	9905      	ldr	r1, [sp, #20]
 8007a94:	f009 faea 	bl	801106c <WIDGET_SetEffect>
 8007a98:	e008      	b.n	8007aac <_AddScrollbar+0x6e>
 8007a9a:	4649      	mov	r1, r9
 8007a9c:	4642      	mov	r2, r8
 8007a9e:	f003 f97c 	bl	800ad9a <WM_MoveChildTo>
 8007aa2:	4658      	mov	r0, fp
 8007aa4:	4639      	mov	r1, r7
 8007aa6:	4632      	mov	r2, r6
 8007aa8:	f002 ff07 	bl	800a8ba <WM_SetSize>
 8007aac:	4628      	mov	r0, r5
 8007aae:	f008 ffc7 	bl	8010a40 <GUI_ALLOC_LockH>
 8007ab2:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8007ab4:	9007      	str	r0, [sp, #28]
 8007ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aba:	8643      	strh	r3, [r0, #50]	; 0x32
 8007abc:	4620      	mov	r0, r4
 8007abe:	f008 ffcd 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007ac2:	b009      	add	sp, #36	; 0x24
 8007ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ac8 <_SetScrollbar>:
 8007ac8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007aca:	460c      	mov	r4, r1
 8007acc:	4606      	mov	r6, r0
 8007ace:	f7ff ff7d 	bl	80079cc <_GetScrollbarH>
 8007ad2:	4621      	mov	r1, r4
 8007ad4:	4605      	mov	r5, r0
 8007ad6:	f009 fea5 	bl	8011824 <SCROLLBAR_SetNumItems>
 8007ada:	4628      	mov	r0, r5
 8007adc:	2101      	movs	r1, #1
 8007ade:	f009 feb4 	bl	801184a <SCROLLBAR_SetPageSize>
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	f008 ffac 	bl	8010a40 <GUI_ALLOC_LockH>
 8007ae8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007aea:	9001      	str	r0, [sp, #4]
 8007aec:	42a2      	cmp	r2, r4
 8007aee:	4603      	mov	r3, r0
 8007af0:	db07      	blt.n	8007b02 <_SetScrollbar+0x3a>
 8007af2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8007af4:	f012 0201 	ands.w	r2, r2, #1
 8007af8:	bf1a      	itte	ne
 8007afa:	f104 34ff 	addne.w	r4, r4, #4294967295
 8007afe:	6444      	strne	r4, [r0, #68]	; 0x44
 8007b00:	6442      	streq	r2, [r0, #68]	; 0x44
 8007b02:	4628      	mov	r0, r5
 8007b04:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007b06:	f009 fc7d 	bl	8011404 <SCROLLBAR_SetValue>
 8007b0a:	a801      	add	r0, sp, #4
 8007b0c:	f008 ffa6 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007b10:	b002      	add	sp, #8
 8007b12:	bd70      	pop	{r4, r5, r6, pc}

08007b14 <_ShowPage>:
 8007b14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007b16:	460d      	mov	r5, r1
 8007b18:	f008 ff92 	bl	8010a40 <GUI_ALLOC_LockH>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	a804      	add	r0, sp, #16
 8007b20:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8007b22:	f840 2d0c 	str.w	r2, [r0, #-12]!
 8007b26:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8007b28:	f008 ff98 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	f008 ff87 	bl	8010a40 <GUI_ALLOC_LockH>
 8007b32:	9002      	str	r0, [sp, #8]
 8007b34:	4620      	mov	r0, r4
 8007b36:	f000 fd80 	bl	800863a <GUI_ARRAY_GetNumItems>
 8007b3a:	4285      	cmp	r5, r0
 8007b3c:	d20b      	bcs.n	8007b56 <_ShowPage+0x42>
 8007b3e:	4629      	mov	r1, r5
 8007b40:	4620      	mov	r0, r4
 8007b42:	f000 fe60 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 8007b46:	ab04      	add	r3, sp, #16
 8007b48:	6805      	ldr	r5, [r0, #0]
 8007b4a:	f843 0d10 	str.w	r0, [r3, #-16]!
 8007b4e:	4668      	mov	r0, sp
 8007b50:	f008 ff84 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007b54:	e000      	b.n	8007b58 <_ShowPage+0x44>
 8007b56:	2500      	movs	r5, #0
 8007b58:	a804      	add	r0, sp, #16
 8007b5a:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 8007b5e:	69dc      	ldr	r4, [r3, #28]
 8007b60:	f008 ff7c 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007b64:	b1cc      	cbz	r4, 8007b9a <_ShowPage+0x86>
 8007b66:	42ac      	cmp	r4, r5
 8007b68:	4620      	mov	r0, r4
 8007b6a:	d10b      	bne.n	8007b84 <_ShowPage+0x70>
 8007b6c:	f002 fe5b 	bl	800a826 <WM_ShowWindow>
 8007b70:	f003 fac8 	bl	800b104 <WM_GetFocussedWindow>
 8007b74:	4621      	mov	r1, r4
 8007b76:	f002 fd83 	bl	800a680 <WM__IsChild>
 8007b7a:	b928      	cbnz	r0, 8007b88 <_ShowPage+0x74>
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	f002 ff3d 	bl	800a9fc <WM_SetFocus>
 8007b82:	e001      	b.n	8007b88 <_ShowPage+0x74>
 8007b84:	f003 fa03 	bl	800af8e <WM_HideWindow>
 8007b88:	4620      	mov	r0, r4
 8007b8a:	f008 ff59 	bl	8010a40 <GUI_ALLOC_LockH>
 8007b8e:	ab04      	add	r3, sp, #16
 8007b90:	6a04      	ldr	r4, [r0, #32]
 8007b92:	f843 0d04 	str.w	r0, [r3, #-4]!
 8007b96:	4618      	mov	r0, r3
 8007b98:	e7e2      	b.n	8007b60 <_ShowPage+0x4c>
 8007b9a:	b004      	add	sp, #16
 8007b9c:	bd70      	pop	{r4, r5, r6, pc}

08007b9e <MULTIPAGE__CalcBorderRect>:
 8007b9e:	b538      	push	{r3, r4, r5, lr}
 8007ba0:	4605      	mov	r5, r0
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	f004 f859 	bl	800bc5a <WM__GetClientRectWin>
 8007ba8:	4628      	mov	r0, r5
 8007baa:	4621      	mov	r1, r4
 8007bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bb0:	f7ff bee3 	b.w	800797a <_AdjustRect>

08007bb4 <MULTIPAGE__CalcClientRect>:
 8007bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bb6:	460d      	mov	r5, r1
 8007bb8:	f008 ff42 	bl	8010a40 <GUI_ALLOC_LockH>
 8007bbc:	ac02      	add	r4, sp, #8
 8007bbe:	4629      	mov	r1, r5
 8007bc0:	9001      	str	r0, [sp, #4]
 8007bc2:	f7ff fa96 	bl	80070f2 <WIDGET__GetInsideRect>
 8007bc6:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 8007bca:	4629      	mov	r1, r5
 8007bcc:	f7ff fed5 	bl	800797a <_AdjustRect>
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	f008 ff43 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007bd6:	b003      	add	sp, #12
 8007bd8:	bd30      	pop	{r4, r5, pc}

08007bda <MULTIPAGE__DeleteScrollbar>:
 8007bda:	b513      	push	{r0, r1, r4, lr}
 8007bdc:	4604      	mov	r4, r0
 8007bde:	f7ff fef5 	bl	80079cc <_GetScrollbarH>
 8007be2:	f004 f96d 	bl	800bec0 <WM_DeleteWindow>
 8007be6:	4620      	mov	r0, r4
 8007be8:	f008 ff2a 	bl	8010a40 <GUI_ALLOC_LockH>
 8007bec:	ab02      	add	r3, sp, #8
 8007bee:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8007bf0:	f843 0d04 	str.w	r0, [r3, #-4]!
 8007bf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bf8:	8642      	strh	r2, [r0, #50]	; 0x32
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f008 ff2e 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007c00:	b002      	add	sp, #8
 8007c02:	bd10      	pop	{r4, pc}

08007c04 <MULTIPAGE__GetPageWidth>:
 8007c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c06:	460d      	mov	r5, r1
 8007c08:	f008 ff1a 	bl	8010a40 <GUI_ALLOC_LockH>
 8007c0c:	9001      	str	r0, [sp, #4]
 8007c0e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8007c10:	f000 fd13 	bl	800863a <GUI_ARRAY_GetNumItems>
 8007c14:	9b01      	ldr	r3, [sp, #4]
 8007c16:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8007c18:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007c1a:	8e59      	ldrh	r1, [r3, #50]	; 0x32
 8007c1c:	2908      	cmp	r1, #8
 8007c1e:	bf08      	it	eq
 8007c20:	4614      	moveq	r4, r2
 8007c22:	4285      	cmp	r5, r0
 8007c24:	d22e      	bcs.n	8007c84 <MULTIPAGE__GetPageWidth+0x80>
 8007c26:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007c28:	f007 fdf0 	bl	800f80c <GUI_SetFont>
 8007c2c:	9b01      	ldr	r3, [sp, #4]
 8007c2e:	4629      	mov	r1, r5
 8007c30:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007c32:	f000 fde8 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 8007c36:	6885      	ldr	r5, [r0, #8]
 8007c38:	9000      	str	r0, [sp, #0]
 8007c3a:	b10d      	cbz	r5, 8007c40 <MULTIPAGE__GetPageWidth+0x3c>
 8007c3c:	442c      	add	r4, r5
 8007c3e:	e01d      	b.n	8007c7c <MULTIPAGE__GetPageWidth+0x78>
 8007c40:	3018      	adds	r0, #24
 8007c42:	f008 f80b 	bl	800fc5c <GUI_GetStringDistX>
 8007c46:	462e      	mov	r6, r5
 8007c48:	1907      	adds	r7, r0, r4
 8007c4a:	9b00      	ldr	r3, [sp, #0]
 8007c4c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8007c50:	68d8      	ldr	r0, [r3, #12]
 8007c52:	b160      	cbz	r0, 8007c6e <MULTIPAGE__GetPageWidth+0x6a>
 8007c54:	9b01      	ldr	r3, [sp, #4]
 8007c56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c58:	071b      	lsls	r3, r3, #28
 8007c5a:	d502      	bpl.n	8007c62 <MULTIPAGE__GetPageWidth+0x5e>
 8007c5c:	f000 fcba 	bl	80085d4 <GUI_DRAW__GetYSize>
 8007c60:	e001      	b.n	8007c66 <MULTIPAGE__GetPageWidth+0x62>
 8007c62:	f000 fca5 	bl	80085b0 <GUI_DRAW__GetXSize>
 8007c66:	4420      	add	r0, r4
 8007c68:	4286      	cmp	r6, r0
 8007c6a:	bfb8      	it	lt
 8007c6c:	4606      	movlt	r6, r0
 8007c6e:	3501      	adds	r5, #1
 8007c70:	2d03      	cmp	r5, #3
 8007c72:	d1ea      	bne.n	8007c4a <MULTIPAGE__GetPageWidth+0x46>
 8007c74:	42be      	cmp	r6, r7
 8007c76:	bfac      	ite	ge
 8007c78:	4634      	movge	r4, r6
 8007c7a:	463c      	movlt	r4, r7
 8007c7c:	4668      	mov	r0, sp
 8007c7e:	f008 feed 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007c82:	e000      	b.n	8007c86 <MULTIPAGE__GetPageWidth+0x82>
 8007c84:	2400      	movs	r4, #0
 8007c86:	a801      	add	r0, sp, #4
 8007c88:	f008 fee8 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	b003      	add	sp, #12
 8007c90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c92 <MULTIPAGE__GetTabBarRect>:
 8007c92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c96:	b085      	sub	sp, #20
 8007c98:	460c      	mov	r4, r1
 8007c9a:	4606      	mov	r6, r0
 8007c9c:	f008 fed0 	bl	8010a40 <GUI_ALLOC_LockH>
 8007ca0:	9001      	str	r0, [sp, #4]
 8007ca2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8007ca4:	f007 ffd2 	bl	800fc4c <GUI_GetYSizeOfFont>
 8007ca8:	9b01      	ldr	r3, [sp, #4]
 8007caa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007cae:	b90a      	cbnz	r2, 8007cb4 <MULTIPAGE__GetTabBarRect+0x22>
 8007cb0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007cb4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8007cb6:	f8b3 9032 	ldrh.w	r9, [r3, #50]	; 0x32
 8007cba:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8007cbc:	6f9f      	ldr	r7, [r3, #120]	; 0x78
 8007cbe:	4282      	cmp	r2, r0
 8007cc0:	bfac      	ite	ge
 8007cc2:	eb01 0802 	addge.w	r8, r1, r2
 8007cc6:	eb01 0800 	addlt.w	r8, r1, r0
 8007cca:	4618      	mov	r0, r3
 8007ccc:	a902      	add	r1, sp, #8
 8007cce:	f7ff ff66 	bl	8007b9e <MULTIPAGE__CalcBorderRect>
 8007cd2:	a801      	add	r0, sp, #4
 8007cd4:	f008 fec2 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007cd8:	f019 0f08 	tst.w	r9, #8
 8007cdc:	f005 0304 	and.w	r3, r5, #4
 8007ce0:	f409 7180 	and.w	r1, r9, #256	; 0x100
 8007ce4:	f005 0501 	and.w	r5, r5, #1
 8007ce8:	d01d      	beq.n	8007d26 <MULTIPAGE__GetTabBarRect+0x94>
 8007cea:	b10b      	cbz	r3, 8007cf0 <MULTIPAGE__GetTabBarRect+0x5e>
 8007cec:	2300      	movs	r3, #0
 8007cee:	e001      	b.n	8007cf4 <MULTIPAGE__GetTabBarRect+0x62>
 8007cf0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8007cf4:	8023      	strh	r3, [r4, #0]
 8007cf6:	8822      	ldrh	r2, [r4, #0]
 8007cf8:	4490      	add	r8, r2
 8007cfa:	f8a4 8004 	strh.w	r8, [r4, #4]
 8007cfe:	b119      	cbz	r1, 8007d08 <MULTIPAGE__GetTabBarRect+0x76>
 8007d00:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
 8007d04:	3820      	subs	r0, #32
 8007d06:	e001      	b.n	8007d0c <MULTIPAGE__GetTabBarRect+0x7a>
 8007d08:	4630      	mov	r0, r6
 8007d0a:	47b8      	blx	r7
 8007d0c:	b145      	cbz	r5, 8007d20 <MULTIPAGE__GetTabBarRect+0x8e>
 8007d0e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8007d12:	80e3      	strh	r3, [r4, #6]
 8007d14:	b21a      	sxth	r2, r3
 8007d16:	1a10      	subs	r0, r2, r0
 8007d18:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007d1c:	8060      	strh	r0, [r4, #2]
 8007d1e:	e01a      	b.n	8007d56 <MULTIPAGE__GetTabBarRect+0xc4>
 8007d20:	8065      	strh	r5, [r4, #2]
 8007d22:	80e0      	strh	r0, [r4, #6]
 8007d24:	e017      	b.n	8007d56 <MULTIPAGE__GetTabBarRect+0xc4>
 8007d26:	b10b      	cbz	r3, 8007d2c <MULTIPAGE__GetTabBarRect+0x9a>
 8007d28:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8007d2c:	8063      	strh	r3, [r4, #2]
 8007d2e:	8862      	ldrh	r2, [r4, #2]
 8007d30:	4490      	add	r8, r2
 8007d32:	f8a4 8006 	strh.w	r8, [r4, #6]
 8007d36:	b119      	cbz	r1, 8007d40 <MULTIPAGE__GetTabBarRect+0xae>
 8007d38:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8007d3c:	3820      	subs	r0, #32
 8007d3e:	e001      	b.n	8007d44 <MULTIPAGE__GetTabBarRect+0xb2>
 8007d40:	4630      	mov	r0, r6
 8007d42:	47b8      	blx	r7
 8007d44:	b12d      	cbz	r5, 8007d52 <MULTIPAGE__GetTabBarRect+0xc0>
 8007d46:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8007d4a:	80a3      	strh	r3, [r4, #4]
 8007d4c:	1a18      	subs	r0, r3, r0
 8007d4e:	8020      	strh	r0, [r4, #0]
 8007d50:	e001      	b.n	8007d56 <MULTIPAGE__GetTabBarRect+0xc4>
 8007d52:	8025      	strh	r5, [r4, #0]
 8007d54:	80a0      	strh	r0, [r4, #4]
 8007d56:	b005      	add	sp, #20
 8007d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007d5c <MULTIPAGE__UpdatePositions>:
 8007d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d60:	b088      	sub	sp, #32
 8007d62:	4604      	mov	r4, r0
 8007d64:	f008 fe6c 	bl	8010a40 <GUI_ALLOC_LockH>
 8007d68:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8007d6a:	9003      	str	r0, [sp, #12]
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	4798      	blx	r3
 8007d70:	4605      	mov	r5, r0
 8007d72:	9803      	ldr	r0, [sp, #12]
 8007d74:	a904      	add	r1, sp, #16
 8007d76:	f8b0 a032 	ldrh.w	sl, [r0, #50]	; 0x32
 8007d7a:	f8d0 9048 	ldr.w	r9, [r0, #72]	; 0x48
 8007d7e:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 8007d80:	f8d0 8070 	ldr.w	r8, [r0, #112]	; 0x70
 8007d84:	6b87      	ldr	r7, [r0, #56]	; 0x38
 8007d86:	f7ff ff0a 	bl	8007b9e <MULTIPAGE__CalcBorderRect>
 8007d8a:	a803      	add	r0, sp, #12
 8007d8c:	f008 fe66 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007d90:	f01a 0f08 	tst.w	sl, #8
 8007d94:	d03f      	beq.n	8007e16 <MULTIPAGE__UpdatePositions+0xba>
 8007d96:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8007d9a:	429d      	cmp	r5, r3
 8007d9c:	dd3f      	ble.n	8007e1e <MULTIPAGE__UpdatePositions+0xc2>
 8007d9e:	4648      	mov	r0, r9
 8007da0:	f007 ff54 	bl	800fc4c <GUI_GetYSizeOfFont>
 8007da4:	3006      	adds	r0, #6
 8007da6:	2204      	movs	r2, #4
 8007da8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8007dac:	fb90 f3f2 	sdiv	r3, r0, r2
 8007db0:	07f2      	lsls	r2, r6, #31
 8007db2:	bf57      	itett	pl
 8007db4:	f9bd 2016 	ldrshpl.w	r2, [sp, #22]
 8007db8:	f9bd 2012 	ldrshmi.w	r2, [sp, #18]
 8007dbc:	eba2 0243 	subpl.w	r2, r2, r3, lsl #1
 8007dc0:	3201      	addpl	r2, #1
 8007dc2:	0770      	lsls	r0, r6, #29
 8007dc4:	bf49      	itett	mi
 8007dc6:	f9bd 1010 	ldrshmi.w	r1, [sp, #16]
 8007dca:	f9bd 1014 	ldrshpl.w	r1, [sp, #20]
 8007dce:	ebc3 0101 	rsbmi	r1, r3, r1
 8007dd2:	3101      	addmi	r1, #1
 8007dd4:	f1b8 0f00 	cmp.w	r8, #0
 8007dd8:	d004      	beq.n	8007de4 <MULTIPAGE__UpdatePositions+0x88>
 8007dda:	0058      	lsls	r0, r3, #1
 8007ddc:	9000      	str	r0, [sp, #0]
 8007dde:	4620      	mov	r0, r4
 8007de0:	f7ff fe2d 	bl	8007a3e <_AddScrollbar>
 8007de4:	4620      	mov	r0, r4
 8007de6:	a906      	add	r1, sp, #24
 8007de8:	f7ff ff53 	bl	8007c92 <MULTIPAGE__GetTabBarRect>
 8007dec:	2300      	movs	r3, #0
 8007dee:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8007df2:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8007df6:	1a8a      	subs	r2, r1, r2
 8007df8:	2a00      	cmp	r2, #0
 8007dfa:	bfcc      	ite	gt
 8007dfc:	3201      	addgt	r2, #1
 8007dfe:	2201      	movle	r2, #1
 8007e00:	4295      	cmp	r5, r2
 8007e02:	4620      	mov	r0, r4
 8007e04:	f103 0601 	add.w	r6, r3, #1
 8007e08:	db4c      	blt.n	8007ea4 <MULTIPAGE__UpdatePositions+0x148>
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	f7ff fefa 	bl	8007c04 <MULTIPAGE__GetPageWidth>
 8007e10:	4633      	mov	r3, r6
 8007e12:	1a2d      	subs	r5, r5, r0
 8007e14:	e7eb      	b.n	8007dee <MULTIPAGE__UpdatePositions+0x92>
 8007e16:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8007e1a:	429d      	cmp	r5, r3
 8007e1c:	dc03      	bgt.n	8007e26 <MULTIPAGE__UpdatePositions+0xca>
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f7ff fedb 	bl	8007bda <MULTIPAGE__DeleteScrollbar>
 8007e24:	e041      	b.n	8007eaa <MULTIPAGE__UpdatePositions+0x14e>
 8007e26:	4648      	mov	r0, r9
 8007e28:	f007 ff10 	bl	800fc4c <GUI_GetYSizeOfFont>
 8007e2c:	07f1      	lsls	r1, r6, #31
 8007e2e:	f100 0006 	add.w	r0, r0, #6
 8007e32:	f04f 0204 	mov.w	r2, #4
 8007e36:	bf54      	ite	pl
 8007e38:	f9bd 1014 	ldrshpl.w	r1, [sp, #20]
 8007e3c:	f9bd 1010 	ldrshmi.w	r1, [sp, #16]
 8007e40:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8007e44:	fb90 f3f2 	sdiv	r3, r0, r2
 8007e48:	bf5c      	itt	pl
 8007e4a:	eba1 0143 	subpl.w	r1, r1, r3, lsl #1
 8007e4e:	3101      	addpl	r1, #1
 8007e50:	0772      	lsls	r2, r6, #29
 8007e52:	bf57      	itett	pl
 8007e54:	f9bd 2012 	ldrshpl.w	r2, [sp, #18]
 8007e58:	f9bd 2016 	ldrshmi.w	r2, [sp, #22]
 8007e5c:	ebc3 0202 	rsbpl	r2, r3, r2
 8007e60:	3201      	addpl	r2, #1
 8007e62:	f1b8 0f00 	cmp.w	r8, #0
 8007e66:	d004      	beq.n	8007e72 <MULTIPAGE__UpdatePositions+0x116>
 8007e68:	9300      	str	r3, [sp, #0]
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	005b      	lsls	r3, r3, #1
 8007e6e:	f7ff fde6 	bl	8007a3e <_AddScrollbar>
 8007e72:	4620      	mov	r0, r4
 8007e74:	a906      	add	r1, sp, #24
 8007e76:	f7ff ff0c 	bl	8007c92 <MULTIPAGE__GetTabBarRect>
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 8007e80:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8007e84:	1a8a      	subs	r2, r1, r2
 8007e86:	2a00      	cmp	r2, #0
 8007e88:	bfcc      	ite	gt
 8007e8a:	3201      	addgt	r2, #1
 8007e8c:	2201      	movle	r2, #1
 8007e8e:	4295      	cmp	r5, r2
 8007e90:	4620      	mov	r0, r4
 8007e92:	f103 0601 	add.w	r6, r3, #1
 8007e96:	db05      	blt.n	8007ea4 <MULTIPAGE__UpdatePositions+0x148>
 8007e98:	4619      	mov	r1, r3
 8007e9a:	f7ff feb3 	bl	8007c04 <MULTIPAGE__GetPageWidth>
 8007e9e:	4633      	mov	r3, r6
 8007ea0:	1a2d      	subs	r5, r5, r0
 8007ea2:	e7eb      	b.n	8007e7c <MULTIPAGE__UpdatePositions+0x120>
 8007ea4:	4631      	mov	r1, r6
 8007ea6:	f7ff fe0f 	bl	8007ac8 <_SetScrollbar>
 8007eaa:	4620      	mov	r0, r4
 8007eac:	a904      	add	r1, sp, #16
 8007eae:	f7ff fe81 	bl	8007bb4 <MULTIPAGE__CalcClientRect>
 8007eb2:	4638      	mov	r0, r7
 8007eb4:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8007eb8:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8007ebc:	f002 ff6d 	bl	800ad9a <WM_MoveChildTo>
 8007ec0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8007ec4:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 8007ec8:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8007ecc:	1ac9      	subs	r1, r1, r3
 8007ece:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8007ed2:	1ad2      	subs	r2, r2, r3
 8007ed4:	4638      	mov	r0, r7
 8007ed6:	3101      	adds	r1, #1
 8007ed8:	3201      	adds	r2, #1
 8007eda:	f002 fcee 	bl	800a8ba <WM_SetSize>
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f003 ff03 	bl	800bcea <WM_InvalidateWindow>
 8007ee4:	b008      	add	sp, #32
 8007ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08007eec <MULTIPAGE_CreateUser>:
 8007eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eee:	b089      	sub	sp, #36	; 0x24
 8007ef0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007ef2:	9400      	str	r4, [sp, #0]
 8007ef4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8007ef6:	f044 0401 	orr.w	r4, r4, #1
 8007efa:	9401      	str	r4, [sp, #4]
 8007efc:	4c33      	ldr	r4, [pc, #204]	; (8007fcc <MULTIPAGE_CreateUser+0xe0>)
 8007efe:	9402      	str	r4, [sp, #8]
 8007f00:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8007f02:	3460      	adds	r4, #96	; 0x60
 8007f04:	9403      	str	r4, [sp, #12]
 8007f06:	f003 ff31 	bl	800bd6c <WM_CreateWindowAsChild>
 8007f0a:	4606      	mov	r6, r0
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d059      	beq.n	8007fc4 <MULTIPAGE_CreateUser+0xd8>
 8007f10:	f000 fc8c 	bl	800882c <GUI_ARRAY_Create>
 8007f14:	4604      	mov	r4, r0
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d054      	beq.n	8007fc4 <MULTIPAGE_CreateUser+0xd8>
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	f008 fd90 	bl	8010a40 <GUI_ALLOC_LockH>
 8007f20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f22:	4d2b      	ldr	r5, [pc, #172]	; (8007fd0 <MULTIPAGE_CreateUser+0xe4>)
 8007f24:	63c4      	str	r4, [r0, #60]	; 0x3c
 8007f26:	f012 0f08 	tst.w	r2, #8
 8007f2a:	bf14      	ite	ne
 8007f2c:	2218      	movne	r2, #24
 8007f2e:	2210      	moveq	r2, #16
 8007f30:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007f32:	9005      	str	r0, [sp, #20]
 8007f34:	f7ff f928 	bl	8007188 <WIDGET__Init>
 8007f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f3a:	9f05      	ldr	r7, [sp, #20]
 8007f3c:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8007f40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f4a:	682b      	ldr	r3, [r5, #0]
 8007f4c:	6023      	str	r3, [r4, #0]
 8007f4e:	4d21      	ldr	r5, [pc, #132]	; (8007fd4 <MULTIPAGE_CreateUser+0xe8>)
 8007f50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f54:	643b      	str	r3, [r7, #64]	; 0x40
 8007f56:	4b20      	ldr	r3, [pc, #128]	; (8007fd8 <MULTIPAGE_CreateUser+0xec>)
 8007f58:	637b      	str	r3, [r7, #52]	; 0x34
 8007f5a:	2400      	movs	r4, #0
 8007f5c:	682b      	ldr	r3, [r5, #0]
 8007f5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007f60:	a906      	add	r1, sp, #24
 8007f62:	4630      	mov	r0, r6
 8007f64:	647c      	str	r4, [r7, #68]	; 0x44
 8007f66:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
 8007f6a:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8007f6e:	f7ff fe21 	bl	8007bb4 <MULTIPAGE__CalcClientRect>
 8007f72:	a805      	add	r0, sp, #20
 8007f74:	f008 fd72 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007f78:	682b      	ldr	r3, [r5, #0]
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	4798      	blx	r3
 8007f80:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8007f84:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 8007f88:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8007f8c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8007f90:	9403      	str	r4, [sp, #12]
 8007f92:	f240 7582 	movw	r5, #1922	; 0x782
 8007f96:	1a12      	subs	r2, r2, r0
 8007f98:	1a5b      	subs	r3, r3, r1
 8007f9a:	9501      	str	r5, [sp, #4]
 8007f9c:	4d0f      	ldr	r5, [pc, #60]	; (8007fdc <MULTIPAGE_CreateUser+0xf0>)
 8007f9e:	9600      	str	r6, [sp, #0]
 8007fa0:	9502      	str	r5, [sp, #8]
 8007fa2:	3201      	adds	r2, #1
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	f003 fee1 	bl	800bd6c <WM_CreateWindowAsChild>
 8007faa:	4604      	mov	r4, r0
 8007fac:	b138      	cbz	r0, 8007fbe <MULTIPAGE_CreateUser+0xd2>
 8007fae:	4630      	mov	r0, r6
 8007fb0:	f008 fd46 	bl	8010a40 <GUI_ALLOC_LockH>
 8007fb4:	9005      	str	r0, [sp, #20]
 8007fb6:	6384      	str	r4, [r0, #56]	; 0x38
 8007fb8:	a805      	add	r0, sp, #20
 8007fba:	f008 fd4f 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8007fbe:	4630      	mov	r0, r6
 8007fc0:	f7ff fecc 	bl	8007d5c <MULTIPAGE__UpdatePositions>
 8007fc4:	4630      	mov	r0, r6
 8007fc6:	b009      	add	sp, #36	; 0x24
 8007fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	0800807f 	.word	0x0800807f
 8007fd0:	200001e4 	.word	0x200001e4
 8007fd4:	20000220 	.word	0x20000220
 8007fd8:	08011d8d 	.word	0x08011d8d
 8007fdc:	08008319 	.word	0x08008319

08007fe0 <MULTIPAGE_CreateEx>:
 8007fe0:	b510      	push	{r4, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	9c08      	ldr	r4, [sp, #32]
 8007fe6:	9400      	str	r4, [sp, #0]
 8007fe8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007fea:	9401      	str	r4, [sp, #4]
 8007fec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007fee:	9402      	str	r4, [sp, #8]
 8007ff0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007ff2:	9403      	str	r4, [sp, #12]
 8007ff4:	2400      	movs	r4, #0
 8007ff6:	9404      	str	r4, [sp, #16]
 8007ff8:	f7ff ff78 	bl	8007eec <MULTIPAGE_CreateUser>
 8007ffc:	b006      	add	sp, #24
 8007ffe:	bd10      	pop	{r4, pc}

08008000 <MULTIPAGE_SelectPage>:
 8008000:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008004:	460c      	mov	r4, r1
 8008006:	4605      	mov	r5, r0
 8008008:	2800      	cmp	r0, #0
 800800a:	d035      	beq.n	8008078 <MULTIPAGE_SelectPage+0x78>
 800800c:	f008 fd18 	bl	8010a40 <GUI_ALLOC_LockH>
 8008010:	ae02      	add	r6, sp, #8
 8008012:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8008014:	f846 0d04 	str.w	r0, [r6, #-4]!
 8008018:	f8d0 8040 	ldr.w	r8, [r0, #64]	; 0x40
 800801c:	4638      	mov	r0, r7
 800801e:	f000 fb0c 	bl	800863a <GUI_ARRAY_GetNumItems>
 8008022:	4681      	mov	r9, r0
 8008024:	4630      	mov	r0, r6
 8008026:	f008 fd19 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800802a:	454c      	cmp	r4, r9
 800802c:	d224      	bcs.n	8008078 <MULTIPAGE_SelectPage+0x78>
 800802e:	4628      	mov	r0, r5
 8008030:	4621      	mov	r1, r4
 8008032:	f7ff fce4 	bl	80079fe <_GetEnable>
 8008036:	b1f8      	cbz	r0, 8008078 <MULTIPAGE_SelectPage+0x78>
 8008038:	4544      	cmp	r4, r8
 800803a:	d00f      	beq.n	800805c <MULTIPAGE_SelectPage+0x5c>
 800803c:	4621      	mov	r1, r4
 800803e:	4628      	mov	r0, r5
 8008040:	f7ff fd68 	bl	8007b14 <_ShowPage>
 8008044:	4628      	mov	r0, r5
 8008046:	f008 fcfb 	bl	8010a40 <GUI_ALLOC_LockH>
 800804a:	9001      	str	r0, [sp, #4]
 800804c:	6404      	str	r4, [r0, #64]	; 0x40
 800804e:	4630      	mov	r0, r6
 8008050:	f008 fd04 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008054:	4628      	mov	r0, r5
 8008056:	f7ff fe81 	bl	8007d5c <MULTIPAGE__UpdatePositions>
 800805a:	e00d      	b.n	8008078 <MULTIPAGE_SelectPage+0x78>
 800805c:	4621      	mov	r1, r4
 800805e:	4638      	mov	r0, r7
 8008060:	f000 fbd1 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 8008064:	ab02      	add	r3, sp, #8
 8008066:	6804      	ldr	r4, [r0, #0]
 8008068:	f843 0d08 	str.w	r0, [r3, #-8]!
 800806c:	4668      	mov	r0, sp
 800806e:	f008 fcf5 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008072:	4620      	mov	r0, r4
 8008074:	f002 fcc2 	bl	800a9fc <WM_SetFocus>
 8008078:	b003      	add	sp, #12
 800807a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800807e <MULTIPAGE_Callback>:
 800807e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008082:	6844      	ldr	r4, [r0, #4]
 8008084:	4605      	mov	r5, r0
 8008086:	2c00      	cmp	r4, #0
 8008088:	f000 8102 	beq.w	8008290 <MULTIPAGE_Callback+0x212>
 800808c:	6803      	ldr	r3, [r0, #0]
 800808e:	2b1e      	cmp	r3, #30
 8008090:	d12d      	bne.n	80080ee <MULTIPAGE_Callback+0x70>
 8008092:	68c3      	ldr	r3, [r0, #12]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d130      	bne.n	80080fa <MULTIPAGE_Callback+0x7c>
 8008098:	4620      	mov	r0, r4
 800809a:	f008 fcd1 	bl	8010a40 <GUI_ALLOC_LockH>
 800809e:	4602      	mov	r2, r0
 80080a0:	a802      	add	r0, sp, #8
 80080a2:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 80080a4:	f840 2d04 	str.w	r2, [r0, #-4]!
 80080a8:	6c17      	ldr	r7, [r2, #64]	; 0x40
 80080aa:	f008 fcd7 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80080ae:	4630      	mov	r0, r6
 80080b0:	f000 fac3 	bl	800863a <GUI_ARRAY_GetNumItems>
 80080b4:	4287      	cmp	r7, r0
 80080b6:	d20b      	bcs.n	80080d0 <MULTIPAGE_Callback+0x52>
 80080b8:	4630      	mov	r0, r6
 80080ba:	4639      	mov	r1, r7
 80080bc:	f000 fba3 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 80080c0:	ab02      	add	r3, sp, #8
 80080c2:	6806      	ldr	r6, [r0, #0]
 80080c4:	f843 0d08 	str.w	r0, [r3, #-8]!
 80080c8:	4668      	mov	r0, sp
 80080ca:	f008 fcc7 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80080ce:	e000      	b.n	80080d2 <MULTIPAGE_Callback+0x54>
 80080d0:	2600      	movs	r6, #0
 80080d2:	4630      	mov	r0, r6
 80080d4:	f002 ff42 	bl	800af5c <WM_IsVisible>
 80080d8:	b178      	cbz	r0, 80080fa <MULTIPAGE_Callback+0x7c>
 80080da:	f003 f813 	bl	800b104 <WM_GetFocussedWindow>
 80080de:	4631      	mov	r1, r6
 80080e0:	f002 face 	bl	800a680 <WM__IsChild>
 80080e4:	b948      	cbnz	r0, 80080fa <MULTIPAGE_Callback+0x7c>
 80080e6:	4630      	mov	r0, r6
 80080e8:	f002 fc88 	bl	800a9fc <WM_SetFocus>
 80080ec:	e005      	b.n	80080fa <MULTIPAGE_Callback+0x7c>
 80080ee:	4620      	mov	r0, r4
 80080f0:	4629      	mov	r1, r5
 80080f2:	f7ff f851 	bl	8007198 <WIDGET_HandleActive>
 80080f6:	4606      	mov	r6, r0
 80080f8:	e000      	b.n	80080fc <MULTIPAGE_Callback+0x7e>
 80080fa:	2600      	movs	r6, #0
 80080fc:	682b      	ldr	r3, [r5, #0]
 80080fe:	2b14      	cmp	r3, #20
 8008100:	f000 80ad 	beq.w	800825e <MULTIPAGE_Callback+0x1e0>
 8008104:	dc08      	bgt.n	8008118 <MULTIPAGE_Callback+0x9a>
 8008106:	2b0b      	cmp	r3, #11
 8008108:	f000 80b2 	beq.w	8008270 <MULTIPAGE_Callback+0x1f2>
 800810c:	2b0f      	cmp	r3, #15
 800810e:	d024      	beq.n	800815a <MULTIPAGE_Callback+0xdc>
 8008110:	2b05      	cmp	r3, #5
 8008112:	f040 80b9 	bne.w	8008288 <MULTIPAGE_Callback+0x20a>
 8008116:	e0a7      	b.n	8008268 <MULTIPAGE_Callback+0x1ea>
 8008118:	2b26      	cmp	r3, #38	; 0x26
 800811a:	f000 8086 	beq.w	800822a <MULTIPAGE_Callback+0x1ac>
 800811e:	dc0e      	bgt.n	800813e <MULTIPAGE_Callback+0xc0>
 8008120:	2b17      	cmp	r3, #23
 8008122:	f040 80b1 	bne.w	8008288 <MULTIPAGE_Callback+0x20a>
 8008126:	4620      	mov	r0, r4
 8008128:	f008 fc8a 	bl	8010a40 <GUI_ALLOC_LockH>
 800812c:	ab02      	add	r3, sp, #8
 800812e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8008130:	f843 0d04 	str.w	r0, [r3, #-4]!
 8008134:	60ea      	str	r2, [r5, #12]
 8008136:	4618      	mov	r0, r3
 8008138:	f008 fc90 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800813c:	e0a8      	b.n	8008290 <MULTIPAGE_Callback+0x212>
 800813e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8008142:	d01b      	beq.n	800817c <MULTIPAGE_Callback+0xfe>
 8008144:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008148:	f040 809e 	bne.w	8008288 <MULTIPAGE_Callback+0x20a>
 800814c:	4620      	mov	r0, r4
 800814e:	f7ff fc3d 	bl	80079cc <_GetScrollbarH>
 8008152:	68e9      	ldr	r1, [r5, #12]
 8008154:	f008 ff8a 	bl	801106c <WIDGET_SetEffect>
 8008158:	e086      	b.n	8008268 <MULTIPAGE_Callback+0x1ea>
 800815a:	4620      	mov	r0, r4
 800815c:	f008 fc70 	bl	8010a40 <GUI_ALLOC_LockH>
 8008160:	ab02      	add	r3, sp, #8
 8008162:	f843 0d04 	str.w	r0, [r3, #-4]!
 8008166:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8008168:	6815      	ldr	r5, [r2, #0]
 800816a:	4618      	mov	r0, r3
 800816c:	f008 fc76 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008170:	2d00      	cmp	r5, #0
 8008172:	f000 808d 	beq.w	8008290 <MULTIPAGE_Callback+0x212>
 8008176:	4620      	mov	r0, r4
 8008178:	47a8      	blx	r5
 800817a:	e089      	b.n	8008290 <MULTIPAGE_Callback+0x212>
 800817c:	68ee      	ldr	r6, [r5, #12]
 800817e:	2e00      	cmp	r6, #0
 8008180:	d04a      	beq.n	8008218 <MULTIPAGE_Callback+0x19a>
 8008182:	7a33      	ldrb	r3, [r6, #8]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d049      	beq.n	800821c <MULTIPAGE_Callback+0x19e>
 8008188:	4620      	mov	r0, r4
 800818a:	f8d6 a000 	ldr.w	sl, [r6]
 800818e:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8008192:	f008 fc55 	bl	8010a40 <GUI_ALLOC_LockH>
 8008196:	af02      	add	r7, sp, #8
 8008198:	f847 0d04 	str.w	r0, [r7, #-4]!
 800819c:	f8d0 8074 	ldr.w	r8, [r0, #116]	; 0x74
 80081a0:	4638      	mov	r0, r7
 80081a2:	f008 fc5b 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80081a6:	4651      	mov	r1, sl
 80081a8:	4620      	mov	r0, r4
 80081aa:	464a      	mov	r2, r9
 80081ac:	47c0      	blx	r8
 80081ae:	1e01      	subs	r1, r0, #0
 80081b0:	4620      	mov	r0, r4
 80081b2:	db09      	blt.n	80081c8 <MULTIPAGE_Callback+0x14a>
 80081b4:	f7ff ff24 	bl	8008000 <MULTIPAGE_SelectPage>
 80081b8:	4620      	mov	r0, r4
 80081ba:	2105      	movs	r1, #5
 80081bc:	f002 fde3 	bl	800ad86 <WM_NotifyParent>
 80081c0:	4620      	mov	r0, r4
 80081c2:	f003 f853 	bl	800b26c <WM_BringToTop>
 80081c6:	e02b      	b.n	8008220 <MULTIPAGE_Callback+0x1a2>
 80081c8:	f002 ff73 	bl	800b0b2 <WM_GetWindowOrgX>
 80081cc:	4482      	add	sl, r0
 80081ce:	4620      	mov	r0, r4
 80081d0:	f002 ff77 	bl	800b0c2 <WM_GetWindowOrgY>
 80081d4:	4481      	add	r9, r0
 80081d6:	4651      	mov	r1, sl
 80081d8:	4620      	mov	r0, r4
 80081da:	464a      	mov	r2, r9
 80081dc:	f002 fd46 	bl	800ac6c <WM_Screen2hWinEx>
 80081e0:	4680      	mov	r8, r0
 80081e2:	b1e8      	cbz	r0, 8008220 <MULTIPAGE_Callback+0x1a2>
 80081e4:	42a0      	cmp	r0, r4
 80081e6:	d01b      	beq.n	8008220 <MULTIPAGE_Callback+0x1a2>
 80081e8:	f002 ff63 	bl	800b0b2 <WM_GetWindowOrgX>
 80081ec:	ebc0 000a 	rsb	r0, r0, sl
 80081f0:	6030      	str	r0, [r6, #0]
 80081f2:	4640      	mov	r0, r8
 80081f4:	f002 ff65 	bl	800b0c2 <WM_GetWindowOrgY>
 80081f8:	ebc0 0009 	rsb	r0, r0, r9
 80081fc:	6070      	str	r0, [r6, #4]
 80081fe:	f8c5 8004 	str.w	r8, [r5, #4]
 8008202:	4640      	mov	r0, r8
 8008204:	f008 fc1c 	bl	8010a40 <GUI_ALLOC_LockH>
 8008208:	9001      	str	r0, [sp, #4]
 800820a:	6906      	ldr	r6, [r0, #16]
 800820c:	4638      	mov	r0, r7
 800820e:	f008 fc25 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008212:	4628      	mov	r0, r5
 8008214:	47b0      	blx	r6
 8008216:	e003      	b.n	8008220 <MULTIPAGE_Callback+0x1a2>
 8008218:	2103      	movs	r1, #3
 800821a:	e002      	b.n	8008222 <MULTIPAGE_Callback+0x1a4>
 800821c:	2102      	movs	r1, #2
 800821e:	e000      	b.n	8008222 <MULTIPAGE_Callback+0x1a4>
 8008220:	2101      	movs	r1, #1
 8008222:	4620      	mov	r0, r4
 8008224:	f002 fdaf 	bl	800ad86 <WM_NotifyParent>
 8008228:	e032      	b.n	8008290 <MULTIPAGE_Callback+0x212>
 800822a:	68eb      	ldr	r3, [r5, #12]
 800822c:	2b05      	cmp	r3, #5
 800822e:	d12f      	bne.n	8008290 <MULTIPAGE_Callback+0x212>
 8008230:	68a8      	ldr	r0, [r5, #8]
 8008232:	f002 ff56 	bl	800b0e2 <WM_GetId>
 8008236:	28ff      	cmp	r0, #255	; 0xff
 8008238:	d12a      	bne.n	8008290 <MULTIPAGE_Callback+0x212>
 800823a:	4620      	mov	r0, r4
 800823c:	f008 fc00 	bl	8010a40 <GUI_ALLOC_LockH>
 8008240:	ae02      	add	r6, sp, #8
 8008242:	4607      	mov	r7, r0
 8008244:	f846 0d04 	str.w	r0, [r6, #-4]!
 8008248:	68a8      	ldr	r0, [r5, #8]
 800824a:	f008 ffed 	bl	8011228 <SCROLLBAR_GetValue>
 800824e:	6478      	str	r0, [r7, #68]	; 0x44
 8008250:	4630      	mov	r0, r6
 8008252:	f008 fc03 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008256:	4620      	mov	r0, r4
 8008258:	f003 fd47 	bl	800bcea <WM_InvalidateWindow>
 800825c:	e018      	b.n	8008290 <MULTIPAGE_Callback+0x212>
 800825e:	4620      	mov	r0, r4
 8008260:	68e9      	ldr	r1, [r5, #12]
 8008262:	f7ff fca7 	bl	8007bb4 <MULTIPAGE__CalcClientRect>
 8008266:	e013      	b.n	8008290 <MULTIPAGE_Callback+0x212>
 8008268:	4620      	mov	r0, r4
 800826a:	f7ff fd77 	bl	8007d5c <MULTIPAGE__UpdatePositions>
 800826e:	e00f      	b.n	8008290 <MULTIPAGE_Callback+0x212>
 8008270:	4620      	mov	r0, r4
 8008272:	f008 fbe5 	bl	8010a40 <GUI_ALLOC_LockH>
 8008276:	ac02      	add	r4, sp, #8
 8008278:	f844 0d04 	str.w	r0, [r4, #-4]!
 800827c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800827e:	f000 fa35 	bl	80086ec <GUI_ARRAY_Delete>
 8008282:	4620      	mov	r0, r4
 8008284:	f008 fbea 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008288:	b116      	cbz	r6, 8008290 <MULTIPAGE_Callback+0x212>
 800828a:	4628      	mov	r0, r5
 800828c:	f004 f95c 	bl	800c548 <WM_DefaultProc>
 8008290:	b002      	add	sp, #8
 8008292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008296 <_MoveSel>:
 8008296:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800829a:	460f      	mov	r7, r1
 800829c:	4606      	mov	r6, r0
 800829e:	f008 fbcf 	bl	8010a40 <GUI_ALLOC_LockH>
 80082a2:	9001      	str	r0, [sp, #4]
 80082a4:	4630      	mov	r0, r6
 80082a6:	f7ff fb91 	bl	80079cc <_GetScrollbarH>
 80082aa:	9b01      	ldr	r3, [sp, #4]
 80082ac:	4680      	mov	r8, r0
 80082ae:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80082b0:	f000 f9c3 	bl	800863a <GUI_ARRAY_GetNumItems>
 80082b4:	4681      	mov	r9, r0
 80082b6:	a802      	add	r0, sp, #8
 80082b8:	f04f 34ff 	mov.w	r4, #4294967295
 80082bc:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 80082c0:	6c15      	ldr	r5, [r2, #64]	; 0x40
 80082c2:	f8d2 a044 	ldr.w	sl, [r2, #68]	; 0x44
 80082c6:	f008 fbc9 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80082ca:	443d      	add	r5, r7
 80082cc:	2d00      	cmp	r5, #0
 80082ce:	da06      	bge.n	80082de <_MoveSel+0x48>
 80082d0:	2c00      	cmp	r4, #0
 80082d2:	db11      	blt.n	80082f8 <_MoveSel+0x62>
 80082d4:	4630      	mov	r0, r6
 80082d6:	4621      	mov	r1, r4
 80082d8:	f7ff fe92 	bl	8008000 <MULTIPAGE_SelectPage>
 80082dc:	e00e      	b.n	80082fc <_MoveSel+0x66>
 80082de:	454d      	cmp	r5, r9
 80082e0:	daf6      	bge.n	80082d0 <_MoveSel+0x3a>
 80082e2:	1c63      	adds	r3, r4, #1
 80082e4:	d1f4      	bne.n	80082d0 <_MoveSel+0x3a>
 80082e6:	4629      	mov	r1, r5
 80082e8:	4630      	mov	r0, r6
 80082ea:	f7ff fb88 	bl	80079fe <_GetEnable>
 80082ee:	2800      	cmp	r0, #0
 80082f0:	bf18      	it	ne
 80082f2:	462c      	movne	r4, r5
 80082f4:	443d      	add	r5, r7
 80082f6:	e7e9      	b.n	80082cc <_MoveSel+0x36>
 80082f8:	eb0a 0407 	add.w	r4, sl, r7
 80082fc:	f1b8 0f00 	cmp.w	r8, #0
 8008300:	d007      	beq.n	8008312 <_MoveSel+0x7c>
 8008302:	2c00      	cmp	r4, #0
 8008304:	db05      	blt.n	8008312 <_MoveSel+0x7c>
 8008306:	454c      	cmp	r4, r9
 8008308:	da03      	bge.n	8008312 <_MoveSel+0x7c>
 800830a:	4640      	mov	r0, r8
 800830c:	4621      	mov	r1, r4
 800830e:	f009 f879 	bl	8011404 <SCROLLBAR_SetValue>
 8008312:	b002      	add	sp, #8
 8008314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008318 <_ClientCallback>:
 8008318:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800831a:	6845      	ldr	r5, [r0, #4]
 800831c:	4604      	mov	r4, r0
 800831e:	4628      	mov	r0, r5
 8008320:	f002 febf 	bl	800b0a2 <WM_GetParent>
 8008324:	6823      	ldr	r3, [r4, #0]
 8008326:	2b17      	cmp	r3, #23
 8008328:	4606      	mov	r6, r0
 800832a:	d020      	beq.n	800836e <_ClientCallback+0x56>
 800832c:	dc11      	bgt.n	8008352 <_ClientCallback+0x3a>
 800832e:	2b0e      	cmp	r3, #14
 8008330:	d01f      	beq.n	8008372 <_ClientCallback+0x5a>
 8008332:	2b0f      	cmp	r3, #15
 8008334:	d12d      	bne.n	8008392 <_ClientCallback+0x7a>
 8008336:	f008 fb83 	bl	8010a40 <GUI_ALLOC_LockH>
 800833a:	ac02      	add	r4, sp, #8
 800833c:	f844 0d04 	str.w	r0, [r4, #-4]!
 8008340:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8008342:	f006 fc83 	bl	800ec4c <LCD_SetBkColor>
 8008346:	4620      	mov	r0, r4
 8008348:	f008 fb88 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800834c:	f007 ff66 	bl	801021c <GUI_Clear>
 8008350:	e022      	b.n	8008398 <_ClientCallback+0x80>
 8008352:	2b31      	cmp	r3, #49	; 0x31
 8008354:	d008      	beq.n	8008368 <_ClientCallback+0x50>
 8008356:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800835a:	d11a      	bne.n	8008392 <_ClientCallback+0x7a>
 800835c:	f002 fb4e 	bl	800a9fc <WM_SetFocus>
 8008360:	4630      	mov	r0, r6
 8008362:	f002 ff83 	bl	800b26c <WM_BringToTop>
 8008366:	e017      	b.n	8008398 <_ClientCallback+0x80>
 8008368:	2300      	movs	r3, #0
 800836a:	60e3      	str	r3, [r4, #12]
 800836c:	e014      	b.n	8008398 <_ClientCallback+0x80>
 800836e:	60e5      	str	r5, [r4, #12]
 8008370:	e012      	b.n	8008398 <_ClientCallback+0x80>
 8008372:	68e3      	ldr	r3, [r4, #12]
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	2a00      	cmp	r2, #0
 8008378:	dd0b      	ble.n	8008392 <_ClientCallback+0x7a>
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2b21      	cmp	r3, #33	; 0x21
 800837e:	d003      	beq.n	8008388 <_ClientCallback+0x70>
 8008380:	2b22      	cmp	r3, #34	; 0x22
 8008382:	d106      	bne.n	8008392 <_ClientCallback+0x7a>
 8008384:	2101      	movs	r1, #1
 8008386:	e001      	b.n	800838c <_ClientCallback+0x74>
 8008388:	f04f 31ff 	mov.w	r1, #4294967295
 800838c:	f7ff ff83 	bl	8008296 <_MoveSel>
 8008390:	e002      	b.n	8008398 <_ClientCallback+0x80>
 8008392:	4620      	mov	r0, r4
 8008394:	f004 f8d8 	bl	800c548 <WM_DefaultProc>
 8008398:	b002      	add	sp, #8
 800839a:	bd70      	pop	{r4, r5, r6, pc}

0800839c <MULTIPAGE_AddPage>:
 800839c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a0:	460c      	mov	r4, r1
 80083a2:	b08d      	sub	sp, #52	; 0x34
 80083a4:	4616      	mov	r6, r2
 80083a6:	4681      	mov	r9, r0
 80083a8:	2800      	cmp	r0, #0
 80083aa:	d079      	beq.n	80084a0 <MULTIPAGE_AddPage+0x104>
 80083ac:	f008 fb48 	bl	8010a40 <GUI_ALLOC_LockH>
 80083b0:	ab0c      	add	r3, sp, #48	; 0x30
 80083b2:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80083b4:	f843 0d28 	str.w	r0, [r3, #-40]!
 80083b8:	6b87      	ldr	r7, [r0, #56]	; 0x38
 80083ba:	4618      	mov	r0, r3
 80083bc:	f008 fb4e 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80083c0:	bb74      	cbnz	r4, 8008420 <MULTIPAGE_AddPage+0x84>
 80083c2:	4638      	mov	r0, r7
 80083c4:	f008 fb3c 	bl	8010a40 <GUI_ALLOC_LockH>
 80083c8:	ab0c      	add	r3, sp, #48	; 0x30
 80083ca:	69c7      	ldr	r7, [r0, #28]
 80083cc:	f843 0d20 	str.w	r0, [r3, #-32]!
 80083d0:	4618      	mov	r0, r3
 80083d2:	f008 fb43 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80083d6:	b357      	cbz	r7, 800842e <MULTIPAGE_AddPage+0x92>
 80083d8:	bb5c      	cbnz	r4, 8008432 <MULTIPAGE_AddPage+0x96>
 80083da:	4628      	mov	r0, r5
 80083dc:	f000 f92d 	bl	800863a <GUI_ARRAY_GetNumItems>
 80083e0:	46a0      	mov	r8, r4
 80083e2:	4682      	mov	sl, r0
 80083e4:	45d0      	cmp	r8, sl
 80083e6:	da12      	bge.n	800840e <MULTIPAGE_AddPage+0x72>
 80083e8:	4641      	mov	r1, r8
 80083ea:	4628      	mov	r0, r5
 80083ec:	f000 fa0b 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 80083f0:	4602      	mov	r2, r0
 80083f2:	a80c      	add	r0, sp, #48	; 0x30
 80083f4:	2100      	movs	r1, #0
 80083f6:	f8d2 b000 	ldr.w	fp, [r2]
 80083fa:	f840 2d2c 	str.w	r2, [r0, #-44]!
 80083fe:	6091      	str	r1, [r2, #8]
 8008400:	f008 fb2c 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008404:	45bb      	cmp	fp, r7
 8008406:	d003      	beq.n	8008410 <MULTIPAGE_AddPage+0x74>
 8008408:	f108 0801 	add.w	r8, r8, #1
 800840c:	e7ea      	b.n	80083e4 <MULTIPAGE_AddPage+0x48>
 800840e:	463c      	mov	r4, r7
 8008410:	4638      	mov	r0, r7
 8008412:	f008 fb15 	bl	8010a40 <GUI_ALLOC_LockH>
 8008416:	ab0c      	add	r3, sp, #48	; 0x30
 8008418:	6a07      	ldr	r7, [r0, #32]
 800841a:	f843 0d24 	str.w	r0, [r3, #-36]!
 800841e:	e7d7      	b.n	80083d0 <MULTIPAGE_AddPage+0x34>
 8008420:	2200      	movs	r2, #0
 8008422:	4620      	mov	r0, r4
 8008424:	4639      	mov	r1, r7
 8008426:	4613      	mov	r3, r2
 8008428:	f002 ffb1 	bl	800b38e <WM_AttachWindowAt>
 800842c:	e001      	b.n	8008432 <MULTIPAGE_AddPage+0x96>
 800842e:	2c00      	cmp	r4, #0
 8008430:	d036      	beq.n	80084a0 <MULTIPAGE_AddPage+0x104>
 8008432:	2300      	movs	r3, #0
 8008434:	f88d 3003 	strb.w	r3, [sp, #3]
 8008438:	b90e      	cbnz	r6, 800843e <MULTIPAGE_AddPage+0xa2>
 800843a:	f10d 0603 	add.w	r6, sp, #3
 800843e:	2301      	movs	r3, #1
 8008440:	f88d 3018 	strb.w	r3, [sp, #24]
 8008444:	4630      	mov	r0, r6
 8008446:	2300      	movs	r3, #0
 8008448:	9405      	str	r4, [sp, #20]
 800844a:	9308      	str	r3, [sp, #32]
 800844c:	9309      	str	r3, [sp, #36]	; 0x24
 800844e:	930a      	str	r3, [sp, #40]	; 0x28
 8008450:	9307      	str	r3, [sp, #28]
 8008452:	f7f7 fecd 	bl	80001f0 <strlen>
 8008456:	a905      	add	r1, sp, #20
 8008458:	f100 021c 	add.w	r2, r0, #28
 800845c:	4628      	mov	r0, r5
 800845e:	f000 f8fb 	bl	8008658 <GUI_ARRAY_AddItem>
 8008462:	b9b0      	cbnz	r0, 8008492 <MULTIPAGE_AddPage+0xf6>
 8008464:	4628      	mov	r0, r5
 8008466:	f000 f8e8 	bl	800863a <GUI_ARRAY_GetNumItems>
 800846a:	1e41      	subs	r1, r0, #1
 800846c:	4628      	mov	r0, r5
 800846e:	f000 f9ca 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 8008472:	ac0c      	add	r4, sp, #48	; 0x30
 8008474:	4607      	mov	r7, r0
 8008476:	f844 0d2c 	str.w	r0, [r4, #-44]!
 800847a:	4630      	mov	r0, r6
 800847c:	f7f7 feb8 	bl	80001f0 <strlen>
 8008480:	4631      	mov	r1, r6
 8008482:	1c42      	adds	r2, r0, #1
 8008484:	f107 0018 	add.w	r0, r7, #24
 8008488:	f010 fbc9 	bl	8018c1e <memcpy>
 800848c:	4620      	mov	r0, r4
 800848e:	f008 fae5 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008492:	4628      	mov	r0, r5
 8008494:	f000 f8d1 	bl	800863a <GUI_ARRAY_GetNumItems>
 8008498:	1e41      	subs	r1, r0, #1
 800849a:	4648      	mov	r0, r9
 800849c:	f7ff fdb0 	bl	8008000 <MULTIPAGE_SelectPage>
 80084a0:	b00d      	add	sp, #52	; 0x34
 80084a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080084a6 <MULTIPAGE_DisablePage>:
 80084a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084a8:	460d      	mov	r5, r1
 80084aa:	4606      	mov	r6, r0
 80084ac:	b1e0      	cbz	r0, 80084e8 <MULTIPAGE_DisablePage+0x42>
 80084ae:	f008 fac7 	bl	8010a40 <GUI_ALLOC_LockH>
 80084b2:	9000      	str	r0, [sp, #0]
 80084b4:	4604      	mov	r4, r0
 80084b6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80084b8:	f000 f8bf 	bl	800863a <GUI_ARRAY_GetNumItems>
 80084bc:	4285      	cmp	r5, r0
 80084be:	d20d      	bcs.n	80084dc <MULTIPAGE_DisablePage+0x36>
 80084c0:	4629      	mov	r1, r5
 80084c2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80084c4:	f000 f99f 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 80084c8:	4602      	mov	r2, r0
 80084ca:	a802      	add	r0, sp, #8
 80084cc:	7911      	ldrb	r1, [r2, #4]
 80084ce:	f840 2d04 	str.w	r2, [r0, #-4]!
 80084d2:	f021 0101 	bic.w	r1, r1, #1
 80084d6:	7111      	strb	r1, [r2, #4]
 80084d8:	f008 fac0 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80084dc:	4630      	mov	r0, r6
 80084de:	f003 fc04 	bl	800bcea <WM_InvalidateWindow>
 80084e2:	4668      	mov	r0, sp
 80084e4:	f008 faba 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80084e8:	b002      	add	sp, #8
 80084ea:	bd70      	pop	{r4, r5, r6, pc}

080084ec <MULTIPAGE_EnablePage>:
 80084ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084ee:	460d      	mov	r5, r1
 80084f0:	4606      	mov	r6, r0
 80084f2:	b1e0      	cbz	r0, 800852e <MULTIPAGE_EnablePage+0x42>
 80084f4:	f008 faa4 	bl	8010a40 <GUI_ALLOC_LockH>
 80084f8:	9000      	str	r0, [sp, #0]
 80084fa:	4604      	mov	r4, r0
 80084fc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80084fe:	f000 f89c 	bl	800863a <GUI_ARRAY_GetNumItems>
 8008502:	4285      	cmp	r5, r0
 8008504:	d20d      	bcs.n	8008522 <MULTIPAGE_EnablePage+0x36>
 8008506:	4629      	mov	r1, r5
 8008508:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800850a:	f000 f97c 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 800850e:	4602      	mov	r2, r0
 8008510:	a802      	add	r0, sp, #8
 8008512:	7911      	ldrb	r1, [r2, #4]
 8008514:	f840 2d04 	str.w	r2, [r0, #-4]!
 8008518:	f041 0101 	orr.w	r1, r1, #1
 800851c:	7111      	strb	r1, [r2, #4]
 800851e:	f008 fa9d 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008522:	4630      	mov	r0, r6
 8008524:	f003 fbe1 	bl	800bcea <WM_InvalidateWindow>
 8008528:	4668      	mov	r0, sp
 800852a:	f008 fa97 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800852e:	b002      	add	sp, #8
 8008530:	bd70      	pop	{r4, r5, r6, pc}

08008532 <MULTIPAGE_SetFont>:
 8008532:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008534:	460c      	mov	r4, r1
 8008536:	4605      	mov	r5, r0
 8008538:	b160      	cbz	r0, 8008554 <MULTIPAGE_SetFont+0x22>
 800853a:	b159      	cbz	r1, 8008554 <MULTIPAGE_SetFont+0x22>
 800853c:	f008 fa80 	bl	8010a40 <GUI_ALLOC_LockH>
 8008540:	4602      	mov	r2, r0
 8008542:	a802      	add	r0, sp, #8
 8008544:	6494      	str	r4, [r2, #72]	; 0x48
 8008546:	f840 2d04 	str.w	r2, [r0, #-4]!
 800854a:	f008 fa87 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800854e:	4628      	mov	r0, r5
 8008550:	f7ff fc04 	bl	8007d5c <MULTIPAGE__UpdatePositions>
 8008554:	b003      	add	sp, #12
 8008556:	bd30      	pop	{r4, r5, pc}

08008558 <MULTIPAGE_GetFont>:
 8008558:	b513      	push	{r0, r1, r4, lr}
 800855a:	4604      	mov	r4, r0
 800855c:	b140      	cbz	r0, 8008570 <MULTIPAGE_GetFont+0x18>
 800855e:	f008 fa6f 	bl	8010a40 <GUI_ALLOC_LockH>
 8008562:	ab02      	add	r3, sp, #8
 8008564:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8008566:	f843 0d04 	str.w	r0, [r3, #-4]!
 800856a:	4618      	mov	r0, r3
 800856c:	f008 fa76 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008570:	4620      	mov	r0, r4
 8008572:	b002      	add	sp, #8
 8008574:	bd10      	pop	{r4, pc}

08008576 <MULTIPAGE_IsPageEnabled>:
 8008576:	b108      	cbz	r0, 800857c <MULTIPAGE_IsPageEnabled+0x6>
 8008578:	f7ff ba41 	b.w	80079fe <_GetEnable>
 800857c:	4770      	bx	lr

0800857e <GUI_DRAW__Draw>:
 800857e:	e92d 43e3 	stmdb	sp!, {r0, r1, r5, r6, r7, r8, r9, lr}
 8008582:	4688      	mov	r8, r1
 8008584:	4617      	mov	r7, r2
 8008586:	461e      	mov	r6, r3
 8008588:	4681      	mov	r9, r0
 800858a:	b170      	cbz	r0, 80085aa <GUI_DRAW__Draw+0x2c>
 800858c:	f008 fa58 	bl	8010a40 <GUI_ALLOC_LockH>
 8008590:	4605      	mov	r5, r0
 8008592:	a802      	add	r0, sp, #8
 8008594:	682b      	ldr	r3, [r5, #0]
 8008596:	f840 5d04 	str.w	r5, [r0, #-4]!
 800859a:	681d      	ldr	r5, [r3, #0]
 800859c:	f008 fa5e 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80085a0:	4648      	mov	r0, r9
 80085a2:	4641      	mov	r1, r8
 80085a4:	463a      	mov	r2, r7
 80085a6:	4633      	mov	r3, r6
 80085a8:	47a8      	blx	r5
 80085aa:	b002      	add	sp, #8
 80085ac:	e8bd 83e0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, pc}

080085b0 <GUI_DRAW__GetXSize>:
 80085b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085b2:	4604      	mov	r4, r0
 80085b4:	b160      	cbz	r0, 80085d0 <GUI_DRAW__GetXSize+0x20>
 80085b6:	f008 fa43 	bl	8010a40 <GUI_ALLOC_LockH>
 80085ba:	ab02      	add	r3, sp, #8
 80085bc:	6802      	ldr	r2, [r0, #0]
 80085be:	f843 0d04 	str.w	r0, [r3, #-4]!
 80085c2:	4618      	mov	r0, r3
 80085c4:	6855      	ldr	r5, [r2, #4]
 80085c6:	f008 fa49 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80085ca:	4620      	mov	r0, r4
 80085cc:	47a8      	blx	r5
 80085ce:	e7ff      	b.n	80085d0 <GUI_DRAW__GetXSize+0x20>
 80085d0:	b003      	add	sp, #12
 80085d2:	bd30      	pop	{r4, r5, pc}

080085d4 <GUI_DRAW__GetYSize>:
 80085d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085d6:	4604      	mov	r4, r0
 80085d8:	b160      	cbz	r0, 80085f4 <GUI_DRAW__GetYSize+0x20>
 80085da:	f008 fa31 	bl	8010a40 <GUI_ALLOC_LockH>
 80085de:	ab02      	add	r3, sp, #8
 80085e0:	6802      	ldr	r2, [r0, #0]
 80085e2:	f843 0d04 	str.w	r0, [r3, #-4]!
 80085e6:	4618      	mov	r0, r3
 80085e8:	6895      	ldr	r5, [r2, #8]
 80085ea:	f008 fa37 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80085ee:	4620      	mov	r0, r4
 80085f0:	47a8      	blx	r5
 80085f2:	e7ff      	b.n	80085f4 <GUI_DRAW__GetYSize+0x20>
 80085f4:	b003      	add	sp, #12
 80085f6:	bd30      	pop	{r4, r5, pc}

080085f8 <GUI_ARRAY__GethItem>:
 80085f8:	8803      	ldrh	r3, [r0, #0]
 80085fa:	4299      	cmp	r1, r3
 80085fc:	b513      	push	{r0, r1, r4, lr}
 80085fe:	460c      	mov	r4, r1
 8008600:	d20e      	bcs.n	8008620 <GUI_ARRAY__GethItem+0x28>
 8008602:	6840      	ldr	r0, [r0, #4]
 8008604:	b150      	cbz	r0, 800861c <GUI_ARRAY__GethItem+0x24>
 8008606:	f008 fa1b 	bl	8010a40 <GUI_ALLOC_LockH>
 800860a:	ab02      	add	r3, sp, #8
 800860c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8008610:	f843 0d04 	str.w	r0, [r3, #-4]!
 8008614:	4618      	mov	r0, r3
 8008616:	f008 fa21 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800861a:	e002      	b.n	8008622 <GUI_ARRAY__GethItem+0x2a>
 800861c:	4604      	mov	r4, r0
 800861e:	e000      	b.n	8008622 <GUI_ARRAY__GethItem+0x2a>
 8008620:	2400      	movs	r4, #0
 8008622:	4620      	mov	r0, r4
 8008624:	b002      	add	sp, #8
 8008626:	bd10      	pop	{r4, pc}

08008628 <GUI_ARRAY__GetpItemLocked>:
 8008628:	b508      	push	{r3, lr}
 800862a:	f7ff ffe5 	bl	80085f8 <GUI_ARRAY__GethItem>
 800862e:	b118      	cbz	r0, 8008638 <GUI_ARRAY__GetpItemLocked+0x10>
 8008630:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008634:	f008 ba04 	b.w	8010a40 <GUI_ALLOC_LockH>
 8008638:	bd08      	pop	{r3, pc}

0800863a <GUI_ARRAY_GetNumItems>:
 800863a:	b513      	push	{r0, r1, r4, lr}
 800863c:	4604      	mov	r4, r0
 800863e:	b140      	cbz	r0, 8008652 <GUI_ARRAY_GetNumItems+0x18>
 8008640:	f008 f9fe 	bl	8010a40 <GUI_ALLOC_LockH>
 8008644:	ab02      	add	r3, sp, #8
 8008646:	8804      	ldrh	r4, [r0, #0]
 8008648:	f843 0d04 	str.w	r0, [r3, #-4]!
 800864c:	4618      	mov	r0, r3
 800864e:	f008 fa05 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008652:	4620      	mov	r0, r4
 8008654:	b002      	add	sp, #8
 8008656:	bd10      	pop	{r4, pc}

08008658 <GUI_ARRAY_AddItem>:
 8008658:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800865c:	4605      	mov	r5, r0
 800865e:	2800      	cmp	r0, #0
 8008660:	d03d      	beq.n	80086de <GUI_ARRAY_AddItem+0x86>
 8008662:	b14a      	cbz	r2, 8008678 <GUI_ARRAY_AddItem+0x20>
 8008664:	4608      	mov	r0, r1
 8008666:	4611      	mov	r1, r2
 8008668:	f008 fc70 	bl	8010f4c <GUI_ALLOC_AllocInit>
 800866c:	f1d0 0401 	rsbs	r4, r0, #1
 8008670:	4607      	mov	r7, r0
 8008672:	bf38      	it	cc
 8008674:	2400      	movcc	r4, #0
 8008676:	e001      	b.n	800867c <GUI_ARRAY_AddItem+0x24>
 8008678:	4614      	mov	r4, r2
 800867a:	4617      	mov	r7, r2
 800867c:	4628      	mov	r0, r5
 800867e:	f008 f9df 	bl	8010a40 <GUI_ALLOC_LockH>
 8008682:	ae02      	add	r6, sp, #8
 8008684:	f8b0 8000 	ldrh.w	r8, [r0]
 8008688:	f846 0d08 	str.w	r0, [r6, #-8]!
 800868c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8008690:	4668      	mov	r0, sp
 8008692:	f008 f9e3 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008696:	bb24      	cbnz	r4, 80086e2 <GUI_ARRAY_AddItem+0x8a>
 8008698:	f108 0101 	add.w	r1, r8, #1
 800869c:	4648      	mov	r0, r9
 800869e:	0089      	lsls	r1, r1, #2
 80086a0:	f007 f959 	bl	800f956 <GUI_ALLOC_Realloc>
 80086a4:	4681      	mov	r9, r0
 80086a6:	b918      	cbnz	r0, 80086b0 <GUI_ARRAY_AddItem+0x58>
 80086a8:	4638      	mov	r0, r7
 80086aa:	f008 fa03 	bl	8010ab4 <GUI_ALLOC_Free>
 80086ae:	e018      	b.n	80086e2 <GUI_ARRAY_AddItem+0x8a>
 80086b0:	f008 f9c6 	bl	8010a40 <GUI_ALLOC_LockH>
 80086b4:	ab02      	add	r3, sp, #8
 80086b6:	f843 0d04 	str.w	r0, [r3, #-4]!
 80086ba:	f840 7028 	str.w	r7, [r0, r8, lsl #2]
 80086be:	4618      	mov	r0, r3
 80086c0:	f008 f9cc 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80086c4:	4628      	mov	r0, r5
 80086c6:	f008 f9bb 	bl	8010a40 <GUI_ALLOC_LockH>
 80086ca:	8803      	ldrh	r3, [r0, #0]
 80086cc:	9000      	str	r0, [sp, #0]
 80086ce:	3301      	adds	r3, #1
 80086d0:	f8c0 9004 	str.w	r9, [r0, #4]
 80086d4:	8003      	strh	r3, [r0, #0]
 80086d6:	4668      	mov	r0, sp
 80086d8:	f008 f9c0 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80086dc:	e002      	b.n	80086e4 <GUI_ARRAY_AddItem+0x8c>
 80086de:	4604      	mov	r4, r0
 80086e0:	e000      	b.n	80086e4 <GUI_ARRAY_AddItem+0x8c>
 80086e2:	2401      	movs	r4, #1
 80086e4:	4620      	mov	r0, r4
 80086e6:	b003      	add	sp, #12
 80086e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080086ec <GUI_ARRAY_Delete>:
 80086ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086ee:	4605      	mov	r5, r0
 80086f0:	b318      	cbz	r0, 800873a <GUI_ARRAY_Delete+0x4e>
 80086f2:	f008 f9a5 	bl	8010a40 <GUI_ALLOC_LockH>
 80086f6:	9000      	str	r0, [sp, #0]
 80086f8:	6840      	ldr	r0, [r0, #4]
 80086fa:	b1c0      	cbz	r0, 800872e <GUI_ARRAY_Delete+0x42>
 80086fc:	f008 f9a0 	bl	8010a40 <GUI_ALLOC_LockH>
 8008700:	2400      	movs	r4, #0
 8008702:	9001      	str	r0, [sp, #4]
 8008704:	9b00      	ldr	r3, [sp, #0]
 8008706:	881b      	ldrh	r3, [r3, #0]
 8008708:	429c      	cmp	r4, r3
 800870a:	da06      	bge.n	800871a <GUI_ARRAY_Delete+0x2e>
 800870c:	9801      	ldr	r0, [sp, #4]
 800870e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8008712:	f008 fbf1 	bl	8010ef8 <GUI_ALLOC_FreePtr>
 8008716:	3401      	adds	r4, #1
 8008718:	e7f4      	b.n	8008704 <GUI_ARRAY_Delete+0x18>
 800871a:	a801      	add	r0, sp, #4
 800871c:	f008 f99e 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008720:	9800      	ldr	r0, [sp, #0]
 8008722:	3004      	adds	r0, #4
 8008724:	f008 fbe8 	bl	8010ef8 <GUI_ALLOC_FreePtr>
 8008728:	9b00      	ldr	r3, [sp, #0]
 800872a:	2200      	movs	r2, #0
 800872c:	801a      	strh	r2, [r3, #0]
 800872e:	4668      	mov	r0, sp
 8008730:	f008 f994 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008734:	4628      	mov	r0, r5
 8008736:	f008 f9bd 	bl	8010ab4 <GUI_ALLOC_Free>
 800873a:	b003      	add	sp, #12
 800873c:	bd30      	pop	{r4, r5, pc}

0800873e <GUI_ARRAY_SetItem>:
 800873e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008742:	460d      	mov	r5, r1
 8008744:	4691      	mov	r9, r2
 8008746:	461f      	mov	r7, r3
 8008748:	b908      	cbnz	r0, 800874e <GUI_ARRAY_SetItem+0x10>
 800874a:	2400      	movs	r4, #0
 800874c:	e044      	b.n	80087d8 <GUI_ARRAY_SetItem+0x9a>
 800874e:	f008 f977 	bl	8010a40 <GUI_ALLOC_LockH>
 8008752:	ab04      	add	r3, sp, #16
 8008754:	8804      	ldrh	r4, [r0, #0]
 8008756:	f843 0d0c 	str.w	r0, [r3, #-12]!
 800875a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800875e:	4618      	mov	r0, r3
 8008760:	f008 f97c 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008764:	42a5      	cmp	r5, r4
 8008766:	d2f0      	bcs.n	800874a <GUI_ARRAY_SetItem+0xc>
 8008768:	f1b8 0f00 	cmp.w	r8, #0
 800876c:	d0ed      	beq.n	800874a <GUI_ARRAY_SetItem+0xc>
 800876e:	4640      	mov	r0, r8
 8008770:	f008 f966 	bl	8010a40 <GUI_ALLOC_LockH>
 8008774:	ae04      	add	r6, sp, #16
 8008776:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
 800877a:	f846 0d08 	str.w	r0, [r6, #-8]!
 800877e:	4630      	mov	r0, r6
 8008780:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 8008784:	f008 f96a 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008788:	b124      	cbz	r4, 8008794 <GUI_ARRAY_SetItem+0x56>
 800878a:	4620      	mov	r0, r4
 800878c:	f008 f986 	bl	8010a9c <GUI_ALLOC_GetSize>
 8008790:	42b8      	cmp	r0, r7
 8008792:	d011      	beq.n	80087b8 <GUI_ARRAY_SetItem+0x7a>
 8008794:	4638      	mov	r0, r7
 8008796:	f008 fbc4 	bl	8010f22 <GUI_ALLOC_AllocZero>
 800879a:	4604      	mov	r4, r0
 800879c:	b1e0      	cbz	r0, 80087d8 <GUI_ARRAY_SetItem+0x9a>
 800879e:	4640      	mov	r0, r8
 80087a0:	f008 f94e 	bl	8010a40 <GUI_ALLOC_LockH>
 80087a4:	4680      	mov	r8, r0
 80087a6:	9002      	str	r0, [sp, #8]
 80087a8:	4450      	add	r0, sl
 80087aa:	f008 fba5 	bl	8010ef8 <GUI_ALLOC_FreePtr>
 80087ae:	f848 4025 	str.w	r4, [r8, r5, lsl #2]
 80087b2:	4630      	mov	r0, r6
 80087b4:	f008 f952 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80087b8:	f1b9 0f00 	cmp.w	r9, #0
 80087bc:	d00c      	beq.n	80087d8 <GUI_ARRAY_SetItem+0x9a>
 80087be:	4620      	mov	r0, r4
 80087c0:	f008 f93e 	bl	8010a40 <GUI_ALLOC_LockH>
 80087c4:	ad04      	add	r5, sp, #16
 80087c6:	4649      	mov	r1, r9
 80087c8:	f845 0d04 	str.w	r0, [r5, #-4]!
 80087cc:	463a      	mov	r2, r7
 80087ce:	f010 fa26 	bl	8018c1e <memcpy>
 80087d2:	4628      	mov	r0, r5
 80087d4:	f008 f942 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80087d8:	4620      	mov	r0, r4
 80087da:	b004      	add	sp, #16
 80087dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080087e0 <GUI_ARRAY_GethItem>:
 80087e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087e2:	460e      	mov	r6, r1
 80087e4:	4605      	mov	r5, r0
 80087e6:	b158      	cbz	r0, 8008800 <GUI_ARRAY_GethItem+0x20>
 80087e8:	f008 f92a 	bl	8010a40 <GUI_ALLOC_LockH>
 80087ec:	ac02      	add	r4, sp, #8
 80087ee:	4631      	mov	r1, r6
 80087f0:	f844 0d04 	str.w	r0, [r4, #-4]!
 80087f4:	f7ff ff00 	bl	80085f8 <GUI_ARRAY__GethItem>
 80087f8:	4605      	mov	r5, r0
 80087fa:	4620      	mov	r0, r4
 80087fc:	f008 f92e 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008800:	4628      	mov	r0, r5
 8008802:	b002      	add	sp, #8
 8008804:	bd70      	pop	{r4, r5, r6, pc}

08008806 <GUI_ARRAY_GetpItemLocked>:
 8008806:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008808:	460e      	mov	r6, r1
 800880a:	4605      	mov	r5, r0
 800880c:	b158      	cbz	r0, 8008826 <GUI_ARRAY_GetpItemLocked+0x20>
 800880e:	f008 f917 	bl	8010a40 <GUI_ALLOC_LockH>
 8008812:	ac02      	add	r4, sp, #8
 8008814:	4631      	mov	r1, r6
 8008816:	f844 0d04 	str.w	r0, [r4, #-4]!
 800881a:	f7ff ff05 	bl	8008628 <GUI_ARRAY__GetpItemLocked>
 800881e:	4605      	mov	r5, r0
 8008820:	4620      	mov	r0, r4
 8008822:	f008 f91b 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008826:	4628      	mov	r0, r5
 8008828:	b002      	add	sp, #8
 800882a:	bd70      	pop	{r4, r5, r6, pc}

0800882c <GUI_ARRAY_Create>:
 800882c:	2008      	movs	r0, #8
 800882e:	f008 bb78 	b.w	8010f22 <GUI_ALLOC_AllocZero>

08008832 <FRAMEWIN_SetTitleVis>:
 8008832:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008836:	460c      	mov	r4, r1
 8008838:	4606      	mov	r6, r0
 800883a:	2800      	cmp	r0, #0
 800883c:	d048      	beq.n	80088d0 <FRAMEWIN_SetTitleVis+0x9e>
 800883e:	f008 f8ff 	bl	8010a40 <GUI_ALLOC_LockH>
 8008842:	9000      	str	r0, [sp, #0]
 8008844:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8008846:	b114      	cbz	r4, 800884e <FRAMEWIN_SetTitleVis+0x1c>
 8008848:	f043 0720 	orr.w	r7, r3, #32
 800884c:	e001      	b.n	8008852 <FRAMEWIN_SetTitleVis+0x20>
 800884e:	f023 0720 	bic.w	r7, r3, #32
 8008852:	42bb      	cmp	r3, r7
 8008854:	d039      	beq.n	80088ca <FRAMEWIN_SetTitleVis+0x98>
 8008856:	8647      	strh	r7, [r0, #50]	; 0x32
 8008858:	4630      	mov	r0, r6
 800885a:	f000 fa1a 	bl	8008c92 <FRAMEWIN__UpdatePositions>
 800885e:	9d00      	ldr	r5, [sp, #0]
 8008860:	69ec      	ldr	r4, [r5, #28]
 8008862:	b314      	cbz	r4, 80088aa <FRAMEWIN_SetTitleVis+0x78>
 8008864:	4620      	mov	r0, r4
 8008866:	f008 f8eb 	bl	8010a40 <GUI_ALLOC_LockH>
 800886a:	ab02      	add	r3, sp, #8
 800886c:	f9b0 9002 	ldrsh.w	r9, [r0, #2]
 8008870:	f843 0d04 	str.w	r0, [r3, #-4]!
 8008874:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8008878:	f8d0 8020 	ldr.w	r8, [r0, #32]
 800887c:	4618      	mov	r0, r3
 800887e:	ebc2 0909 	rsb	r9, r2, r9
 8008882:	f008 f8eb 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008886:	f9b5 3056 	ldrsh.w	r3, [r5, #86]	; 0x56
 800888a:	4599      	cmp	r9, r3
 800888c:	d10b      	bne.n	80088a6 <FRAMEWIN_SetTitleVis+0x74>
 800888e:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8008890:	429c      	cmp	r4, r3
 8008892:	d008      	beq.n	80088a6 <FRAMEWIN_SetTitleVis+0x74>
 8008894:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8008896:	0699      	lsls	r1, r3, #26
 8008898:	4620      	mov	r0, r4
 800889a:	d502      	bpl.n	80088a2 <FRAMEWIN_SetTitleVis+0x70>
 800889c:	f001 ffc3 	bl	800a826 <WM_ShowWindow>
 80088a0:	e001      	b.n	80088a6 <FRAMEWIN_SetTitleVis+0x74>
 80088a2:	f002 fb74 	bl	800af8e <WM_HideWindow>
 80088a6:	4644      	mov	r4, r8
 80088a8:	e7db      	b.n	8008862 <FRAMEWIN_SetTitleVis+0x30>
 80088aa:	9b00      	ldr	r3, [sp, #0]
 80088ac:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80088b0:	065a      	lsls	r2, r3, #25
 80088b2:	d507      	bpl.n	80088c4 <FRAMEWIN_SetTitleVis+0x92>
 80088b4:	06bb      	lsls	r3, r7, #26
 80088b6:	4630      	mov	r0, r6
 80088b8:	d502      	bpl.n	80088c0 <FRAMEWIN_SetTitleVis+0x8e>
 80088ba:	f001 ffb4 	bl	800a826 <WM_ShowWindow>
 80088be:	e001      	b.n	80088c4 <FRAMEWIN_SetTitleVis+0x92>
 80088c0:	f002 fb65 	bl	800af8e <WM_HideWindow>
 80088c4:	4630      	mov	r0, r6
 80088c6:	f003 fa10 	bl	800bcea <WM_InvalidateWindow>
 80088ca:	4668      	mov	r0, sp
 80088cc:	f008 f8c6 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80088d0:	b003      	add	sp, #12
 80088d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080088d6 <FRAMEWIN_SetBorderSize>:
 80088d6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80088da:	460f      	mov	r7, r1
 80088dc:	4606      	mov	r6, r0
 80088de:	2800      	cmp	r0, #0
 80088e0:	d04a      	beq.n	8008978 <FRAMEWIN_SetBorderSize+0xa2>
 80088e2:	f008 f8ad 	bl	8010a40 <GUI_ALLOC_LockH>
 80088e6:	9001      	str	r0, [sp, #4]
 80088e8:	f000 f909 	bl	8008afe <FRAMEWIN__CalcTitleHeight>
 80088ec:	9b01      	ldr	r3, [sp, #4]
 80088ee:	f9b3 5056 	ldrsh.w	r5, [r3, #86]	; 0x56
 80088f2:	69dc      	ldr	r4, [r3, #28]
 80088f4:	4680      	mov	r8, r0
 80088f6:	1b7d      	subs	r5, r7, r5
 80088f8:	2c00      	cmp	r4, #0
 80088fa:	d030      	beq.n	800895e <FRAMEWIN_SetBorderSize+0x88>
 80088fc:	4620      	mov	r0, r4
 80088fe:	f008 f89f 	bl	8010a40 <GUI_ALLOC_LockH>
 8008902:	9000      	str	r0, [sp, #0]
 8008904:	c803      	ldmia	r0, {r0, r1}
 8008906:	9a01      	ldr	r2, [sp, #4]
 8008908:	ab02      	add	r3, sp, #8
 800890a:	e883 0003 	stmia.w	r3, {r0, r1}
 800890e:	f9b2 1000 	ldrsh.w	r1, [r2]
 8008912:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8008916:	4618      	mov	r0, r3
 8008918:	4252      	negs	r2, r2
 800891a:	4249      	negs	r1, r1
 800891c:	f007 f8fa 	bl	800fb14 <GUI_MoveRect>
 8008920:	9b01      	ldr	r3, [sp, #4]
 8008922:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8008926:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 800892a:	4293      	cmp	r3, r2
 800892c:	d10f      	bne.n	800894e <FRAMEWIN_SetBorderSize+0x78>
 800892e:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	3301      	adds	r3, #1
 8008936:	4543      	cmp	r3, r8
 8008938:	d109      	bne.n	800894e <FRAMEWIN_SetBorderSize+0x78>
 800893a:	9b00      	ldr	r3, [sp, #0]
 800893c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893e:	061b      	lsls	r3, r3, #24
 8008940:	4620      	mov	r0, r4
 8008942:	bf4c      	ite	mi
 8008944:	4269      	negmi	r1, r5
 8008946:	4629      	movpl	r1, r5
 8008948:	462a      	mov	r2, r5
 800894a:	f002 faf6 	bl	800af3a <WM_MoveWindow>
 800894e:	a804      	add	r0, sp, #16
 8008950:	f850 2d10 	ldr.w	r2, [r0, #-16]!
 8008954:	4668      	mov	r0, sp
 8008956:	6a14      	ldr	r4, [r2, #32]
 8008958:	f008 f880 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800895c:	e7cc      	b.n	80088f8 <FRAMEWIN_SetBorderSize+0x22>
 800895e:	a804      	add	r0, sp, #16
 8008960:	f850 2d0c 	ldr.w	r2, [r0, #-12]!
 8008964:	f8a2 7056 	strh.w	r7, [r2, #86]	; 0x56
 8008968:	f008 f878 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800896c:	4630      	mov	r0, r6
 800896e:	f000 f990 	bl	8008c92 <FRAMEWIN__UpdatePositions>
 8008972:	4630      	mov	r0, r6
 8008974:	f003 f9b9 	bl	800bcea <WM_InvalidateWindow>
 8008978:	b004      	add	sp, #16
 800897a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800897e <FRAMEWIN_Create>:
 800897e:	b510      	push	{r4, lr}
 8008980:	b086      	sub	sp, #24
 8008982:	2400      	movs	r4, #0
 8008984:	9004      	str	r0, [sp, #16]
 8008986:	9105      	str	r1, [sp, #20]
 8008988:	9400      	str	r4, [sp, #0]
 800898a:	9201      	str	r2, [sp, #4]
 800898c:	9402      	str	r4, [sp, #8]
 800898e:	9403      	str	r4, [sp, #12]
 8008990:	a908      	add	r1, sp, #32
 8008992:	4618      	mov	r0, r3
 8008994:	c90e      	ldmia	r1, {r1, r2, r3}
 8008996:	f000 fa4d 	bl	8008e34 <FRAMEWIN_CreateEx>
 800899a:	b006      	add	sp, #24
 800899c:	bd10      	pop	{r4, pc}

0800899e <FRAMEWIN__GetBorderSize>:
 800899e:	b570      	push	{r4, r5, r6, lr}
 80089a0:	b08a      	sub	sp, #40	; 0x28
 80089a2:	4605      	mov	r5, r0
 80089a4:	460c      	mov	r4, r1
 80089a6:	f008 f84b 	bl	8010a40 <GUI_ALLOC_LockH>
 80089aa:	ab0a      	add	r3, sp, #40	; 0x28
 80089ac:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80089ae:	f843 0d28 	str.w	r0, [r3, #-40]!
 80089b2:	4668      	mov	r0, sp
 80089b4:	6896      	ldr	r6, [r2, #8]
 80089b6:	f008 f851 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80089ba:	9501      	str	r5, [sp, #4]
 80089bc:	2c03      	cmp	r4, #3
 80089be:	d80b      	bhi.n	80089d8 <FRAMEWIN__GetBorderSize+0x3a>
 80089c0:	e8df f004 	tbb	[pc, r4]
 80089c4:	08060402 	.word	0x08060402
 80089c8:	2318      	movs	r3, #24
 80089ca:	e004      	b.n	80089d6 <FRAMEWIN__GetBorderSize+0x38>
 80089cc:	2316      	movs	r3, #22
 80089ce:	e002      	b.n	80089d6 <FRAMEWIN__GetBorderSize+0x38>
 80089d0:	2315      	movs	r3, #21
 80089d2:	e000      	b.n	80089d6 <FRAMEWIN__GetBorderSize+0x38>
 80089d4:	2317      	movs	r3, #23
 80089d6:	9302      	str	r3, [sp, #8]
 80089d8:	6873      	ldr	r3, [r6, #4]
 80089da:	a801      	add	r0, sp, #4
 80089dc:	4798      	blx	r3
 80089de:	b00a      	add	sp, #40	; 0x28
 80089e0:	bd70      	pop	{r4, r5, r6, pc}

080089e2 <_SetActive>:
 80089e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089e4:	4604      	mov	r4, r0
 80089e6:	460d      	mov	r5, r1
 80089e8:	f008 f82a 	bl	8010a40 <GUI_ALLOC_LockH>
 80089ec:	9001      	str	r0, [sp, #4]
 80089ee:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 80089f2:	b125      	cbz	r5, 80089fe <_SetActive+0x1c>
 80089f4:	0711      	lsls	r1, r2, #28
 80089f6:	d40b      	bmi.n	8008a10 <_SetActive+0x2e>
 80089f8:	f042 0208 	orr.w	r2, r2, #8
 80089fc:	e003      	b.n	8008a06 <_SetActive+0x24>
 80089fe:	0713      	lsls	r3, r2, #28
 8008a00:	d506      	bpl.n	8008a10 <_SetActive+0x2e>
 8008a02:	f022 0208 	bic.w	r2, r2, #8
 8008a06:	f8a0 207c 	strh.w	r2, [r0, #124]	; 0x7c
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f003 f96d 	bl	800bcea <WM_InvalidateWindow>
 8008a10:	a801      	add	r0, sp, #4
 8008a12:	f008 f823 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008a16:	b003      	add	sp, #12
 8008a18:	bd30      	pop	{r4, r5, pc}

08008a1a <FRAMEWIN__cbClient>:
 8008a1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a1e:	6845      	ldr	r5, [r0, #4]
 8008a20:	b087      	sub	sp, #28
 8008a22:	4604      	mov	r4, r0
 8008a24:	4628      	mov	r0, r5
 8008a26:	f002 fb3c 	bl	800b0a2 <WM_GetParent>
 8008a2a:	4681      	mov	r9, r0
 8008a2c:	f008 f808 	bl	8010a40 <GUI_ALLOC_LockH>
 8008a30:	4603      	mov	r3, r0
 8008a32:	a806      	add	r0, sp, #24
 8008a34:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8008a36:	f840 3d14 	str.w	r3, [r0, #-20]!
 8008a3a:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 8008a3c:	f8d3 8080 	ldr.w	r8, [r3, #128]	; 0x80
 8008a40:	f008 f80c 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008a44:	6823      	ldr	r3, [r4, #0]
 8008a46:	2b17      	cmp	r3, #23
 8008a48:	d053      	beq.n	8008af2 <FRAMEWIN__cbClient+0xd8>
 8008a4a:	dc09      	bgt.n	8008a60 <FRAMEWIN__cbClient+0x46>
 8008a4c:	2b0f      	cmp	r3, #15
 8008a4e:	d014      	beq.n	8008a7a <FRAMEWIN__cbClient+0x60>
 8008a50:	dc02      	bgt.n	8008a58 <FRAMEWIN__cbClient+0x3e>
 8008a52:	2b0e      	cmp	r3, #14
 8008a54:	d034      	beq.n	8008ac0 <FRAMEWIN__cbClient+0xa6>
 8008a56:	e046      	b.n	8008ae6 <FRAMEWIN__cbClient+0xcc>
 8008a58:	3b14      	subs	r3, #20
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d949      	bls.n	8008af2 <FRAMEWIN__cbClient+0xd8>
 8008a5e:	e042      	b.n	8008ae6 <FRAMEWIN__cbClient+0xcc>
 8008a60:	2b1f      	cmp	r3, #31
 8008a62:	d028      	beq.n	8008ab6 <FRAMEWIN__cbClient+0x9c>
 8008a64:	dc02      	bgt.n	8008a6c <FRAMEWIN__cbClient+0x52>
 8008a66:	2b1e      	cmp	r3, #30
 8008a68:	d01a      	beq.n	8008aa0 <FRAMEWIN__cbClient+0x86>
 8008a6a:	e03c      	b.n	8008ae6 <FRAMEWIN__cbClient+0xcc>
 8008a6c:	2b22      	cmp	r3, #34	; 0x22
 8008a6e:	d038      	beq.n	8008ae2 <FRAMEWIN__cbClient+0xc8>
 8008a70:	2b31      	cmp	r3, #49	; 0x31
 8008a72:	d138      	bne.n	8008ae6 <FRAMEWIN__cbClient+0xcc>
 8008a74:	2300      	movs	r3, #0
 8008a76:	60e3      	str	r3, [r4, #12]
 8008a78:	e03e      	b.n	8008af8 <FRAMEWIN__cbClient+0xde>
 8008a7a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8008a7e:	429e      	cmp	r6, r3
 8008a80:	d004      	beq.n	8008a8c <FRAMEWIN__cbClient+0x72>
 8008a82:	4630      	mov	r0, r6
 8008a84:	f006 f8e2 	bl	800ec4c <LCD_SetBkColor>
 8008a88:	f007 fbc8 	bl	801021c <GUI_Clear>
 8008a8c:	2f00      	cmp	r7, #0
 8008a8e:	d033      	beq.n	8008af8 <FRAMEWIN__cbClient+0xde>
 8008a90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008a94:	ae02      	add	r6, sp, #8
 8008a96:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8008a9a:	9503      	str	r5, [sp, #12]
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	e026      	b.n	8008aee <FRAMEWIN__cbClient+0xd4>
 8008aa0:	68e3      	ldr	r3, [r4, #12]
 8008aa2:	b34b      	cbz	r3, 8008af8 <FRAMEWIN__cbClient+0xde>
 8008aa4:	f1b8 0f00 	cmp.w	r8, #0
 8008aa8:	d017      	beq.n	8008ada <FRAMEWIN__cbClient+0xc0>
 8008aaa:	45a8      	cmp	r8, r5
 8008aac:	d015      	beq.n	8008ada <FRAMEWIN__cbClient+0xc0>
 8008aae:	4640      	mov	r0, r8
 8008ab0:	f001 ffa4 	bl	800a9fc <WM_SetFocus>
 8008ab4:	e020      	b.n	8008af8 <FRAMEWIN__cbClient+0xde>
 8008ab6:	4648      	mov	r0, r9
 8008ab8:	4621      	mov	r1, r4
 8008aba:	f7fe fb6d 	bl	8007198 <WIDGET_HandleActive>
 8008abe:	e01b      	b.n	8008af8 <FRAMEWIN__cbClient+0xde>
 8008ac0:	68e3      	ldr	r3, [r4, #12]
 8008ac2:	685a      	ldr	r2, [r3, #4]
 8008ac4:	2a00      	cmp	r2, #0
 8008ac6:	dd0e      	ble.n	8008ae6 <FRAMEWIN__cbClient+0xcc>
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2b09      	cmp	r3, #9
 8008acc:	d005      	beq.n	8008ada <FRAMEWIN__cbClient+0xc0>
 8008ace:	2b0a      	cmp	r3, #10
 8008ad0:	d109      	bne.n	8008ae6 <FRAMEWIN__cbClient+0xcc>
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	f001 ff30 	bl	800a938 <WM_SetFocusOnPrevChild>
 8008ad8:	e00e      	b.n	8008af8 <FRAMEWIN__cbClient+0xde>
 8008ada:	4628      	mov	r0, r5
 8008adc:	f001 ff5c 	bl	800a998 <WM_SetFocusOnNextChild>
 8008ae0:	e00a      	b.n	8008af8 <FRAMEWIN__cbClient+0xde>
 8008ae2:	60e6      	str	r6, [r4, #12]
 8008ae4:	e008      	b.n	8008af8 <FRAMEWIN__cbClient+0xde>
 8008ae6:	b127      	cbz	r7, 8008af2 <FRAMEWIN__cbClient+0xd8>
 8008ae8:	f8c4 9004 	str.w	r9, [r4, #4]
 8008aec:	4620      	mov	r0, r4
 8008aee:	47b8      	blx	r7
 8008af0:	e002      	b.n	8008af8 <FRAMEWIN__cbClient+0xde>
 8008af2:	4620      	mov	r0, r4
 8008af4:	f003 fd28 	bl	800c548 <WM_DefaultProc>
 8008af8:	b007      	add	sp, #28
 8008afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08008afe <FRAMEWIN__CalcTitleHeight>:
 8008afe:	b508      	push	{r3, lr}
 8008b00:	4603      	mov	r3, r0
 8008b02:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 8008b04:	f000 0020 	and.w	r0, r0, #32
 8008b08:	b280      	uxth	r0, r0
 8008b0a:	b130      	cbz	r0, 8008b1a <FRAMEWIN__CalcTitleHeight+0x1c>
 8008b0c:	f9b3 0054 	ldrsh.w	r0, [r3, #84]	; 0x54
 8008b10:	b918      	cbnz	r0, 8008b1a <FRAMEWIN__CalcTitleHeight+0x1c>
 8008b12:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008b14:	f007 f89a 	bl	800fc4c <GUI_GetYSizeOfFont>
 8008b18:	3002      	adds	r0, #2
 8008b1a:	bd08      	pop	{r3, pc}

08008b1c <FRAMEWIN__GetTitleLimits>:
 8008b1c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b20:	4607      	mov	r7, r0
 8008b22:	460d      	mov	r5, r1
 8008b24:	4616      	mov	r6, r2
 8008b26:	f007 ff8b 	bl	8010a40 <GUI_ALLOC_LockH>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	a802      	add	r0, sp, #8
 8008b2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008b30:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008b34:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8008b38:	f8b3 8000 	ldrh.w	r8, [r3]
 8008b3c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008b40:	4668      	mov	r0, sp
 8008b42:	f007 ff8b 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008b46:	f8da 3000 	ldr.w	r3, [sl]
 8008b4a:	4638      	mov	r0, r7
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	4798      	blx	r3
 8008b50:	4682      	mov	sl, r0
 8008b52:	4638      	mov	r0, r7
 8008b54:	f002 fae0 	bl	800b118 <WM_GetFirstChild>
 8008b58:	4604      	mov	r4, r0
 8008b5a:	b340      	cbz	r0, 8008bae <FRAMEWIN__GetTitleLimits+0x92>
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	f007 ff6f 	bl	8010a40 <GUI_ALLOC_LockH>
 8008b62:	4603      	mov	r3, r0
 8008b64:	fa0f f289 	sxth.w	r2, r9
 8008b68:	f9b3 7002 	ldrsh.w	r7, [r3, #2]
 8008b6c:	9001      	str	r0, [sp, #4]
 8008b6e:	1aba      	subs	r2, r7, r2
 8008b70:	4552      	cmp	r2, sl
 8008b72:	8800      	ldrh	r0, [r0, #0]
 8008b74:	8899      	ldrh	r1, [r3, #4]
 8008b76:	d113      	bne.n	8008ba0 <FRAMEWIN__GetTitleLimits+0x84>
 8008b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7a:	061b      	lsls	r3, r3, #24
 8008b7c:	fa0f f288 	sxth.w	r2, r8
 8008b80:	d507      	bpl.n	8008b92 <FRAMEWIN__GetTitleLimits+0x76>
 8008b82:	b203      	sxth	r3, r0
 8008b84:	1a9a      	subs	r2, r3, r2
 8008b86:	6833      	ldr	r3, [r6, #0]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	dc09      	bgt.n	8008ba0 <FRAMEWIN__GetTitleLimits+0x84>
 8008b8c:	3a01      	subs	r2, #1
 8008b8e:	6032      	str	r2, [r6, #0]
 8008b90:	e006      	b.n	8008ba0 <FRAMEWIN__GetTitleLimits+0x84>
 8008b92:	b20b      	sxth	r3, r1
 8008b94:	1a9b      	subs	r3, r3, r2
 8008b96:	682a      	ldr	r2, [r5, #0]
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	bfa4      	itt	ge
 8008b9c:	3301      	addge	r3, #1
 8008b9e:	602b      	strge	r3, [r5, #0]
 8008ba0:	a801      	add	r0, sp, #4
 8008ba2:	f007 ff5b 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f002 fa93 	bl	800b0d2 <WM_GetNextSibling>
 8008bac:	e7d4      	b.n	8008b58 <FRAMEWIN__GetTitleLimits+0x3c>
 8008bae:	b002      	add	sp, #8
 8008bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008bb4 <FRAMEWIN__CalcPositions>:
 8008bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb8:	b087      	sub	sp, #28
 8008bba:	4604      	mov	r4, r0
 8008bbc:	460f      	mov	r7, r1
 8008bbe:	f007 ff3f 	bl	8010a40 <GUI_ALLOC_LockH>
 8008bc2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8008bc4:	9003      	str	r0, [sp, #12]
 8008bc6:	6895      	ldr	r5, [r2, #8]
 8008bc8:	2101      	movs	r1, #1
 8008bca:	682a      	ldr	r2, [r5, #0]
 8008bcc:	4620      	mov	r0, r4
 8008bce:	4790      	blx	r2
 8008bd0:	682a      	ldr	r2, [r5, #0]
 8008bd2:	2103      	movs	r1, #3
 8008bd4:	4683      	mov	fp, r0
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	4790      	blx	r2
 8008bda:	682a      	ldr	r2, [r5, #0]
 8008bdc:	2102      	movs	r1, #2
 8008bde:	4681      	mov	r9, r0
 8008be0:	4620      	mov	r0, r4
 8008be2:	4790      	blx	r2
 8008be4:	682a      	ldr	r2, [r5, #0]
 8008be6:	9001      	str	r0, [sp, #4]
 8008be8:	2100      	movs	r1, #0
 8008bea:	4620      	mov	r0, r4
 8008bec:	4790      	blx	r2
 8008bee:	4605      	mov	r5, r0
 8008bf0:	9803      	ldr	r0, [sp, #12]
 8008bf2:	f002 f9ff 	bl	800aff4 <WM__GetWindowSizeX>
 8008bf6:	4682      	mov	sl, r0
 8008bf8:	9803      	ldr	r0, [sp, #12]
 8008bfa:	f002 fa02 	bl	800b002 <WM__GetWindowSizeY>
 8008bfe:	4680      	mov	r8, r0
 8008c00:	9803      	ldr	r0, [sp, #12]
 8008c02:	8e46      	ldrh	r6, [r0, #50]	; 0x32
 8008c04:	f006 0620 	and.w	r6, r6, #32
 8008c08:	b2b6      	uxth	r6, r6
 8008c0a:	b10e      	cbz	r6, 8008c10 <FRAMEWIN__CalcPositions+0x5c>
 8008c0c:	f9b0 6058 	ldrsh.w	r6, [r0, #88]	; 0x58
 8008c10:	f7ff ff75 	bl	8008afe <FRAMEWIN__CalcTitleHeight>
 8008c14:	9903      	ldr	r1, [sp, #12]
 8008c16:	4602      	mov	r2, r0
 8008c18:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
 8008c1a:	b118      	cbz	r0, 8008c24 <FRAMEWIN__CalcPositions+0x70>
 8008c1c:	9200      	str	r2, [sp, #0]
 8008c1e:	f002 fa0c 	bl	800b03a <WM_GetWindowSizeY>
 8008c22:	9a00      	ldr	r2, [sp, #0]
 8008c24:	803a      	strh	r2, [r7, #0]
 8008c26:	b292      	uxth	r2, r2
 8008c28:	b2a9      	uxth	r1, r5
 8008c2a:	4416      	add	r6, r2
 8008c2c:	440e      	add	r6, r1
 8008c2e:	8078      	strh	r0, [r7, #2]
 8008c30:	4430      	add	r0, r6
 8008c32:	80f8      	strh	r0, [r7, #6]
 8008c34:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c38:	9801      	ldr	r0, [sp, #4]
 8008c3a:	81fd      	strh	r5, [r7, #14]
 8008c3c:	3901      	subs	r1, #1
 8008c3e:	ebc9 090a 	rsb	r9, r9, sl
 8008c42:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c46:	ebc0 0308 	rsb	r3, r0, r8
 8008c4a:	440a      	add	r2, r1
 8008c4c:	fa1f fb8b 	uxth.w	fp, fp
 8008c50:	fa1f f989 	uxth.w	r9, r9
 8008c54:	817b      	strh	r3, [r7, #10]
 8008c56:	827a      	strh	r2, [r7, #18]
 8008c58:	f8a7 b004 	strh.w	fp, [r7, #4]
 8008c5c:	f8a7 9008 	strh.w	r9, [r7, #8]
 8008c60:	f8a7 b00c 	strh.w	fp, [r7, #12]
 8008c64:	f8a7 9010 	strh.w	r9, [r7, #16]
 8008c68:	a803      	add	r0, sp, #12
 8008c6a:	f007 fef7 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008c6e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008c72:	9204      	str	r2, [sp, #16]
 8008c74:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8008c78:	9205      	str	r2, [sp, #20]
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	aa05      	add	r2, sp, #20
 8008c7e:	a904      	add	r1, sp, #16
 8008c80:	f7ff ff4c 	bl	8008b1c <FRAMEWIN__GetTitleLimits>
 8008c84:	9a04      	ldr	r2, [sp, #16]
 8008c86:	81ba      	strh	r2, [r7, #12]
 8008c88:	9a05      	ldr	r2, [sp, #20]
 8008c8a:	823a      	strh	r2, [r7, #16]
 8008c8c:	b007      	add	sp, #28
 8008c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c92 <FRAMEWIN__UpdatePositions>:
 8008c92:	b570      	push	{r4, r5, r6, lr}
 8008c94:	b086      	sub	sp, #24
 8008c96:	4606      	mov	r6, r0
 8008c98:	f007 fed2 	bl	8010a40 <GUI_ALLOC_LockH>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	a806      	add	r0, sp, #24
 8008ca0:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8008ca2:	f840 2d18 	str.w	r2, [r0, #-24]!
 8008ca6:	4668      	mov	r0, sp
 8008ca8:	6ed5      	ldr	r5, [r2, #108]	; 0x6c
 8008caa:	f007 fed7 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008cae:	b904      	cbnz	r4, 8008cb2 <FRAMEWIN__UpdatePositions+0x20>
 8008cb0:	b32d      	cbz	r5, 8008cfe <FRAMEWIN__UpdatePositions+0x6c>
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	a901      	add	r1, sp, #4
 8008cb6:	f7ff ff7d 	bl	8008bb4 <FRAMEWIN__CalcPositions>
 8008cba:	b1ac      	cbz	r4, 8008ce8 <FRAMEWIN__UpdatePositions+0x56>
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8008cc2:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8008cc6:	f002 f868 	bl	800ad9a <WM_MoveChildTo>
 8008cca:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8008cce:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8008cd2:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8008cd6:	1ac9      	subs	r1, r1, r3
 8008cd8:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8008cdc:	1ad2      	subs	r2, r2, r3
 8008cde:	4620      	mov	r0, r4
 8008ce0:	3101      	adds	r1, #1
 8008ce2:	3201      	adds	r2, #1
 8008ce4:	f001 fde9 	bl	800a8ba <WM_SetSize>
 8008ce8:	b14d      	cbz	r5, 8008cfe <FRAMEWIN__UpdatePositions+0x6c>
 8008cea:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8008cee:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8008cf2:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	1ad2      	subs	r2, r2, r3
 8008cfa:	f002 f84e 	bl	800ad9a <WM_MoveChildTo>
 8008cfe:	b006      	add	sp, #24
 8008d00:	bd70      	pop	{r4, r5, r6, pc}

08008d02 <FRAMEWIN_SetText>:
 8008d02:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d04:	460d      	mov	r5, r1
 8008d06:	4604      	mov	r4, r0
 8008d08:	b1c0      	cbz	r0, 8008d3c <FRAMEWIN_SetText+0x3a>
 8008d0a:	f007 fe99 	bl	8010a40 <GUI_ALLOC_LockH>
 8008d0e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8008d10:	9000      	str	r0, [sp, #0]
 8008d12:	4668      	mov	r0, sp
 8008d14:	9301      	str	r3, [sp, #4]
 8008d16:	f007 fea1 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008d1a:	a801      	add	r0, sp, #4
 8008d1c:	4629      	mov	r1, r5
 8008d1e:	f005 ffd8 	bl	800ecd2 <GUI__SetText>
 8008d22:	b158      	cbz	r0, 8008d3c <FRAMEWIN_SetText+0x3a>
 8008d24:	4620      	mov	r0, r4
 8008d26:	f007 fe8b 	bl	8010a40 <GUI_ALLOC_LockH>
 8008d2a:	9b01      	ldr	r3, [sp, #4]
 8008d2c:	9000      	str	r0, [sp, #0]
 8008d2e:	6703      	str	r3, [r0, #112]	; 0x70
 8008d30:	4668      	mov	r0, sp
 8008d32:	f007 fe93 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008d36:	4620      	mov	r0, r4
 8008d38:	f002 ffd7 	bl	800bcea <WM_InvalidateWindow>
 8008d3c:	b003      	add	sp, #12
 8008d3e:	bd30      	pop	{r4, r5, pc}

08008d40 <FRAMEWIN_CreateUser>:
 8008d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d44:	b08b      	sub	sp, #44	; 0x2c
 8008d46:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8008d4a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8008d4c:	9400      	str	r4, [sp, #0]
 8008d4e:	f449 5480 	orr.w	r4, r9, #4096	; 0x1000
 8008d52:	9401      	str	r4, [sp, #4]
 8008d54:	4c33      	ldr	r4, [pc, #204]	; (8008e24 <FRAMEWIN_CreateUser+0xe4>)
 8008d56:	9402      	str	r4, [sp, #8]
 8008d58:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8008d5a:	3460      	adds	r4, #96	; 0x60
 8008d5c:	9403      	str	r4, [sp, #12]
 8008d5e:	f003 f805 	bl	800bd6c <WM_CreateWindowAsChild>
 8008d62:	4606      	mov	r6, r0
 8008d64:	2800      	cmp	r0, #0
 8008d66:	d058      	beq.n	8008e1a <FRAMEWIN_CreateUser+0xda>
 8008d68:	f007 fe6a 	bl	8010a40 <GUI_ALLOC_LockH>
 8008d6c:	4d2e      	ldr	r5, [pc, #184]	; (8008e28 <FRAMEWIN_CreateUser+0xe8>)
 8008d6e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008d70:	9004      	str	r0, [sp, #16]
 8008d72:	2230      	movs	r2, #48	; 0x30
 8008d74:	f7fe fa08 	bl	8007188 <WIDGET__Init>
 8008d78:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8008d7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d7e:	f858 7d18 	ldr.w	r7, [r8, #-24]!
 8008d82:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8008d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d8c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008d90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d92:	4d26      	ldr	r5, [pc, #152]	; (8008e2c <FRAMEWIN_CreateUser+0xec>)
 8008d94:	e884 0003 	stmia.w	r4, {r0, r1}
 8008d98:	667b      	str	r3, [r7, #100]	; 0x64
 8008d9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d9c:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8008da0:	2400      	movs	r4, #0
 8008da2:	682b      	ldr	r3, [r5, #0]
 8008da4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008da6:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8008daa:	66fc      	str	r4, [r7, #108]	; 0x6c
 8008dac:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8008db0:	4640      	mov	r0, r8
 8008db2:	f007 fe53 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008db6:	4630      	mov	r0, r6
 8008db8:	a905      	add	r1, sp, #20
 8008dba:	f7ff fefb 	bl	8008bb4 <FRAMEWIN__CalcPositions>
 8008dbe:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 8008dc2:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8008dc6:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8008dca:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8008dce:	9403      	str	r4, [sp, #12]
 8008dd0:	f241 7782 	movw	r7, #6018	; 0x1782
 8008dd4:	1a5b      	subs	r3, r3, r1
 8008dd6:	1a12      	subs	r2, r2, r0
 8008dd8:	9701      	str	r7, [sp, #4]
 8008dda:	4f15      	ldr	r7, [pc, #84]	; (8008e30 <FRAMEWIN_CreateUser+0xf0>)
 8008ddc:	9600      	str	r6, [sp, #0]
 8008dde:	3201      	adds	r2, #1
 8008de0:	3301      	adds	r3, #1
 8008de2:	9702      	str	r7, [sp, #8]
 8008de4:	f002 ffc2 	bl	800bd6c <WM_CreateWindowAsChild>
 8008de8:	682b      	ldr	r3, [r5, #0]
 8008dea:	4604      	mov	r4, r0
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	4630      	mov	r0, r6
 8008df0:	4798      	blx	r3
 8008df2:	4630      	mov	r0, r6
 8008df4:	f007 fe24 	bl	8010a40 <GUI_ALLOC_LockH>
 8008df8:	9004      	str	r0, [sp, #16]
 8008dfa:	6684      	str	r4, [r0, #104]	; 0x68
 8008dfc:	4640      	mov	r0, r8
 8008dfe:	f007 fe2d 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008e02:	f242 0304 	movw	r3, #8196	; 0x2004
 8008e06:	ea09 0303 	and.w	r3, r9, r3
 8008e0a:	b913      	cbnz	r3, 8008e12 <FRAMEWIN_CreateUser+0xd2>
 8008e0c:	4630      	mov	r0, r6
 8008e0e:	f002 f898 	bl	800af42 <WM_DisableMemdev>
 8008e12:	4630      	mov	r0, r6
 8008e14:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008e16:	f7ff ff74 	bl	8008d02 <FRAMEWIN_SetText>
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	b00b      	add	sp, #44	; 0x2c
 8008e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e22:	bf00      	nop
 8008e24:	08008e65 	.word	0x08008e65
 8008e28:	20000224 	.word	0x20000224
 8008e2c:	2000024c 	.word	0x2000024c
 8008e30:	08008a1b 	.word	0x08008a1b

08008e34 <FRAMEWIN_CreateEx>:
 8008e34:	b510      	push	{r4, lr}
 8008e36:	b088      	sub	sp, #32
 8008e38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008e3a:	9400      	str	r4, [sp, #0]
 8008e3c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008e3e:	9401      	str	r4, [sp, #4]
 8008e40:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008e42:	9402      	str	r4, [sp, #8]
 8008e44:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008e46:	9403      	str	r4, [sp, #12]
 8008e48:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8008e4a:	9404      	str	r4, [sp, #16]
 8008e4c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8008e4e:	9405      	str	r4, [sp, #20]
 8008e50:	2400      	movs	r4, #0
 8008e52:	9406      	str	r4, [sp, #24]
 8008e54:	f7ff ff74 	bl	8008d40 <FRAMEWIN_CreateUser>
 8008e58:	b008      	add	sp, #32
 8008e5a:	bd10      	pop	{r4, pc}

08008e5c <FRAMEWIN_SetActive>:
 8008e5c:	b108      	cbz	r0, 8008e62 <FRAMEWIN_SetActive+0x6>
 8008e5e:	f7ff bdc0 	b.w	80089e2 <_SetActive>
 8008e62:	4770      	bx	lr

08008e64 <FRAMEWIN_Callback>:
 8008e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e68:	6844      	ldr	r4, [r0, #4]
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	4605      	mov	r5, r0
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f007 fde6 	bl	8010a40 <GUI_ALLOC_LockH>
 8008e74:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8008e76:	9000      	str	r0, [sp, #0]
 8008e78:	f8d0 7088 	ldr.w	r7, [r0, #136]	; 0x88
 8008e7c:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
 8008e80:	f8d0 8068 	ldr.w	r8, [r0, #104]	; 0x68
 8008e84:	f8b0 907c 	ldrh.w	r9, [r0, #124]	; 0x7c
 8008e88:	b113      	cbz	r3, 8008e90 <FRAMEWIN_Callback+0x2c>
 8008e8a:	f8d3 a000 	ldr.w	sl, [r3]
 8008e8e:	e000      	b.n	8008e92 <FRAMEWIN_Callback+0x2e>
 8008e90:	469a      	mov	sl, r3
 8008e92:	4668      	mov	r0, sp
 8008e94:	f007 fde2 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008e98:	b13f      	cbz	r7, 8008eaa <FRAMEWIN_Callback+0x46>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	4798      	blx	r3
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	f040 811d 	bne.w	80090e0 <FRAMEWIN_Callback+0x27c>
 8008ea6:	683f      	ldr	r7, [r7, #0]
 8008ea8:	e7f6      	b.n	8008e98 <FRAMEWIN_Callback+0x34>
 8008eaa:	682b      	ldr	r3, [r5, #0]
 8008eac:	2b17      	cmp	r3, #23
 8008eae:	f000 808a 	beq.w	8008fc6 <FRAMEWIN_Callback+0x162>
 8008eb2:	dc18      	bgt.n	8008ee6 <FRAMEWIN_Callback+0x82>
 8008eb4:	2b0f      	cmp	r3, #15
 8008eb6:	d043      	beq.n	8008f40 <FRAMEWIN_Callback+0xdc>
 8008eb8:	dc06      	bgt.n	8008ec8 <FRAMEWIN_Callback+0x64>
 8008eba:	2b0b      	cmp	r3, #11
 8008ebc:	f000 80fe 	beq.w	80090bc <FRAMEWIN_Callback+0x258>
 8008ec0:	2b0d      	cmp	r3, #13
 8008ec2:	f000 80c0 	beq.w	8009046 <FRAMEWIN_Callback+0x1e2>
 8008ec6:	e103      	b.n	80090d0 <FRAMEWIN_Callback+0x26c>
 8008ec8:	2b11      	cmp	r3, #17
 8008eca:	d01b      	beq.n	8008f04 <FRAMEWIN_Callback+0xa0>
 8008ecc:	2b14      	cmp	r3, #20
 8008ece:	f040 80ff 	bne.w	80090d0 <FRAMEWIN_Callback+0x26c>
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	a901      	add	r1, sp, #4
 8008ed6:	f7ff fe6d 	bl	8008bb4 <FRAMEWIN__CalcPositions>
 8008eda:	ab02      	add	r3, sp, #8
 8008edc:	cb03      	ldmia	r3!, {r0, r1}
 8008ede:	68ea      	ldr	r2, [r5, #12]
 8008ee0:	6010      	str	r0, [r2, #0]
 8008ee2:	6051      	str	r1, [r2, #4]
 8008ee4:	e0fc      	b.n	80090e0 <FRAMEWIN_Callback+0x27c>
 8008ee6:	2b26      	cmp	r3, #38	; 0x26
 8008ee8:	d070      	beq.n	8008fcc <FRAMEWIN_Callback+0x168>
 8008eea:	dc05      	bgt.n	8008ef8 <FRAMEWIN_Callback+0x94>
 8008eec:	2b1e      	cmp	r3, #30
 8008eee:	d07b      	beq.n	8008fe8 <FRAMEWIN_Callback+0x184>
 8008ef0:	2b20      	cmp	r3, #32
 8008ef2:	f000 80b6 	beq.w	8009062 <FRAMEWIN_Callback+0x1fe>
 8008ef6:	e0eb      	b.n	80090d0 <FRAMEWIN_Callback+0x26c>
 8008ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8008efa:	d013      	beq.n	8008f24 <FRAMEWIN_Callback+0xc0>
 8008efc:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8008f00:	d025      	beq.n	8008f4e <FRAMEWIN_Callback+0xea>
 8008f02:	e0e5      	b.n	80090d0 <FRAMEWIN_Callback+0x26c>
 8008f04:	4620      	mov	r0, r4
 8008f06:	68ee      	ldr	r6, [r5, #12]
 8008f08:	f007 fd9a 	bl	8010a40 <GUI_ALLOC_LockH>
 8008f0c:	9001      	str	r0, [sp, #4]
 8008f0e:	8933      	ldrh	r3, [r6, #8]
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d105      	bne.n	8008f20 <FRAMEWIN_Callback+0xbc>
 8008f14:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 8008f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f1c:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
 8008f20:	a801      	add	r0, sp, #4
 8008f22:	e0d3      	b.n	80090cc <FRAMEWIN_Callback+0x268>
 8008f24:	4620      	mov	r0, r4
 8008f26:	f007 fd8b 	bl	8010a40 <GUI_ALLOC_LockH>
 8008f2a:	68eb      	ldr	r3, [r5, #12]
 8008f2c:	9000      	str	r0, [sp, #0]
 8008f2e:	b113      	cbz	r3, 8008f36 <FRAMEWIN_Callback+0xd2>
 8008f30:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 8008f34:	e002      	b.n	8008f3c <FRAMEWIN_Callback+0xd8>
 8008f36:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8008f3a:	60eb      	str	r3, [r5, #12]
 8008f3c:	4668      	mov	r0, sp
 8008f3e:	e03f      	b.n	8008fc0 <FRAMEWIN_Callback+0x15c>
 8008f40:	f1ba 0f00 	cmp.w	sl, #0
 8008f44:	f000 80c4 	beq.w	80090d0 <FRAMEWIN_Callback+0x26c>
 8008f48:	4620      	mov	r0, r4
 8008f4a:	47d0      	blx	sl
 8008f4c:	e0c0      	b.n	80090d0 <FRAMEWIN_Callback+0x26c>
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8008f54:	f007 fd74 	bl	8010a40 <GUI_ALLOC_LockH>
 8008f58:	ae06      	add	r6, sp, #24
 8008f5a:	f8b0 707c 	ldrh.w	r7, [r0, #124]	; 0x7c
 8008f5e:	f846 0d14 	str.w	r0, [r6, #-20]!
 8008f62:	4630      	mov	r0, r6
 8008f64:	f007 fd7a 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008f68:	68eb      	ldr	r3, [r5, #12]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 80b8 	beq.w	80090e0 <FRAMEWIN_Callback+0x27c>
 8008f70:	f898 3008 	ldrb.w	r3, [r8, #8]
 8008f74:	b1cb      	cbz	r3, 8008faa <FRAMEWIN_Callback+0x146>
 8008f76:	073b      	lsls	r3, r7, #28
 8008f78:	d402      	bmi.n	8008f80 <FRAMEWIN_Callback+0x11c>
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	f001 fd3e 	bl	800a9fc <WM_SetFocus>
 8008f80:	4620      	mov	r0, r4
 8008f82:	f002 f973 	bl	800b26c <WM_BringToTop>
 8008f86:	f407 7388 	and.w	r3, r7, #272	; 0x110
 8008f8a:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8008f8e:	f040 80a7 	bne.w	80090e0 <FRAMEWIN_Callback+0x27c>
 8008f92:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8008f96:	b2bb      	uxth	r3, r7
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f040 80a1 	bne.w	80090e0 <FRAMEWIN_Callback+0x27c>
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	4641      	mov	r1, r8
 8008fa2:	2205      	movs	r2, #5
 8008fa4:	f001 fd80 	bl	800aaa8 <WM_SetCaptureMove>
 8008fa8:	e09a      	b.n	80090e0 <FRAMEWIN_Callback+0x27c>
 8008faa:	4620      	mov	r0, r4
 8008fac:	f007 fd48 	bl	8010a40 <GUI_ALLOC_LockH>
 8008fb0:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 8008fb4:	9001      	str	r0, [sp, #4]
 8008fb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fba:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	f007 fd4c 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8008fc4:	e08c      	b.n	80090e0 <FRAMEWIN_Callback+0x27c>
 8008fc6:	f8c5 800c 	str.w	r8, [r5, #12]
 8008fca:	e089      	b.n	80090e0 <FRAMEWIN_Callback+0x27c>
 8008fcc:	68eb      	ldr	r3, [r5, #12]
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	f040 8086 	bne.w	80090e0 <FRAMEWIN_Callback+0x27c>
 8008fd4:	a906      	add	r1, sp, #24
 8008fd6:	9304      	str	r3, [sp, #16]
 8008fd8:	2327      	movs	r3, #39	; 0x27
 8008fda:	f841 3d14 	str.w	r3, [r1, #-20]!
 8008fde:	68a8      	ldr	r0, [r5, #8]
 8008fe0:	9403      	str	r4, [sp, #12]
 8008fe2:	f001 fb1d 	bl	800a620 <WM__SendMessage>
 8008fe6:	e07b      	b.n	80090e0 <FRAMEWIN_Callback+0x27c>
 8008fe8:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8008fec:	f1b9 0f01 	cmp.w	r9, #1
 8008ff0:	d124      	bne.n	800903c <FRAMEWIN_Callback+0x1d8>
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f001 ffb0 	bl	800af58 <WM_IsWindow>
 8008ff8:	b158      	cbz	r0, 8009012 <FRAMEWIN_Callback+0x1ae>
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	f001 fcfe 	bl	800a9fc <WM_SetFocus>
 8009000:	4630      	mov	r0, r6
 8009002:	f001 ffdb 	bl	800afbc <WM_HasFocus>
 8009006:	b188      	cbz	r0, 800902c <FRAMEWIN_Callback+0x1c8>
 8009008:	4630      	mov	r0, r6
 800900a:	4649      	mov	r1, r9
 800900c:	f7fe f890 	bl	8007130 <WIDGET_OrState>
 8009010:	e00c      	b.n	800902c <FRAMEWIN_Callback+0x1c8>
 8009012:	4640      	mov	r0, r8
 8009014:	f001 fcc0 	bl	800a998 <WM_SetFocusOnNextChild>
 8009018:	4606      	mov	r6, r0
 800901a:	4620      	mov	r0, r4
 800901c:	f007 fd10 	bl	8010a40 <GUI_ALLOC_LockH>
 8009020:	9000      	str	r0, [sp, #0]
 8009022:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
 8009026:	4668      	mov	r0, sp
 8009028:	f007 fd18 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800902c:	4620      	mov	r0, r4
 800902e:	2101      	movs	r1, #1
 8009030:	f7ff ff14 	bl	8008e5c <FRAMEWIN_SetActive>
 8009034:	2e00      	cmp	r6, #0
 8009036:	d153      	bne.n	80090e0 <FRAMEWIN_Callback+0x27c>
 8009038:	60ee      	str	r6, [r5, #12]
 800903a:	e051      	b.n	80090e0 <FRAMEWIN_Callback+0x27c>
 800903c:	4620      	mov	r0, r4
 800903e:	4639      	mov	r1, r7
 8009040:	f7ff ff0c 	bl	8008e5c <FRAMEWIN_SetActive>
 8009044:	e04c      	b.n	80090e0 <FRAMEWIN_Callback+0x27c>
 8009046:	f019 0f08 	tst.w	r9, #8
 800904a:	d141      	bne.n	80090d0 <FRAMEWIN_Callback+0x26c>
 800904c:	68eb      	ldr	r3, [r5, #12]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d03d      	beq.n	80090d0 <FRAMEWIN_Callback+0x26c>
 8009054:	7a1b      	ldrb	r3, [r3, #8]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d03a      	beq.n	80090d0 <FRAMEWIN_Callback+0x26c>
 800905a:	4620      	mov	r0, r4
 800905c:	f001 fcce 	bl	800a9fc <WM_SetFocus>
 8009060:	e036      	b.n	80090d0 <FRAMEWIN_Callback+0x26c>
 8009062:	68ee      	ldr	r6, [r5, #12]
 8009064:	2e00      	cmp	r6, #0
 8009066:	d033      	beq.n	80090d0 <FRAMEWIN_Callback+0x26c>
 8009068:	6870      	ldr	r0, [r6, #4]
 800906a:	4621      	mov	r1, r4
 800906c:	f001 fb2d 	bl	800a6ca <WM__IsAncestorOrSelf>
 8009070:	b180      	cbz	r0, 8009094 <FRAMEWIN_Callback+0x230>
 8009072:	4620      	mov	r0, r4
 8009074:	2101      	movs	r1, #1
 8009076:	f7ff fcb4 	bl	80089e2 <_SetActive>
 800907a:	6870      	ldr	r0, [r6, #4]
 800907c:	4621      	mov	r1, r4
 800907e:	f001 fb13 	bl	800a6a8 <WM__IsAncestor>
 8009082:	b328      	cbz	r0, 80090d0 <FRAMEWIN_Callback+0x26c>
 8009084:	4620      	mov	r0, r4
 8009086:	f007 fcdb 	bl	8010a40 <GUI_ALLOC_LockH>
 800908a:	ab06      	add	r3, sp, #24
 800908c:	6872      	ldr	r2, [r6, #4]
 800908e:	f843 0d14 	str.w	r0, [r3, #-20]!
 8009092:	e00f      	b.n	80090b4 <FRAMEWIN_Callback+0x250>
 8009094:	4620      	mov	r0, r4
 8009096:	4639      	mov	r1, r7
 8009098:	f7ff fca3 	bl	80089e2 <_SetActive>
 800909c:	6830      	ldr	r0, [r6, #0]
 800909e:	4621      	mov	r1, r4
 80090a0:	f001 fb02 	bl	800a6a8 <WM__IsAncestor>
 80090a4:	b1a0      	cbz	r0, 80090d0 <FRAMEWIN_Callback+0x26c>
 80090a6:	4620      	mov	r0, r4
 80090a8:	f007 fcca 	bl	8010a40 <GUI_ALLOC_LockH>
 80090ac:	ab06      	add	r3, sp, #24
 80090ae:	6832      	ldr	r2, [r6, #0]
 80090b0:	f843 0d14 	str.w	r0, [r3, #-20]!
 80090b4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 80090b8:	4618      	mov	r0, r3
 80090ba:	e007      	b.n	80090cc <FRAMEWIN_Callback+0x268>
 80090bc:	4620      	mov	r0, r4
 80090be:	f007 fcbf 	bl	8010a40 <GUI_ALLOC_LockH>
 80090c2:	9000      	str	r0, [sp, #0]
 80090c4:	3070      	adds	r0, #112	; 0x70
 80090c6:	f007 ff17 	bl	8010ef8 <GUI_ALLOC_FreePtr>
 80090ca:	4668      	mov	r0, sp
 80090cc:	f007 fcc6 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80090d0:	4620      	mov	r0, r4
 80090d2:	4629      	mov	r1, r5
 80090d4:	f7fe f860 	bl	8007198 <WIDGET_HandleActive>
 80090d8:	b110      	cbz	r0, 80090e0 <FRAMEWIN_Callback+0x27c>
 80090da:	4628      	mov	r0, r5
 80090dc:	f003 fa34 	bl	800c548 <WM_DefaultProc>
 80090e0:	b006      	add	sp, #24
 80090e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080090e6 <EDIT_CreateIndirect>:
 80090e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090e8:	b087      	sub	sp, #28
 80090ea:	4604      	mov	r4, r0
 80090ec:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 80090f0:	9100      	str	r1, [sp, #0]
 80090f2:	2100      	movs	r1, #0
 80090f4:	6965      	ldr	r5, [r4, #20]
 80090f6:	f9b4 e00c 	ldrsh.w	lr, [r4, #12]
 80090fa:	f9b4 700e 	ldrsh.w	r7, [r4, #14]
 80090fe:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 8009102:	9101      	str	r1, [sp, #4]
 8009104:	8a61      	ldrh	r1, [r4, #18]
 8009106:	9102      	str	r1, [sp, #8]
 8009108:	9504      	str	r5, [sp, #16]
 800910a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800910e:	69a5      	ldr	r5, [r4, #24]
 8009110:	9103      	str	r1, [sp, #12]
 8009112:	9505      	str	r5, [sp, #20]
 8009114:	4410      	add	r0, r2
 8009116:	eb0e 0103 	add.w	r1, lr, r3
 800911a:	463a      	mov	r2, r7
 800911c:	4633      	mov	r3, r6
 800911e:	f000 f9cb 	bl	80094b8 <EDIT_CreateUser>
 8009122:	4605      	mov	r5, r0
 8009124:	b110      	cbz	r0, 800912c <EDIT_CreateIndirect+0x46>
 8009126:	8a61      	ldrh	r1, [r4, #18]
 8009128:	f000 fc68 	bl	80099fc <EDIT_SetTextAlign>
 800912c:	4628      	mov	r0, r5
 800912e:	b007      	add	sp, #28
 8009130:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009134 <_Paint>:
 8009134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009138:	b08d      	sub	sp, #52	; 0x34
 800913a:	2500      	movs	r5, #0
 800913c:	460e      	mov	r6, r1
 800913e:	4607      	mov	r7, r0
 8009140:	9502      	str	r5, [sp, #8]
 8009142:	f007 fc7d 	bl	8010a40 <GUI_ALLOC_LockH>
 8009146:	4604      	mov	r4, r0
 8009148:	9003      	str	r0, [sp, #12]
 800914a:	4638      	mov	r0, r7
 800914c:	9504      	str	r5, [sp, #16]
 800914e:	f001 fa8e 	bl	800a66e <WM__IsEnabled>
 8009152:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8009156:	af06      	add	r7, sp, #24
 8009158:	6f68      	ldr	r0, [r5, #116]	; 0x74
 800915a:	f005 fd77 	bl	800ec4c <LCD_SetBkColor>
 800915e:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8009160:	f005 fd7c 	bl	800ec5c <LCD_SetColor>
 8009164:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8009166:	f006 fb51 	bl	800f80c <GUI_SetFont>
 800916a:	4620      	mov	r0, r4
 800916c:	4639      	mov	r1, r7
 800916e:	f7fd ffc0 	bl	80070f2 <WIDGET__GetInsideRect>
 8009172:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009174:	b110      	cbz	r0, 800917c <_Paint+0x48>
 8009176:	f007 fc63 	bl	8010a40 <GUI_ALLOC_LockH>
 800917a:	9004      	str	r0, [sp, #16]
 800917c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009180:	f10d 0820 	add.w	r8, sp, #32
 8009184:	e888 0003 	stmia.w	r8, {r0, r1}
 8009188:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800918c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8009190:	9804      	ldr	r0, [sp, #16]
 8009192:	441a      	add	r2, r3
 8009194:	3201      	adds	r2, #1
 8009196:	f8ad 2020 	strh.w	r2, [sp, #32]
 800919a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800919e:	3a01      	subs	r2, #1
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80091a6:	4641      	mov	r1, r8
 80091a8:	aa0a      	add	r2, sp, #40	; 0x28
 80091aa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80091ac:	f005 ff10 	bl	800efd0 <GUI__CalcTextRect>
 80091b0:	8e65      	ldrh	r5, [r4, #50]	; 0x32
 80091b2:	f015 0501 	ands.w	r5, r5, #1
 80091b6:	d058      	beq.n	800926a <_Paint+0x136>
 80091b8:	f894 5055 	ldrb.w	r5, [r4, #85]	; 0x55
 80091bc:	9804      	ldr	r0, [sp, #16]
 80091be:	2d00      	cmp	r5, #0
 80091c0:	bf08      	it	eq
 80091c2:	2501      	moveq	r5, #1
 80091c4:	f005 fe92 	bl	800eeec <GUI__GetNumChars>
 80091c8:	4683      	mov	fp, r0
 80091ca:	9804      	ldr	r0, [sp, #16]
 80091cc:	2800      	cmp	r0, #0
 80091ce:	d04c      	beq.n	800926a <_Paint+0x136>
 80091d0:	2300      	movs	r3, #0
 80091d2:	9305      	str	r3, [sp, #20]
 80091d4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80091d8:	b913      	cbnz	r3, 80091e0 <_Paint+0xac>
 80091da:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80091dc:	b333      	cbz	r3, 800922c <_Paint+0xf8>
 80091de:	b32e      	cbz	r6, 800922c <_Paint+0xf8>
 80091e0:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
 80091e4:	45d9      	cmp	r9, fp
 80091e6:	da2b      	bge.n	8009240 <_Paint+0x10c>
 80091e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80091ea:	b1b3      	cbz	r3, 800921a <_Paint+0xe6>
 80091ec:	b1ae      	cbz	r6, 800921a <_Paint+0xe6>
 80091ee:	2500      	movs	r5, #0
 80091f0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80091f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80091f4:	4413      	add	r3, r2
 80091f6:	4599      	cmp	r9, r3
 80091f8:	da0b      	bge.n	8009212 <_Paint+0xde>
 80091fa:	4649      	mov	r1, r9
 80091fc:	465a      	mov	r2, fp
 80091fe:	2300      	movs	r3, #0
 8009200:	9804      	ldr	r0, [sp, #16]
 8009202:	f005 fedd 	bl	800efc0 <GUI__GetCursorCharacter>
 8009206:	f007 fb0d 	bl	8010824 <GUI_GetCharDistX>
 800920a:	f109 0901 	add.w	r9, r9, #1
 800920e:	4405      	add	r5, r0
 8009210:	e7ee      	b.n	80091f0 <_Paint+0xbc>
 8009212:	2d00      	cmp	r5, #0
 8009214:	bf08      	it	eq
 8009216:	2501      	moveq	r5, #1
 8009218:	e012      	b.n	8009240 <_Paint+0x10c>
 800921a:	4649      	mov	r1, r9
 800921c:	465a      	mov	r2, fp
 800921e:	ab05      	add	r3, sp, #20
 8009220:	f005 fece 	bl	800efc0 <GUI__GetCursorCharacter>
 8009224:	f007 fafe 	bl	8010824 <GUI_GetCharDistX>
 8009228:	4605      	mov	r5, r0
 800922a:	e009      	b.n	8009240 <_Paint+0x10c>
 800922c:	4b30      	ldr	r3, [pc, #192]	; (80092f0 <_Paint+0x1bc>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d105      	bne.n	8009240 <_Paint+0x10c>
 8009234:	4b2f      	ldr	r3, [pc, #188]	; (80092f4 <_Paint+0x1c0>)
 8009236:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4659      	mov	r1, fp
 800923c:	4798      	blx	r3
 800923e:	9005      	str	r0, [sp, #20]
 8009240:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8009244:	9301      	str	r3, [sp, #4]
 8009246:	9b05      	ldr	r3, [sp, #20]
 8009248:	f8bd a028 	ldrh.w	sl, [sp, #40]	; 0x28
 800924c:	f8bd 902a 	ldrh.w	r9, [sp, #42]	; 0x2a
 8009250:	b11b      	cbz	r3, 800925a <_Paint+0x126>
 8009252:	ebc5 0a0a 	rsb	sl, r5, sl
 8009256:	fa1f fa8a 	uxth.w	sl, sl
 800925a:	9804      	ldr	r0, [sp, #16]
 800925c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800925e:	465a      	mov	r2, fp
 8009260:	f005 fe9a 	bl	800ef98 <GUI__GetCursorPosX>
 8009264:	4450      	add	r0, sl
 8009266:	fa1f fa80 	uxth.w	sl, r0
 800926a:	9b04      	ldr	r3, [sp, #16]
 800926c:	b113      	cbz	r3, 8009274 <_Paint+0x140>
 800926e:	a804      	add	r0, sp, #16
 8009270:	f007 fbf4 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009274:	9b03      	ldr	r3, [sp, #12]
 8009276:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009278:	b110      	cbz	r0, 8009280 <_Paint+0x14c>
 800927a:	f007 fbe1 	bl	8010a40 <GUI_ALLOC_LockH>
 800927e:	9002      	str	r0, [sp, #8]
 8009280:	2000      	movs	r0, #0
 8009282:	f002 ff6d 	bl	800c160 <WM__InitIVRSearch>
 8009286:	b930      	cbnz	r0, 8009296 <_Paint+0x162>
 8009288:	b33e      	cbz	r6, 80092da <_Paint+0x1a6>
 800928a:	9b03      	ldr	r3, [sp, #12]
 800928c:	2100      	movs	r1, #0
 800928e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8009290:	f001 faa0 	bl	800a7d4 <WM_RestartTimer>
 8009294:	e021      	b.n	80092da <_Paint+0x1a6>
 8009296:	4638      	mov	r0, r7
 8009298:	f001 fada 	bl	800a850 <WM_SetUserClipRect>
 800929c:	b12e      	cbz	r6, 80092aa <_Paint+0x176>
 800929e:	9802      	ldr	r0, [sp, #8]
 80092a0:	4639      	mov	r1, r7
 80092a2:	4642      	mov	r2, r8
 80092a4:	ab0a      	add	r3, sp, #40	; 0x28
 80092a6:	f007 feef 	bl	8011088 <WIDGET__FillStringInRect>
 80092aa:	9b03      	ldr	r3, [sp, #12]
 80092ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80092ae:	07db      	lsls	r3, r3, #31
 80092b0:	d509      	bpl.n	80092c6 <_Paint+0x192>
 80092b2:	fa0f f08a 	sxth.w	r0, sl
 80092b6:	9c01      	ldr	r4, [sp, #4]
 80092b8:	1942      	adds	r2, r0, r5
 80092ba:	fa0f f189 	sxth.w	r1, r9
 80092be:	3a01      	subs	r2, #1
 80092c0:	b223      	sxth	r3, r4
 80092c2:	f006 fc8b 	bl	800fbdc <GUI_InvertRect>
 80092c6:	2000      	movs	r0, #0
 80092c8:	f001 fac2 	bl	800a850 <WM_SetUserClipRect>
 80092cc:	b116      	cbz	r6, 80092d4 <_Paint+0x1a0>
 80092ce:	9803      	ldr	r0, [sp, #12]
 80092d0:	f7fe f85c 	bl	800738c <WIDGET__EFFECT_DrawDown>
 80092d4:	f002 fe82 	bl	800bfdc <WM__GetNextIVR>
 80092d8:	e7d5      	b.n	8009286 <_Paint+0x152>
 80092da:	a803      	add	r0, sp, #12
 80092dc:	f007 fbbe 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80092e0:	9b02      	ldr	r3, [sp, #8]
 80092e2:	b113      	cbz	r3, 80092ea <_Paint+0x1b6>
 80092e4:	a802      	add	r0, sp, #8
 80092e6:	f007 fbb9 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80092ea:	b00d      	add	sp, #52	; 0x34
 80092ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f0:	20021bc4 	.word	0x20021bc4
 80092f4:	20021bd8 	.word	0x20021bd8

080092f8 <_IncrementBuffer>:
 80092f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80092fc:	460e      	mov	r6, r1
 80092fe:	4680      	mov	r8, r0
 8009300:	f007 fb9e 	bl	8010a40 <GUI_ALLOC_LockH>
 8009304:	ac02      	add	r4, sp, #8
 8009306:	8f47      	ldrh	r7, [r0, #58]	; 0x3a
 8009308:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800930a:	f844 0d08 	str.w	r0, [r4, #-8]!
 800930e:	4437      	add	r7, r6
 8009310:	4668      	mov	r0, sp
 8009312:	f007 fba3 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009316:	4628      	mov	r0, r5
 8009318:	4639      	mov	r1, r7
 800931a:	f006 fb1c 	bl	800f956 <GUI_ALLOC_Realloc>
 800931e:	4606      	mov	r6, r0
 8009320:	b1a0      	cbz	r0, 800934c <_IncrementBuffer+0x54>
 8009322:	b945      	cbnz	r5, 8009336 <_IncrementBuffer+0x3e>
 8009324:	f007 fb8c 	bl	8010a40 <GUI_ALLOC_LockH>
 8009328:	4602      	mov	r2, r0
 800932a:	a802      	add	r0, sp, #8
 800932c:	f840 2d04 	str.w	r2, [r0, #-4]!
 8009330:	7015      	strb	r5, [r2, #0]
 8009332:	f007 fb93 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009336:	4640      	mov	r0, r8
 8009338:	f007 fb82 	bl	8010a40 <GUI_ALLOC_LockH>
 800933c:	9000      	str	r0, [sp, #0]
 800933e:	8747      	strh	r7, [r0, #58]	; 0x3a
 8009340:	6346      	str	r6, [r0, #52]	; 0x34
 8009342:	4668      	mov	r0, sp
 8009344:	f007 fb8a 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009348:	2001      	movs	r0, #1
 800934a:	e7ff      	b.n	800934c <_IncrementBuffer+0x54>
 800934c:	b002      	add	sp, #8
 800934e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009352 <_ChangeCharacter>:
 8009352:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009356:	460d      	mov	r5, r1
 8009358:	4606      	mov	r6, r0
 800935a:	2100      	movs	r1, #0
 800935c:	4628      	mov	r0, r5
 800935e:	4690      	mov	r8, r2
 8009360:	461f      	mov	r7, r3
 8009362:	f8ad 1004 	strh.w	r1, [sp, #4]
 8009366:	f88d 1006 	strb.w	r1, [sp, #6]
 800936a:	f006 f841 	bl	800f3f0 <GUI_UC__CalcSizeOfChar>
 800936e:	4445      	add	r5, r8
 8009370:	b2ad      	uxth	r5, r5
 8009372:	4604      	mov	r4, r0
 8009374:	4628      	mov	r0, r5
 8009376:	f006 f83b 	bl	800f3f0 <GUI_UC__CalcSizeOfChar>
 800937a:	4284      	cmp	r4, r0
 800937c:	d10c      	bne.n	8009398 <_ChangeCharacter+0x46>
 800937e:	4629      	mov	r1, r5
 8009380:	a801      	add	r0, sp, #4
 8009382:	f006 f82d 	bl	800f3e0 <GUI_UC_Encode>
 8009386:	a901      	add	r1, sp, #4
 8009388:	4638      	mov	r0, r7
 800938a:	4622      	mov	r2, r4
 800938c:	f00f fc47 	bl	8018c1e <memcpy>
 8009390:	4630      	mov	r0, r6
 8009392:	2105      	movs	r1, #5
 8009394:	f001 fcf7 	bl	800ad86 <WM_NotifyParent>
 8009398:	b002      	add	sp, #8
 800939a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800939e <_IsSpaceInBuffer>:
 800939e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093a0:	4606      	mov	r6, r0
 80093a2:	460f      	mov	r7, r1
 80093a4:	f007 fb4c 	bl	8010a40 <GUI_ALLOC_LockH>
 80093a8:	9000      	str	r0, [sp, #0]
 80093aa:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80093ac:	b158      	cbz	r0, 80093c6 <_IsSpaceInBuffer+0x28>
 80093ae:	f007 fb47 	bl	8010a40 <GUI_ALLOC_LockH>
 80093b2:	ac02      	add	r4, sp, #8
 80093b4:	f844 0d04 	str.w	r0, [r4, #-4]!
 80093b8:	f7f6 ff1a 	bl	80001f0 <strlen>
 80093bc:	4605      	mov	r5, r0
 80093be:	4620      	mov	r0, r4
 80093c0:	f007 fb4c 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80093c4:	e000      	b.n	80093c8 <_IsSpaceInBuffer+0x2a>
 80093c6:	4605      	mov	r5, r0
 80093c8:	a802      	add	r0, sp, #8
 80093ca:	197c      	adds	r4, r7, r5
 80093cc:	f850 2d08 	ldr.w	r2, [r0, #-8]!
 80093d0:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 80093d2:	3401      	adds	r4, #1
 80093d4:	1aa4      	subs	r4, r4, r2
 80093d6:	4668      	mov	r0, sp
 80093d8:	f007 fb40 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80093dc:	2c00      	cmp	r4, #0
 80093de:	dd08      	ble.n	80093f2 <_IsSpaceInBuffer+0x54>
 80093e0:	4630      	mov	r0, r6
 80093e2:	f104 0110 	add.w	r1, r4, #16
 80093e6:	f7ff ff87 	bl	80092f8 <_IncrementBuffer>
 80093ea:	3000      	adds	r0, #0
 80093ec:	bf18      	it	ne
 80093ee:	2001      	movne	r0, #1
 80093f0:	e000      	b.n	80093f4 <_IsSpaceInBuffer+0x56>
 80093f2:	2001      	movs	r0, #1
 80093f4:	b003      	add	sp, #12
 80093f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080093f8 <_DeleteChar>:
 80093f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093fa:	4607      	mov	r7, r0
 80093fc:	f007 fb20 	bl	8010a40 <GUI_ALLOC_LockH>
 8009400:	4602      	mov	r2, r0
 8009402:	a802      	add	r0, sp, #8
 8009404:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009406:	f840 2d08 	str.w	r2, [r0, #-8]!
 800940a:	4668      	mov	r0, sp
 800940c:	6cd6      	ldr	r6, [r2, #76]	; 0x4c
 800940e:	f007 fb25 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009412:	b314      	cbz	r4, 800945a <_DeleteChar+0x62>
 8009414:	4620      	mov	r0, r4
 8009416:	f007 fb13 	bl	8010a40 <GUI_ALLOC_LockH>
 800941a:	ac02      	add	r4, sp, #8
 800941c:	4631      	mov	r1, r6
 800941e:	4605      	mov	r5, r0
 8009420:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009424:	f006 f800 	bl	800f428 <GUI_UC__NumChars2NumBytes>
 8009428:	4606      	mov	r6, r0
 800942a:	4628      	mov	r0, r5
 800942c:	f7f6 fee0 	bl	80001f0 <strlen>
 8009430:	4286      	cmp	r6, r0
 8009432:	d20f      	bcs.n	8009454 <_DeleteChar+0x5c>
 8009434:	4435      	add	r5, r6
 8009436:	4628      	mov	r0, r5
 8009438:	f005 ffc2 	bl	800f3c0 <GUI_UC_GetCharSize>
 800943c:	1829      	adds	r1, r5, r0
 800943e:	4628      	mov	r0, r5
 8009440:	f00f fc2a 	bl	8018c98 <strcpy>
 8009444:	4620      	mov	r0, r4
 8009446:	f007 fb09 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800944a:	4638      	mov	r0, r7
 800944c:	2105      	movs	r1, #5
 800944e:	f001 fc9a 	bl	800ad86 <WM_NotifyParent>
 8009452:	e002      	b.n	800945a <_DeleteChar+0x62>
 8009454:	4620      	mov	r0, r4
 8009456:	f007 fb01 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800945a:	b003      	add	sp, #12
 800945c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800945e <EDIT__SetCursorPos>:
 800945e:	b513      	push	{r0, r1, r4, lr}
 8009460:	460c      	mov	r4, r1
 8009462:	f007 faed 	bl	8010a40 <GUI_ALLOC_LockH>
 8009466:	9000      	str	r0, [sp, #0]
 8009468:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800946a:	b1f8      	cbz	r0, 80094ac <EDIT__SetCursorPos+0x4e>
 800946c:	f007 fae8 	bl	8010a40 <GUI_ALLOC_LockH>
 8009470:	9001      	str	r0, [sp, #4]
 8009472:	f005 fd3b 	bl	800eeec <GUI__GetNumChars>
 8009476:	9b00      	ldr	r3, [sp, #0]
 8009478:	f9b3 1038 	ldrsh.w	r1, [r3, #56]	; 0x38
 800947c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8009480:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8009484:	2a00      	cmp	r2, #0
 8009486:	bf0c      	ite	eq
 8009488:	460a      	moveq	r2, r1
 800948a:	1e4a      	subne	r2, r1, #1
 800948c:	4294      	cmp	r4, r2
 800948e:	bfa8      	it	ge
 8009490:	4614      	movge	r4, r2
 8009492:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009494:	4284      	cmp	r4, r0
 8009496:	bfb8      	it	lt
 8009498:	4620      	movlt	r0, r4
 800949a:	4282      	cmp	r2, r0
 800949c:	f04f 0200 	mov.w	r2, #0
 80094a0:	bf18      	it	ne
 80094a2:	64d8      	strne	r0, [r3, #76]	; 0x4c
 80094a4:	651a      	str	r2, [r3, #80]	; 0x50
 80094a6:	a801      	add	r0, sp, #4
 80094a8:	f007 fad8 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80094ac:	4668      	mov	r0, sp
 80094ae:	f007 fad5 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80094b2:	b002      	add	sp, #8
 80094b4:	bd10      	pop	{r4, pc}
	...

080094b8 <EDIT_CreateUser>:
 80094b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094bc:	b086      	sub	sp, #24
 80094be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80094c0:	9400      	str	r4, [sp, #0]
 80094c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80094c4:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80094c8:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
 80094cc:	9401      	str	r4, [sp, #4]
 80094ce:	4c21      	ldr	r4, [pc, #132]	; (8009554 <EDIT_CreateUser+0x9c>)
 80094d0:	9402      	str	r4, [sp, #8]
 80094d2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80094d4:	3458      	adds	r4, #88	; 0x58
 80094d6:	9403      	str	r4, [sp, #12]
 80094d8:	f002 fc48 	bl	800bd6c <WM_CreateWindowAsChild>
 80094dc:	4607      	mov	r7, r0
 80094de:	2800      	cmp	r0, #0
 80094e0:	d034      	beq.n	800954c <EDIT_CreateUser+0x94>
 80094e2:	f007 faad 	bl	8010a40 <GUI_ALLOC_LockH>
 80094e6:	4d1c      	ldr	r5, [pc, #112]	; (8009558 <EDIT_CreateUser+0xa0>)
 80094e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80094ea:	9005      	str	r0, [sp, #20]
 80094ec:	2210      	movs	r2, #16
 80094ee:	f7fd fe4b 	bl	8007188 <WIDGET__Init>
 80094f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094f4:	9e05      	ldr	r6, [sp, #20]
 80094f6:	f106 0460 	add.w	r4, r6, #96	; 0x60
 80094fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009500:	2301      	movs	r3, #1
 8009502:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009506:	f886 3055 	strb.w	r3, [r6, #85]	; 0x55
 800950a:	f118 0301 	adds.w	r3, r8, #1
 800950e:	bf18      	it	ne
 8009510:	2301      	movne	r3, #1
 8009512:	f1b8 0f00 	cmp.w	r8, #0
 8009516:	bfcc      	ite	gt
 8009518:	fa1f f888 	uxthgt.w	r8, r8
 800951c:	f04f 0808 	movle.w	r8, #8
 8009520:	f886 3080 	strb.w	r3, [r6, #128]	; 0x80
 8009524:	2300      	movs	r3, #0
 8009526:	8773      	strh	r3, [r6, #58]	; 0x3a
 8009528:	6373      	str	r3, [r6, #52]	; 0x34
 800952a:	f8a6 8038 	strh.w	r8, [r6, #56]	; 0x38
 800952e:	a805      	add	r0, sp, #20
 8009530:	f007 fa94 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009534:	fa0f f188 	sxth.w	r1, r8
 8009538:	4638      	mov	r0, r7
 800953a:	3101      	adds	r1, #1
 800953c:	f7ff fedc 	bl	80092f8 <_IncrementBuffer>
 8009540:	4604      	mov	r4, r0
 8009542:	b918      	cbnz	r0, 800954c <EDIT_CreateUser+0x94>
 8009544:	4638      	mov	r0, r7
 8009546:	f002 fcbb 	bl	800bec0 <WM_DeleteWindow>
 800954a:	4627      	mov	r7, r4
 800954c:	4638      	mov	r0, r7
 800954e:	b006      	add	sp, #24
 8009550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009554:	080097f9 	.word	0x080097f9
 8009558:	20000250 	.word	0x20000250

0800955c <EDIT_SetCursorAtPixel>:
 800955c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009560:	460f      	mov	r7, r1
 8009562:	4604      	mov	r4, r0
 8009564:	2800      	cmp	r0, #0
 8009566:	d04f      	beq.n	8009608 <EDIT_SetCursorAtPixel+0xac>
 8009568:	f007 fa6a 	bl	8010a40 <GUI_ALLOC_LockH>
 800956c:	9001      	str	r0, [sp, #4]
 800956e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8009570:	2800      	cmp	r0, #0
 8009572:	d046      	beq.n	8009602 <EDIT_SetCursorAtPixel+0xa6>
 8009574:	f007 fa64 	bl	8010a40 <GUI_ALLOC_LockH>
 8009578:	9b01      	ldr	r3, [sp, #4]
 800957a:	9000      	str	r0, [sp, #0]
 800957c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800957e:	f006 f945 	bl	800f80c <GUI_SetFont>
 8009582:	4680      	mov	r8, r0
 8009584:	4620      	mov	r0, r4
 8009586:	f001 fd43 	bl	800b010 <WM_GetWindowSizeX>
 800958a:	4605      	mov	r5, r0
 800958c:	9800      	ldr	r0, [sp, #0]
 800958e:	f006 fb65 	bl	800fc5c <GUI_GetStringDistX>
 8009592:	9b01      	ldr	r3, [sp, #4]
 8009594:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009596:	f002 0203 	and.w	r2, r2, #3
 800959a:	2a01      	cmp	r2, #1
 800959c:	4606      	mov	r6, r0
 800959e:	d007      	beq.n	80095b0 <EDIT_SetCursorAtPixel+0x54>
 80095a0:	2a02      	cmp	r2, #2
 80095a2:	d109      	bne.n	80095b8 <EDIT_SetCursorAtPixel+0x5c>
 80095a4:	1a2d      	subs	r5, r5, r0
 80095a6:	3501      	adds	r5, #1
 80095a8:	fb95 f5f2 	sdiv	r5, r5, r2
 80095ac:	1b7d      	subs	r5, r7, r5
 80095ae:	e009      	b.n	80095c4 <EDIT_SetCursorAtPixel+0x68>
 80095b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095b2:	1b45      	subs	r5, r0, r5
 80095b4:	43db      	mvns	r3, r3
 80095b6:	e003      	b.n	80095c0 <EDIT_SetCursorAtPixel+0x64>
 80095b8:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80095ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	43ed      	mvns	r5, r5
 80095c0:	1aed      	subs	r5, r5, r3
 80095c2:	443d      	add	r5, r7
 80095c4:	9800      	ldr	r0, [sp, #0]
 80095c6:	f005 fc91 	bl	800eeec <GUI__GetNumChars>
 80095ca:	2d00      	cmp	r5, #0
 80095cc:	4602      	mov	r2, r0
 80095ce:	da02      	bge.n	80095d6 <EDIT_SetCursorAtPixel+0x7a>
 80095d0:	4620      	mov	r0, r4
 80095d2:	2100      	movs	r1, #0
 80095d4:	e00a      	b.n	80095ec <EDIT_SetCursorAtPixel+0x90>
 80095d6:	42b5      	cmp	r5, r6
 80095d8:	dd02      	ble.n	80095e0 <EDIT_SetCursorAtPixel+0x84>
 80095da:	4620      	mov	r0, r4
 80095dc:	4611      	mov	r1, r2
 80095de:	e005      	b.n	80095ec <EDIT_SetCursorAtPixel+0x90>
 80095e0:	4629      	mov	r1, r5
 80095e2:	9800      	ldr	r0, [sp, #0]
 80095e4:	f005 fce2 	bl	800efac <GUI__GetCursorPosChar>
 80095e8:	4601      	mov	r1, r0
 80095ea:	4620      	mov	r0, r4
 80095ec:	f7ff ff37 	bl	800945e <EDIT__SetCursorPos>
 80095f0:	4668      	mov	r0, sp
 80095f2:	f007 fa33 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80095f6:	4640      	mov	r0, r8
 80095f8:	f006 f908 	bl	800f80c <GUI_SetFont>
 80095fc:	4620      	mov	r0, r4
 80095fe:	f002 fb74 	bl	800bcea <WM_InvalidateWindow>
 8009602:	a801      	add	r0, sp, #4
 8009604:	f007 fa2a 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009608:	b002      	add	sp, #8
 800960a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800960e <EDIT_AddKey>:
 800960e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009612:	460d      	mov	r5, r1
 8009614:	4604      	mov	r4, r0
 8009616:	2800      	cmp	r0, #0
 8009618:	f000 80eb 	beq.w	80097f2 <EDIT_AddKey+0x1e4>
 800961c:	f007 fa10 	bl	8010a40 <GUI_ALLOC_LockH>
 8009620:	af04      	add	r7, sp, #16
 8009622:	f8d0 9058 	ldr.w	r9, [r0, #88]	; 0x58
 8009626:	f847 0d0c 	str.w	r0, [r7, #-12]!
 800962a:	f890 a054 	ldrb.w	sl, [r0, #84]	; 0x54
 800962e:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
 8009632:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 8009634:	4638      	mov	r0, r7
 8009636:	f007 fa11 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800963a:	f1b9 0f00 	cmp.w	r9, #0
 800963e:	d003      	beq.n	8009648 <EDIT_AddKey+0x3a>
 8009640:	4620      	mov	r0, r4
 8009642:	4629      	mov	r1, r5
 8009644:	47c8      	blx	r9
 8009646:	e0d1      	b.n	80097ec <EDIT_AddKey+0x1de>
 8009648:	2d12      	cmp	r5, #18
 800964a:	f000 80cb 	beq.w	80097e4 <EDIT_AddKey+0x1d6>
 800964e:	dc05      	bgt.n	800965c <EDIT_AddKey+0x4e>
 8009650:	2d10      	cmp	r5, #16
 8009652:	d03d      	beq.n	80096d0 <EDIT_AddKey+0xc2>
 8009654:	dc09      	bgt.n	800966a <EDIT_AddKey+0x5c>
 8009656:	2d08      	cmp	r5, #8
 8009658:	d03d      	beq.n	80096d6 <EDIT_AddKey+0xc8>
 800965a:	e05a      	b.n	8009712 <EDIT_AddKey+0x104>
 800965c:	2d1d      	cmp	r5, #29
 800965e:	d045      	beq.n	80096ec <EDIT_AddKey+0xde>
 8009660:	2d1e      	cmp	r5, #30
 8009662:	d03f      	beq.n	80096e4 <EDIT_AddKey+0xd6>
 8009664:	2d13      	cmp	r5, #19
 8009666:	d154      	bne.n	8009712 <EDIT_AddKey+0x104>
 8009668:	e015      	b.n	8009696 <EDIT_AddKey+0x88>
 800966a:	f1b8 0f00 	cmp.w	r8, #0
 800966e:	f000 80bd 	beq.w	80097ec <EDIT_AddKey+0x1de>
 8009672:	4640      	mov	r0, r8
 8009674:	f007 f9e4 	bl	8010a40 <GUI_ALLOC_LockH>
 8009678:	ad04      	add	r5, sp, #16
 800967a:	4631      	mov	r1, r6
 800967c:	4607      	mov	r7, r0
 800967e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8009682:	f005 fed1 	bl	800f428 <GUI_UC__NumChars2NumBytes>
 8009686:	183e      	adds	r6, r7, r0
 8009688:	4630      	mov	r0, r6
 800968a:	f005 fea1 	bl	800f3d0 <GUI_UC_GetCharCode>
 800968e:	2201      	movs	r2, #1
 8009690:	4601      	mov	r1, r0
 8009692:	4620      	mov	r0, r4
 8009694:	e015      	b.n	80096c2 <EDIT_AddKey+0xb4>
 8009696:	f1b8 0f00 	cmp.w	r8, #0
 800969a:	f000 80a7 	beq.w	80097ec <EDIT_AddKey+0x1de>
 800969e:	4640      	mov	r0, r8
 80096a0:	f007 f9ce 	bl	8010a40 <GUI_ALLOC_LockH>
 80096a4:	ad04      	add	r5, sp, #16
 80096a6:	4631      	mov	r1, r6
 80096a8:	4607      	mov	r7, r0
 80096aa:	f845 0d04 	str.w	r0, [r5, #-4]!
 80096ae:	f005 febb 	bl	800f428 <GUI_UC__NumChars2NumBytes>
 80096b2:	183e      	adds	r6, r7, r0
 80096b4:	4630      	mov	r0, r6
 80096b6:	f005 fe8b 	bl	800f3d0 <GUI_UC_GetCharCode>
 80096ba:	f04f 32ff 	mov.w	r2, #4294967295
 80096be:	4601      	mov	r1, r0
 80096c0:	4620      	mov	r0, r4
 80096c2:	4633      	mov	r3, r6
 80096c4:	f7ff fe45 	bl	8009352 <_ChangeCharacter>
 80096c8:	4628      	mov	r0, r5
 80096ca:	f007 f9c7 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80096ce:	e08d      	b.n	80097ec <EDIT_AddKey+0x1de>
 80096d0:	4620      	mov	r0, r4
 80096d2:	1e71      	subs	r1, r6, #1
 80096d4:	e088      	b.n	80097e8 <EDIT_AddKey+0x1da>
 80096d6:	2e00      	cmp	r6, #0
 80096d8:	f000 8088 	beq.w	80097ec <EDIT_AddKey+0x1de>
 80096dc:	4620      	mov	r0, r4
 80096de:	1e71      	subs	r1, r6, #1
 80096e0:	f7ff febd 	bl	800945e <EDIT__SetCursorPos>
 80096e4:	4620      	mov	r0, r4
 80096e6:	f7ff fe87 	bl	80093f8 <_DeleteChar>
 80096ea:	e07f      	b.n	80097ec <EDIT_AddKey+0x1de>
 80096ec:	4620      	mov	r0, r4
 80096ee:	f007 f9a7 	bl	8010a40 <GUI_ALLOC_LockH>
 80096f2:	f1ba 0f01 	cmp.w	sl, #1
 80096f6:	9001      	str	r0, [sp, #4]
 80096f8:	d102      	bne.n	8009700 <EDIT_AddKey+0xf2>
 80096fa:	f880 9054 	strb.w	r9, [r0, #84]	; 0x54
 80096fe:	e006      	b.n	800970e <EDIT_AddKey+0x100>
 8009700:	2301      	movs	r3, #1
 8009702:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
 8009706:	4631      	mov	r1, r6
 8009708:	4620      	mov	r0, r4
 800970a:	f7ff fea8 	bl	800945e <EDIT__SetCursorPos>
 800970e:	4638      	mov	r0, r7
 8009710:	e7db      	b.n	80096ca <EDIT_AddKey+0xbc>
 8009712:	2d1f      	cmp	r5, #31
 8009714:	dd6a      	ble.n	80097ec <EDIT_AddKey+0x1de>
 8009716:	f1ba 0f00 	cmp.w	sl, #0
 800971a:	d002      	beq.n	8009722 <EDIT_AddKey+0x114>
 800971c:	4620      	mov	r0, r4
 800971e:	f7ff fe6b 	bl	80093f8 <_DeleteChar>
 8009722:	4620      	mov	r0, r4
 8009724:	f007 f98c 	bl	8010a40 <GUI_ALLOC_LockH>
 8009728:	f9b0 3038 	ldrsh.w	r3, [r0, #56]	; 0x38
 800972c:	9002      	str	r0, [sp, #8]
 800972e:	2b00      	cmp	r3, #0
 8009730:	4607      	mov	r7, r0
 8009732:	dd18      	ble.n	8009766 <EDIT_AddKey+0x158>
 8009734:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8009736:	b160      	cbz	r0, 8009752 <EDIT_AddKey+0x144>
 8009738:	f007 f982 	bl	8010a40 <GUI_ALLOC_LockH>
 800973c:	f10d 0810 	add.w	r8, sp, #16
 8009740:	f848 0d04 	str.w	r0, [r8, #-4]!
 8009744:	f005 fbd2 	bl	800eeec <GUI__GetNumChars>
 8009748:	4681      	mov	r9, r0
 800974a:	4640      	mov	r0, r8
 800974c:	f007 f986 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009750:	e000      	b.n	8009754 <EDIT_AddKey+0x146>
 8009752:	4681      	mov	r9, r0
 8009754:	f9b7 8038 	ldrsh.w	r8, [r7, #56]	; 0x38
 8009758:	45c1      	cmp	r9, r8
 800975a:	bfac      	ite	ge
 800975c:	f04f 0800 	movge.w	r8, #0
 8009760:	f04f 0801 	movlt.w	r8, #1
 8009764:	e001      	b.n	800976a <EDIT_AddKey+0x15c>
 8009766:	f04f 0801 	mov.w	r8, #1
 800976a:	af04      	add	r7, sp, #16
 800976c:	f857 3d08 	ldr.w	r3, [r7, #-8]!
 8009770:	4638      	mov	r0, r7
 8009772:	f8d3 a04c 	ldr.w	sl, [r3, #76]	; 0x4c
 8009776:	f007 f971 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800977a:	f1b8 0f00 	cmp.w	r8, #0
 800977e:	d035      	beq.n	80097ec <EDIT_AddKey+0x1de>
 8009780:	fa1f f885 	uxth.w	r8, r5
 8009784:	4640      	mov	r0, r8
 8009786:	f005 fe33 	bl	800f3f0 <GUI_UC__CalcSizeOfChar>
 800978a:	4681      	mov	r9, r0
 800978c:	4649      	mov	r1, r9
 800978e:	4620      	mov	r0, r4
 8009790:	f7ff fe05 	bl	800939e <_IsSpaceInBuffer>
 8009794:	b350      	cbz	r0, 80097ec <EDIT_AddKey+0x1de>
 8009796:	4620      	mov	r0, r4
 8009798:	f007 f952 	bl	8010a40 <GUI_ALLOC_LockH>
 800979c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800979e:	9002      	str	r0, [sp, #8]
 80097a0:	4638      	mov	r0, r7
 80097a2:	f007 f95b 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80097a6:	4628      	mov	r0, r5
 80097a8:	f007 f94a 	bl	8010a40 <GUI_ALLOC_LockH>
 80097ac:	ad04      	add	r5, sp, #16
 80097ae:	4651      	mov	r1, sl
 80097b0:	4607      	mov	r7, r0
 80097b2:	f845 0d04 	str.w	r0, [r5, #-4]!
 80097b6:	f005 fe37 	bl	800f428 <GUI_UC__NumChars2NumBytes>
 80097ba:	4407      	add	r7, r0
 80097bc:	4638      	mov	r0, r7
 80097be:	f7f6 fd17 	bl	80001f0 <strlen>
 80097c2:	4639      	mov	r1, r7
 80097c4:	1c42      	adds	r2, r0, #1
 80097c6:	eb07 0009 	add.w	r0, r7, r9
 80097ca:	f00f fa33 	bl	8018c34 <memmove>
 80097ce:	4641      	mov	r1, r8
 80097d0:	4638      	mov	r0, r7
 80097d2:	f005 fe05 	bl	800f3e0 <GUI_UC_Encode>
 80097d6:	4628      	mov	r0, r5
 80097d8:	f007 f940 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80097dc:	4620      	mov	r0, r4
 80097de:	2105      	movs	r1, #5
 80097e0:	f001 fad1 	bl	800ad86 <WM_NotifyParent>
 80097e4:	4620      	mov	r0, r4
 80097e6:	1c71      	adds	r1, r6, #1
 80097e8:	f7ff fe39 	bl	800945e <EDIT__SetCursorPos>
 80097ec:	4620      	mov	r0, r4
 80097ee:	f002 fa7c 	bl	800bcea <WM_InvalidateWindow>
 80097f2:	b004      	add	sp, #16
 80097f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080097f8 <EDIT_Callback>:
 80097f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097fa:	6844      	ldr	r4, [r0, #4]
 80097fc:	4605      	mov	r5, r0
 80097fe:	4620      	mov	r0, r4
 8009800:	f000 ff35 	bl	800a66e <WM__IsEnabled>
 8009804:	4629      	mov	r1, r5
 8009806:	4606      	mov	r6, r0
 8009808:	4620      	mov	r0, r4
 800980a:	f7fd fcc5 	bl	8007198 <WIDGET_HandleActive>
 800980e:	2800      	cmp	r0, #0
 8009810:	d05c      	beq.n	80098cc <EDIT_Callback+0xd4>
 8009812:	682b      	ldr	r3, [r5, #0]
 8009814:	2b0f      	cmp	r3, #15
 8009816:	d031      	beq.n	800987c <EDIT_Callback+0x84>
 8009818:	dc04      	bgt.n	8009824 <EDIT_Callback+0x2c>
 800981a:	2b0b      	cmp	r3, #11
 800981c:	d033      	beq.n	8009886 <EDIT_Callback+0x8e>
 800981e:	2b0e      	cmp	r3, #14
 8009820:	d03e      	beq.n	80098a0 <EDIT_Callback+0xa8>
 8009822:	e050      	b.n	80098c6 <EDIT_Callback+0xce>
 8009824:	f240 1213 	movw	r2, #275	; 0x113
 8009828:	4293      	cmp	r3, r2
 800982a:	d003      	beq.n	8009834 <EDIT_Callback+0x3c>
 800982c:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8009830:	d012      	beq.n	8009858 <EDIT_Callback+0x60>
 8009832:	e048      	b.n	80098c6 <EDIT_Callback+0xce>
 8009834:	4620      	mov	r0, r4
 8009836:	f002 fa79 	bl	800bd2c <WM_SelectWindow>
 800983a:	4620      	mov	r0, r4
 800983c:	2100      	movs	r1, #0
 800983e:	f7ff fc79 	bl	8009134 <_Paint>
 8009842:	4620      	mov	r0, r4
 8009844:	f007 f8fc 	bl	8010a40 <GUI_ALLOC_LockH>
 8009848:	ac02      	add	r4, sp, #8
 800984a:	2100      	movs	r1, #0
 800984c:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009850:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8009852:	f000 ffbf 	bl	800a7d4 <WM_RestartTimer>
 8009856:	e01f      	b.n	8009898 <EDIT_Callback+0xa0>
 8009858:	68eb      	ldr	r3, [r5, #12]
 800985a:	b153      	cbz	r3, 8009872 <EDIT_Callback+0x7a>
 800985c:	7a1a      	ldrb	r2, [r3, #8]
 800985e:	4620      	mov	r0, r4
 8009860:	b12a      	cbz	r2, 800986e <EDIT_Callback+0x76>
 8009862:	6819      	ldr	r1, [r3, #0]
 8009864:	f7ff fe7a 	bl	800955c <EDIT_SetCursorAtPixel>
 8009868:	4620      	mov	r0, r4
 800986a:	2101      	movs	r1, #1
 800986c:	e003      	b.n	8009876 <EDIT_Callback+0x7e>
 800986e:	2102      	movs	r1, #2
 8009870:	e001      	b.n	8009876 <EDIT_Callback+0x7e>
 8009872:	4620      	mov	r0, r4
 8009874:	2103      	movs	r1, #3
 8009876:	f001 fa86 	bl	800ad86 <WM_NotifyParent>
 800987a:	e024      	b.n	80098c6 <EDIT_Callback+0xce>
 800987c:	4620      	mov	r0, r4
 800987e:	2101      	movs	r1, #1
 8009880:	f7ff fc58 	bl	8009134 <_Paint>
 8009884:	e022      	b.n	80098cc <EDIT_Callback+0xd4>
 8009886:	4620      	mov	r0, r4
 8009888:	f007 f8da 	bl	8010a40 <GUI_ALLOC_LockH>
 800988c:	ac02      	add	r4, sp, #8
 800988e:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009892:	3034      	adds	r0, #52	; 0x34
 8009894:	f007 fb30 	bl	8010ef8 <GUI_ALLOC_FreePtr>
 8009898:	4620      	mov	r0, r4
 800989a:	f007 f8df 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800989e:	e012      	b.n	80098c6 <EDIT_Callback+0xce>
 80098a0:	b18e      	cbz	r6, 80098c6 <EDIT_Callback+0xce>
 80098a2:	68eb      	ldr	r3, [r5, #12]
 80098a4:	685a      	ldr	r2, [r3, #4]
 80098a6:	2a00      	cmp	r2, #0
 80098a8:	dd0d      	ble.n	80098c6 <EDIT_Callback+0xce>
 80098aa:	6819      	ldr	r1, [r3, #0]
 80098ac:	f1a1 0309 	sub.w	r3, r1, #9
 80098b0:	2b19      	cmp	r3, #25
 80098b2:	d804      	bhi.n	80098be <EDIT_Callback+0xc6>
 80098b4:	2201      	movs	r2, #1
 80098b6:	409a      	lsls	r2, r3
 80098b8:	4b05      	ldr	r3, [pc, #20]	; (80098d0 <EDIT_Callback+0xd8>)
 80098ba:	4013      	ands	r3, r2
 80098bc:	b91b      	cbnz	r3, 80098c6 <EDIT_Callback+0xce>
 80098be:	4620      	mov	r0, r4
 80098c0:	f7ff fea5 	bl	800960e <EDIT_AddKey>
 80098c4:	e002      	b.n	80098cc <EDIT_Callback+0xd4>
 80098c6:	4628      	mov	r0, r5
 80098c8:	f002 fe3e 	bl	800c548 <WM_DefaultProc>
 80098cc:	b002      	add	sp, #8
 80098ce:	bd70      	pop	{r4, r5, r6, pc}
 80098d0:	03040013 	.word	0x03040013

080098d4 <EDIT_SetText>:
 80098d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80098d8:	460c      	mov	r4, r1
 80098da:	4607      	mov	r7, r0
 80098dc:	2800      	cmp	r0, #0
 80098de:	d05f      	beq.n	80099a0 <EDIT_SetText+0xcc>
 80098e0:	f007 f8ae 	bl	8010a40 <GUI_ALLOC_LockH>
 80098e4:	ad02      	add	r5, sp, #8
 80098e6:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80098e8:	f845 0d08 	str.w	r0, [r5, #-8]!
 80098ec:	f8b0 8038 	ldrh.w	r8, [r0, #56]	; 0x38
 80098f0:	4668      	mov	r0, sp
 80098f2:	f007 f8b3 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80098f6:	2c00      	cmp	r4, #0
 80098f8:	d048      	beq.n	800998c <EDIT_SetText+0xb8>
 80098fa:	b16e      	cbz	r6, 8009918 <EDIT_SetText+0x44>
 80098fc:	4630      	mov	r0, r6
 80098fe:	f007 f89f 	bl	8010a40 <GUI_ALLOC_LockH>
 8009902:	ae02      	add	r6, sp, #8
 8009904:	f846 0d04 	str.w	r0, [r6, #-4]!
 8009908:	f7f6 fc72 	bl	80001f0 <strlen>
 800990c:	f100 0901 	add.w	r9, r0, #1
 8009910:	4630      	mov	r0, r6
 8009912:	f007 f8a3 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009916:	e000      	b.n	800991a <EDIT_SetText+0x46>
 8009918:	46b1      	mov	r9, r6
 800991a:	4620      	mov	r0, r4
 800991c:	f005 fae6 	bl	800eeec <GUI__GetNumChars>
 8009920:	fa0f f688 	sxth.w	r6, r8
 8009924:	42b0      	cmp	r0, r6
 8009926:	bfb8      	it	lt
 8009928:	4606      	movlt	r6, r0
 800992a:	4631      	mov	r1, r6
 800992c:	4620      	mov	r0, r4
 800992e:	f005 fd7b 	bl	800f428 <GUI_UC__NumChars2NumBytes>
 8009932:	f100 0801 	add.w	r8, r0, #1
 8009936:	ebc9 0108 	rsb	r1, r9, r8
 800993a:	4638      	mov	r0, r7
 800993c:	f7ff fd2f 	bl	800939e <_IsSpaceInBuffer>
 8009940:	b358      	cbz	r0, 800999a <EDIT_SetText+0xc6>
 8009942:	4638      	mov	r0, r7
 8009944:	f007 f87c 	bl	8010a40 <GUI_ALLOC_LockH>
 8009948:	9000      	str	r0, [sp, #0]
 800994a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800994c:	f007 f878 	bl	8010a40 <GUI_ALLOC_LockH>
 8009950:	4642      	mov	r2, r8
 8009952:	4621      	mov	r1, r4
 8009954:	9001      	str	r0, [sp, #4]
 8009956:	f00f f962 	bl	8018c1e <memcpy>
 800995a:	9b01      	ldr	r3, [sp, #4]
 800995c:	4443      	add	r3, r8
 800995e:	2200      	movs	r2, #0
 8009960:	f803 2c01 	strb.w	r2, [r3, #-1]
 8009964:	9b00      	ldr	r3, [sp, #0]
 8009966:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	; 0x38
 800996a:	64de      	str	r6, [r3, #76]	; 0x4c
 800996c:	4296      	cmp	r6, r2
 800996e:	d106      	bne.n	800997e <EDIT_SetText+0xaa>
 8009970:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8009974:	2a01      	cmp	r2, #1
 8009976:	bf04      	itt	eq
 8009978:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800997c:	64de      	streq	r6, [r3, #76]	; 0x4c
 800997e:	a801      	add	r0, sp, #4
 8009980:	f007 f86c 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009984:	4668      	mov	r0, sp
 8009986:	f007 f869 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800998a:	e006      	b.n	800999a <EDIT_SetText+0xc6>
 800998c:	9800      	ldr	r0, [sp, #0]
 800998e:	3034      	adds	r0, #52	; 0x34
 8009990:	f007 fab2 	bl	8010ef8 <GUI_ALLOC_FreePtr>
 8009994:	9b00      	ldr	r3, [sp, #0]
 8009996:	875c      	strh	r4, [r3, #58]	; 0x3a
 8009998:	64dc      	str	r4, [r3, #76]	; 0x4c
 800999a:	4638      	mov	r0, r7
 800999c:	f002 f9a5 	bl	800bcea <WM_InvalidateWindow>
 80099a0:	b003      	add	sp, #12
 80099a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080099a6 <EDIT_GetText>:
 80099a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099a8:	4616      	mov	r6, r2
 80099aa:	460c      	mov	r4, r1
 80099ac:	b321      	cbz	r1, 80099f8 <EDIT_GetText+0x52>
 80099ae:	b318      	cbz	r0, 80099f8 <EDIT_GetText+0x52>
 80099b0:	f007 f846 	bl	8010a40 <GUI_ALLOC_LockH>
 80099b4:	2300      	movs	r3, #0
 80099b6:	7023      	strb	r3, [r4, #0]
 80099b8:	9000      	str	r0, [sp, #0]
 80099ba:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80099bc:	b1c8      	cbz	r0, 80099f2 <EDIT_GetText+0x4c>
 80099be:	f007 f83f 	bl	8010a40 <GUI_ALLOC_LockH>
 80099c2:	9001      	str	r0, [sp, #4]
 80099c4:	f005 fa92 	bl	800eeec <GUI__GetNumChars>
 80099c8:	4601      	mov	r1, r0
 80099ca:	9801      	ldr	r0, [sp, #4]
 80099cc:	f005 fd2c 	bl	800f428 <GUI_UC__NumChars2NumBytes>
 80099d0:	4286      	cmp	r6, r0
 80099d2:	4605      	mov	r5, r0
 80099d4:	bfd8      	it	le
 80099d6:	f106 35ff 	addle.w	r5, r6, #4294967295
 80099da:	ae02      	add	r6, sp, #8
 80099dc:	462a      	mov	r2, r5
 80099de:	f856 1d04 	ldr.w	r1, [r6, #-4]!
 80099e2:	4620      	mov	r0, r4
 80099e4:	f00f f91b 	bl	8018c1e <memcpy>
 80099e8:	4630      	mov	r0, r6
 80099ea:	f007 f837 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80099ee:	2300      	movs	r3, #0
 80099f0:	5563      	strb	r3, [r4, r5]
 80099f2:	4668      	mov	r0, sp
 80099f4:	f007 f832 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80099f8:	b002      	add	sp, #8
 80099fa:	bd70      	pop	{r4, r5, r6, pc}

080099fc <EDIT_SetTextAlign>:
 80099fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099fe:	460c      	mov	r4, r1
 8009a00:	4605      	mov	r5, r0
 8009a02:	b150      	cbz	r0, 8009a1a <EDIT_SetTextAlign+0x1e>
 8009a04:	f007 f81c 	bl	8010a40 <GUI_ALLOC_LockH>
 8009a08:	9001      	str	r0, [sp, #4]
 8009a0a:	b118      	cbz	r0, 8009a14 <EDIT_SetTextAlign+0x18>
 8009a0c:	6604      	str	r4, [r0, #96]	; 0x60
 8009a0e:	4628      	mov	r0, r5
 8009a10:	f002 f96b 	bl	800bcea <WM_InvalidateWindow>
 8009a14:	a801      	add	r0, sp, #4
 8009a16:	f007 f821 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009a1a:	b003      	add	sp, #12
 8009a1c:	bd30      	pop	{r4, r5, pc}

08009a1e <DROPDOWN_SetScrollbarWidth>:
 8009a1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a20:	460c      	mov	r4, r1
 8009a22:	b1b8      	cbz	r0, 8009a54 <DROPDOWN_SetScrollbarWidth+0x36>
 8009a24:	f007 f80c 	bl	8010a40 <GUI_ALLOC_LockH>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	a802      	add	r0, sp, #8
 8009a2c:	f892 1090 	ldrb.w	r1, [r2, #144]	; 0x90
 8009a30:	f840 2d04 	str.w	r2, [r0, #-4]!
 8009a34:	428c      	cmp	r4, r1
 8009a36:	f8d2 5088 	ldr.w	r5, [r2, #136]	; 0x88
 8009a3a:	d009      	beq.n	8009a50 <DROPDOWN_SetScrollbarWidth+0x32>
 8009a3c:	f882 4090 	strb.w	r4, [r2, #144]	; 0x90
 8009a40:	f007 f80c 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009a44:	b135      	cbz	r5, 8009a54 <DROPDOWN_SetScrollbarWidth+0x36>
 8009a46:	4628      	mov	r0, r5
 8009a48:	4621      	mov	r1, r4
 8009a4a:	f008 fe0a 	bl	8012662 <LISTBOX_SetScrollbarWidth>
 8009a4e:	e001      	b.n	8009a54 <DROPDOWN_SetScrollbarWidth+0x36>
 8009a50:	f007 f804 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009a54:	b003      	add	sp, #12
 8009a56:	bd30      	pop	{r4, r5, pc}

08009a58 <DROPDOWN_SetFont>:
 8009a58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a5a:	460d      	mov	r5, r1
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	b320      	cbz	r0, 8009aaa <DROPDOWN_SetFont+0x52>
 8009a60:	f006 ffee 	bl	8010a40 <GUI_ALLOC_LockH>
 8009a64:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
 8009a68:	9001      	str	r0, [sp, #4]
 8009a6a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8009a6c:	f006 f8f2 	bl	800fc54 <GUI_GetYDistOfFont>
 8009a70:	4607      	mov	r7, r0
 8009a72:	a802      	add	r0, sp, #8
 8009a74:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8009a78:	64d5      	str	r5, [r2, #76]	; 0x4c
 8009a7a:	f006 ffef 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009a7e:	4620      	mov	r0, r4
 8009a80:	f000 f887 	bl	8009b92 <DROPDOWN__AdjustHeight>
 8009a84:	4620      	mov	r0, r4
 8009a86:	f002 f930 	bl	800bcea <WM_InvalidateWindow>
 8009a8a:	b176      	cbz	r6, 8009aaa <DROPDOWN_SetFont+0x52>
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	f006 f8e1 	bl	800fc54 <GUI_GetYDistOfFont>
 8009a92:	4287      	cmp	r7, r0
 8009a94:	d005      	beq.n	8009aa2 <DROPDOWN_SetFont+0x4a>
 8009a96:	4620      	mov	r0, r4
 8009a98:	f000 f8f8 	bl	8009c8c <DROPDOWN_Collapse>
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	f000 f90c 	bl	8009cba <DROPDOWN_Expand>
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	4629      	mov	r1, r5
 8009aa6:	f008 fea9 	bl	80127fc <LISTBOX_SetFont>
 8009aaa:	b003      	add	sp, #12
 8009aac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009aae <DROPDOWN_SetAutoScroll>:
 8009aae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ab0:	460e      	mov	r6, r1
 8009ab2:	b1e0      	cbz	r0, 8009aee <DROPDOWN_SetAutoScroll+0x40>
 8009ab4:	f006 ffc4 	bl	8010a40 <GUI_ALLOC_LockH>
 8009ab8:	f890 208c 	ldrb.w	r2, [r0, #140]	; 0x8c
 8009abc:	9001      	str	r0, [sp, #4]
 8009abe:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
 8009ac2:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
 8009ac6:	b10e      	cbz	r6, 8009acc <DROPDOWN_SetAutoScroll+0x1e>
 8009ac8:	f044 0401 	orr.w	r4, r4, #1
 8009acc:	42a2      	cmp	r2, r4
 8009ace:	d00b      	beq.n	8009ae8 <DROPDOWN_SetAutoScroll+0x3a>
 8009ad0:	f880 408c 	strb.w	r4, [r0, #140]	; 0x8c
 8009ad4:	a801      	add	r0, sp, #4
 8009ad6:	f006 ffc1 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009ada:	b145      	cbz	r5, 8009aee <DROPDOWN_SetAutoScroll+0x40>
 8009adc:	4628      	mov	r0, r5
 8009ade:	f004 0101 	and.w	r1, r4, #1
 8009ae2:	f008 fe1d 	bl	8012720 <LISTBOX_SetAutoScrollV>
 8009ae6:	e002      	b.n	8009aee <DROPDOWN_SetAutoScroll+0x40>
 8009ae8:	a801      	add	r0, sp, #4
 8009aea:	f006 ffb7 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009aee:	b002      	add	sp, #8
 8009af0:	bd70      	pop	{r4, r5, r6, pc}

08009af2 <DROPDOWN_CreateIndirect>:
 8009af2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009af4:	b087      	sub	sp, #28
 8009af6:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 8009afa:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8009afe:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 8009b02:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8009b06:	9100      	str	r1, [sp, #0]
 8009b08:	2100      	movs	r1, #0
 8009b0a:	9101      	str	r1, [sp, #4]
 8009b0c:	8a41      	ldrh	r1, [r0, #18]
 8009b0e:	9102      	str	r1, [sp, #8]
 8009b10:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8009b14:	9103      	str	r1, [sp, #12]
 8009b16:	6984      	ldr	r4, [r0, #24]
 8009b18:	9404      	str	r4, [sp, #16]
 8009b1a:	eb0e 0002 	add.w	r0, lr, r2
 8009b1e:	18f9      	adds	r1, r7, r3
 8009b20:	4632      	mov	r2, r6
 8009b22:	462b      	mov	r3, r5
 8009b24:	f000 f85a 	bl	8009bdc <DROPDOWN_CreateUser>
 8009b28:	b007      	add	sp, #28
 8009b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b2c <DROPDOWN_AddString>:
 8009b2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b2e:	460c      	mov	r4, r1
 8009b30:	4605      	mov	r5, r0
 8009b32:	b1a0      	cbz	r0, 8009b5e <DROPDOWN_AddString+0x32>
 8009b34:	b199      	cbz	r1, 8009b5e <DROPDOWN_AddString+0x32>
 8009b36:	f006 ff83 	bl	8010a40 <GUI_ALLOC_LockH>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	a802      	add	r0, sp, #8
 8009b3e:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8009b40:	f840 2d04 	str.w	r2, [r0, #-4]!
 8009b44:	f006 ff8a 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009b48:	4620      	mov	r0, r4
 8009b4a:	f7f6 fb51 	bl	80001f0 <strlen>
 8009b4e:	4621      	mov	r1, r4
 8009b50:	1c42      	adds	r2, r0, #1
 8009b52:	4630      	mov	r0, r6
 8009b54:	f7fe fd80 	bl	8008658 <GUI_ARRAY_AddItem>
 8009b58:	4628      	mov	r0, r5
 8009b5a:	f002 f8c6 	bl	800bcea <WM_InvalidateWindow>
 8009b5e:	b002      	add	sp, #8
 8009b60:	bd70      	pop	{r4, r5, r6, pc}

08009b62 <DROPDOWN__GetNumItems>:
 8009b62:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8009b64:	f7fe bd69 	b.w	800863a <GUI_ARRAY_GetNumItems>

08009b68 <DROPDOWN__GetpItemLocked>:
 8009b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b6a:	460d      	mov	r5, r1
 8009b6c:	f006 ff68 	bl	8010a40 <GUI_ALLOC_LockH>
 8009b70:	ac02      	add	r4, sp, #8
 8009b72:	4629      	mov	r1, r5
 8009b74:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009b78:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8009b7a:	f7fe fe31 	bl	80087e0 <GUI_ARRAY_GethItem>
 8009b7e:	4605      	mov	r5, r0
 8009b80:	4620      	mov	r0, r4
 8009b82:	f006 ff6b 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009b86:	4628      	mov	r0, r5
 8009b88:	b10d      	cbz	r5, 8009b8e <DROPDOWN__GetpItemLocked+0x26>
 8009b8a:	f006 ff59 	bl	8010a40 <GUI_ALLOC_LockH>
 8009b8e:	b003      	add	sp, #12
 8009b90:	bd30      	pop	{r4, r5, pc}

08009b92 <DROPDOWN__AdjustHeight>:
 8009b92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b94:	4605      	mov	r5, r0
 8009b96:	f006 ff53 	bl	8010a40 <GUI_ALLOC_LockH>
 8009b9a:	f9b0 2038 	ldrsh.w	r2, [r0, #56]	; 0x38
 8009b9e:	9001      	str	r0, [sp, #4]
 8009ba0:	b91a      	cbnz	r2, 8009baa <DROPDOWN__AdjustHeight+0x18>
 8009ba2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8009ba4:	f006 f856 	bl	800fc54 <GUI_GetYDistOfFont>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	ac02      	add	r4, sp, #8
 8009bac:	2002      	movs	r0, #2
 8009bae:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8009bb2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009bb4:	f8b3 6080 	ldrh.w	r6, [r3, #128]	; 0x80
 8009bb8:	6809      	ldr	r1, [r1, #0]
 8009bba:	fb16 1600 	smlabb	r6, r6, r0, r1
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	4416      	add	r6, r2
 8009bc2:	f001 fa17 	bl	800aff4 <WM__GetWindowSizeX>
 8009bc6:	4607      	mov	r7, r0
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f006 ff47 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009bce:	4628      	mov	r0, r5
 8009bd0:	4639      	mov	r1, r7
 8009bd2:	4632      	mov	r2, r6
 8009bd4:	f000 fe71 	bl	800a8ba <WM_SetSize>
 8009bd8:	b003      	add	sp, #12
 8009bda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009bdc <DROPDOWN_CreateUser>:
 8009bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009be0:	b087      	sub	sp, #28
 8009be2:	4699      	mov	r9, r3
 8009be4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8009be6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009be8:	9300      	str	r3, [sp, #0]
 8009bea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bec:	9301      	str	r3, [sp, #4]
 8009bee:	346c      	adds	r4, #108	; 0x6c
 8009bf0:	4b23      	ldr	r3, [pc, #140]	; (8009c80 <DROPDOWN_CreateUser+0xa4>)
 8009bf2:	9302      	str	r3, [sp, #8]
 8009bf4:	9403      	str	r4, [sp, #12]
 8009bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8009bfa:	f002 f8b7 	bl	800bd6c <WM_CreateWindowAsChild>
 8009bfe:	4607      	mov	r7, r0
 8009c00:	2800      	cmp	r0, #0
 8009c02:	d038      	beq.n	8009c76 <DROPDOWN_CreateUser+0x9a>
 8009c04:	f006 ff1c 	bl	8010a40 <GUI_ALLOC_LockH>
 8009c08:	f10d 0818 	add.w	r8, sp, #24
 8009c0c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009c0e:	9005      	str	r0, [sp, #20]
 8009c10:	2210      	movs	r2, #16
 8009c12:	f7fd fab9 	bl	8007188 <WIDGET__Init>
 8009c16:	4d1b      	ldr	r5, [pc, #108]	; (8009c84 <DROPDOWN_CreateUser+0xa8>)
 8009c18:	f858 6d04 	ldr.w	r6, [r8, #-4]!
 8009c1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c1e:	f886 308c 	strb.w	r3, [r6, #140]	; 0x8c
 8009c22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c24:	f106 044c 	add.w	r4, r6, #76	; 0x4c
 8009c28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c32:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009c36:	e884 0003 	stmia.w	r4, {r0, r1}
 8009c3a:	4c13      	ldr	r4, [pc, #76]	; (8009c88 <DROPDOWN_CreateUser+0xac>)
 8009c3c:	6823      	ldr	r3, [r4, #0]
 8009c3e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
 8009c42:	2300      	movs	r3, #0
 8009c44:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
 8009c48:	4638      	mov	r0, r7
 8009c4a:	f8a6 9036 	strh.w	r9, [r6, #54]	; 0x36
 8009c4e:	f7ff ffa0 	bl	8009b92 <DROPDOWN__AdjustHeight>
 8009c52:	4640      	mov	r0, r8
 8009c54:	f006 ff02 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009c58:	f7fe fde8 	bl	800882c <GUI_ARRAY_Create>
 8009c5c:	4605      	mov	r5, r0
 8009c5e:	4638      	mov	r0, r7
 8009c60:	f006 feee 	bl	8010a40 <GUI_ALLOC_LockH>
 8009c64:	9005      	str	r0, [sp, #20]
 8009c66:	63c5      	str	r5, [r0, #60]	; 0x3c
 8009c68:	4640      	mov	r0, r8
 8009c6a:	f006 fef7 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009c6e:	6823      	ldr	r3, [r4, #0]
 8009c70:	4638      	mov	r0, r7
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	4798      	blx	r3
 8009c76:	4638      	mov	r0, r7
 8009c78:	b007      	add	sp, #28
 8009c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c7e:	bf00      	nop
 8009c80:	08009fd1 	.word	0x08009fd1
 8009c84:	2000026c 	.word	0x2000026c
 8009c88:	200002a4 	.word	0x200002a4

08009c8c <DROPDOWN_Collapse>:
 8009c8c:	b513      	push	{r0, r1, r4, lr}
 8009c8e:	4604      	mov	r4, r0
 8009c90:	b188      	cbz	r0, 8009cb6 <DROPDOWN_Collapse+0x2a>
 8009c92:	f006 fed5 	bl	8010a40 <GUI_ALLOC_LockH>
 8009c96:	9001      	str	r0, [sp, #4]
 8009c98:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8009c9c:	b140      	cbz	r0, 8009cb0 <DROPDOWN_Collapse+0x24>
 8009c9e:	f002 f90f 	bl	800bec0 <WM_DeleteWindow>
 8009ca2:	9b01      	ldr	r3, [sp, #4]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009caa:	4620      	mov	r0, r4
 8009cac:	f002 f81d 	bl	800bcea <WM_InvalidateWindow>
 8009cb0:	a801      	add	r0, sp, #4
 8009cb2:	f006 fed3 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009cb6:	b002      	add	sp, #8
 8009cb8:	bd10      	pop	{r4, pc}

08009cba <DROPDOWN_Expand>:
 8009cba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cbe:	4605      	mov	r5, r0
 8009cc0:	b09b      	sub	sp, #108	; 0x6c
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	f000 80f3 	beq.w	8009eae <DROPDOWN_Expand+0x1f4>
 8009cc8:	f006 feba 	bl	8010a40 <GUI_ALLOC_LockH>
 8009ccc:	900d      	str	r0, [sp, #52]	; 0x34
 8009cce:	4628      	mov	r0, r5
 8009cd0:	f001 f99e 	bl	800b010 <WM_GetWindowSizeX>
 8009cd4:	4604      	mov	r4, r0
 8009cd6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009cd8:	f8b0 c036 	ldrh.w	ip, [r0, #54]	; 0x36
 8009cdc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009cde:	f890 708c 	ldrb.w	r7, [r0, #140]	; 0x8c
 8009ce2:	f890 b090 	ldrb.w	fp, [r0, #144]	; 0x90
 8009ce6:	9209      	str	r2, [sp, #36]	; 0x24
 8009ce8:	fa0f f38c 	sxth.w	r3, ip
 8009cec:	9308      	str	r3, [sp, #32]
 8009cee:	f8b0 8034 	ldrh.w	r8, [r0, #52]	; 0x34
 8009cf2:	f8cd c010 	str.w	ip, [sp, #16]
 8009cf6:	f7ff ff34 	bl	8009b62 <DROPDOWN__GetNumItems>
 8009cfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cfc:	4682      	mov	sl, r0
 8009cfe:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 8009d02:	900a      	str	r0, [sp, #40]	; 0x28
 8009d04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009d08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d0a:	920b      	str	r2, [sp, #44]	; 0x2c
 8009d0c:	aa0f      	add	r2, sp, #60	; 0x3c
 8009d0e:	e882 0003 	stmia.w	r2, {r0, r1}
 8009d12:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009d14:	9111      	str	r1, [sp, #68]	; 0x44
 8009d16:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009d18:	9112      	str	r1, [sp, #72]	; 0x48
 8009d1a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8009d1c:	9113      	str	r1, [sp, #76]	; 0x4c
 8009d1e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8009d20:	9114      	str	r1, [sp, #80]	; 0x50
 8009d22:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8009d24:	9115      	str	r1, [sp, #84]	; 0x54
 8009d26:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8009d28:	9116      	str	r1, [sp, #88]	; 0x58
 8009d2a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009d2c:	f8b3 908e 	ldrh.w	r9, [r3, #142]	; 0x8e
 8009d30:	f8d3 6094 	ldr.w	r6, [r3, #148]	; 0x94
 8009d34:	9117      	str	r1, [sp, #92]	; 0x5c
 8009d36:	a80d      	add	r0, sp, #52	; 0x34
 8009d38:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8009d3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d3c:	9118      	str	r1, [sp, #96]	; 0x60
 8009d3e:	9205      	str	r2, [sp, #20]
 8009d40:	9319      	str	r3, [sp, #100]	; 0x64
 8009d42:	f006 fe8b 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009d46:	4628      	mov	r0, r5
 8009d48:	f001 f9ab 	bl	800b0a2 <WM_GetParent>
 8009d4c:	f006 fe78 	bl	8010a40 <GUI_ALLOC_LockH>
 8009d50:	4603      	mov	r3, r0
 8009d52:	a81a      	add	r0, sp, #104	; 0x68
 8009d54:	8819      	ldrh	r1, [r3, #0]
 8009d56:	f840 3d38 	str.w	r3, [r0, #-56]!
 8009d5a:	885b      	ldrh	r3, [r3, #2]
 8009d5c:	9306      	str	r3, [sp, #24]
 8009d5e:	9107      	str	r1, [sp, #28]
 8009d60:	f006 fe7c 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009d64:	9907      	ldr	r1, [sp, #28]
 8009d66:	9b06      	ldr	r3, [sp, #24]
 8009d68:	9a05      	ldr	r2, [sp, #20]
 8009d6a:	b21b      	sxth	r3, r3
 8009d6c:	b209      	sxth	r1, r1
 8009d6e:	4610      	mov	r0, r2
 8009d70:	4249      	negs	r1, r1
 8009d72:	425a      	negs	r2, r3
 8009d74:	f005 fece 	bl	800fb14 <GUI_MoveRect>
 8009d78:	f017 0f02 	tst.w	r7, #2
 8009d7c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8009d80:	d006      	beq.n	8009d90 <DROPDOWN_Expand+0xd6>
 8009d82:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8009d86:	ebcc 0c03 	rsb	ip, ip, r3
 8009d8a:	f8ad c03e 	strh.w	ip, [sp, #62]	; 0x3e
 8009d8e:	e003      	b.n	8009d98 <DROPDOWN_Expand+0xde>
 8009d90:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8009d94:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8009d98:	4628      	mov	r0, r5
 8009d9a:	f001 f982 	bl	800b0a2 <WM_GetParent>
 8009d9e:	4601      	mov	r1, r0
 8009da0:	9808      	ldr	r0, [sp, #32]
 8009da2:	9001      	str	r0, [sp, #4]
 8009da4:	2002      	movs	r0, #2
 8009da6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8009daa:	9400      	str	r4, [sp, #0]
 8009dac:	9002      	str	r0, [sp, #8]
 8009dae:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8009db2:	2000      	movs	r0, #0
 8009db4:	f008 fd39 	bl	801282a <LISTBOX_CreateAsChild>
 8009db8:	07fb      	lsls	r3, r7, #31
 8009dba:	4604      	mov	r4, r0
 8009dbc:	d506      	bpl.n	8009dcc <DROPDOWN_Expand+0x112>
 8009dbe:	4659      	mov	r1, fp
 8009dc0:	f008 fc4f 	bl	8012662 <LISTBOX_SetScrollbarWidth>
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	2101      	movs	r1, #1
 8009dc8:	f008 fcaa 	bl	8012720 <LISTBOX_SetAutoScrollV>
 8009dcc:	2700      	movs	r7, #0
 8009dce:	4557      	cmp	r7, sl
 8009dd0:	d009      	beq.n	8009de6 <DROPDOWN_Expand+0x12c>
 8009dd2:	4639      	mov	r1, r7
 8009dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dd6:	f7fe fd03 	bl	80087e0 <GUI_ARRAY_GethItem>
 8009dda:	4601      	mov	r1, r0
 8009ddc:	4620      	mov	r0, r4
 8009dde:	f008 fd35 	bl	801284c <LISTBOX_AddStringH>
 8009de2:	3701      	adds	r7, #1
 8009de4:	e7f3      	b.n	8009dce <DROPDOWN_Expand+0x114>
 8009de6:	2700      	movs	r7, #0
 8009de8:	ab11      	add	r3, sp, #68	; 0x44
 8009dea:	4639      	mov	r1, r7
 8009dec:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
 8009df0:	4620      	mov	r0, r4
 8009df2:	3701      	adds	r7, #1
 8009df4:	f008 fc7d 	bl	80126f2 <LISTBOX_SetBkColor>
 8009df8:	2f03      	cmp	r7, #3
 8009dfa:	d1f5      	bne.n	8009de8 <DROPDOWN_Expand+0x12e>
 8009dfc:	2700      	movs	r7, #0
 8009dfe:	ab14      	add	r3, sp, #80	; 0x50
 8009e00:	4639      	mov	r1, r7
 8009e02:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
 8009e06:	4620      	mov	r0, r4
 8009e08:	3701      	adds	r7, #1
 8009e0a:	f008 fbfc 	bl	8012606 <LISTBOX_SetTextColor>
 8009e0e:	2f03      	cmp	r7, #3
 8009e10:	d1f5      	bne.n	8009dfe <DROPDOWN_Expand+0x144>
 8009e12:	2700      	movs	r7, #0
 8009e14:	ab17      	add	r3, sp, #92	; 0x5c
 8009e16:	4639      	mov	r1, r7
 8009e18:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	3701      	adds	r7, #1
 8009e20:	f008 fc38 	bl	8012694 <LISTBOX_SetScrollbarColor>
 8009e24:	2f03      	cmp	r7, #3
 8009e26:	d1f5      	bne.n	8009e14 <DROPDOWN_Expand+0x15a>
 8009e28:	b1ce      	cbz	r6, 8009e5e <DROPDOWN_Expand+0x1a4>
 8009e2a:	4630      	mov	r0, r6
 8009e2c:	f006 fe08 	bl	8010a40 <GUI_ALLOC_LockH>
 8009e30:	4607      	mov	r7, r0
 8009e32:	900e      	str	r0, [sp, #56]	; 0x38
 8009e34:	f837 ab02 	ldrh.w	sl, [r7], #2
 8009e38:	2600      	movs	r6, #0
 8009e3a:	4556      	cmp	r6, sl
 8009e3c:	da0c      	bge.n	8009e58 <DROPDOWN_Expand+0x19e>
 8009e3e:	08f3      	lsrs	r3, r6, #3
 8009e40:	4631      	mov	r1, r6
 8009e42:	5cfa      	ldrb	r2, [r7, r3]
 8009e44:	f006 0307 	and.w	r3, r6, #7
 8009e48:	411a      	asrs	r2, r3
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f002 0201 	and.w	r2, r2, #1
 8009e50:	f008 fca7 	bl	80127a2 <LISTBOX_SetItemDisabled>
 8009e54:	3601      	adds	r6, #1
 8009e56:	e7f0      	b.n	8009e3a <DROPDOWN_Expand+0x180>
 8009e58:	a80e      	add	r0, sp, #56	; 0x38
 8009e5a:	f006 fdff 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009e5e:	4620      	mov	r0, r4
 8009e60:	4649      	mov	r1, r9
 8009e62:	f008 fc89 	bl	8012778 <LISTBOX_SetItemSpacing>
 8009e66:	4620      	mov	r0, r4
 8009e68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e6a:	f008 fcc7 	bl	80127fc <LISTBOX_SetFont>
 8009e6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e70:	4620      	mov	r0, r4
 8009e72:	b211      	sxth	r1, r2
 8009e74:	f008 fbe2 	bl	801263c <LISTBOX_SetTextAlign>
 8009e78:	4620      	mov	r0, r4
 8009e7a:	f000 fdbf 	bl	800a9fc <WM_SetFocus>
 8009e7e:	4620      	mov	r0, r4
 8009e80:	4629      	mov	r1, r5
 8009e82:	f008 fc23 	bl	80126cc <LISTBOX_SetOwner>
 8009e86:	4620      	mov	r0, r4
 8009e88:	fa0f f188 	sxth.w	r1, r8
 8009e8c:	f009 fadc 	bl	8013448 <LISTBOX_SetSel>
 8009e90:	4628      	mov	r0, r5
 8009e92:	2101      	movs	r1, #1
 8009e94:	f000 ff77 	bl	800ad86 <WM_NotifyParent>
 8009e98:	4628      	mov	r0, r5
 8009e9a:	f006 fdd1 	bl	8010a40 <GUI_ALLOC_LockH>
 8009e9e:	ab1a      	add	r3, sp, #104	; 0x68
 8009ea0:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
 8009ea4:	f843 0d34 	str.w	r0, [r3, #-52]!
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f006 fdd7 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009eae:	b01b      	add	sp, #108	; 0x6c
 8009eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009eb4 <DROPDOWN_SetSel>:
 8009eb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009eb6:	460d      	mov	r5, r1
 8009eb8:	4604      	mov	r4, r0
 8009eba:	b310      	cbz	r0, 8009f02 <DROPDOWN_SetSel+0x4e>
 8009ebc:	f006 fdc0 	bl	8010a40 <GUI_ALLOC_LockH>
 8009ec0:	9001      	str	r0, [sp, #4]
 8009ec2:	f7ff fe4e 	bl	8009b62 <DROPDOWN__GetNumItems>
 8009ec6:	b108      	cbz	r0, 8009ecc <DROPDOWN_SetSel+0x18>
 8009ec8:	1e43      	subs	r3, r0, #1
 8009eca:	e000      	b.n	8009ece <DROPDOWN_SetSel+0x1a>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	42ab      	cmp	r3, r5
 8009ed0:	bfb4      	ite	lt
 8009ed2:	4619      	movlt	r1, r3
 8009ed4:	4629      	movge	r1, r5
 8009ed6:	ab02      	add	r3, sp, #8
 8009ed8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009edc:	f9b2 0034 	ldrsh.w	r0, [r2, #52]	; 0x34
 8009ee0:	4281      	cmp	r1, r0
 8009ee2:	d00b      	beq.n	8009efc <DROPDOWN_SetSel+0x48>
 8009ee4:	8691      	strh	r1, [r2, #52]	; 0x34
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f006 fdb8 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009eec:	4620      	mov	r0, r4
 8009eee:	f001 fefc 	bl	800bcea <WM_InvalidateWindow>
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	2104      	movs	r1, #4
 8009ef6:	f000 ff46 	bl	800ad86 <WM_NotifyParent>
 8009efa:	e002      	b.n	8009f02 <DROPDOWN_SetSel+0x4e>
 8009efc:	4618      	mov	r0, r3
 8009efe:	f006 fdad 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009f02:	b003      	add	sp, #12
 8009f04:	bd30      	pop	{r4, r5, pc}

08009f06 <DROPDOWN_GetSel>:
 8009f06:	b513      	push	{r0, r1, r4, lr}
 8009f08:	4604      	mov	r4, r0
 8009f0a:	b148      	cbz	r0, 8009f20 <DROPDOWN_GetSel+0x1a>
 8009f0c:	f006 fd98 	bl	8010a40 <GUI_ALLOC_LockH>
 8009f10:	ab02      	add	r3, sp, #8
 8009f12:	f9b0 4034 	ldrsh.w	r4, [r0, #52]	; 0x34
 8009f16:	f843 0d04 	str.w	r0, [r3, #-4]!
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f006 fd9e 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009f20:	4620      	mov	r0, r4
 8009f22:	b002      	add	sp, #8
 8009f24:	bd10      	pop	{r4, pc}

08009f26 <DROPDOWN_IncSel>:
 8009f26:	b510      	push	{r4, lr}
 8009f28:	4604      	mov	r4, r0
 8009f2a:	f7ff ffec 	bl	8009f06 <DROPDOWN_GetSel>
 8009f2e:	1c41      	adds	r1, r0, #1
 8009f30:	4620      	mov	r0, r4
 8009f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f36:	f7ff bfbd 	b.w	8009eb4 <DROPDOWN_SetSel>

08009f3a <DROPDOWN_DecSel>:
 8009f3a:	b510      	push	{r4, lr}
 8009f3c:	4604      	mov	r4, r0
 8009f3e:	f7ff ffe2 	bl	8009f06 <DROPDOWN_GetSel>
 8009f42:	4601      	mov	r1, r0
 8009f44:	b100      	cbz	r0, 8009f48 <DROPDOWN_DecSel+0xe>
 8009f46:	1e41      	subs	r1, r0, #1
 8009f48:	4620      	mov	r0, r4
 8009f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f4e:	f7ff bfb1 	b.w	8009eb4 <DROPDOWN_SetSel>

08009f52 <DROPDOWN_AddKey>:
 8009f52:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009f56:	460c      	mov	r4, r1
 8009f58:	4607      	mov	r7, r0
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	d035      	beq.n	8009fca <DROPDOWN_AddKey+0x78>
 8009f5e:	2911      	cmp	r1, #17
 8009f60:	d004      	beq.n	8009f6c <DROPDOWN_AddKey+0x1a>
 8009f62:	2913      	cmp	r1, #19
 8009f64:	d105      	bne.n	8009f72 <DROPDOWN_AddKey+0x20>
 8009f66:	f7ff ffde 	bl	8009f26 <DROPDOWN_IncSel>
 8009f6a:	e02e      	b.n	8009fca <DROPDOWN_AddKey+0x78>
 8009f6c:	f7ff ffe5 	bl	8009f3a <DROPDOWN_DecSel>
 8009f70:	e02b      	b.n	8009fca <DROPDOWN_AddKey+0x78>
 8009f72:	f006 fd65 	bl	8010a40 <GUI_ALLOC_LockH>
 8009f76:	ad02      	add	r5, sp, #8
 8009f78:	f845 0d08 	str.w	r0, [r5, #-8]!
 8009f7c:	f7ff fdf1 	bl	8009b62 <DROPDOWN__GetNumItems>
 8009f80:	4680      	mov	r8, r0
 8009f82:	4668      	mov	r0, sp
 8009f84:	f006 fd6a 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009f88:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009f8c:	2b19      	cmp	r3, #25
 8009f8e:	bf98      	it	ls
 8009f90:	3420      	addls	r4, #32
 8009f92:	2500      	movs	r5, #0
 8009f94:	4545      	cmp	r5, r8
 8009f96:	da18      	bge.n	8009fca <DROPDOWN_AddKey+0x78>
 8009f98:	4638      	mov	r0, r7
 8009f9a:	4629      	mov	r1, r5
 8009f9c:	f7ff fde4 	bl	8009b68 <DROPDOWN__GetpItemLocked>
 8009fa0:	9001      	str	r0, [sp, #4]
 8009fa2:	b180      	cbz	r0, 8009fc6 <DROPDOWN_AddKey+0x74>
 8009fa4:	7806      	ldrb	r6, [r0, #0]
 8009fa6:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
 8009faa:	2b19      	cmp	r3, #25
 8009fac:	bf98      	it	ls
 8009fae:	3620      	addls	r6, #32
 8009fb0:	a801      	add	r0, sp, #4
 8009fb2:	b2f6      	uxtb	r6, r6
 8009fb4:	f006 fd52 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009fb8:	42a6      	cmp	r6, r4
 8009fba:	d104      	bne.n	8009fc6 <DROPDOWN_AddKey+0x74>
 8009fbc:	4638      	mov	r0, r7
 8009fbe:	4629      	mov	r1, r5
 8009fc0:	f7ff ff78 	bl	8009eb4 <DROPDOWN_SetSel>
 8009fc4:	e001      	b.n	8009fca <DROPDOWN_AddKey+0x78>
 8009fc6:	3501      	adds	r5, #1
 8009fc8:	e7e4      	b.n	8009f94 <DROPDOWN_AddKey+0x42>
 8009fca:	b002      	add	sp, #8
 8009fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009fd0 <DROPDOWN_Callback>:
 8009fd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009fd2:	6844      	ldr	r4, [r0, #4]
 8009fd4:	4605      	mov	r5, r0
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	f006 fd32 	bl	8010a40 <GUI_ALLOC_LockH>
 8009fdc:	ab02      	add	r3, sp, #8
 8009fde:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
 8009fe2:	f843 0d08 	str.w	r0, [r3, #-8]!
 8009fe6:	4668      	mov	r0, sp
 8009fe8:	f006 fd38 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8009fec:	4620      	mov	r0, r4
 8009fee:	4629      	mov	r1, r5
 8009ff0:	f7fd f8d2 	bl	8007198 <WIDGET_HandleActive>
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	f000 80a8 	beq.w	800a14a <DROPDOWN_Callback+0x17a>
 8009ffa:	682b      	ldr	r3, [r5, #0]
 8009ffc:	2b11      	cmp	r3, #17
 8009ffe:	d05c      	beq.n	800a0ba <DROPDOWN_Callback+0xea>
 800a000:	dc1d      	bgt.n	800a03e <DROPDOWN_Callback+0x6e>
 800a002:	2b0e      	cmp	r3, #14
 800a004:	d07e      	beq.n	800a104 <DROPDOWN_Callback+0x134>
 800a006:	2b0f      	cmp	r3, #15
 800a008:	d06c      	beq.n	800a0e4 <DROPDOWN_Callback+0x114>
 800a00a:	2b0b      	cmp	r3, #11
 800a00c:	f040 809a 	bne.w	800a144 <DROPDOWN_Callback+0x174>
 800a010:	4620      	mov	r0, r4
 800a012:	f006 fd15 	bl	8010a40 <GUI_ALLOC_LockH>
 800a016:	9001      	str	r0, [sp, #4]
 800a018:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800a01a:	f7fe fb67 	bl	80086ec <GUI_ARRAY_Delete>
 800a01e:	9b01      	ldr	r3, [sp, #4]
 800a020:	ac02      	add	r4, sp, #8
 800a022:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 800a026:	f001 ff4b 	bl	800bec0 <WM_DeleteWindow>
 800a02a:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800a02e:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 800a032:	f006 fd3f 	bl	8010ab4 <GUI_ALLOC_Free>
 800a036:	4620      	mov	r0, r4
 800a038:	f006 fd10 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800a03c:	e082      	b.n	800a144 <DROPDOWN_Callback+0x174>
 800a03e:	2b26      	cmp	r3, #38	; 0x26
 800a040:	d01b      	beq.n	800a07a <DROPDOWN_Callback+0xaa>
 800a042:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800a046:	d03f      	beq.n	800a0c8 <DROPDOWN_Callback+0xf8>
 800a048:	2b21      	cmp	r3, #33	; 0x21
 800a04a:	d17b      	bne.n	800a144 <DROPDOWN_Callback+0x174>
 800a04c:	68eb      	ldr	r3, [r5, #12]
 800a04e:	685a      	ldr	r2, [r3, #4]
 800a050:	2a00      	cmp	r2, #0
 800a052:	dd77      	ble.n	800a144 <DROPDOWN_Callback+0x174>
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2b0d      	cmp	r3, #13
 800a058:	d174      	bne.n	800a144 <DROPDOWN_Callback+0x174>
 800a05a:	4630      	mov	r0, r6
 800a05c:	f009 fa42 	bl	80134e4 <LISTBOX_GetSel>
 800a060:	2800      	cmp	r0, #0
 800a062:	db06      	blt.n	800a072 <DROPDOWN_Callback+0xa2>
 800a064:	4630      	mov	r0, r6
 800a066:	f009 fa3d 	bl	80134e4 <LISTBOX_GetSel>
 800a06a:	4601      	mov	r1, r0
 800a06c:	4620      	mov	r0, r4
 800a06e:	f7ff ff21 	bl	8009eb4 <DROPDOWN_SetSel>
 800a072:	4620      	mov	r0, r4
 800a074:	f7ff fe0a 	bl	8009c8c <DROPDOWN_Collapse>
 800a078:	e017      	b.n	800a0aa <DROPDOWN_Callback+0xda>
 800a07a:	68e9      	ldr	r1, [r5, #12]
 800a07c:	290a      	cmp	r1, #10
 800a07e:	d004      	beq.n	800a08a <DROPDOWN_Callback+0xba>
 800a080:	290b      	cmp	r1, #11
 800a082:	d016      	beq.n	800a0b2 <DROPDOWN_Callback+0xe2>
 800a084:	2901      	cmp	r1, #1
 800a086:	d15d      	bne.n	800a144 <DROPDOWN_Callback+0x174>
 800a088:	e003      	b.n	800a092 <DROPDOWN_Callback+0xc2>
 800a08a:	4620      	mov	r0, r4
 800a08c:	f000 fe7b 	bl	800ad86 <WM_NotifyParent>
 800a090:	e058      	b.n	800a144 <DROPDOWN_Callback+0x174>
 800a092:	4630      	mov	r0, r6
 800a094:	f009 fa26 	bl	80134e4 <LISTBOX_GetSel>
 800a098:	2800      	cmp	r0, #0
 800a09a:	db53      	blt.n	800a144 <DROPDOWN_Callback+0x174>
 800a09c:	4630      	mov	r0, r6
 800a09e:	f009 fa21 	bl	80134e4 <LISTBOX_GetSel>
 800a0a2:	4601      	mov	r1, r0
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	f7ff ff05 	bl	8009eb4 <DROPDOWN_SetSel>
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	f000 fca6 	bl	800a9fc <WM_SetFocus>
 800a0b0:	e048      	b.n	800a144 <DROPDOWN_Callback+0x174>
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	f7ff fdea 	bl	8009c8c <DROPDOWN_Collapse>
 800a0b8:	e044      	b.n	800a144 <DROPDOWN_Callback+0x174>
 800a0ba:	2e00      	cmp	r6, #0
 800a0bc:	d142      	bne.n	800a144 <DROPDOWN_Callback+0x174>
 800a0be:	68eb      	ldr	r3, [r5, #12]
 800a0c0:	7a1b      	ldrb	r3, [r3, #8]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d03e      	beq.n	800a144 <DROPDOWN_Callback+0x174>
 800a0c6:	e030      	b.n	800a12a <DROPDOWN_Callback+0x15a>
 800a0c8:	68eb      	ldr	r3, [r5, #12]
 800a0ca:	b133      	cbz	r3, 800a0da <DROPDOWN_Callback+0x10a>
 800a0cc:	7a1b      	ldrb	r3, [r3, #8]
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	b10b      	cbz	r3, 800a0d6 <DROPDOWN_Callback+0x106>
 800a0d2:	2101      	movs	r1, #1
 800a0d4:	e003      	b.n	800a0de <DROPDOWN_Callback+0x10e>
 800a0d6:	2102      	movs	r1, #2
 800a0d8:	e001      	b.n	800a0de <DROPDOWN_Callback+0x10e>
 800a0da:	4620      	mov	r0, r4
 800a0dc:	2103      	movs	r1, #3
 800a0de:	f000 fe52 	bl	800ad86 <WM_NotifyParent>
 800a0e2:	e032      	b.n	800a14a <DROPDOWN_Callback+0x17a>
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	f006 fcab 	bl	8010a40 <GUI_ALLOC_LockH>
 800a0ea:	ab02      	add	r3, sp, #8
 800a0ec:	f843 0d04 	str.w	r0, [r3, #-4]!
 800a0f0:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800a0f4:	6816      	ldr	r6, [r2, #0]
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f006 fcb0 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800a0fc:	b316      	cbz	r6, 800a144 <DROPDOWN_Callback+0x174>
 800a0fe:	4620      	mov	r0, r4
 800a100:	47b0      	blx	r6
 800a102:	e01f      	b.n	800a144 <DROPDOWN_Callback+0x174>
 800a104:	68eb      	ldr	r3, [r5, #12]
 800a106:	685a      	ldr	r2, [r3, #4]
 800a108:	2a00      	cmp	r2, #0
 800a10a:	dd1b      	ble.n	800a144 <DROPDOWN_Callback+0x174>
 800a10c:	6819      	ldr	r1, [r3, #0]
 800a10e:	f1a1 0309 	sub.w	r3, r1, #9
 800a112:	2b19      	cmp	r3, #25
 800a114:	d812      	bhi.n	800a13c <DROPDOWN_Callback+0x16c>
 800a116:	2201      	movs	r2, #1
 800a118:	fa02 f303 	lsl.w	r3, r2, r3
 800a11c:	4a0c      	ldr	r2, [pc, #48]	; (800a150 <DROPDOWN_Callback+0x180>)
 800a11e:	401a      	ands	r2, r3
 800a120:	b982      	cbnz	r2, 800a144 <DROPDOWN_Callback+0x174>
 800a122:	07da      	lsls	r2, r3, #31
 800a124:	d405      	bmi.n	800a132 <DROPDOWN_Callback+0x162>
 800a126:	021b      	lsls	r3, r3, #8
 800a128:	d508      	bpl.n	800a13c <DROPDOWN_Callback+0x16c>
 800a12a:	4620      	mov	r0, r4
 800a12c:	f7ff fdc5 	bl	8009cba <DROPDOWN_Expand>
 800a130:	e008      	b.n	800a144 <DROPDOWN_Callback+0x174>
 800a132:	f000 ffe7 	bl	800b104 <WM_GetFocussedWindow>
 800a136:	42b0      	cmp	r0, r6
 800a138:	d104      	bne.n	800a144 <DROPDOWN_Callback+0x174>
 800a13a:	e7b6      	b.n	800a0aa <DROPDOWN_Callback+0xda>
 800a13c:	4620      	mov	r0, r4
 800a13e:	f7ff ff08 	bl	8009f52 <DROPDOWN_AddKey>
 800a142:	e002      	b.n	800a14a <DROPDOWN_Callback+0x17a>
 800a144:	4628      	mov	r0, r5
 800a146:	f002 f9ff 	bl	800c548 <WM_DefaultProc>
 800a14a:	b002      	add	sp, #8
 800a14c:	bd70      	pop	{r4, r5, r6, pc}
 800a14e:	bf00      	nop
 800a150:	03040002 	.word	0x03040002

0800a154 <DROPDOWN_SetListHeight>:
 800a154:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
 800a156:	460f      	mov	r7, r1
 800a158:	4606      	mov	r6, r0
 800a15a:	b1a8      	cbz	r0, 800a188 <DROPDOWN_SetListHeight+0x34>
 800a15c:	f006 fc70 	bl	8010a40 <GUI_ALLOC_LockH>
 800a160:	4603      	mov	r3, r0
 800a162:	a802      	add	r0, sp, #8
 800a164:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 800a168:	f9b3 6036 	ldrsh.w	r6, [r3, #54]	; 0x36
 800a16c:	f840 3d04 	str.w	r3, [r0, #-4]!
 800a170:	86df      	strh	r7, [r3, #54]	; 0x36
 800a172:	f006 fc73 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800a176:	b13c      	cbz	r4, 800a188 <DROPDOWN_SetListHeight+0x34>
 800a178:	4620      	mov	r0, r4
 800a17a:	f000 ff49 	bl	800b010 <WM_GetWindowSizeX>
 800a17e:	463a      	mov	r2, r7
 800a180:	4601      	mov	r1, r0
 800a182:	4620      	mov	r0, r4
 800a184:	f000 fb99 	bl	800a8ba <WM_SetSize>
 800a188:	4630      	mov	r0, r6
 800a18a:	b002      	add	sp, #8
 800a18c:	bdd0      	pop	{r4, r6, r7, pc}

0800a18e <DROPDOWN_GetItemText>:
 800a18e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a190:	460c      	mov	r4, r1
 800a192:	4615      	mov	r5, r2
 800a194:	461e      	mov	r6, r3
 800a196:	4607      	mov	r7, r0
 800a198:	b330      	cbz	r0, 800a1e8 <DROPDOWN_GetItemText+0x5a>
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	dd24      	ble.n	800a1e8 <DROPDOWN_GetItemText+0x5a>
 800a19e:	f006 fc4f 	bl	8010a40 <GUI_ALLOC_LockH>
 800a1a2:	9000      	str	r0, [sp, #0]
 800a1a4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800a1a6:	f7fe fa48 	bl	800863a <GUI_ARRAY_GetNumItems>
 800a1aa:	4284      	cmp	r4, r0
 800a1ac:	d301      	bcc.n	800a1b2 <DROPDOWN_GetItemText+0x24>
 800a1ae:	2401      	movs	r4, #1
 800a1b0:	e016      	b.n	800a1e0 <DROPDOWN_GetItemText+0x52>
 800a1b2:	4621      	mov	r1, r4
 800a1b4:	4638      	mov	r0, r7
 800a1b6:	f7ff fcd7 	bl	8009b68 <DROPDOWN__GetpItemLocked>
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	9001      	str	r0, [sp, #4]
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d0f5      	beq.n	800a1ae <DROPDOWN_GetItemText+0x20>
 800a1c2:	f7f6 f815 	bl	80001f0 <strlen>
 800a1c6:	4607      	mov	r7, r0
 800a1c8:	42b7      	cmp	r7, r6
 800a1ca:	bfb8      	it	lt
 800a1cc:	463e      	movlt	r6, r7
 800a1ce:	4621      	mov	r1, r4
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	2400      	movs	r4, #0
 800a1d4:	f00e fd60 	bl	8018c98 <strcpy>
 800a1d8:	55ac      	strb	r4, [r5, r6]
 800a1da:	a801      	add	r0, sp, #4
 800a1dc:	f006 fc3e 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800a1e0:	4668      	mov	r0, sp
 800a1e2:	f006 fc3b 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800a1e6:	e000      	b.n	800a1ea <DROPDOWN_GetItemText+0x5c>
 800a1e8:	2401      	movs	r4, #1
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	b003      	add	sp, #12
 800a1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a1f0 <GUI_CreateDialogBox>:
 800a1f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a1f4:	4606      	mov	r6, r0
 800a1f6:	4688      	mov	r8, r1
 800a1f8:	4614      	mov	r4, r2
 800a1fa:	461d      	mov	r5, r3
 800a1fc:	b913      	cbnz	r3, 800a204 <GUI_CreateDialogBox+0x14>
 800a1fe:	f000 ffbf 	bl	800b180 <WM_GetDesktopWindow>
 800a202:	4605      	mov	r5, r0
 800a204:	9400      	str	r4, [sp, #0]
 800a206:	4630      	mov	r0, r6
 800a208:	6834      	ldr	r4, [r6, #0]
 800a20a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a20c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a20e:	4629      	mov	r1, r5
 800a210:	47a0      	blx	r4
 800a212:	4604      	mov	r4, r0
 800a214:	2800      	cmp	r0, #0
 800a216:	d039      	beq.n	800a28c <GUI_CreateDialogBox+0x9c>
 800a218:	f000 ffbe 	bl	800b198 <WM_GetClientWindow>
 800a21c:	8a71      	ldrh	r1, [r6, #18]
 800a21e:	4607      	mov	r7, r0
 800a220:	4620      	mov	r0, r4
 800a222:	f7fc ff85 	bl	8007130 <WIDGET_OrState>
 800a226:	4620      	mov	r0, r4
 800a228:	f000 fafd 	bl	800a826 <WM_ShowWindow>
 800a22c:	4638      	mov	r0, r7
 800a22e:	f108 38ff 	add.w	r8, r8, #4294967295
 800a232:	f000 faf8 	bl	800a826 <WM_ShowWindow>
 800a236:	f1b8 0f00 	cmp.w	r8, #0
 800a23a:	dd0f      	ble.n	800a25c <GUI_CreateDialogBox+0x6c>
 800a23c:	f856 cf1c 	ldr.w	ip, [r6, #28]!
 800a240:	2200      	movs	r2, #0
 800a242:	9200      	str	r2, [sp, #0]
 800a244:	4630      	mov	r0, r6
 800a246:	4639      	mov	r1, r7
 800a248:	4613      	mov	r3, r2
 800a24a:	47e0      	blx	ip
 800a24c:	4681      	mov	r9, r0
 800a24e:	2800      	cmp	r0, #0
 800a250:	d1ed      	bne.n	800a22e <GUI_CreateDialogBox+0x3e>
 800a252:	4620      	mov	r0, r4
 800a254:	f001 fe34 	bl	800bec0 <WM_DeleteWindow>
 800a258:	4648      	mov	r0, r9
 800a25a:	e018      	b.n	800a28e <GUI_CreateDialogBox+0x9e>
 800a25c:	4638      	mov	r0, r7
 800a25e:	211d      	movs	r1, #29
 800a260:	f000 fca6 	bl	800abb0 <WM_SendMessageNoPara>
 800a264:	1c6b      	adds	r3, r5, #1
 800a266:	d011      	beq.n	800a28c <GUI_CreateDialogBox+0x9c>
 800a268:	f000 ff4c 	bl	800b104 <WM_GetFocussedWindow>
 800a26c:	b150      	cbz	r0, 800a284 <GUI_CreateDialogBox+0x94>
 800a26e:	f006 fbdd 	bl	8010a2c <GUI_ALLOC_h2p>
 800a272:	6980      	ldr	r0, [r0, #24]
 800a274:	42a0      	cmp	r0, r4
 800a276:	d00a      	beq.n	800a28e <GUI_CreateDialogBox+0x9e>
 800a278:	2800      	cmp	r0, #0
 800a27a:	d1f8      	bne.n	800a26e <GUI_CreateDialogBox+0x7e>
 800a27c:	4620      	mov	r0, r4
 800a27e:	f000 fb8b 	bl	800a998 <WM_SetFocusOnNextChild>
 800a282:	e003      	b.n	800a28c <GUI_CreateDialogBox+0x9c>
 800a284:	42a5      	cmp	r5, r4
 800a286:	d1f9      	bne.n	800a27c <GUI_CreateDialogBox+0x8c>
 800a288:	4628      	mov	r0, r5
 800a28a:	e000      	b.n	800a28e <GUI_CreateDialogBox+0x9e>
 800a28c:	4620      	mov	r0, r4
 800a28e:	b003      	add	sp, #12
 800a290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a294 <BUTTON_CreateIndirect>:
 800a294:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a296:	b087      	sub	sp, #28
 800a298:	4604      	mov	r4, r0
 800a29a:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 800a29e:	9100      	str	r1, [sp, #0]
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	f9b4 e00c 	ldrsh.w	lr, [r4, #12]
 800a2a6:	f9b4 700e 	ldrsh.w	r7, [r4, #14]
 800a2aa:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 800a2ae:	9101      	str	r1, [sp, #4]
 800a2b0:	8a61      	ldrh	r1, [r4, #18]
 800a2b2:	69a5      	ldr	r5, [r4, #24]
 800a2b4:	9102      	str	r1, [sp, #8]
 800a2b6:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800a2ba:	9103      	str	r1, [sp, #12]
 800a2bc:	9504      	str	r5, [sp, #16]
 800a2be:	eb0e 0103 	add.w	r1, lr, r3
 800a2c2:	4410      	add	r0, r2
 800a2c4:	4633      	mov	r3, r6
 800a2c6:	463a      	mov	r2, r7
 800a2c8:	f000 f8ce 	bl	800a468 <BUTTON_CreateUser>
 800a2cc:	6861      	ldr	r1, [r4, #4]
 800a2ce:	4605      	mov	r5, r0
 800a2d0:	f000 f902 	bl	800a4d8 <BUTTON_SetText>
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	b007      	add	sp, #28
 800a2d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a2da <_OnButtonPressed>:
 800a2da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a2e0:	4604      	mov	r4, r0
 800a2e2:	f7fc ff25 	bl	8007130 <WIDGET_OrState>
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	f006 fbaa 	bl	8010a40 <GUI_ALLOC_LockH>
 800a2ec:	ab02      	add	r3, sp, #8
 800a2ee:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800a2f0:	f843 0d04 	str.w	r0, [r3, #-4]!
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f006 fbb1 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800a2fa:	07ab      	lsls	r3, r5, #30
 800a2fc:	d503      	bpl.n	800a306 <_OnButtonPressed+0x2c>
 800a2fe:	4620      	mov	r0, r4
 800a300:	2101      	movs	r1, #1
 800a302:	f000 fd40 	bl	800ad86 <WM_NotifyParent>
 800a306:	b003      	add	sp, #12
 800a308:	bd30      	pop	{r4, r5, pc}

0800a30a <_OnButtonReleased>:
 800a30a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a30c:	4605      	mov	r5, r0
 800a30e:	460c      	mov	r4, r1
 800a310:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a314:	f7fc ff22 	bl	800715c <WIDGET_AndState>
 800a318:	4628      	mov	r0, r5
 800a31a:	f006 fb91 	bl	8010a40 <GUI_ALLOC_LockH>
 800a31e:	4602      	mov	r2, r0
 800a320:	a802      	add	r0, sp, #8
 800a322:	6a96      	ldr	r6, [r2, #40]	; 0x28
 800a324:	f840 2d04 	str.w	r2, [r0, #-4]!
 800a328:	8e17      	ldrh	r7, [r2, #48]	; 0x30
 800a32a:	f006 fb97 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800a32e:	2c02      	cmp	r4, #2
 800a330:	d102      	bne.n	800a338 <_OnButtonReleased+0x2e>
 800a332:	4638      	mov	r0, r7
 800a334:	f005 fbca 	bl	800facc <GUI_StoreKey>
 800a338:	07b3      	lsls	r3, r6, #30
 800a33a:	d503      	bpl.n	800a344 <_OnButtonReleased+0x3a>
 800a33c:	4628      	mov	r0, r5
 800a33e:	4621      	mov	r1, r4
 800a340:	f000 fd21 	bl	800ad86 <WM_NotifyParent>
 800a344:	b003      	add	sp, #12
 800a346:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a348 <_OnTouchDefault>:
 800a348:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a34a:	460d      	mov	r5, r1
 800a34c:	4604      	mov	r4, r0
 800a34e:	f006 fb77 	bl	8010a40 <GUI_ALLOC_LockH>
 800a352:	ab02      	add	r3, sp, #8
 800a354:	8e46      	ldrh	r6, [r0, #50]	; 0x32
 800a356:	f843 0d04 	str.w	r0, [r3, #-4]!
 800a35a:	4618      	mov	r0, r3
 800a35c:	f006 fb7e 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800a360:	68ea      	ldr	r2, [r5, #12]
 800a362:	b162      	cbz	r2, 800a37e <_OnTouchDefault+0x36>
 800a364:	7a12      	ldrb	r2, [r2, #8]
 800a366:	f406 7380 	and.w	r3, r6, #256	; 0x100
 800a36a:	b122      	cbz	r2, 800a376 <_OnTouchDefault+0x2e>
 800a36c:	b95b      	cbnz	r3, 800a386 <_OnTouchDefault+0x3e>
 800a36e:	4620      	mov	r0, r4
 800a370:	f7ff ffb3 	bl	800a2da <_OnButtonPressed>
 800a374:	e007      	b.n	800a386 <_OnTouchDefault+0x3e>
 800a376:	b133      	cbz	r3, 800a386 <_OnTouchDefault+0x3e>
 800a378:	4620      	mov	r0, r4
 800a37a:	2102      	movs	r1, #2
 800a37c:	e001      	b.n	800a382 <_OnTouchDefault+0x3a>
 800a37e:	4620      	mov	r0, r4
 800a380:	2103      	movs	r1, #3
 800a382:	f7ff ffc2 	bl	800a30a <_OnButtonReleased>
 800a386:	b002      	add	sp, #8
 800a388:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a38c <BUTTON_Callback>:
 800a38c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a38e:	6844      	ldr	r4, [r0, #4]
 800a390:	4605      	mov	r5, r0
 800a392:	4629      	mov	r1, r5
 800a394:	4620      	mov	r0, r4
 800a396:	f7fc feff 	bl	8007198 <WIDGET_HandleActive>
 800a39a:	2800      	cmp	r0, #0
 800a39c:	d05d      	beq.n	800a45a <BUTTON_Callback+0xce>
 800a39e:	682b      	ldr	r3, [r5, #0]
 800a3a0:	2b0f      	cmp	r3, #15
 800a3a2:	d016      	beq.n	800a3d2 <BUTTON_Callback+0x46>
 800a3a4:	dc04      	bgt.n	800a3b0 <BUTTON_Callback+0x24>
 800a3a6:	2b0b      	cmp	r3, #11
 800a3a8:	d023      	beq.n	800a3f2 <BUTTON_Callback+0x66>
 800a3aa:	2b0e      	cmp	r3, #14
 800a3ac:	d033      	beq.n	800a416 <BUTTON_Callback+0x8a>
 800a3ae:	e051      	b.n	800a454 <BUTTON_Callback+0xc8>
 800a3b0:	2b28      	cmp	r3, #40	; 0x28
 800a3b2:	d048      	beq.n	800a446 <BUTTON_Callback+0xba>
 800a3b4:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800a3b8:	d005      	beq.n	800a3c6 <BUTTON_Callback+0x3a>
 800a3ba:	2b11      	cmp	r3, #17
 800a3bc:	d14a      	bne.n	800a454 <BUTTON_Callback+0xc8>
 800a3be:	4b28      	ldr	r3, [pc, #160]	; (800a460 <BUTTON_Callback+0xd4>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	b913      	cbnz	r3, 800a3ca <BUTTON_Callback+0x3e>
 800a3c4:	e049      	b.n	800a45a <BUTTON_Callback+0xce>
 800a3c6:	4b27      	ldr	r3, [pc, #156]	; (800a464 <BUTTON_Callback+0xd8>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	4629      	mov	r1, r5
 800a3ce:	4798      	blx	r3
 800a3d0:	e043      	b.n	800a45a <BUTTON_Callback+0xce>
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	f006 fb34 	bl	8010a40 <GUI_ALLOC_LockH>
 800a3d8:	ab02      	add	r3, sp, #8
 800a3da:	f843 0d04 	str.w	r0, [r3, #-4]!
 800a3de:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800a3e0:	6815      	ldr	r5, [r2, #0]
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f006 fb3a 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800a3e8:	2d00      	cmp	r5, #0
 800a3ea:	d036      	beq.n	800a45a <BUTTON_Callback+0xce>
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	47a8      	blx	r5
 800a3f0:	e033      	b.n	800a45a <BUTTON_Callback+0xce>
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	f006 fb24 	bl	8010a40 <GUI_ALLOC_LockH>
 800a3f8:	ac02      	add	r4, sp, #8
 800a3fa:	9001      	str	r0, [sp, #4]
 800a3fc:	3068      	adds	r0, #104	; 0x68
 800a3fe:	f006 fd7b 	bl	8010ef8 <GUI_ALLOC_FreePtr>
 800a402:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 800a406:	2103      	movs	r1, #3
 800a408:	306c      	adds	r0, #108	; 0x6c
 800a40a:	f006 fd7d 	bl	8010f08 <GUI_ALLOC_FreePtrArray>
 800a40e:	4620      	mov	r0, r4
 800a410:	f006 fb24 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800a414:	e01e      	b.n	800a454 <BUTTON_Callback+0xc8>
 800a416:	68ea      	ldr	r2, [r5, #12]
 800a418:	ca0c      	ldmia	r2, {r2, r3}
 800a41a:	2a0d      	cmp	r2, #13
 800a41c:	d002      	beq.n	800a424 <BUTTON_Callback+0x98>
 800a41e:	2a20      	cmp	r2, #32
 800a420:	d007      	beq.n	800a432 <BUTTON_Callback+0xa6>
 800a422:	e010      	b.n	800a446 <BUTTON_Callback+0xba>
 800a424:	2b00      	cmp	r3, #0
 800a426:	dd0e      	ble.n	800a446 <BUTTON_Callback+0xba>
 800a428:	4620      	mov	r0, r4
 800a42a:	f7ff ff56 	bl	800a2da <_OnButtonPressed>
 800a42e:	4620      	mov	r0, r4
 800a430:	e005      	b.n	800a43e <BUTTON_Callback+0xb2>
 800a432:	2b00      	cmp	r3, #0
 800a434:	4620      	mov	r0, r4
 800a436:	dd02      	ble.n	800a43e <BUTTON_Callback+0xb2>
 800a438:	f7ff ff4f 	bl	800a2da <_OnButtonPressed>
 800a43c:	e00d      	b.n	800a45a <BUTTON_Callback+0xce>
 800a43e:	2102      	movs	r1, #2
 800a440:	f7ff ff63 	bl	800a30a <_OnButtonReleased>
 800a444:	e009      	b.n	800a45a <BUTTON_Callback+0xce>
 800a446:	68eb      	ldr	r3, [r5, #12]
 800a448:	b923      	cbnz	r3, 800a454 <BUTTON_Callback+0xc8>
 800a44a:	4620      	mov	r0, r4
 800a44c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a450:	f7fc fe84 	bl	800715c <WIDGET_AndState>
 800a454:	4628      	mov	r0, r5
 800a456:	f002 f877 	bl	800c548 <WM_DefaultProc>
 800a45a:	b003      	add	sp, #12
 800a45c:	bd30      	pop	{r4, r5, pc}
 800a45e:	bf00      	nop
 800a460:	200015d0 	.word	0x200015d0
 800a464:	200002a8 	.word	0x200002a8

0800a468 <BUTTON_CreateUser>:
 800a468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a46a:	b087      	sub	sp, #28
 800a46c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a46e:	9400      	str	r4, [sp, #0]
 800a470:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a472:	9401      	str	r4, [sp, #4]
 800a474:	4c15      	ldr	r4, [pc, #84]	; (800a4cc <BUTTON_CreateUser+0x64>)
 800a476:	9402      	str	r4, [sp, #8]
 800a478:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800a47a:	344c      	adds	r4, #76	; 0x4c
 800a47c:	9403      	str	r4, [sp, #12]
 800a47e:	f001 fc75 	bl	800bd6c <WM_CreateWindowAsChild>
 800a482:	4607      	mov	r7, r0
 800a484:	b1f8      	cbz	r0, 800a4c6 <BUTTON_CreateUser+0x5e>
 800a486:	f006 fadb 	bl	8010a40 <GUI_ALLOC_LockH>
 800a48a:	4d11      	ldr	r5, [pc, #68]	; (800a4d0 <BUTTON_CreateUser+0x68>)
 800a48c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a48e:	9005      	str	r0, [sp, #20]
 800a490:	2210      	movs	r2, #16
 800a492:	f7fc fe79 	bl	8007188 <WIDGET__Init>
 800a496:	ae06      	add	r6, sp, #24
 800a498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a49a:	f856 ed04 	ldr.w	lr, [r6, #-4]!
 800a49e:	f10e 0434 	add.w	r4, lr, #52	; 0x34
 800a4a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a4a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a4a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a4ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a4b0:	4c08      	ldr	r4, [pc, #32]	; (800a4d4 <BUTTON_CreateUser+0x6c>)
 800a4b2:	6823      	ldr	r3, [r4, #0]
 800a4b4:	f8ce 3064 	str.w	r3, [lr, #100]	; 0x64
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	f006 facf 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800a4be:	6823      	ldr	r3, [r4, #0]
 800a4c0:	4638      	mov	r0, r7
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	4798      	blx	r3
 800a4c6:	4638      	mov	r0, r7
 800a4c8:	b007      	add	sp, #28
 800a4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4cc:	0800a38d 	.word	0x0800a38d
 800a4d0:	200002ac 	.word	0x200002ac
 800a4d4:	200002dc 	.word	0x200002dc

0800a4d8 <BUTTON_SetText>:
 800a4d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a4da:	460c      	mov	r4, r1
 800a4dc:	4605      	mov	r5, r0
 800a4de:	b300      	cbz	r0, 800a522 <BUTTON_SetText+0x4a>
 800a4e0:	f006 faae 	bl	8010a40 <GUI_ALLOC_LockH>
 800a4e4:	6e86      	ldr	r6, [r0, #104]	; 0x68
 800a4e6:	9000      	str	r0, [sp, #0]
 800a4e8:	4668      	mov	r0, sp
 800a4ea:	9601      	str	r6, [sp, #4]
 800a4ec:	f006 fab6 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800a4f0:	4621      	mov	r1, r4
 800a4f2:	a801      	add	r0, sp, #4
 800a4f4:	f004 fbed 	bl	800ecd2 <GUI__SetText>
 800a4f8:	f1d0 0401 	rsbs	r4, r0, #1
 800a4fc:	bf38      	it	cc
 800a4fe:	2400      	movcc	r4, #0
 800a500:	b984      	cbnz	r4, 800a524 <BUTTON_SetText+0x4c>
 800a502:	9b01      	ldr	r3, [sp, #4]
 800a504:	42b3      	cmp	r3, r6
 800a506:	d008      	beq.n	800a51a <BUTTON_SetText+0x42>
 800a508:	4628      	mov	r0, r5
 800a50a:	f006 fa99 	bl	8010a40 <GUI_ALLOC_LockH>
 800a50e:	9b01      	ldr	r3, [sp, #4]
 800a510:	9000      	str	r0, [sp, #0]
 800a512:	6683      	str	r3, [r0, #104]	; 0x68
 800a514:	4668      	mov	r0, sp
 800a516:	f006 faa1 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800a51a:	4628      	mov	r0, r5
 800a51c:	f001 fbe5 	bl	800bcea <WM_InvalidateWindow>
 800a520:	e000      	b.n	800a524 <BUTTON_SetText+0x4c>
 800a522:	2401      	movs	r4, #1
 800a524:	4620      	mov	r0, r4
 800a526:	b002      	add	sp, #8
 800a528:	bd70      	pop	{r4, r5, r6, pc}

0800a52a <WM__UpdateChildPositions>:
 800a52a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a52e:	b087      	sub	sp, #28
 800a530:	69c4      	ldr	r4, [r0, #28]
 800a532:	9303      	str	r3, [sp, #12]
 800a534:	468a      	mov	sl, r1
 800a536:	4693      	mov	fp, r2
 800a538:	2c00      	cmp	r4, #0
 800a53a:	d06d      	beq.n	800a618 <WM__UpdateChildPositions+0xee>
 800a53c:	4620      	mov	r0, r4
 800a53e:	f006 fa7f 	bl	8010a40 <GUI_ALLOC_LockH>
 800a542:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a544:	9005      	str	r0, [sp, #20]
 800a546:	f401 7320 	and.w	r3, r1, #640	; 0x280
 800a54a:	2b80      	cmp	r3, #128	; 0x80
 800a54c:	f8b0 8000 	ldrh.w	r8, [r0]
 800a550:	8842      	ldrh	r2, [r0, #2]
 800a552:	8886      	ldrh	r6, [r0, #4]
 800a554:	88c5      	ldrh	r5, [r0, #6]
 800a556:	d008      	beq.n	800a56a <WM__UpdateChildPositions+0x40>
 800a558:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a55c:	d108      	bne.n	800a570 <WM__UpdateChildPositions+0x46>
 800a55e:	eb08 090a 	add.w	r9, r8, sl
 800a562:	fa1f f989 	uxth.w	r9, r9
 800a566:	9b03      	ldr	r3, [sp, #12]
 800a568:	e008      	b.n	800a57c <WM__UpdateChildPositions+0x52>
 800a56a:	9803      	ldr	r0, [sp, #12]
 800a56c:	b283      	uxth	r3, r0
 800a56e:	e001      	b.n	800a574 <WM__UpdateChildPositions+0x4a>
 800a570:	fa1f f38a 	uxth.w	r3, sl
 800a574:	eb03 0908 	add.w	r9, r3, r8
 800a578:	fa1f f989 	uxth.w	r9, r9
 800a57c:	f401 61a0 	and.w	r1, r1, #1280	; 0x500
 800a580:	4433      	add	r3, r6
 800a582:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a586:	b29b      	uxth	r3, r3
 800a588:	d008      	beq.n	800a59c <WM__UpdateChildPositions+0x72>
 800a58a:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 800a58e:	d108      	bne.n	800a5a2 <WM__UpdateChildPositions+0x78>
 800a590:	eb02 0c0b 	add.w	ip, r2, fp
 800a594:	fa1f fc8c 	uxth.w	ip, ip
 800a598:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800a59a:	e008      	b.n	800a5ae <WM__UpdateChildPositions+0x84>
 800a59c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a59e:	b28f      	uxth	r7, r1
 800a5a0:	e001      	b.n	800a5a6 <WM__UpdateChildPositions+0x7c>
 800a5a2:	fa1f f78b 	uxth.w	r7, fp
 800a5a6:	eb07 0c02 	add.w	ip, r7, r2
 800a5aa:	fa1f fc8c 	uxth.w	ip, ip
 800a5ae:	fa0f f989 	sxth.w	r9, r9
 800a5b2:	fa0f f888 	sxth.w	r8, r8
 800a5b6:	b212      	sxth	r2, r2
 800a5b8:	442f      	add	r7, r5
 800a5ba:	fa0f fc8c 	sxth.w	ip, ip
 800a5be:	ebb9 0108 	subs.w	r1, r9, r8
 800a5c2:	9202      	str	r2, [sp, #8]
 800a5c4:	b2bf      	uxth	r7, r7
 800a5c6:	ebc2 020c 	rsb	r2, r2, ip
 800a5ca:	d100      	bne.n	800a5ce <WM__UpdateChildPositions+0xa4>
 800a5cc:	b142      	cbz	r2, 800a5e0 <WM__UpdateChildPositions+0xb6>
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	9301      	str	r3, [sp, #4]
 800a5d2:	f8cd c000 	str.w	ip, [sp]
 800a5d6:	f000 fcb0 	bl	800af3a <WM_MoveWindow>
 800a5da:	f8dd c000 	ldr.w	ip, [sp]
 800a5de:	9b01      	ldr	r3, [sp, #4]
 800a5e0:	b21b      	sxth	r3, r3
 800a5e2:	ebc9 0903 	rsb	r9, r9, r3
 800a5e6:	b236      	sxth	r6, r6
 800a5e8:	9b02      	ldr	r3, [sp, #8]
 800a5ea:	ebc6 0808 	rsb	r8, r6, r8
 800a5ee:	b23f      	sxth	r7, r7
 800a5f0:	b22d      	sxth	r5, r5
 800a5f2:	ebcc 0c07 	rsb	ip, ip, r7
 800a5f6:	1b5d      	subs	r5, r3, r5
 800a5f8:	eb19 0108 	adds.w	r1, r9, r8
 800a5fc:	eb0c 0205 	add.w	r2, ip, r5
 800a600:	d100      	bne.n	800a604 <WM__UpdateChildPositions+0xda>
 800a602:	b112      	cbz	r2, 800a60a <WM__UpdateChildPositions+0xe0>
 800a604:	4620      	mov	r0, r4
 800a606:	f000 fb43 	bl	800ac90 <WM_ResizeWindow>
 800a60a:	a806      	add	r0, sp, #24
 800a60c:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800a610:	6a1c      	ldr	r4, [r3, #32]
 800a612:	f006 fa23 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800a616:	e78f      	b.n	800a538 <WM__UpdateChildPositions+0xe>
 800a618:	b007      	add	sp, #28
 800a61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800a620 <WM__SendMessage>:
 800a620:	b570      	push	{r4, r5, r6, lr}
 800a622:	4c0d      	ldr	r4, [pc, #52]	; (800a658 <WM__SendMessage+0x38>)
 800a624:	6823      	ldr	r3, [r4, #0]
 800a626:	2b13      	cmp	r3, #19
 800a628:	4606      	mov	r6, r0
 800a62a:	460d      	mov	r5, r1
 800a62c:	dc12      	bgt.n	800a654 <WM__SendMessage+0x34>
 800a62e:	f006 f9fd 	bl	8010a2c <GUI_ALLOC_h2p>
 800a632:	6903      	ldr	r3, [r0, #16]
 800a634:	606e      	str	r6, [r5, #4]
 800a636:	b143      	cbz	r3, 800a64a <WM__SendMessage+0x2a>
 800a638:	6822      	ldr	r2, [r4, #0]
 800a63a:	4628      	mov	r0, r5
 800a63c:	3201      	adds	r2, #1
 800a63e:	6022      	str	r2, [r4, #0]
 800a640:	4798      	blx	r3
 800a642:	6823      	ldr	r3, [r4, #0]
 800a644:	3b01      	subs	r3, #1
 800a646:	6023      	str	r3, [r4, #0]
 800a648:	bd70      	pop	{r4, r5, r6, pc}
 800a64a:	4628      	mov	r0, r5
 800a64c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a650:	f001 bf7a 	b.w	800c548 <WM_DefaultProc>
 800a654:	bd70      	pop	{r4, r5, r6, pc}
 800a656:	bf00      	nop
 800a658:	200015d4 	.word	0x200015d4

0800a65c <WM__Screen2Client>:
 800a65c:	f9b0 3000 	ldrsh.w	r3, [r0]
 800a660:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800a664:	4608      	mov	r0, r1
 800a666:	4252      	negs	r2, r2
 800a668:	4259      	negs	r1, r3
 800a66a:	f005 ba53 	b.w	800fb14 <GUI_MoveRect>

0800a66e <WM__IsEnabled>:
 800a66e:	b508      	push	{r3, lr}
 800a670:	f006 f9dc 	bl	8010a2c <GUI_ALLOC_h2p>
 800a674:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800a676:	f080 0010 	eor.w	r0, r0, #16
 800a67a:	f3c0 1000 	ubfx	r0, r0, #4, #1
 800a67e:	bd08      	pop	{r3, pc}

0800a680 <WM__IsChild>:
 800a680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a682:	460d      	mov	r5, r1
 800a684:	4604      	mov	r4, r0
 800a686:	b160      	cbz	r0, 800a6a2 <WM__IsChild+0x22>
 800a688:	f006 f9da 	bl	8010a40 <GUI_ALLOC_LockH>
 800a68c:	9001      	str	r0, [sp, #4]
 800a68e:	b120      	cbz	r0, 800a69a <WM__IsChild+0x1a>
 800a690:	6984      	ldr	r4, [r0, #24]
 800a692:	1b63      	subs	r3, r4, r5
 800a694:	425c      	negs	r4, r3
 800a696:	415c      	adcs	r4, r3
 800a698:	e000      	b.n	800a69c <WM__IsChild+0x1c>
 800a69a:	4604      	mov	r4, r0
 800a69c:	a801      	add	r0, sp, #4
 800a69e:	f006 f9dd 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	b003      	add	sp, #12
 800a6a6:	bd30      	pop	{r4, r5, pc}

0800a6a8 <WM__IsAncestor>:
 800a6a8:	b510      	push	{r4, lr}
 800a6aa:	460c      	mov	r4, r1
 800a6ac:	b908      	cbnz	r0, 800a6b2 <WM__IsAncestor+0xa>
 800a6ae:	2000      	movs	r0, #0
 800a6b0:	bd10      	pop	{r4, pc}
 800a6b2:	2900      	cmp	r1, #0
 800a6b4:	d0fb      	beq.n	800a6ae <WM__IsAncestor+0x6>
 800a6b6:	f006 f9b9 	bl	8010a2c <GUI_ALLOC_h2p>
 800a6ba:	6980      	ldr	r0, [r0, #24]
 800a6bc:	42a0      	cmp	r0, r4
 800a6be:	d002      	beq.n	800a6c6 <WM__IsAncestor+0x1e>
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	d1f8      	bne.n	800a6b6 <WM__IsAncestor+0xe>
 800a6c4:	e7f3      	b.n	800a6ae <WM__IsAncestor+0x6>
 800a6c6:	2001      	movs	r0, #1
 800a6c8:	bd10      	pop	{r4, pc}

0800a6ca <WM__IsAncestorOrSelf>:
 800a6ca:	4288      	cmp	r0, r1
 800a6cc:	d001      	beq.n	800a6d2 <WM__IsAncestorOrSelf+0x8>
 800a6ce:	f7ff bfeb 	b.w	800a6a8 <WM__IsAncestor>
 800a6d2:	2001      	movs	r0, #1
 800a6d4:	4770      	bx	lr

0800a6d6 <_cbTimer>:
 800a6d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6d8:	4604      	mov	r4, r0
 800a6da:	2100      	movs	r1, #0
 800a6dc:	4668      	mov	r0, sp
 800a6de:	2210      	movs	r2, #16
 800a6e0:	f00e fac3 	bl	8018c6a <memset>
 800a6e4:	6860      	ldr	r0, [r4, #4]
 800a6e6:	b150      	cbz	r0, 800a6fe <_cbTimer+0x28>
 800a6e8:	f006 f9a0 	bl	8010a2c <GUI_ALLOC_h2p>
 800a6ec:	f240 1313 	movw	r3, #275	; 0x113
 800a6f0:	6840      	ldr	r0, [r0, #4]
 800a6f2:	9300      	str	r3, [sp, #0]
 800a6f4:	4669      	mov	r1, sp
 800a6f6:	6863      	ldr	r3, [r4, #4]
 800a6f8:	9303      	str	r3, [sp, #12]
 800a6fa:	f001 fa9f 	bl	800bc3c <WM_SendMessage>
 800a6fe:	b004      	add	sp, #16
 800a700:	bd10      	pop	{r4, pc}

0800a702 <WM_DeleteTimer>:
 800a702:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a704:	4605      	mov	r5, r0
 800a706:	b168      	cbz	r0, 800a724 <WM_DeleteTimer+0x22>
 800a708:	f006 f99a 	bl	8010a40 <GUI_ALLOC_LockH>
 800a70c:	ac02      	add	r4, sp, #8
 800a70e:	f844 0d04 	str.w	r0, [r4, #-4]!
 800a712:	6800      	ldr	r0, [r0, #0]
 800a714:	f004 ffea 	bl	800f6ec <GUI_TIMER_Delete>
 800a718:	4620      	mov	r0, r4
 800a71a:	f006 f99f 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800a71e:	4628      	mov	r0, r5
 800a720:	f006 f9c8 	bl	8010ab4 <GUI_ALLOC_Free>
 800a724:	b003      	add	sp, #12
 800a726:	bd30      	pop	{r4, r5, pc}

0800a728 <WM__DeleteAssocTimer>:
 800a728:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a72a:	4605      	mov	r5, r0
 800a72c:	a801      	add	r0, sp, #4
 800a72e:	f004 ff5b 	bl	800f5e8 <GUI_TIMER__GetFirstTimer>
 800a732:	4604      	mov	r4, r0
 800a734:	b1dc      	cbz	r4, 800a76e <WM__DeleteAssocTimer+0x46>
 800a736:	4620      	mov	r0, r4
 800a738:	2101      	movs	r1, #1
 800a73a:	f005 f832 	bl	800f7a2 <GUI_TIMER_GetFlag>
 800a73e:	9b01      	ldr	r3, [sp, #4]
 800a740:	b183      	cbz	r3, 800a764 <WM__DeleteAssocTimer+0x3c>
 800a742:	b178      	cbz	r0, 800a764 <WM__DeleteAssocTimer+0x3c>
 800a744:	4618      	mov	r0, r3
 800a746:	f006 f971 	bl	8010a2c <GUI_ALLOC_h2p>
 800a74a:	6843      	ldr	r3, [r0, #4]
 800a74c:	42ab      	cmp	r3, r5
 800a74e:	d109      	bne.n	800a764 <WM__DeleteAssocTimer+0x3c>
 800a750:	4620      	mov	r0, r4
 800a752:	a901      	add	r1, sp, #4
 800a754:	9e01      	ldr	r6, [sp, #4]
 800a756:	f004 ff5f 	bl	800f618 <GUI_TIMER__GetNextTimerLin>
 800a75a:	4604      	mov	r4, r0
 800a75c:	4630      	mov	r0, r6
 800a75e:	f7ff ffd0 	bl	800a702 <WM_DeleteTimer>
 800a762:	e7e7      	b.n	800a734 <WM__DeleteAssocTimer+0xc>
 800a764:	4620      	mov	r0, r4
 800a766:	a901      	add	r1, sp, #4
 800a768:	f004 ff56 	bl	800f618 <GUI_TIMER__GetNextTimerLin>
 800a76c:	e7e1      	b.n	800a732 <WM__DeleteAssocTimer+0xa>
 800a76e:	b002      	add	sp, #8
 800a770:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a774 <WM_CreateTimer>:
 800a774:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a778:	4680      	mov	r8, r0
 800a77a:	200c      	movs	r0, #12
 800a77c:	460f      	mov	r7, r1
 800a77e:	4616      	mov	r6, r2
 800a780:	f006 fbcf 	bl	8010f22 <GUI_ALLOC_AllocZero>
 800a784:	4604      	mov	r4, r0
 800a786:	b1f0      	cbz	r0, 800a7c6 <WM_CreateTimer+0x52>
 800a788:	f005 f820 	bl	800f7cc <GUI_GetTime>
 800a78c:	4622      	mov	r2, r4
 800a78e:	1981      	adds	r1, r0, r6
 800a790:	2301      	movs	r3, #1
 800a792:	480f      	ldr	r0, [pc, #60]	; (800a7d0 <WM_CreateTimer+0x5c>)
 800a794:	f004 ff5c 	bl	800f650 <GUI_TIMER_Create>
 800a798:	4605      	mov	r5, r0
 800a79a:	4620      	mov	r0, r4
 800a79c:	b185      	cbz	r5, 800a7c0 <WM_CreateTimer+0x4c>
 800a79e:	f006 f94f 	bl	8010a40 <GUI_ALLOC_LockH>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	a802      	add	r0, sp, #8
 800a7a6:	f8c3 8004 	str.w	r8, [r3, #4]
 800a7aa:	f840 3d04 	str.w	r3, [r0, #-4]!
 800a7ae:	609f      	str	r7, [r3, #8]
 800a7b0:	601d      	str	r5, [r3, #0]
 800a7b2:	f006 f953 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800a7b6:	4628      	mov	r0, r5
 800a7b8:	4631      	mov	r1, r6
 800a7ba:	f004 ffcb 	bl	800f754 <GUI_TIMER_SetPeriod>
 800a7be:	e002      	b.n	800a7c6 <WM_CreateTimer+0x52>
 800a7c0:	f006 f978 	bl	8010ab4 <GUI_ALLOC_Free>
 800a7c4:	462c      	mov	r4, r5
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	b002      	add	sp, #8
 800a7ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7ce:	bf00      	nop
 800a7d0:	0800a6d7 	.word	0x0800a6d7

0800a7d4 <WM_RestartTimer>:
 800a7d4:	b513      	push	{r0, r1, r4, lr}
 800a7d6:	460c      	mov	r4, r1
 800a7d8:	b180      	cbz	r0, 800a7fc <WM_RestartTimer+0x28>
 800a7da:	f006 f931 	bl	8010a40 <GUI_ALLOC_LockH>
 800a7de:	9001      	str	r0, [sp, #4]
 800a7e0:	b11c      	cbz	r4, 800a7ea <WM_RestartTimer+0x16>
 800a7e2:	6800      	ldr	r0, [r0, #0]
 800a7e4:	4621      	mov	r1, r4
 800a7e6:	f004 ffb5 	bl	800f754 <GUI_TIMER_SetPeriod>
 800a7ea:	ac02      	add	r4, sp, #8
 800a7ec:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800a7f0:	6818      	ldr	r0, [r3, #0]
 800a7f2:	f004 ffbd 	bl	800f770 <GUI_TIMER_Restart>
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	f006 f930 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800a7fc:	b002      	add	sp, #8
 800a7fe:	bd10      	pop	{r4, pc}

0800a800 <WM_InvalidateWindowAndDescs>:
 800a800:	b510      	push	{r4, lr}
 800a802:	4604      	mov	r4, r0
 800a804:	b170      	cbz	r0, 800a824 <WM_InvalidateWindowAndDescs+0x24>
 800a806:	f001 fa70 	bl	800bcea <WM_InvalidateWindow>
 800a80a:	4620      	mov	r0, r4
 800a80c:	f000 fc84 	bl	800b118 <WM_GetFirstChild>
 800a810:	4604      	mov	r4, r0
 800a812:	b13c      	cbz	r4, 800a824 <WM_InvalidateWindowAndDescs+0x24>
 800a814:	4620      	mov	r0, r4
 800a816:	f7ff fff3 	bl	800a800 <WM_InvalidateWindowAndDescs>
 800a81a:	4620      	mov	r0, r4
 800a81c:	f006 f906 	bl	8010a2c <GUI_ALLOC_h2p>
 800a820:	6a04      	ldr	r4, [r0, #32]
 800a822:	e7f6      	b.n	800a812 <WM_InvalidateWindowAndDescs+0x12>
 800a824:	bd10      	pop	{r4, pc}

0800a826 <WM_ShowWindow>:
 800a826:	b513      	push	{r0, r1, r4, lr}
 800a828:	4604      	mov	r4, r0
 800a82a:	b170      	cbz	r0, 800a84a <WM_ShowWindow+0x24>
 800a82c:	f006 f908 	bl	8010a40 <GUI_ALLOC_LockH>
 800a830:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a832:	9001      	str	r0, [sp, #4]
 800a834:	0793      	lsls	r3, r2, #30
 800a836:	d405      	bmi.n	800a844 <WM_ShowWindow+0x1e>
 800a838:	f042 0202 	orr.w	r2, r2, #2
 800a83c:	6282      	str	r2, [r0, #40]	; 0x28
 800a83e:	4620      	mov	r0, r4
 800a840:	f7ff ffde 	bl	800a800 <WM_InvalidateWindowAndDescs>
 800a844:	a801      	add	r0, sp, #4
 800a846:	f006 f909 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800a84a:	b002      	add	sp, #8
 800a84c:	bd10      	pop	{r4, pc}
	...

0800a850 <WM_SetUserClipRect>:
 800a850:	4b04      	ldr	r3, [pc, #16]	; (800a864 <WM_SetUserClipRect+0x14>)
 800a852:	b510      	push	{r4, lr}
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800a858:	6458      	str	r0, [r3, #68]	; 0x44
 800a85a:	f001 f89f 	bl	800b99c <WM__ActivateClipRect>
 800a85e:	4620      	mov	r0, r4
 800a860:	bd10      	pop	{r4, pc}
 800a862:	bf00      	nop
 800a864:	20000308 	.word	0x20000308

0800a868 <WM_SetHasTrans>:
 800a868:	b513      	push	{r0, r1, r4, lr}
 800a86a:	4604      	mov	r4, r0
 800a86c:	b1b8      	cbz	r0, 800a89e <WM_SetHasTrans+0x36>
 800a86e:	f006 f8e7 	bl	8010a40 <GUI_ALLOC_LockH>
 800a872:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a874:	9001      	str	r0, [sp, #4]
 800a876:	07db      	lsls	r3, r3, #31
 800a878:	d40e      	bmi.n	800a898 <WM_SetHasTrans+0x30>
 800a87a:	4620      	mov	r0, r4
 800a87c:	f009 fe4c 	bl	8014518 <WM_ValidateWindow>
 800a880:	9b01      	ldr	r3, [sp, #4]
 800a882:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a884:	f042 0201 	orr.w	r2, r2, #1
 800a888:	629a      	str	r2, [r3, #40]	; 0x28
 800a88a:	4b06      	ldr	r3, [pc, #24]	; (800a8a4 <WM_SetHasTrans+0x3c>)
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	4620      	mov	r0, r4
 800a890:	3201      	adds	r2, #1
 800a892:	601a      	str	r2, [r3, #0]
 800a894:	f001 fa29 	bl	800bcea <WM_InvalidateWindow>
 800a898:	a801      	add	r0, sp, #4
 800a89a:	f006 f8df 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800a89e:	b002      	add	sp, #8
 800a8a0:	bd10      	pop	{r4, pc}
 800a8a2:	bf00      	nop
 800a8a4:	20021bc0 	.word	0x20021bc0

0800a8a8 <WM_GetHasTrans>:
 800a8a8:	b508      	push	{r3, lr}
 800a8aa:	b128      	cbz	r0, 800a8b8 <WM_GetHasTrans+0x10>
 800a8ac:	f006 f8be 	bl	8010a2c <GUI_ALLOC_h2p>
 800a8b0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800a8b2:	f000 0001 	and.w	r0, r0, #1
 800a8b6:	bd08      	pop	{r3, pc}
 800a8b8:	bd08      	pop	{r3, pc}

0800a8ba <WM_SetSize>:
 800a8ba:	e92d 41e7 	stmdb	sp!, {r0, r1, r2, r5, r6, r7, r8, lr}
 800a8be:	460e      	mov	r6, r1
 800a8c0:	4690      	mov	r8, r2
 800a8c2:	4607      	mov	r7, r0
 800a8c4:	b1d0      	cbz	r0, 800a8fc <WM_SetSize+0x42>
 800a8c6:	f006 f8bb 	bl	8010a40 <GUI_ALLOC_LockH>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	a802      	add	r0, sp, #8
 800a8ce:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800a8d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a8d6:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 800a8da:	f840 3d04 	str.w	r3, [r0, #-4]!
 800a8de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a8e2:	1a8a      	subs	r2, r1, r2
 800a8e4:	1aed      	subs	r5, r5, r3
 800a8e6:	43d2      	mvns	r2, r2
 800a8e8:	43ed      	mvns	r5, r5
 800a8ea:	4416      	add	r6, r2
 800a8ec:	4445      	add	r5, r8
 800a8ee:	f006 f8b5 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800a8f2:	4638      	mov	r0, r7
 800a8f4:	4631      	mov	r1, r6
 800a8f6:	462a      	mov	r2, r5
 800a8f8:	f000 f9ca 	bl	800ac90 <WM_ResizeWindow>
 800a8fc:	b003      	add	sp, #12
 800a8fe:	e8bd 81e0 	ldmia.w	sp!, {r5, r6, r7, r8, pc}

0800a902 <WM_SetScrollState>:
 800a902:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a904:	b130      	cbz	r0, 800a914 <WM_SetScrollState+0x12>
 800a906:	b129      	cbz	r1, 800a914 <WM_SetScrollState+0x12>
 800a908:	2324      	movs	r3, #36	; 0x24
 800a90a:	9103      	str	r1, [sp, #12]
 800a90c:	4669      	mov	r1, sp
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	f001 f994 	bl	800bc3c <WM_SendMessage>
 800a914:	b005      	add	sp, #20
 800a916:	f85d fb04 	ldr.w	pc, [sp], #4

0800a91a <_GetPrevChild>:
 800a91a:	b510      	push	{r4, lr}
 800a91c:	4604      	mov	r4, r0
 800a91e:	b918      	cbnz	r0, 800a928 <_GetPrevChild+0xe>
 800a920:	4620      	mov	r0, r4
 800a922:	f009 fdd0 	bl	80144c6 <WM__GetLastSibling>
 800a926:	e003      	b.n	800a930 <_GetPrevChild+0x16>
 800a928:	f009 fdba 	bl	80144a0 <WM__GetPrevSibling>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	d0f7      	beq.n	800a920 <_GetPrevChild+0x6>
 800a930:	42a0      	cmp	r0, r4
 800a932:	bf08      	it	eq
 800a934:	2000      	moveq	r0, #0
 800a936:	bd10      	pop	{r4, pc}

0800a938 <WM_SetFocusOnPrevChild>:
 800a938:	b538      	push	{r3, r4, r5, lr}
 800a93a:	4604      	mov	r4, r0
 800a93c:	b1b0      	cbz	r0, 800a96c <WM_SetFocusOnPrevChild+0x34>
 800a93e:	f009 fdcf 	bl	80144e0 <WM__GetFocussedChild>
 800a942:	f7ff ffea 	bl	800a91a <_GetPrevChild>
 800a946:	4605      	mov	r5, r0
 800a948:	4604      	mov	r4, r0
 800a94a:	4620      	mov	r0, r4
 800a94c:	f000 fb0f 	bl	800af6e <WM_IsFocussable>
 800a950:	b930      	cbnz	r0, 800a960 <WM_SetFocusOnPrevChild+0x28>
 800a952:	b12c      	cbz	r4, 800a960 <WM_SetFocusOnPrevChild+0x28>
 800a954:	4620      	mov	r0, r4
 800a956:	f7ff ffe0 	bl	800a91a <_GetPrevChild>
 800a95a:	42a8      	cmp	r0, r5
 800a95c:	4604      	mov	r4, r0
 800a95e:	d1f4      	bne.n	800a94a <WM_SetFocusOnPrevChild+0x12>
 800a960:	4620      	mov	r0, r4
 800a962:	f000 f84b 	bl	800a9fc <WM_SetFocus>
 800a966:	2800      	cmp	r0, #0
 800a968:	bf18      	it	ne
 800a96a:	2400      	movne	r4, #0
 800a96c:	4620      	mov	r0, r4
 800a96e:	bd38      	pop	{r3, r4, r5, pc}

0800a970 <_GetNextChild>:
 800a970:	b538      	push	{r3, r4, r5, lr}
 800a972:	4605      	mov	r5, r0
 800a974:	460c      	mov	r4, r1
 800a976:	b921      	cbnz	r1, 800a982 <_GetNextChild+0x12>
 800a978:	4628      	mov	r0, r5
 800a97a:	f006 f857 	bl	8010a2c <GUI_ALLOC_h2p>
 800a97e:	69c0      	ldr	r0, [r0, #28]
 800a980:	e005      	b.n	800a98e <_GetNextChild+0x1e>
 800a982:	4608      	mov	r0, r1
 800a984:	f006 f852 	bl	8010a2c <GUI_ALLOC_h2p>
 800a988:	6a00      	ldr	r0, [r0, #32]
 800a98a:	2800      	cmp	r0, #0
 800a98c:	d0f4      	beq.n	800a978 <_GetNextChild+0x8>
 800a98e:	42a0      	cmp	r0, r4
 800a990:	bf08      	it	eq
 800a992:	2000      	moveq	r0, #0
 800a994:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a998 <WM_SetFocusOnNextChild>:
 800a998:	b570      	push	{r4, r5, r6, lr}
 800a99a:	4605      	mov	r5, r0
 800a99c:	b340      	cbz	r0, 800a9f0 <WM_SetFocusOnNextChild+0x58>
 800a99e:	f009 fd9f 	bl	80144e0 <WM__GetFocussedChild>
 800a9a2:	4601      	mov	r1, r0
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	f7ff ffe3 	bl	800a970 <_GetNextChild>
 800a9aa:	4606      	mov	r6, r0
 800a9ac:	4604      	mov	r4, r0
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	f000 fadd 	bl	800af6e <WM_IsFocussable>
 800a9b4:	b938      	cbnz	r0, 800a9c6 <WM_SetFocusOnNextChild+0x2e>
 800a9b6:	b13c      	cbz	r4, 800a9c8 <WM_SetFocusOnNextChild+0x30>
 800a9b8:	4621      	mov	r1, r4
 800a9ba:	4628      	mov	r0, r5
 800a9bc:	f7ff ffd8 	bl	800a970 <_GetNextChild>
 800a9c0:	42b0      	cmp	r0, r6
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	d1f3      	bne.n	800a9ae <WM_SetFocusOnNextChild+0x16>
 800a9c6:	b90c      	cbnz	r4, 800a9cc <WM_SetFocusOnNextChild+0x34>
 800a9c8:	2400      	movs	r4, #0
 800a9ca:	e012      	b.n	800a9f2 <WM_SetFocusOnNextChild+0x5a>
 800a9cc:	4d0a      	ldr	r5, [pc, #40]	; (800a9f8 <WM_SetFocusOnNextChild+0x60>)
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	682e      	ldr	r6, [r5, #0]
 800a9d2:	f001 f98d 	bl	800bcf0 <WM__GetTopLevelLayer>
 800a9d6:	3001      	adds	r0, #1
 800a9d8:	d00b      	beq.n	800a9f2 <WM_SetFocusOnNextChild+0x5a>
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f001 f988 	bl	800bcf0 <WM__GetTopLevelLayer>
 800a9e0:	6028      	str	r0, [r5, #0]
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	f000 f80a 	bl	800a9fc <WM_SetFocus>
 800a9e8:	602e      	str	r6, [r5, #0]
 800a9ea:	2800      	cmp	r0, #0
 800a9ec:	d1ec      	bne.n	800a9c8 <WM_SetFocusOnNextChild+0x30>
 800a9ee:	e000      	b.n	800a9f2 <WM_SetFocusOnNextChild+0x5a>
 800a9f0:	4604      	mov	r4, r0
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	bd70      	pop	{r4, r5, r6, pc}
 800a9f6:	bf00      	nop
 800a9f8:	20021b98 	.word	0x20021b98

0800a9fc <WM_SetFocus>:
 800a9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9fe:	b087      	sub	sp, #28
 800aa00:	4604      	mov	r4, r0
 800aa02:	2100      	movs	r1, #0
 800aa04:	a802      	add	r0, sp, #8
 800aa06:	2210      	movs	r2, #16
 800aa08:	f00e f92f 	bl	8018c6a <memset>
 800aa0c:	2c00      	cmp	r4, #0
 800aa0e:	d03a      	beq.n	800aa86 <WM_SetFocus+0x8a>
 800aa10:	4b1f      	ldr	r3, [pc, #124]	; (800aa90 <WM_SetFocus+0x94>)
 800aa12:	4a20      	ldr	r2, [pc, #128]	; (800aa94 <WM_SetFocus+0x98>)
 800aa14:	6819      	ldr	r1, [r3, #0]
 800aa16:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800aa1a:	4284      	cmp	r4, r0
 800aa1c:	4616      	mov	r6, r2
 800aa1e:	461f      	mov	r7, r3
 800aa20:	d031      	beq.n	800aa86 <WM_SetFocus+0x8a>
 800aa22:	231e      	movs	r3, #30
 800aa24:	e88d 0011 	stmia.w	sp, {r0, r4}
 800aa28:	9302      	str	r3, [sp, #8]
 800aa2a:	b110      	cbz	r0, 800aa32 <WM_SetFocus+0x36>
 800aa2c:	a902      	add	r1, sp, #8
 800aa2e:	f7ff fdf7 	bl	800a620 <WM__SendMessage>
 800aa32:	2301      	movs	r3, #1
 800aa34:	4620      	mov	r0, r4
 800aa36:	a902      	add	r1, sp, #8
 800aa38:	9305      	str	r3, [sp, #20]
 800aa3a:	f7ff fdf1 	bl	800a620 <WM__SendMessage>
 800aa3e:	9d05      	ldr	r5, [sp, #20]
 800aa40:	bb15      	cbnz	r5, 800aa88 <WM_SetFocus+0x8c>
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
 800aa48:	4620      	mov	r0, r4
 800aa4a:	f000 fb2a 	bl	800b0a2 <WM_GetParent>
 800aa4e:	4604      	mov	r4, r0
 800aa50:	b138      	cbz	r0, 800aa62 <WM_SetFocus+0x66>
 800aa52:	2320      	movs	r3, #32
 800aa54:	9302      	str	r3, [sp, #8]
 800aa56:	a902      	add	r1, sp, #8
 800aa58:	ab00      	add	r3, sp, #0
 800aa5a:	9305      	str	r3, [sp, #20]
 800aa5c:	f7ff fde0 	bl	800a620 <WM__SendMessage>
 800aa60:	e7f2      	b.n	800aa48 <WM_SetFocus+0x4c>
 800aa62:	9c00      	ldr	r4, [sp, #0]
 800aa64:	4620      	mov	r0, r4
 800aa66:	f000 fa77 	bl	800af58 <WM_IsWindow>
 800aa6a:	b168      	cbz	r0, 800aa88 <WM_SetFocus+0x8c>
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	f000 fb18 	bl	800b0a2 <WM_GetParent>
 800aa72:	4604      	mov	r4, r0
 800aa74:	b140      	cbz	r0, 800aa88 <WM_SetFocus+0x8c>
 800aa76:	2320      	movs	r3, #32
 800aa78:	9302      	str	r3, [sp, #8]
 800aa7a:	a902      	add	r1, sp, #8
 800aa7c:	ab00      	add	r3, sp, #0
 800aa7e:	9305      	str	r3, [sp, #20]
 800aa80:	f7ff fdce 	bl	800a620 <WM__SendMessage>
 800aa84:	e7f2      	b.n	800aa6c <WM_SetFocus+0x70>
 800aa86:	2501      	movs	r5, #1
 800aa88:	4628      	mov	r0, r5
 800aa8a:	b007      	add	sp, #28
 800aa8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	20021b98 	.word	0x20021b98
 800aa94:	20021b88 	.word	0x20021b88

0800aa98 <WM_SetCreateFlags>:
 800aa98:	4b02      	ldr	r3, [pc, #8]	; (800aaa4 <WM_SetCreateFlags+0xc>)
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	6018      	str	r0, [r3, #0]
 800aa9e:	4610      	mov	r0, r2
 800aaa0:	4770      	bx	lr
 800aaa2:	bf00      	nop
 800aaa4:	20021ba0 	.word	0x20021ba0

0800aaa8 <WM_SetCaptureMove>:
 800aaa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aaac:	b085      	sub	sp, #20
 800aaae:	4604      	mov	r4, r0
 800aab0:	460d      	mov	r5, r1
 800aab2:	4691      	mov	r9, r2
 800aab4:	4698      	mov	r8, r3
 800aab6:	f000 fa8f 	bl	800afd8 <WM_HasCaptured>
 800aaba:	4e21      	ldr	r6, [pc, #132]	; (800ab40 <WM_SetCaptureMove+0x98>)
 800aabc:	b940      	cbnz	r0, 800aad0 <WM_SetCaptureMove+0x28>
 800aabe:	4620      	mov	r0, r4
 800aac0:	2101      	movs	r1, #1
 800aac2:	f000 f859 	bl	800ab78 <WM_SetCapture>
 800aac6:	682b      	ldr	r3, [r5, #0]
 800aac8:	8033      	strh	r3, [r6, #0]
 800aaca:	686b      	ldr	r3, [r5, #4]
 800aacc:	8073      	strh	r3, [r6, #2]
 800aace:	e034      	b.n	800ab3a <WM_SetCaptureMove+0x92>
 800aad0:	682b      	ldr	r3, [r5, #0]
 800aad2:	f9b6 7000 	ldrsh.w	r7, [r6]
 800aad6:	686d      	ldr	r5, [r5, #4]
 800aad8:	1bdf      	subs	r7, r3, r7
 800aada:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800aade:	4620      	mov	r0, r4
 800aae0:	1aed      	subs	r5, r5, r3
 800aae2:	f1b9 0f00 	cmp.w	r9, #0
 800aae6:	d102      	bne.n	800aaee <WM_SetCaptureMove+0x46>
 800aae8:	f1b8 0f00 	cmp.w	r8, #0
 800aaec:	d021      	beq.n	800ab32 <WM_SetCaptureMove+0x8a>
 800aaee:	4669      	mov	r1, sp
 800aaf0:	f000 facc 	bl	800b08c <WM_GetWindowRectEx>
 800aaf4:	f1b8 0f00 	cmp.w	r8, #0
 800aaf8:	d005      	beq.n	800ab06 <WM_SetCaptureMove+0x5e>
 800aafa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800aafe:	3b01      	subs	r3, #1
 800ab00:	4498      	add	r8, r3
 800ab02:	f8ad 8006 	strh.w	r8, [sp, #6]
 800ab06:	4620      	mov	r0, r4
 800ab08:	f000 facb 	bl	800b0a2 <WM_GetParent>
 800ab0c:	a902      	add	r1, sp, #8
 800ab0e:	f000 fabd 	bl	800b08c <WM_GetWindowRectEx>
 800ab12:	4668      	mov	r0, sp
 800ab14:	4639      	mov	r1, r7
 800ab16:	462a      	mov	r2, r5
 800ab18:	f004 fffc 	bl	800fb14 <GUI_MoveRect>
 800ab1c:	a802      	add	r0, sp, #8
 800ab1e:	4601      	mov	r1, r0
 800ab20:	464a      	mov	r2, r9
 800ab22:	f004 f911 	bl	800ed48 <GUI__ReduceRect>
 800ab26:	4668      	mov	r0, sp
 800ab28:	a902      	add	r1, sp, #8
 800ab2a:	f004 fef7 	bl	800f91c <GUI_RectsIntersect>
 800ab2e:	b120      	cbz	r0, 800ab3a <WM_SetCaptureMove+0x92>
 800ab30:	4620      	mov	r0, r4
 800ab32:	4639      	mov	r1, r7
 800ab34:	462a      	mov	r2, r5
 800ab36:	f000 fa00 	bl	800af3a <WM_MoveWindow>
 800ab3a:	b005      	add	sp, #20
 800ab3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab40:	200015d8 	.word	0x200015d8

0800ab44 <WM__ReleaseCapture>:
 800ab44:	b530      	push	{r4, r5, lr}
 800ab46:	4d0a      	ldr	r5, [pc, #40]	; (800ab70 <WM__ReleaseCapture+0x2c>)
 800ab48:	4c0a      	ldr	r4, [pc, #40]	; (800ab74 <WM__ReleaseCapture+0x30>)
 800ab4a:	682b      	ldr	r3, [r5, #0]
 800ab4c:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800ab50:	b085      	sub	sp, #20
 800ab52:	b150      	cbz	r0, 800ab6a <WM__ReleaseCapture+0x26>
 800ab54:	a904      	add	r1, sp, #16
 800ab56:	2318      	movs	r3, #24
 800ab58:	f841 3d10 	str.w	r3, [r1, #-16]!
 800ab5c:	4669      	mov	r1, sp
 800ab5e:	f7ff fd5f 	bl	800a620 <WM__SendMessage>
 800ab62:	682b      	ldr	r3, [r5, #0]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 800ab6a:	b005      	add	sp, #20
 800ab6c:	bd30      	pop	{r4, r5, pc}
 800ab6e:	bf00      	nop
 800ab70:	20021b98 	.word	0x20021b98
 800ab74:	20021bb4 	.word	0x20021bb4

0800ab78 <WM_SetCapture>:
 800ab78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab7a:	4b09      	ldr	r3, [pc, #36]	; (800aba0 <WM_SetCapture+0x28>)
 800ab7c:	4a09      	ldr	r2, [pc, #36]	; (800aba4 <WM_SetCapture+0x2c>)
 800ab7e:	4604      	mov	r4, r0
 800ab80:	6818      	ldr	r0, [r3, #0]
 800ab82:	460f      	mov	r7, r1
 800ab84:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 800ab88:	42a1      	cmp	r1, r4
 800ab8a:	4615      	mov	r5, r2
 800ab8c:	461e      	mov	r6, r3
 800ab8e:	d001      	beq.n	800ab94 <WM_SetCapture+0x1c>
 800ab90:	f7ff ffd8 	bl	800ab44 <WM__ReleaseCapture>
 800ab94:	6833      	ldr	r3, [r6, #0]
 800ab96:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
 800ab9a:	4b03      	ldr	r3, [pc, #12]	; (800aba8 <WM_SetCapture+0x30>)
 800ab9c:	701f      	strb	r7, [r3, #0]
 800ab9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aba0:	20021b98 	.word	0x20021b98
 800aba4:	20021bb4 	.word	0x20021bb4
 800aba8:	20021b9c 	.word	0x20021b9c

0800abac <WM_ReleaseCapture>:
 800abac:	f7ff bfca 	b.w	800ab44 <WM__ReleaseCapture>

0800abb0 <WM_SendMessageNoPara>:
 800abb0:	f009 bc62 	b.w	8014478 <WM__SendMessageNoPara>

0800abb4 <WM__IsInWindow>:
 800abb4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800abb6:	f013 0302 	ands.w	r3, r3, #2
 800abba:	d012      	beq.n	800abe2 <WM__IsInWindow+0x2e>
 800abbc:	f9b0 3000 	ldrsh.w	r3, [r0]
 800abc0:	4299      	cmp	r1, r3
 800abc2:	db10      	blt.n	800abe6 <WM__IsInWindow+0x32>
 800abc4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800abc8:	4299      	cmp	r1, r3
 800abca:	dc0c      	bgt.n	800abe6 <WM__IsInWindow+0x32>
 800abcc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	db08      	blt.n	800abe6 <WM__IsInWindow+0x32>
 800abd4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800abd8:	4282      	cmp	r2, r0
 800abda:	bfcc      	ite	gt
 800abdc:	2000      	movgt	r0, #0
 800abde:	2001      	movle	r0, #1
 800abe0:	4770      	bx	lr
 800abe2:	4618      	mov	r0, r3
 800abe4:	4770      	bx	lr
 800abe6:	2000      	movs	r0, #0
 800abe8:	4770      	bx	lr

0800abea <_Screen2hWin>:
 800abea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800abee:	460e      	mov	r6, r1
 800abf0:	4617      	mov	r7, r2
 800abf2:	4698      	mov	r8, r3
 800abf4:	4605      	mov	r5, r0
 800abf6:	b320      	cbz	r0, 800ac42 <_Screen2hWin+0x58>
 800abf8:	f005 ff22 	bl	8010a40 <GUI_ALLOC_LockH>
 800abfc:	4639      	mov	r1, r7
 800abfe:	4642      	mov	r2, r8
 800ac00:	4604      	mov	r4, r0
 800ac02:	9001      	str	r0, [sp, #4]
 800ac04:	f7ff ffd6 	bl	800abb4 <WM__IsInWindow>
 800ac08:	4681      	mov	r9, r0
 800ac0a:	b920      	cbnz	r0, 800ac16 <_Screen2hWin+0x2c>
 800ac0c:	a801      	add	r0, sp, #4
 800ac0e:	f005 ff25 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800ac12:	4648      	mov	r0, r9
 800ac14:	e016      	b.n	800ac44 <_Screen2hWin+0x5a>
 800ac16:	69e4      	ldr	r4, [r4, #28]
 800ac18:	b91c      	cbnz	r4, 800ac22 <_Screen2hWin+0x38>
 800ac1a:	a801      	add	r0, sp, #4
 800ac1c:	f005 ff1e 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800ac20:	e00f      	b.n	800ac42 <_Screen2hWin+0x58>
 800ac22:	42b4      	cmp	r4, r6
 800ac24:	d0f9      	beq.n	800ac1a <_Screen2hWin+0x30>
 800ac26:	4620      	mov	r0, r4
 800ac28:	4631      	mov	r1, r6
 800ac2a:	463a      	mov	r2, r7
 800ac2c:	4643      	mov	r3, r8
 800ac2e:	f7ff ffdc 	bl	800abea <_Screen2hWin>
 800ac32:	2800      	cmp	r0, #0
 800ac34:	bf18      	it	ne
 800ac36:	4605      	movne	r5, r0
 800ac38:	4620      	mov	r0, r4
 800ac3a:	f005 fef7 	bl	8010a2c <GUI_ALLOC_h2p>
 800ac3e:	6a04      	ldr	r4, [r0, #32]
 800ac40:	e7ea      	b.n	800ac18 <_Screen2hWin+0x2e>
 800ac42:	4628      	mov	r0, r5
 800ac44:	b003      	add	sp, #12
 800ac46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800ac4c <WM_Screen2hWin>:
 800ac4c:	b570      	push	{r4, r5, r6, lr}
 800ac4e:	4b06      	ldr	r3, [pc, #24]	; (800ac68 <WM_Screen2hWin+0x1c>)
 800ac50:	460c      	mov	r4, r1
 800ac52:	4605      	mov	r5, r0
 800ac54:	6818      	ldr	r0, [r3, #0]
 800ac56:	f000 fa89 	bl	800b16c <WM_GetDesktopWindowEx>
 800ac5a:	462a      	mov	r2, r5
 800ac5c:	4623      	mov	r3, r4
 800ac5e:	2100      	movs	r1, #0
 800ac60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac64:	f7ff bfc1 	b.w	800abea <_Screen2hWin>
 800ac68:	20021b98 	.word	0x20021b98

0800ac6c <WM_Screen2hWinEx>:
 800ac6c:	b570      	push	{r4, r5, r6, lr}
 800ac6e:	4b07      	ldr	r3, [pc, #28]	; (800ac8c <WM_Screen2hWinEx+0x20>)
 800ac70:	460d      	mov	r5, r1
 800ac72:	4614      	mov	r4, r2
 800ac74:	4606      	mov	r6, r0
 800ac76:	6818      	ldr	r0, [r3, #0]
 800ac78:	f000 fa78 	bl	800b16c <WM_GetDesktopWindowEx>
 800ac7c:	4631      	mov	r1, r6
 800ac7e:	462a      	mov	r2, r5
 800ac80:	4623      	mov	r3, r4
 800ac82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac86:	f7ff bfb0 	b.w	800abea <_Screen2hWin>
 800ac8a:	bf00      	nop
 800ac8c:	20021b98 	.word	0x20021b98

0800ac90 <WM_ResizeWindow>:
 800ac90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac94:	ea51 0302 	orrs.w	r3, r1, r2
 800ac98:	b08a      	sub	sp, #40	; 0x28
 800ac9a:	4680      	mov	r8, r0
 800ac9c:	460e      	mov	r6, r1
 800ac9e:	4617      	mov	r7, r2
 800aca0:	d06e      	beq.n	800ad80 <WM_ResizeWindow+0xf0>
 800aca2:	2800      	cmp	r0, #0
 800aca4:	d06c      	beq.n	800ad80 <WM_ResizeWindow+0xf0>
 800aca6:	f005 fecb 	bl	8010a40 <GUI_ALLOC_LockH>
 800acaa:	4603      	mov	r3, r0
 800acac:	9003      	str	r0, [sp, #12]
 800acae:	c803      	ldmia	r0, {r0, r1}
 800acb0:	ad04      	add	r5, sp, #16
 800acb2:	ac06      	add	r4, sp, #24
 800acb4:	e885 0003 	stmia.w	r5, {r0, r1}
 800acb8:	e884 0003 	stmia.w	r4, {r0, r1}
 800acbc:	b17e      	cbz	r6, 800acde <WM_ResizeWindow+0x4e>
 800acbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800acc0:	f402 7220 	and.w	r2, r2, #640	; 0x280
 800acc4:	2a80      	cmp	r2, #128	; 0x80
 800acc6:	d105      	bne.n	800acd4 <WM_ResizeWindow+0x44>
 800acc8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800accc:	1b96      	subs	r6, r2, r6
 800acce:	f8ad 6018 	strh.w	r6, [sp, #24]
 800acd2:	e004      	b.n	800acde <WM_ResizeWindow+0x4e>
 800acd4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800acd8:	4416      	add	r6, r2
 800acda:	f8ad 601c 	strh.w	r6, [sp, #28]
 800acde:	b187      	cbz	r7, 800ad02 <WM_ResizeWindow+0x72>
 800ace0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ace2:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 800ace6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800acea:	d105      	bne.n	800acf8 <WM_ResizeWindow+0x68>
 800acec:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800acf0:	1bd7      	subs	r7, r2, r7
 800acf2:	f8ad 701a 	strh.w	r7, [sp, #26]
 800acf6:	e004      	b.n	800ad02 <WM_ResizeWindow+0x72>
 800acf8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800acfc:	4417      	add	r7, r2
 800acfe:	f8ad 701e 	strh.w	r7, [sp, #30]
 800ad02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad04:	03da      	lsls	r2, r3, #15
 800ad06:	d502      	bpl.n	800ad0e <WM_ResizeWindow+0x7e>
 800ad08:	4640      	mov	r0, r8
 800ad0a:	f000 fe7b 	bl	800ba04 <WM__InvalidateDrawAndDescs>
 800ad0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ad12:	9b03      	ldr	r3, [sp, #12]
 800ad14:	e883 0003 	stmia.w	r3, {r0, r1}
 800ad18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad1a:	079b      	lsls	r3, r3, #30
 800ad1c:	d50a      	bpl.n	800ad34 <WM_ResizeWindow+0xa4>
 800ad1e:	a808      	add	r0, sp, #32
 800ad20:	4629      	mov	r1, r5
 800ad22:	4622      	mov	r2, r4
 800ad24:	f004 ff06 	bl	800fb34 <GUI_MergeRect>
 800ad28:	9b03      	ldr	r3, [sp, #12]
 800ad2a:	a808      	add	r0, sp, #32
 800ad2c:	6999      	ldr	r1, [r3, #24]
 800ad2e:	6a1a      	ldr	r2, [r3, #32]
 800ad30:	f000 ff6c 	bl	800bc0c <WM__InvalidateRectEx>
 800ad34:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 800ad38:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800ad3c:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 800ad40:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 800ad44:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 800ad48:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 800ad4c:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 800ad50:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800ad54:	1ae3      	subs	r3, r4, r3
 800ad56:	1a38      	subs	r0, r7, r0
 800ad58:	ac0a      	add	r4, sp, #40	; 0x28
 800ad5a:	1aaa      	subs	r2, r5, r2
 800ad5c:	9000      	str	r0, [sp, #0]
 800ad5e:	1a71      	subs	r1, r6, r1
 800ad60:	9803      	ldr	r0, [sp, #12]
 800ad62:	f7ff fbe2 	bl	800a52a <WM__UpdateChildPositions>
 800ad66:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 800ad6a:	f101 0008 	add.w	r0, r1, #8
 800ad6e:	f004 f89f 	bl	800eeb0 <GUI__IntersectRect>
 800ad72:	4640      	mov	r0, r8
 800ad74:	2105      	movs	r1, #5
 800ad76:	f000 ff65 	bl	800bc44 <WM__SendMsgNoData>
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	f005 fe6e 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800ad80:	b00a      	add	sp, #40	; 0x28
 800ad82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ad86 <WM_NotifyParent>:
 800ad86:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad88:	2326      	movs	r3, #38	; 0x26
 800ad8a:	9103      	str	r1, [sp, #12]
 800ad8c:	4669      	mov	r1, sp
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	f009 fe3b 	bl	8014a0a <WM_SendToParent>
 800ad94:	b005      	add	sp, #20
 800ad96:	f85d fb04 	ldr.w	pc, [sp], #4

0800ad9a <WM_MoveChildTo>:
 800ad9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad9c:	460f      	mov	r7, r1
 800ad9e:	4616      	mov	r6, r2
 800ada0:	4605      	mov	r5, r0
 800ada2:	b320      	cbz	r0, 800adee <WM_MoveChildTo+0x54>
 800ada4:	f000 f97d 	bl	800b0a2 <WM_GetParent>
 800ada8:	b308      	cbz	r0, 800adee <WM_MoveChildTo+0x54>
 800adaa:	f005 fe49 	bl	8010a40 <GUI_ALLOC_LockH>
 800adae:	9000      	str	r0, [sp, #0]
 800adb0:	4628      	mov	r0, r5
 800adb2:	f005 fe45 	bl	8010a40 <GUI_ALLOC_LockH>
 800adb6:	ab02      	add	r3, sp, #8
 800adb8:	4604      	mov	r4, r0
 800adba:	9001      	str	r0, [sp, #4]
 800adbc:	f853 0d08 	ldr.w	r0, [r3, #-8]!
 800adc0:	f9b4 2000 	ldrsh.w	r2, [r4]
 800adc4:	f9b0 1000 	ldrsh.w	r1, [r0]
 800adc8:	1a8a      	subs	r2, r1, r2
 800adca:	4417      	add	r7, r2
 800adcc:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800add0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800add4:	4668      	mov	r0, sp
 800add6:	1a8a      	subs	r2, r1, r2
 800add8:	4416      	add	r6, r2
 800adda:	f005 fe3f 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800adde:	a801      	add	r0, sp, #4
 800ade0:	f005 fe3c 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800ade4:	4628      	mov	r0, r5
 800ade6:	4639      	mov	r1, r7
 800ade8:	4632      	mov	r2, r6
 800adea:	f000 f838 	bl	800ae5e <WM__MoveWindow>
 800adee:	b003      	add	sp, #12
 800adf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800adf2 <_MoveDescendents>:
 800adf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adf6:	b088      	sub	sp, #32
 800adf8:	4606      	mov	r6, r0
 800adfa:	460c      	mov	r4, r1
 800adfc:	4615      	mov	r5, r2
 800adfe:	a804      	add	r0, sp, #16
 800ae00:	2100      	movs	r1, #0
 800ae02:	2210      	movs	r2, #16
 800ae04:	f00d ff31 	bl	8018c6a <memset>
 800ae08:	b336      	cbz	r6, 800ae58 <_MoveDescendents+0x66>
 800ae0a:	4630      	mov	r0, r6
 800ae0c:	f005 fe18 	bl	8010a40 <GUI_ALLOC_LockH>
 800ae10:	4621      	mov	r1, r4
 800ae12:	462a      	mov	r2, r5
 800ae14:	9001      	str	r0, [sp, #4]
 800ae16:	f004 fe7d 	bl	800fb14 <GUI_MoveRect>
 800ae1a:	9801      	ldr	r0, [sp, #4]
 800ae1c:	4621      	mov	r1, r4
 800ae1e:	3008      	adds	r0, #8
 800ae20:	462a      	mov	r2, r5
 800ae22:	f004 fe77 	bl	800fb14 <GUI_MoveRect>
 800ae26:	a808      	add	r0, sp, #32
 800ae28:	f850 2d1c 	ldr.w	r2, [r0, #-28]!
 800ae2c:	f8d2 801c 	ldr.w	r8, [r2, #28]
 800ae30:	6a17      	ldr	r7, [r2, #32]
 800ae32:	f005 fe13 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800ae36:	4640      	mov	r0, r8
 800ae38:	4621      	mov	r1, r4
 800ae3a:	462a      	mov	r2, r5
 800ae3c:	f7ff ffd9 	bl	800adf2 <_MoveDescendents>
 800ae40:	2303      	movs	r3, #3
 800ae42:	9304      	str	r3, [sp, #16]
 800ae44:	4630      	mov	r0, r6
 800ae46:	ab02      	add	r3, sp, #8
 800ae48:	a904      	add	r1, sp, #16
 800ae4a:	9307      	str	r3, [sp, #28]
 800ae4c:	9402      	str	r4, [sp, #8]
 800ae4e:	9503      	str	r5, [sp, #12]
 800ae50:	463e      	mov	r6, r7
 800ae52:	f7ff fbe5 	bl	800a620 <WM__SendMessage>
 800ae56:	e7d7      	b.n	800ae08 <_MoveDescendents+0x16>
 800ae58:	b008      	add	sp, #32
 800ae5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ae5e <WM__MoveWindow>:
 800ae5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae62:	b08b      	sub	sp, #44	; 0x2c
 800ae64:	4606      	mov	r6, r0
 800ae66:	460d      	mov	r5, r1
 800ae68:	4614      	mov	r4, r2
 800ae6a:	a806      	add	r0, sp, #24
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	2210      	movs	r2, #16
 800ae70:	f00d fefb 	bl	8018c6a <memset>
 800ae74:	2e00      	cmp	r6, #0
 800ae76:	d043      	beq.n	800af00 <WM__MoveWindow+0xa2>
 800ae78:	b90d      	cbnz	r5, 800ae7e <WM__MoveWindow+0x20>
 800ae7a:	2c00      	cmp	r4, #0
 800ae7c:	d040      	beq.n	800af00 <WM__MoveWindow+0xa2>
 800ae7e:	4630      	mov	r0, r6
 800ae80:	f005 fdde 	bl	8010a40 <GUI_ALLOC_LockH>
 800ae84:	4603      	mov	r3, r0
 800ae86:	9001      	str	r0, [sp, #4]
 800ae88:	c803      	ldmia	r0, {r0, r1}
 800ae8a:	f10d 0808 	add.w	r8, sp, #8
 800ae8e:	e888 0003 	stmia.w	r8, {r0, r1}
 800ae92:	4622      	mov	r2, r4
 800ae94:	4618      	mov	r0, r3
 800ae96:	4629      	mov	r1, r5
 800ae98:	f004 fe3c 	bl	800fb14 <GUI_MoveRect>
 800ae9c:	9801      	ldr	r0, [sp, #4]
 800ae9e:	af0a      	add	r7, sp, #40	; 0x28
 800aea0:	4629      	mov	r1, r5
 800aea2:	4622      	mov	r2, r4
 800aea4:	3008      	adds	r0, #8
 800aea6:	f004 fe35 	bl	800fb14 <GUI_MoveRect>
 800aeaa:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 800aeae:	f8d3 901c 	ldr.w	r9, [r3, #28]
 800aeb2:	4638      	mov	r0, r7
 800aeb4:	f005 fdd2 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800aeb8:	4622      	mov	r2, r4
 800aeba:	4648      	mov	r0, r9
 800aebc:	4629      	mov	r1, r5
 800aebe:	f7ff ff98 	bl	800adf2 <_MoveDescendents>
 800aec2:	4630      	mov	r0, r6
 800aec4:	f005 fdbc 	bl	8010a40 <GUI_ALLOC_LockH>
 800aec8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800aeca:	9001      	str	r0, [sp, #4]
 800aecc:	0792      	lsls	r2, r2, #30
 800aece:	d50a      	bpl.n	800aee6 <WM__MoveWindow+0x88>
 800aed0:	6981      	ldr	r1, [r0, #24]
 800aed2:	b141      	cbz	r1, 800aee6 <WM__MoveWindow+0x88>
 800aed4:	6a02      	ldr	r2, [r0, #32]
 800aed6:	f000 fe84 	bl	800bbe2 <WM__InvalidateParent>
 800aeda:	9b01      	ldr	r3, [sp, #4]
 800aedc:	4640      	mov	r0, r8
 800aede:	6999      	ldr	r1, [r3, #24]
 800aee0:	6a1a      	ldr	r2, [r3, #32]
 800aee2:	f000 fe7e 	bl	800bbe2 <WM__InvalidateParent>
 800aee6:	4638      	mov	r0, r7
 800aee8:	f005 fdb8 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800aeec:	2303      	movs	r3, #3
 800aeee:	9306      	str	r3, [sp, #24]
 800aef0:	4630      	mov	r0, r6
 800aef2:	ab04      	add	r3, sp, #16
 800aef4:	a906      	add	r1, sp, #24
 800aef6:	9309      	str	r3, [sp, #36]	; 0x24
 800aef8:	9504      	str	r5, [sp, #16]
 800aefa:	9405      	str	r4, [sp, #20]
 800aefc:	f7ff fb90 	bl	800a620 <WM__SendMessage>
 800af00:	b00b      	add	sp, #44	; 0x2c
 800af02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800af06 <WM__MoveTo>:
 800af06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af08:	460d      	mov	r5, r1
 800af0a:	4617      	mov	r7, r2
 800af0c:	4606      	mov	r6, r0
 800af0e:	b190      	cbz	r0, 800af36 <WM__MoveTo+0x30>
 800af10:	f005 fd96 	bl	8010a40 <GUI_ALLOC_LockH>
 800af14:	4604      	mov	r4, r0
 800af16:	a802      	add	r0, sp, #8
 800af18:	f9b4 2000 	ldrsh.w	r2, [r4]
 800af1c:	f840 4d04 	str.w	r4, [r0, #-4]!
 800af20:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 800af24:	1aad      	subs	r5, r5, r2
 800af26:	1b3c      	subs	r4, r7, r4
 800af28:	f005 fd98 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800af2c:	4630      	mov	r0, r6
 800af2e:	4629      	mov	r1, r5
 800af30:	4622      	mov	r2, r4
 800af32:	f7ff ff94 	bl	800ae5e <WM__MoveWindow>
 800af36:	b003      	add	sp, #12
 800af38:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800af3a <WM_MoveWindow>:
 800af3a:	f7ff bf90 	b.w	800ae5e <WM__MoveWindow>

0800af3e <WM_MoveTo>:
 800af3e:	f7ff bfe2 	b.w	800af06 <WM__MoveTo>

0800af42 <WM_DisableMemdev>:
 800af42:	b508      	push	{r3, lr}
 800af44:	b138      	cbz	r0, 800af56 <WM_DisableMemdev+0x14>
 800af46:	f005 fd71 	bl	8010a2c <GUI_ALLOC_h2p>
 800af4a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800af4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af50:	f023 0304 	bic.w	r3, r3, #4
 800af54:	6283      	str	r3, [r0, #40]	; 0x28
 800af56:	bd08      	pop	{r3, pc}

0800af58 <WM_IsWindow>:
 800af58:	f000 bd44 	b.w	800b9e4 <WM__IsWindow>

0800af5c <WM_IsVisible>:
 800af5c:	b508      	push	{r3, lr}
 800af5e:	b128      	cbz	r0, 800af6c <WM_IsVisible+0x10>
 800af60:	f005 fd64 	bl	8010a2c <GUI_ALLOC_h2p>
 800af64:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800af66:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800af6a:	bd08      	pop	{r3, pc}
 800af6c:	bd08      	pop	{r3, pc}

0800af6e <WM_IsFocussable>:
 800af6e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af70:	b150      	cbz	r0, 800af88 <WM_IsFocussable+0x1a>
 800af72:	2300      	movs	r3, #0
 800af74:	a904      	add	r1, sp, #16
 800af76:	9303      	str	r3, [sp, #12]
 800af78:	231f      	movs	r3, #31
 800af7a:	f841 3d10 	str.w	r3, [r1, #-16]!
 800af7e:	4669      	mov	r1, sp
 800af80:	f000 fe5c 	bl	800bc3c <WM_SendMessage>
 800af84:	9803      	ldr	r0, [sp, #12]
 800af86:	e7ff      	b.n	800af88 <WM_IsFocussable+0x1a>
 800af88:	b005      	add	sp, #20
 800af8a:	f85d fb04 	ldr.w	pc, [sp], #4

0800af8e <WM_HideWindow>:
 800af8e:	b513      	push	{r0, r1, r4, lr}
 800af90:	b188      	cbz	r0, 800afb6 <WM_HideWindow+0x28>
 800af92:	f005 fd55 	bl	8010a40 <GUI_ALLOC_LockH>
 800af96:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800af98:	ac02      	add	r4, sp, #8
 800af9a:	0791      	lsls	r1, r2, #30
 800af9c:	f844 0d04 	str.w	r0, [r4, #-4]!
 800afa0:	d506      	bpl.n	800afb0 <WM_HideWindow+0x22>
 800afa2:	f022 0202 	bic.w	r2, r2, #2
 800afa6:	6282      	str	r2, [r0, #40]	; 0x28
 800afa8:	6981      	ldr	r1, [r0, #24]
 800afaa:	6a02      	ldr	r2, [r0, #32]
 800afac:	f000 fe2e 	bl	800bc0c <WM__InvalidateRectEx>
 800afb0:	4620      	mov	r0, r4
 800afb2:	f005 fd53 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800afb6:	b002      	add	sp, #8
 800afb8:	bd10      	pop	{r4, pc}
	...

0800afbc <WM_HasFocus>:
 800afbc:	4b04      	ldr	r3, [pc, #16]	; (800afd0 <WM_HasFocus+0x14>)
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	4b04      	ldr	r3, [pc, #16]	; (800afd4 <WM_HasFocus+0x18>)
 800afc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afc6:	1ac3      	subs	r3, r0, r3
 800afc8:	4258      	negs	r0, r3
 800afca:	4158      	adcs	r0, r3
 800afcc:	4770      	bx	lr
 800afce:	bf00      	nop
 800afd0:	20021b98 	.word	0x20021b98
 800afd4:	20021b88 	.word	0x20021b88

0800afd8 <WM_HasCaptured>:
 800afd8:	4b04      	ldr	r3, [pc, #16]	; (800afec <WM_HasCaptured+0x14>)
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	4b04      	ldr	r3, [pc, #16]	; (800aff0 <WM_HasCaptured+0x18>)
 800afde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afe2:	1ac3      	subs	r3, r0, r3
 800afe4:	4258      	negs	r0, r3
 800afe6:	4158      	adcs	r0, r3
 800afe8:	4770      	bx	lr
 800afea:	bf00      	nop
 800afec:	20021b98 	.word	0x20021b98
 800aff0:	20021bb4 	.word	0x20021bb4

0800aff4 <WM__GetWindowSizeX>:
 800aff4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800aff8:	f9b0 3000 	ldrsh.w	r3, [r0]
 800affc:	1ad0      	subs	r0, r2, r3
 800affe:	3001      	adds	r0, #1
 800b000:	4770      	bx	lr

0800b002 <WM__GetWindowSizeY>:
 800b002:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800b006:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800b00a:	1ad0      	subs	r0, r2, r3
 800b00c:	3001      	adds	r0, #1
 800b00e:	4770      	bx	lr

0800b010 <WM_GetWindowSizeX>:
 800b010:	b513      	push	{r0, r1, r4, lr}
 800b012:	b908      	cbnz	r0, 800b018 <WM_GetWindowSizeX+0x8>
 800b014:	f000 ffdc 	bl	800bfd0 <WM_GetActiveWindow>
 800b018:	f005 fd12 	bl	8010a40 <GUI_ALLOC_LockH>
 800b01c:	ab02      	add	r3, sp, #8
 800b01e:	f9b0 2000 	ldrsh.w	r2, [r0]
 800b022:	f843 0d04 	str.w	r0, [r3, #-4]!
 800b026:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800b02a:	4618      	mov	r0, r3
 800b02c:	1aa4      	subs	r4, r4, r2
 800b02e:	f005 fd15 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b032:	3401      	adds	r4, #1
 800b034:	4620      	mov	r0, r4
 800b036:	b002      	add	sp, #8
 800b038:	bd10      	pop	{r4, pc}

0800b03a <WM_GetWindowSizeY>:
 800b03a:	b513      	push	{r0, r1, r4, lr}
 800b03c:	b908      	cbnz	r0, 800b042 <WM_GetWindowSizeY+0x8>
 800b03e:	f000 ffc7 	bl	800bfd0 <WM_GetActiveWindow>
 800b042:	f005 fcfd 	bl	8010a40 <GUI_ALLOC_LockH>
 800b046:	ab02      	add	r3, sp, #8
 800b048:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800b04c:	f843 0d04 	str.w	r0, [r3, #-4]!
 800b050:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 800b054:	4618      	mov	r0, r3
 800b056:	1aa4      	subs	r4, r4, r2
 800b058:	f005 fd00 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b05c:	3401      	adds	r4, #1
 800b05e:	4620      	mov	r0, r4
 800b060:	b002      	add	sp, #8
 800b062:	bd10      	pop	{r4, pc}

0800b064 <WM_GetWindowRect>:
 800b064:	b510      	push	{r4, lr}
 800b066:	4604      	mov	r4, r0
 800b068:	b158      	cbz	r0, 800b082 <WM_GetWindowRect+0x1e>
 800b06a:	4b06      	ldr	r3, [pc, #24]	; (800b084 <WM_GetWindowRect+0x20>)
 800b06c:	6818      	ldr	r0, [r3, #0]
 800b06e:	b910      	cbnz	r0, 800b076 <WM_GetWindowRect+0x12>
 800b070:	4b05      	ldr	r3, [pc, #20]	; (800b088 <WM_GetWindowRect+0x24>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b076:	f005 fcd9 	bl	8010a2c <GUI_ALLOC_h2p>
 800b07a:	4603      	mov	r3, r0
 800b07c:	cb03      	ldmia	r3!, {r0, r1}
 800b07e:	6020      	str	r0, [r4, #0]
 800b080:	6061      	str	r1, [r4, #4]
 800b082:	bd10      	pop	{r4, pc}
 800b084:	20021b74 	.word	0x20021b74
 800b088:	20000308 	.word	0x20000308

0800b08c <WM_GetWindowRectEx>:
 800b08c:	b510      	push	{r4, lr}
 800b08e:	460c      	mov	r4, r1
 800b090:	b130      	cbz	r0, 800b0a0 <WM_GetWindowRectEx+0x14>
 800b092:	b129      	cbz	r1, 800b0a0 <WM_GetWindowRectEx+0x14>
 800b094:	f005 fcca 	bl	8010a2c <GUI_ALLOC_h2p>
 800b098:	4603      	mov	r3, r0
 800b09a:	cb03      	ldmia	r3!, {r0, r1}
 800b09c:	6020      	str	r0, [r4, #0]
 800b09e:	6061      	str	r1, [r4, #4]
 800b0a0:	bd10      	pop	{r4, pc}

0800b0a2 <WM_GetParent>:
 800b0a2:	b508      	push	{r3, lr}
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	b110      	cbz	r0, 800b0ae <WM_GetParent+0xc>
 800b0a8:	f005 fcc0 	bl	8010a2c <GUI_ALLOC_h2p>
 800b0ac:	6983      	ldr	r3, [r0, #24]
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	bd08      	pop	{r3, pc}

0800b0b2 <WM_GetWindowOrgX>:
 800b0b2:	b508      	push	{r3, lr}
 800b0b4:	b120      	cbz	r0, 800b0c0 <WM_GetWindowOrgX+0xe>
 800b0b6:	f005 fcb9 	bl	8010a2c <GUI_ALLOC_h2p>
 800b0ba:	f9b0 0000 	ldrsh.w	r0, [r0]
 800b0be:	bd08      	pop	{r3, pc}
 800b0c0:	bd08      	pop	{r3, pc}

0800b0c2 <WM_GetWindowOrgY>:
 800b0c2:	b508      	push	{r3, lr}
 800b0c4:	b120      	cbz	r0, 800b0d0 <WM_GetWindowOrgY+0xe>
 800b0c6:	f005 fcb1 	bl	8010a2c <GUI_ALLOC_h2p>
 800b0ca:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800b0ce:	bd08      	pop	{r3, pc}
 800b0d0:	bd08      	pop	{r3, pc}

0800b0d2 <WM_GetNextSibling>:
 800b0d2:	b508      	push	{r3, lr}
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	b110      	cbz	r0, 800b0de <WM_GetNextSibling+0xc>
 800b0d8:	f005 fca8 	bl	8010a2c <GUI_ALLOC_h2p>
 800b0dc:	6a03      	ldr	r3, [r0, #32]
 800b0de:	4618      	mov	r0, r3
 800b0e0:	bd08      	pop	{r3, pc}

0800b0e2 <WM_GetId>:
 800b0e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0e4:	4604      	mov	r4, r0
 800b0e6:	2210      	movs	r2, #16
 800b0e8:	4668      	mov	r0, sp
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	f00d fdbd 	bl	8018c6a <memset>
 800b0f0:	2315      	movs	r3, #21
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	4669      	mov	r1, sp
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	f000 fda0 	bl	800bc3c <WM_SendMessage>
 800b0fc:	9803      	ldr	r0, [sp, #12]
 800b0fe:	b004      	add	sp, #16
 800b100:	bd10      	pop	{r4, pc}
	...

0800b104 <WM_GetFocussedWindow>:
 800b104:	4b02      	ldr	r3, [pc, #8]	; (800b110 <WM_GetFocussedWindow+0xc>)
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	4b02      	ldr	r3, [pc, #8]	; (800b114 <WM_GetFocussedWindow+0x10>)
 800b10a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b10e:	4770      	bx	lr
 800b110:	20021b98 	.word	0x20021b98
 800b114:	20021b88 	.word	0x20021b88

0800b118 <WM_GetFirstChild>:
 800b118:	b508      	push	{r3, lr}
 800b11a:	4603      	mov	r3, r0
 800b11c:	b110      	cbz	r0, 800b124 <WM_GetFirstChild+0xc>
 800b11e:	f005 fc85 	bl	8010a2c <GUI_ALLOC_h2p>
 800b122:	69c3      	ldr	r3, [r0, #28]
 800b124:	4618      	mov	r0, r3
 800b126:	bd08      	pop	{r3, pc}

0800b128 <_GetDialogItem>:
 800b128:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b12a:	460d      	mov	r5, r1
 800b12c:	f005 fc88 	bl	8010a40 <GUI_ALLOC_LockH>
 800b130:	ab02      	add	r3, sp, #8
 800b132:	69c4      	ldr	r4, [r0, #28]
 800b134:	f843 0d04 	str.w	r0, [r3, #-4]!
 800b138:	4618      	mov	r0, r3
 800b13a:	f005 fc8f 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b13e:	4620      	mov	r0, r4
 800b140:	b16c      	cbz	r4, 800b15e <_GetDialogItem+0x36>
 800b142:	f7ff ffce 	bl	800b0e2 <WM_GetId>
 800b146:	42a8      	cmp	r0, r5
 800b148:	4620      	mov	r0, r4
 800b14a:	d008      	beq.n	800b15e <_GetDialogItem+0x36>
 800b14c:	4629      	mov	r1, r5
 800b14e:	f7ff ffeb 	bl	800b128 <_GetDialogItem>
 800b152:	b920      	cbnz	r0, 800b15e <_GetDialogItem+0x36>
 800b154:	4620      	mov	r0, r4
 800b156:	f005 fc69 	bl	8010a2c <GUI_ALLOC_h2p>
 800b15a:	6a04      	ldr	r4, [r0, #32]
 800b15c:	e7ef      	b.n	800b13e <_GetDialogItem+0x16>
 800b15e:	b003      	add	sp, #12
 800b160:	bd30      	pop	{r4, r5, pc}

0800b162 <WM_GetDialogItem>:
 800b162:	b108      	cbz	r0, 800b168 <WM_GetDialogItem+0x6>
 800b164:	f7ff bfe0 	b.w	800b128 <_GetDialogItem>
 800b168:	4770      	bx	lr
	...

0800b16c <WM_GetDesktopWindowEx>:
 800b16c:	2801      	cmp	r0, #1
 800b16e:	bf9a      	itte	ls
 800b170:	4b02      	ldrls	r3, [pc, #8]	; (800b17c <WM_GetDesktopWindowEx+0x10>)
 800b172:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800b176:	2000      	movhi	r0, #0
 800b178:	4770      	bx	lr
 800b17a:	bf00      	nop
 800b17c:	20021b78 	.word	0x20021b78

0800b180 <WM_GetDesktopWindow>:
 800b180:	4b03      	ldr	r3, [pc, #12]	; (800b190 <WM_GetDesktopWindow+0x10>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	7c5a      	ldrb	r2, [r3, #17]
 800b186:	4b03      	ldr	r3, [pc, #12]	; (800b194 <WM_GetDesktopWindow+0x14>)
 800b188:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b18c:	4770      	bx	lr
 800b18e:	bf00      	nop
 800b190:	20000308 	.word	0x20000308
 800b194:	20021b78 	.word	0x20021b78

0800b198 <WM_GetClientWindow>:
 800b198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b19a:	2300      	movs	r3, #0
 800b19c:	a904      	add	r1, sp, #16
 800b19e:	9303      	str	r3, [sp, #12]
 800b1a0:	2317      	movs	r3, #23
 800b1a2:	f841 3d10 	str.w	r3, [r1, #-16]!
 800b1a6:	4669      	mov	r1, sp
 800b1a8:	f000 fd48 	bl	800bc3c <WM_SendMessage>
 800b1ac:	9803      	ldr	r0, [sp, #12]
 800b1ae:	b005      	add	sp, #20
 800b1b0:	f85d fb04 	ldr.w	pc, [sp], #4

0800b1b4 <WM__GetClientRectEx>:
 800b1b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1b6:	460d      	mov	r5, r1
 800b1b8:	b158      	cbz	r0, 800b1d2 <WM__GetClientRectEx+0x1e>
 800b1ba:	b151      	cbz	r1, 800b1d2 <WM__GetClientRectEx+0x1e>
 800b1bc:	f005 fc40 	bl	8010a40 <GUI_ALLOC_LockH>
 800b1c0:	ac02      	add	r4, sp, #8
 800b1c2:	4629      	mov	r1, r5
 800b1c4:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b1c8:	f000 fd47 	bl	800bc5a <WM__GetClientRectWin>
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	f005 fc45 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b1d2:	b003      	add	sp, #12
 800b1d4:	bd30      	pop	{r4, r5, pc}

0800b1d6 <WM_GetClientRectEx>:
 800b1d6:	f7ff bfed 	b.w	800b1b4 <WM__GetClientRectEx>
	...

0800b1dc <WM_GetClientRect>:
 800b1dc:	4b04      	ldr	r3, [pc, #16]	; (800b1f0 <WM_GetClientRect+0x14>)
 800b1de:	4601      	mov	r1, r0
 800b1e0:	6818      	ldr	r0, [r3, #0]
 800b1e2:	b910      	cbnz	r0, 800b1ea <WM_GetClientRect+0xe>
 800b1e4:	4b03      	ldr	r3, [pc, #12]	; (800b1f4 <WM_GetClientRect+0x18>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b1ea:	f7ff bfe3 	b.w	800b1b4 <WM__GetClientRectEx>
 800b1ee:	bf00      	nop
 800b1f0:	20021b74 	.word	0x20021b74
 800b1f4:	20000308 	.word	0x20000308

0800b1f8 <WM_GetBkColor>:
 800b1f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1fa:	b140      	cbz	r0, 800b20e <WM_GetBkColor+0x16>
 800b1fc:	a904      	add	r1, sp, #16
 800b1fe:	2322      	movs	r3, #34	; 0x22
 800b200:	f841 3d10 	str.w	r3, [r1, #-16]!
 800b204:	4669      	mov	r1, sp
 800b206:	f000 fd19 	bl	800bc3c <WM_SendMessage>
 800b20a:	9803      	ldr	r0, [sp, #12]
 800b20c:	e001      	b.n	800b212 <WM_GetBkColor+0x1a>
 800b20e:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
 800b212:	b005      	add	sp, #20
 800b214:	f85d fb04 	ldr.w	pc, [sp], #4

0800b218 <WM_SetEnableState>:
 800b218:	b570      	push	{r4, r5, r6, lr}
 800b21a:	460d      	mov	r5, r1
 800b21c:	b086      	sub	sp, #24
 800b21e:	4606      	mov	r6, r0
 800b220:	b1d0      	cbz	r0, 800b258 <WM_SetEnableState+0x40>
 800b222:	f005 fc0d 	bl	8010a40 <GUI_ALLOC_LockH>
 800b226:	9001      	str	r0, [sp, #4]
 800b228:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800b22a:	b115      	cbz	r5, 800b232 <WM_SetEnableState+0x1a>
 800b22c:	f024 0210 	bic.w	r2, r4, #16
 800b230:	e001      	b.n	800b236 <WM_SetEnableState+0x1e>
 800b232:	f044 0210 	orr.w	r2, r4, #16
 800b236:	4294      	cmp	r4, r2
 800b238:	d00b      	beq.n	800b252 <WM_SetEnableState+0x3a>
 800b23a:	6282      	str	r2, [r0, #40]	; 0x28
 800b23c:	a801      	add	r0, sp, #4
 800b23e:	f005 fc0d 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b242:	2328      	movs	r3, #40	; 0x28
 800b244:	4630      	mov	r0, r6
 800b246:	a902      	add	r1, sp, #8
 800b248:	9302      	str	r3, [sp, #8]
 800b24a:	9505      	str	r5, [sp, #20]
 800b24c:	f7ff f9e8 	bl	800a620 <WM__SendMessage>
 800b250:	e002      	b.n	800b258 <WM_SetEnableState+0x40>
 800b252:	a801      	add	r0, sp, #4
 800b254:	f005 fc02 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b258:	b006      	add	sp, #24
 800b25a:	bd70      	pop	{r4, r5, r6, pc}

0800b25c <WM_EnableWindow>:
 800b25c:	2101      	movs	r1, #1
 800b25e:	f7ff bfdb 	b.w	800b218 <WM_SetEnableState>

0800b262 <WM_DisableWindow>:
 800b262:	2100      	movs	r1, #0
 800b264:	f7ff bfd8 	b.w	800b218 <WM_SetEnableState>

0800b268 <_cbInvalidateOne>:
 800b268:	f000 bd3f 	b.w	800bcea <WM_InvalidateWindow>

0800b26c <WM_BringToTop>:
 800b26c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b26e:	4605      	mov	r5, r0
 800b270:	2800      	cmp	r0, #0
 800b272:	d032      	beq.n	800b2da <WM_BringToTop+0x6e>
 800b274:	f005 fbe4 	bl	8010a40 <GUI_ALLOC_LockH>
 800b278:	ac02      	add	r4, sp, #8
 800b27a:	4603      	mov	r3, r0
 800b27c:	f844 0d08 	str.w	r0, [r4, #-8]!
 800b280:	6a00      	ldr	r0, [r0, #32]
 800b282:	b908      	cbnz	r0, 800b288 <WM_BringToTop+0x1c>
 800b284:	4668      	mov	r0, sp
 800b286:	e00e      	b.n	800b2a6 <WM_BringToTop+0x3a>
 800b288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b28a:	071a      	lsls	r2, r3, #28
 800b28c:	d411      	bmi.n	800b2b2 <WM_BringToTop+0x46>
 800b28e:	f005 fbd7 	bl	8010a40 <GUI_ALLOC_LockH>
 800b292:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b294:	ae02      	add	r6, sp, #8
 800b296:	071b      	lsls	r3, r3, #28
 800b298:	f846 0d04 	str.w	r0, [r6, #-4]!
 800b29c:	d506      	bpl.n	800b2ac <WM_BringToTop+0x40>
 800b29e:	4668      	mov	r0, sp
 800b2a0:	f005 fbdc 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	f005 fbd9 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b2aa:	e016      	b.n	800b2da <WM_BringToTop+0x6e>
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	f005 fbd5 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b2b2:	9b00      	ldr	r3, [sp, #0]
 800b2b4:	4668      	mov	r0, sp
 800b2b6:	699e      	ldr	r6, [r3, #24]
 800b2b8:	f005 fbd0 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b2bc:	4628      	mov	r0, r5
 800b2be:	f000 fb1f 	bl	800b900 <WM__RemoveWindowFromList>
 800b2c2:	4631      	mov	r1, r6
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	f000 fac9 	bl	800b85c <WM__InsertWindowIntoList>
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	f000 fd0d 	bl	800bcea <WM_InvalidateWindow>
 800b2d0:	4628      	mov	r0, r5
 800b2d2:	4903      	ldr	r1, [pc, #12]	; (800b2e0 <WM_BringToTop+0x74>)
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f009 fc84 	bl	8014be2 <WM_ForEachDesc>
 800b2da:	b002      	add	sp, #8
 800b2dc:	bd70      	pop	{r4, r5, r6, pc}
 800b2de:	bf00      	nop
 800b2e0:	0800b269 	.word	0x0800b269

0800b2e4 <WM_DetachWindow>:
 800b2e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b2e6:	4604      	mov	r4, r0
 800b2e8:	b1f0      	cbz	r0, 800b328 <WM_DetachWindow+0x44>
 800b2ea:	f005 fba9 	bl	8010a40 <GUI_ALLOC_LockH>
 800b2ee:	ab02      	add	r3, sp, #8
 800b2f0:	6985      	ldr	r5, [r0, #24]
 800b2f2:	f843 0d08 	str.w	r0, [r3, #-8]!
 800b2f6:	4668      	mov	r0, sp
 800b2f8:	f005 fbb0 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b2fc:	b1a5      	cbz	r5, 800b328 <WM_DetachWindow+0x44>
 800b2fe:	4620      	mov	r0, r4
 800b300:	f000 fc87 	bl	800bc12 <WM__DetachWindow>
 800b304:	4628      	mov	r0, r5
 800b306:	f005 fb9b 	bl	8010a40 <GUI_ALLOC_LockH>
 800b30a:	4602      	mov	r2, r0
 800b30c:	a802      	add	r0, sp, #8
 800b30e:	8816      	ldrh	r6, [r2, #0]
 800b310:	8855      	ldrh	r5, [r2, #2]
 800b312:	f840 2d04 	str.w	r2, [r0, #-4]!
 800b316:	f005 fba1 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b31a:	b231      	sxth	r1, r6
 800b31c:	b22a      	sxth	r2, r5
 800b31e:	4620      	mov	r0, r4
 800b320:	4249      	negs	r1, r1
 800b322:	4252      	negs	r2, r2
 800b324:	f7ff fe09 	bl	800af3a <WM_MoveWindow>
 800b328:	b002      	add	sp, #8
 800b32a:	bd70      	pop	{r4, r5, r6, pc}

0800b32c <WM_AttachWindow>:
 800b32c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b32e:	4604      	mov	r4, r0
 800b330:	460d      	mov	r5, r1
 800b332:	b351      	cbz	r1, 800b38a <WM_AttachWindow+0x5e>
 800b334:	4281      	cmp	r1, r0
 800b336:	d028      	beq.n	800b38a <WM_AttachWindow+0x5e>
 800b338:	f005 fb82 	bl	8010a40 <GUI_ALLOC_LockH>
 800b33c:	4603      	mov	r3, r0
 800b33e:	a802      	add	r0, sp, #8
 800b340:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b344:	699b      	ldr	r3, [r3, #24]
 800b346:	42ab      	cmp	r3, r5
 800b348:	4668      	mov	r0, sp
 800b34a:	d01c      	beq.n	800b386 <WM_AttachWindow+0x5a>
 800b34c:	f005 fb86 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b350:	4620      	mov	r0, r4
 800b352:	f7ff ffc7 	bl	800b2e4 <WM_DetachWindow>
 800b356:	4629      	mov	r1, r5
 800b358:	4620      	mov	r0, r4
 800b35a:	f000 fa7f 	bl	800b85c <WM__InsertWindowIntoList>
 800b35e:	4628      	mov	r0, r5
 800b360:	f005 fb6e 	bl	8010a40 <GUI_ALLOC_LockH>
 800b364:	ab02      	add	r3, sp, #8
 800b366:	8806      	ldrh	r6, [r0, #0]
 800b368:	f843 0d04 	str.w	r0, [r3, #-4]!
 800b36c:	8845      	ldrh	r5, [r0, #2]
 800b36e:	4618      	mov	r0, r3
 800b370:	f005 fb74 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b374:	4620      	mov	r0, r4
 800b376:	b231      	sxth	r1, r6
 800b378:	b22a      	sxth	r2, r5
 800b37a:	f7ff fdde 	bl	800af3a <WM_MoveWindow>
 800b37e:	4620      	mov	r0, r4
 800b380:	f000 fcb3 	bl	800bcea <WM_InvalidateWindow>
 800b384:	e001      	b.n	800b38a <WM_AttachWindow+0x5e>
 800b386:	f005 fb69 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b38a:	b002      	add	sp, #8
 800b38c:	bd70      	pop	{r4, r5, r6, pc}

0800b38e <WM_AttachWindowAt>:
 800b38e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b390:	4604      	mov	r4, r0
 800b392:	4617      	mov	r7, r2
 800b394:	461e      	mov	r6, r3
 800b396:	460d      	mov	r5, r1
 800b398:	f7ff ffa4 	bl	800b2e4 <WM_DetachWindow>
 800b39c:	4620      	mov	r0, r4
 800b39e:	4639      	mov	r1, r7
 800b3a0:	4632      	mov	r2, r6
 800b3a2:	f7ff fdcc 	bl	800af3e <WM_MoveTo>
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	4629      	mov	r1, r5
 800b3aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b3ae:	f7ff bfbd 	b.w	800b32c <WM_AttachWindow>
	...

0800b3b4 <_OnExit>:
 800b3b4:	4a0a      	ldr	r2, [pc, #40]	; (800b3e0 <_OnExit+0x2c>)
 800b3b6:	490b      	ldr	r1, [pc, #44]	; (800b3e4 <_OnExit+0x30>)
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	7013      	strb	r3, [r2, #0]
 800b3bc:	4a0a      	ldr	r2, [pc, #40]	; (800b3e8 <_OnExit+0x34>)
 800b3be:	600b      	str	r3, [r1, #0]
 800b3c0:	6013      	str	r3, [r2, #0]
 800b3c2:	4a0a      	ldr	r2, [pc, #40]	; (800b3ec <_OnExit+0x38>)
 800b3c4:	604b      	str	r3, [r1, #4]
 800b3c6:	6013      	str	r3, [r2, #0]
 800b3c8:	4a09      	ldr	r2, [pc, #36]	; (800b3f0 <_OnExit+0x3c>)
 800b3ca:	6013      	str	r3, [r2, #0]
 800b3cc:	6053      	str	r3, [r2, #4]
 800b3ce:	4a09      	ldr	r2, [pc, #36]	; (800b3f4 <_OnExit+0x40>)
 800b3d0:	6013      	str	r3, [r2, #0]
 800b3d2:	4a09      	ldr	r2, [pc, #36]	; (800b3f8 <_OnExit+0x44>)
 800b3d4:	6013      	str	r3, [r2, #0]
 800b3d6:	4a09      	ldr	r2, [pc, #36]	; (800b3fc <_OnExit+0x48>)
 800b3d8:	6013      	str	r3, [r2, #0]
 800b3da:	4a09      	ldr	r2, [pc, #36]	; (800b400 <_OnExit+0x4c>)
 800b3dc:	6013      	str	r3, [r2, #0]
 800b3de:	4770      	bx	lr
 800b3e0:	20001604 	.word	0x20001604
 800b3e4:	20021b88 	.word	0x20021b88
 800b3e8:	200015dc 	.word	0x200015dc
 800b3ec:	20021bac 	.word	0x20021bac
 800b3f0:	20021bb4 	.word	0x20021bb4
 800b3f4:	20021bc0 	.word	0x20021bc0
 800b3f8:	20021b74 	.word	0x20021b74
 800b3fc:	20021ba0 	.word	0x20021ba0
 800b400:	20021bb0 	.word	0x20021bb0

0800b404 <_Paint1>:
 800b404:	b510      	push	{r4, lr}
 800b406:	4604      	mov	r4, r0
 800b408:	f005 fb10 	bl	8010a2c <GUI_ALLOC_h2p>
 800b40c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b40e:	4a04      	ldr	r2, [pc, #16]	; (800b420 <_Paint1+0x1c>)
 800b410:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800b414:	4b03      	ldr	r3, [pc, #12]	; (800b424 <_Paint1+0x20>)
 800b416:	4620      	mov	r0, r4
 800b418:	bf08      	it	eq
 800b41a:	4613      	moveq	r3, r2
 800b41c:	4798      	blx	r3
 800b41e:	bd10      	pop	{r4, pc}
 800b420:	0800c271 	.word	0x0800c271
 800b424:	0800c85d 	.word	0x0800c85d

0800b428 <_Findy1>:
 800b428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b42a:	4605      	mov	r5, r0
 800b42c:	b085      	sub	sp, #20
 800b42e:	460c      	mov	r4, r1
 800b430:	4616      	mov	r6, r2
 800b432:	2d00      	cmp	r5, #0
 800b434:	d04c      	beq.n	800b4d0 <_Findy1+0xa8>
 800b436:	4628      	mov	r0, r5
 800b438:	f005 fb02 	bl	8010a40 <GUI_ALLOC_LockH>
 800b43c:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800b43e:	9001      	str	r0, [sp, #4]
 800b440:	07bb      	lsls	r3, r7, #30
 800b442:	4601      	mov	r1, r0
 800b444:	d53d      	bpl.n	800b4c2 <_Findy1+0x9a>
 800b446:	ad02      	add	r5, sp, #8
 800b448:	b126      	cbz	r6, 800b454 <_Findy1+0x2c>
 800b44a:	4628      	mov	r0, r5
 800b44c:	4632      	mov	r2, r6
 800b44e:	f003 fcfd 	bl	800ee4c <GUI__IntersectRects>
 800b452:	e002      	b.n	800b45a <_Findy1+0x32>
 800b454:	c803      	ldmia	r0, {r0, r1}
 800b456:	e885 0003 	stmia.w	r5, {r0, r1}
 800b45a:	4620      	mov	r0, r4
 800b45c:	4629      	mov	r1, r5
 800b45e:	f004 fa5d 	bl	800f91c <GUI_RectsIntersect>
 800b462:	b370      	cbz	r0, 800b4c2 <_Findy1+0x9a>
 800b464:	f017 0f01 	tst.w	r7, #1
 800b468:	9b01      	ldr	r3, [sp, #4]
 800b46a:	d11e      	bne.n	800b4aa <_Findy1+0x82>
 800b46c:	b13e      	cbz	r6, 800b47e <_Findy1+0x56>
 800b46e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800b472:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800b476:	429a      	cmp	r2, r3
 800b478:	bfa8      	it	ge
 800b47a:	4613      	movge	r3, r2
 800b47c:	e001      	b.n	800b482 <_Findy1+0x5a>
 800b47e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b482:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800b486:	4293      	cmp	r3, r2
 800b488:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800b48c:	dd06      	ble.n	800b49c <_Findy1+0x74>
 800b48e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800b492:	b219      	sxth	r1, r3
 800b494:	428a      	cmp	r2, r1
 800b496:	db14      	blt.n	800b4c2 <_Findy1+0x9a>
 800b498:	3b01      	subs	r3, #1
 800b49a:	e004      	b.n	800b4a6 <_Findy1+0x7e>
 800b49c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800b4a0:	b219      	sxth	r1, r3
 800b4a2:	428a      	cmp	r2, r1
 800b4a4:	dd0d      	ble.n	800b4c2 <_Findy1+0x9a>
 800b4a6:	80e3      	strh	r3, [r4, #6]
 800b4a8:	e00b      	b.n	800b4c2 <_Findy1+0x9a>
 800b4aa:	69df      	ldr	r7, [r3, #28]
 800b4ac:	b14f      	cbz	r7, 800b4c2 <_Findy1+0x9a>
 800b4ae:	4638      	mov	r0, r7
 800b4b0:	4621      	mov	r1, r4
 800b4b2:	462a      	mov	r2, r5
 800b4b4:	f7ff ffb8 	bl	800b428 <_Findy1>
 800b4b8:	4638      	mov	r0, r7
 800b4ba:	f005 fab7 	bl	8010a2c <GUI_ALLOC_h2p>
 800b4be:	6a07      	ldr	r7, [r0, #32]
 800b4c0:	e7f4      	b.n	800b4ac <_Findy1+0x84>
 800b4c2:	a804      	add	r0, sp, #16
 800b4c4:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 800b4c8:	6a1d      	ldr	r5, [r3, #32]
 800b4ca:	f005 fac7 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b4ce:	e7b0      	b.n	800b432 <_Findy1+0xa>
 800b4d0:	b005      	add	sp, #20
 800b4d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b4d4 <_Findx0>:
 800b4d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b4d8:	4604      	mov	r4, r0
 800b4da:	460f      	mov	r7, r1
 800b4dc:	4690      	mov	r8, r2
 800b4de:	2500      	movs	r5, #0
 800b4e0:	2c00      	cmp	r4, #0
 800b4e2:	d037      	beq.n	800b554 <_Findx0+0x80>
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	f005 faab 	bl	8010a40 <GUI_ALLOC_LockH>
 800b4ea:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800b4ec:	9001      	str	r0, [sp, #4]
 800b4ee:	07b2      	lsls	r2, r6, #30
 800b4f0:	4601      	mov	r1, r0
 800b4f2:	d528      	bpl.n	800b546 <_Findx0+0x72>
 800b4f4:	ac02      	add	r4, sp, #8
 800b4f6:	f1b8 0f00 	cmp.w	r8, #0
 800b4fa:	d004      	beq.n	800b506 <_Findx0+0x32>
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	4642      	mov	r2, r8
 800b500:	f003 fca4 	bl	800ee4c <GUI__IntersectRects>
 800b504:	e002      	b.n	800b50c <_Findx0+0x38>
 800b506:	c803      	ldmia	r0, {r0, r1}
 800b508:	e884 0003 	stmia.w	r4, {r0, r1}
 800b50c:	4638      	mov	r0, r7
 800b50e:	4621      	mov	r1, r4
 800b510:	f004 fa04 	bl	800f91c <GUI_RectsIntersect>
 800b514:	b1b8      	cbz	r0, 800b546 <_Findx0+0x72>
 800b516:	07f3      	lsls	r3, r6, #31
 800b518:	d405      	bmi.n	800b526 <_Findx0+0x52>
 800b51a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b51e:	3301      	adds	r3, #1
 800b520:	803b      	strh	r3, [r7, #0]
 800b522:	2501      	movs	r5, #1
 800b524:	e00f      	b.n	800b546 <_Findx0+0x72>
 800b526:	9b01      	ldr	r3, [sp, #4]
 800b528:	69de      	ldr	r6, [r3, #28]
 800b52a:	b166      	cbz	r6, 800b546 <_Findx0+0x72>
 800b52c:	4630      	mov	r0, r6
 800b52e:	4639      	mov	r1, r7
 800b530:	4622      	mov	r2, r4
 800b532:	f7ff ffcf 	bl	800b4d4 <_Findx0>
 800b536:	2800      	cmp	r0, #0
 800b538:	4630      	mov	r0, r6
 800b53a:	bf18      	it	ne
 800b53c:	2501      	movne	r5, #1
 800b53e:	f005 fa75 	bl	8010a2c <GUI_ALLOC_h2p>
 800b542:	6a06      	ldr	r6, [r0, #32]
 800b544:	e7f1      	b.n	800b52a <_Findx0+0x56>
 800b546:	a804      	add	r0, sp, #16
 800b548:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 800b54c:	6a1c      	ldr	r4, [r3, #32]
 800b54e:	f005 fa85 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b552:	e7c5      	b.n	800b4e0 <_Findx0+0xc>
 800b554:	4628      	mov	r0, r5
 800b556:	b004      	add	sp, #16
 800b558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b55c <_Findx1>:
 800b55c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b55e:	4604      	mov	r4, r0
 800b560:	b085      	sub	sp, #20
 800b562:	460e      	mov	r6, r1
 800b564:	4617      	mov	r7, r2
 800b566:	2c00      	cmp	r4, #0
 800b568:	d031      	beq.n	800b5ce <_Findx1+0x72>
 800b56a:	4620      	mov	r0, r4
 800b56c:	f005 fa68 	bl	8010a40 <GUI_ALLOC_LockH>
 800b570:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800b572:	9001      	str	r0, [sp, #4]
 800b574:	07aa      	lsls	r2, r5, #30
 800b576:	4601      	mov	r1, r0
 800b578:	d522      	bpl.n	800b5c0 <_Findx1+0x64>
 800b57a:	ac02      	add	r4, sp, #8
 800b57c:	b127      	cbz	r7, 800b588 <_Findx1+0x2c>
 800b57e:	4620      	mov	r0, r4
 800b580:	463a      	mov	r2, r7
 800b582:	f003 fc63 	bl	800ee4c <GUI__IntersectRects>
 800b586:	e002      	b.n	800b58e <_Findx1+0x32>
 800b588:	c803      	ldmia	r0, {r0, r1}
 800b58a:	e884 0003 	stmia.w	r4, {r0, r1}
 800b58e:	4630      	mov	r0, r6
 800b590:	4621      	mov	r1, r4
 800b592:	f004 f9c3 	bl	800f91c <GUI_RectsIntersect>
 800b596:	b198      	cbz	r0, 800b5c0 <_Findx1+0x64>
 800b598:	07eb      	lsls	r3, r5, #31
 800b59a:	d404      	bmi.n	800b5a6 <_Findx1+0x4a>
 800b59c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800b5a0:	3b01      	subs	r3, #1
 800b5a2:	80b3      	strh	r3, [r6, #4]
 800b5a4:	e00c      	b.n	800b5c0 <_Findx1+0x64>
 800b5a6:	9b01      	ldr	r3, [sp, #4]
 800b5a8:	69dd      	ldr	r5, [r3, #28]
 800b5aa:	b14d      	cbz	r5, 800b5c0 <_Findx1+0x64>
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	4631      	mov	r1, r6
 800b5b0:	4622      	mov	r2, r4
 800b5b2:	f7ff ffd3 	bl	800b55c <_Findx1>
 800b5b6:	4628      	mov	r0, r5
 800b5b8:	f005 fa38 	bl	8010a2c <GUI_ALLOC_h2p>
 800b5bc:	6a05      	ldr	r5, [r0, #32]
 800b5be:	e7f4      	b.n	800b5aa <_Findx1+0x4e>
 800b5c0:	a804      	add	r0, sp, #16
 800b5c2:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 800b5c6:	6a1c      	ldr	r4, [r3, #32]
 800b5c8:	f005 fa48 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b5cc:	e7cb      	b.n	800b566 <_Findx1+0xa>
 800b5ce:	b005      	add	sp, #20
 800b5d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b5d4 <_Paint1Trans>:
 800b5d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b5d8:	4d21      	ldr	r5, [pc, #132]	; (800b660 <_Paint1Trans+0x8c>)
 800b5da:	682b      	ldr	r3, [r5, #0]
 800b5dc:	4606      	mov	r6, r0
 800b5de:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b5e0:	f005 fa2e 	bl	8010a40 <GUI_ALLOC_LockH>
 800b5e4:	9000      	str	r0, [sp, #0]
 800b5e6:	4630      	mov	r0, r6
 800b5e8:	f005 fa2a 	bl	8010a40 <GUI_ALLOC_LockH>
 800b5ec:	ac02      	add	r4, sp, #8
 800b5ee:	4601      	mov	r1, r0
 800b5f0:	9001      	str	r0, [sp, #4]
 800b5f2:	f854 0d08 	ldr.w	r0, [r4, #-8]!
 800b5f6:	3008      	adds	r0, #8
 800b5f8:	f004 f990 	bl	800f91c <GUI_RectsIntersect>
 800b5fc:	4607      	mov	r7, r0
 800b5fe:	b328      	cbz	r0, 800b64c <_Paint1Trans+0x78>
 800b600:	9901      	ldr	r1, [sp, #4]
 800b602:	9a00      	ldr	r2, [sp, #0]
 800b604:	682b      	ldr	r3, [r5, #0]
 800b606:	4c17      	ldr	r4, [pc, #92]	; (800b664 <_Paint1Trans+0x90>)
 800b608:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 800b60a:	f8d3 804c 	ldr.w	r8, [r3, #76]	; 0x4c
 800b60e:	f101 0008 	add.w	r0, r1, #8
 800b612:	3208      	adds	r2, #8
 800b614:	f003 fc1a 	bl	800ee4c <GUI__IntersectRects>
 800b618:	4668      	mov	r0, sp
 800b61a:	f005 fa1f 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b61e:	9a01      	ldr	r2, [sp, #4]
 800b620:	682b      	ldr	r3, [r5, #0]
 800b622:	f9b2 1000 	ldrsh.w	r1, [r2]
 800b626:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800b62a:	64d9      	str	r1, [r3, #76]	; 0x4c
 800b62c:	651a      	str	r2, [r3, #80]	; 0x50
 800b62e:	a801      	add	r0, sp, #4
 800b630:	6026      	str	r6, [r4, #0]
 800b632:	f005 fa13 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b636:	4630      	mov	r0, r6
 800b638:	f7ff fee4 	bl	800b404 <_Paint1>
 800b63c:	2300      	movs	r3, #0
 800b63e:	6023      	str	r3, [r4, #0]
 800b640:	682b      	ldr	r3, [r5, #0]
 800b642:	651f      	str	r7, [r3, #80]	; 0x50
 800b644:	f8c3 804c 	str.w	r8, [r3, #76]	; 0x4c
 800b648:	2701      	movs	r7, #1
 800b64a:	e005      	b.n	800b658 <_Paint1Trans+0x84>
 800b64c:	4668      	mov	r0, sp
 800b64e:	f005 fa05 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b652:	a801      	add	r0, sp, #4
 800b654:	f005 fa02 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b658:	4638      	mov	r0, r7
 800b65a:	b002      	add	sp, #8
 800b65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b660:	20000308 	.word	0x20000308
 800b664:	20021b74 	.word	0x20021b74

0800b668 <_PaintTransChildren>:
 800b668:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800b66c:	4606      	mov	r6, r0
 800b66e:	f005 f9e7 	bl	8010a40 <GUI_ALLOC_LockH>
 800b672:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b674:	9001      	str	r0, [sp, #4]
 800b676:	079b      	lsls	r3, r3, #30
 800b678:	d405      	bmi.n	800b686 <_PaintTransChildren+0x1e>
 800b67a:	a801      	add	r0, sp, #4
 800b67c:	f005 f9ee 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b680:	b002      	add	sp, #8
 800b682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b686:	69c4      	ldr	r4, [r0, #28]
 800b688:	2c00      	cmp	r4, #0
 800b68a:	d0f6      	beq.n	800b67a <_PaintTransChildren+0x12>
 800b68c:	4620      	mov	r0, r4
 800b68e:	f005 f9d7 	bl	8010a40 <GUI_ALLOC_LockH>
 800b692:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b694:	ad02      	add	r5, sp, #8
 800b696:	f003 0303 	and.w	r3, r3, #3
 800b69a:	2b03      	cmp	r3, #3
 800b69c:	f845 0d08 	str.w	r0, [r5, #-8]!
 800b6a0:	d137      	bne.n	800b712 <_PaintTransChildren+0xaa>
 800b6a2:	9901      	ldr	r1, [sp, #4]
 800b6a4:	3108      	adds	r1, #8
 800b6a6:	f004 f939 	bl	800f91c <GUI_RectsIntersect>
 800b6aa:	2800      	cmp	r0, #0
 800b6ac:	d031      	beq.n	800b712 <_PaintTransChildren+0xaa>
 800b6ae:	a802      	add	r0, sp, #8
 800b6b0:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800b6b4:	f8b3 9008 	ldrh.w	r9, [r3, #8]
 800b6b8:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 800b6bc:	899f      	ldrh	r7, [r3, #12]
 800b6be:	f8b3 a00e 	ldrh.w	sl, [r3, #14]
 800b6c2:	f005 f9cb 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b6c6:	4668      	mov	r0, sp
 800b6c8:	f005 f9c8 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	f7ff ff81 	bl	800b5d4 <_Paint1Trans>
 800b6d2:	b170      	cbz	r0, 800b6f2 <_PaintTransChildren+0x8a>
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	f005 f9a9 	bl	8010a2c <GUI_ALLOC_h2p>
 800b6da:	9000      	str	r0, [sp, #0]
 800b6dc:	4620      	mov	r0, r4
 800b6de:	f7ff ffc3 	bl	800b668 <_PaintTransChildren>
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	f005 f9a2 	bl	8010a2c <GUI_ALLOC_h2p>
 800b6e8:	9000      	str	r0, [sp, #0]
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	f005 f99e 	bl	8010a2c <GUI_ALLOC_h2p>
 800b6f0:	9001      	str	r0, [sp, #4]
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	f005 f9a4 	bl	8010a40 <GUI_ALLOC_LockH>
 800b6f8:	9001      	str	r0, [sp, #4]
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	f005 f9a0 	bl	8010a40 <GUI_ALLOC_LockH>
 800b700:	9b01      	ldr	r3, [sp, #4]
 800b702:	9000      	str	r0, [sp, #0]
 800b704:	f8a3 9008 	strh.w	r9, [r3, #8]
 800b708:	f8a3 800a 	strh.w	r8, [r3, #10]
 800b70c:	819f      	strh	r7, [r3, #12]
 800b70e:	f8a3 a00e 	strh.w	sl, [r3, #14]
 800b712:	9b00      	ldr	r3, [sp, #0]
 800b714:	4668      	mov	r0, sp
 800b716:	6a1c      	ldr	r4, [r3, #32]
 800b718:	f005 f9a0 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b71c:	e7b4      	b.n	800b688 <_PaintTransChildren+0x20>
	...

0800b720 <WM__PaintWinAndOverlays>:
 800b720:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b722:	4604      	mov	r4, r0
 800b724:	f005 f98c 	bl	8010a40 <GUI_ALLOC_LockH>
 800b728:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800b72a:	9001      	str	r0, [sp, #4]
 800b72c:	f640 0301 	movw	r3, #2049	; 0x801
 800b730:	4013      	ands	r3, r2
 800b732:	2b01      	cmp	r3, #1
 800b734:	d005      	beq.n	800b742 <WM__PaintWinAndOverlays+0x22>
 800b736:	a801      	add	r0, sp, #4
 800b738:	f005 f990 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b73c:	4620      	mov	r0, r4
 800b73e:	f7ff fe61 	bl	800b404 <_Paint1>
 800b742:	4b14      	ldr	r3, [pc, #80]	; (800b794 <WM__PaintWinAndOverlays+0x74>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	b313      	cbz	r3, 800b78e <WM__PaintWinAndOverlays+0x6e>
 800b748:	4620      	mov	r0, r4
 800b74a:	f7ff ff8d 	bl	800b668 <_PaintTransChildren>
 800b74e:	4620      	mov	r0, r4
 800b750:	f005 f96c 	bl	8010a2c <GUI_ALLOC_h2p>
 800b754:	6985      	ldr	r5, [r0, #24]
 800b756:	6a04      	ldr	r4, [r0, #32]
 800b758:	b1cd      	cbz	r5, 800b78e <WM__PaintWinAndOverlays+0x6e>
 800b75a:	b194      	cbz	r4, 800b782 <WM__PaintWinAndOverlays+0x62>
 800b75c:	4620      	mov	r0, r4
 800b75e:	f005 f965 	bl	8010a2c <GUI_ALLOC_h2p>
 800b762:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b764:	f003 0303 	and.w	r3, r3, #3
 800b768:	2b03      	cmp	r3, #3
 800b76a:	d102      	bne.n	800b772 <WM__PaintWinAndOverlays+0x52>
 800b76c:	4620      	mov	r0, r4
 800b76e:	f7ff ff31 	bl	800b5d4 <_Paint1Trans>
 800b772:	4620      	mov	r0, r4
 800b774:	f7ff ff78 	bl	800b668 <_PaintTransChildren>
 800b778:	4620      	mov	r0, r4
 800b77a:	f005 f957 	bl	8010a2c <GUI_ALLOC_h2p>
 800b77e:	6a04      	ldr	r4, [r0, #32]
 800b780:	e7eb      	b.n	800b75a <WM__PaintWinAndOverlays+0x3a>
 800b782:	4628      	mov	r0, r5
 800b784:	f005 f952 	bl	8010a2c <GUI_ALLOC_h2p>
 800b788:	6a04      	ldr	r4, [r0, #32]
 800b78a:	6985      	ldr	r5, [r0, #24]
 800b78c:	e7e4      	b.n	800b758 <WM__PaintWinAndOverlays+0x38>
 800b78e:	b003      	add	sp, #12
 800b790:	bd30      	pop	{r4, r5, pc}
 800b792:	bf00      	nop
 800b794:	20021bc0 	.word	0x20021bc0

0800b798 <_cbPaintMemDev>:
 800b798:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800b79c:	4d17      	ldr	r5, [pc, #92]	; (800b7fc <_cbPaintMemDev+0x64>)
 800b79e:	682b      	ldr	r3, [r5, #0]
 800b7a0:	4606      	mov	r6, r0
 800b7a2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b7a4:	f005 f94c 	bl	8010a40 <GUI_ALLOC_LockH>
 800b7a8:	682a      	ldr	r2, [r5, #0]
 800b7aa:	f8b0 a008 	ldrh.w	sl, [r0, #8]
 800b7ae:	f8b0 900a 	ldrh.w	r9, [r0, #10]
 800b7b2:	f8b0 800c 	ldrh.w	r8, [r0, #12]
 800b7b6:	89c7      	ldrh	r7, [r0, #14]
 800b7b8:	ac02      	add	r4, sp, #8
 800b7ba:	3208      	adds	r2, #8
 800b7bc:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b7c0:	f100 0308 	add.w	r3, r0, #8
 800b7c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b7c8:	e883 0003 	stmia.w	r3, {r0, r1}
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	f005 f945 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b7d2:	6830      	ldr	r0, [r6, #0]
 800b7d4:	f7ff ffa4 	bl	800b720 <WM__PaintWinAndOverlays>
 800b7d8:	682b      	ldr	r3, [r5, #0]
 800b7da:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b7dc:	f005 f930 	bl	8010a40 <GUI_ALLOC_LockH>
 800b7e0:	9001      	str	r0, [sp, #4]
 800b7e2:	f8a0 a008 	strh.w	sl, [r0, #8]
 800b7e6:	f8a0 900a 	strh.w	r9, [r0, #10]
 800b7ea:	f8a0 800c 	strh.w	r8, [r0, #12]
 800b7ee:	81c7      	strh	r7, [r0, #14]
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f005 f933 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b7f6:	b002      	add	sp, #8
 800b7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7fc:	20000308 	.word	0x20000308

0800b800 <WM__ClipAtParentBorders>:
 800b800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b802:	4607      	mov	r7, r0
 800b804:	460d      	mov	r5, r1
 800b806:	4628      	mov	r0, r5
 800b808:	f005 f91a 	bl	8010a40 <GUI_ALLOC_LockH>
 800b80c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b80e:	ac02      	add	r4, sp, #8
 800b810:	f013 0602 	ands.w	r6, r3, #2
 800b814:	4601      	mov	r1, r0
 800b816:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b81a:	d104      	bne.n	800b826 <WM__ClipAtParentBorders+0x26>
 800b81c:	4620      	mov	r0, r4
 800b81e:	f005 f91d 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b822:	4630      	mov	r0, r6
 800b824:	e016      	b.n	800b854 <WM__ClipAtParentBorders+0x54>
 800b826:	4638      	mov	r0, r7
 800b828:	f003 fb42 	bl	800eeb0 <GUI__IntersectRect>
 800b82c:	9b01      	ldr	r3, [sp, #4]
 800b82e:	699e      	ldr	r6, [r3, #24]
 800b830:	4620      	mov	r0, r4
 800b832:	b956      	cbnz	r6, 800b84a <WM__ClipAtParentBorders+0x4a>
 800b834:	f005 f912 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b838:	4b07      	ldr	r3, [pc, #28]	; (800b858 <WM__ClipAtParentBorders+0x58>)
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	4295      	cmp	r5, r2
 800b83e:	d008      	beq.n	800b852 <WM__ClipAtParentBorders+0x52>
 800b840:	6858      	ldr	r0, [r3, #4]
 800b842:	1a2b      	subs	r3, r5, r0
 800b844:	4258      	negs	r0, r3
 800b846:	4158      	adcs	r0, r3
 800b848:	e004      	b.n	800b854 <WM__ClipAtParentBorders+0x54>
 800b84a:	f005 f907 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b84e:	4635      	mov	r5, r6
 800b850:	e7d9      	b.n	800b806 <WM__ClipAtParentBorders+0x6>
 800b852:	2001      	movs	r0, #1
 800b854:	b003      	add	sp, #12
 800b856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b858:	20021b78 	.word	0x20021b78

0800b85c <WM__InsertWindowIntoList>:
 800b85c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b85e:	4604      	mov	r4, r0
 800b860:	b085      	sub	sp, #20
 800b862:	460d      	mov	r5, r1
 800b864:	2900      	cmp	r1, #0
 800b866:	d049      	beq.n	800b8fc <WM__InsertWindowIntoList+0xa0>
 800b868:	f005 f8ea 	bl	8010a40 <GUI_ALLOC_LockH>
 800b86c:	2300      	movs	r3, #0
 800b86e:	6203      	str	r3, [r0, #32]
 800b870:	6185      	str	r5, [r0, #24]
 800b872:	9001      	str	r0, [sp, #4]
 800b874:	4628      	mov	r0, r5
 800b876:	f005 f8e3 	bl	8010a40 <GUI_ALLOC_LockH>
 800b87a:	9b01      	ldr	r3, [sp, #4]
 800b87c:	69c5      	ldr	r5, [r0, #28]
 800b87e:	9002      	str	r0, [sp, #8]
 800b880:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 800b882:	b92d      	cbnz	r5, 800b890 <WM__InsertWindowIntoList+0x34>
 800b884:	61c4      	str	r4, [r0, #28]
 800b886:	a801      	add	r0, sp, #4
 800b888:	f005 f8e8 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b88c:	a802      	add	r0, sp, #8
 800b88e:	e033      	b.n	800b8f8 <WM__InsertWindowIntoList+0x9c>
 800b890:	4628      	mov	r0, r5
 800b892:	f005 f8d5 	bl	8010a40 <GUI_ALLOC_LockH>
 800b896:	ae04      	add	r6, sp, #16
 800b898:	f007 0708 	and.w	r7, r7, #8
 800b89c:	f846 0d04 	str.w	r0, [r6, #-4]!
 800b8a0:	b977      	cbnz	r7, 800b8c0 <WM__InsertWindowIntoList+0x64>
 800b8a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b8a4:	071a      	lsls	r2, r3, #28
 800b8a6:	d50b      	bpl.n	800b8c0 <WM__InsertWindowIntoList+0x64>
 800b8a8:	9b01      	ldr	r3, [sp, #4]
 800b8aa:	621d      	str	r5, [r3, #32]
 800b8ac:	9b02      	ldr	r3, [sp, #8]
 800b8ae:	a801      	add	r0, sp, #4
 800b8b0:	61dc      	str	r4, [r3, #28]
 800b8b2:	f005 f8d3 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b8b6:	a802      	add	r0, sp, #8
 800b8b8:	f005 f8d0 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b8bc:	4630      	mov	r0, r6
 800b8be:	e01b      	b.n	800b8f8 <WM__InsertWindowIntoList+0x9c>
 800b8c0:	a802      	add	r0, sp, #8
 800b8c2:	f005 f8cb 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b8c6:	4630      	mov	r0, r6
 800b8c8:	f005 f8c8 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	f005 f8ad 	bl	8010a2c <GUI_ALLOC_h2p>
 800b8d2:	9003      	str	r0, [sp, #12]
 800b8d4:	9b03      	ldr	r3, [sp, #12]
 800b8d6:	6a1d      	ldr	r5, [r3, #32]
 800b8d8:	b90d      	cbnz	r5, 800b8de <WM__InsertWindowIntoList+0x82>
 800b8da:	621c      	str	r4, [r3, #32]
 800b8dc:	e00b      	b.n	800b8f6 <WM__InsertWindowIntoList+0x9a>
 800b8de:	4628      	mov	r0, r5
 800b8e0:	f005 f8a4 	bl	8010a2c <GUI_ALLOC_h2p>
 800b8e4:	2f00      	cmp	r7, #0
 800b8e6:	d1f4      	bne.n	800b8d2 <WM__InsertWindowIntoList+0x76>
 800b8e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b8ea:	071b      	lsls	r3, r3, #28
 800b8ec:	d5f1      	bpl.n	800b8d2 <WM__InsertWindowIntoList+0x76>
 800b8ee:	9b03      	ldr	r3, [sp, #12]
 800b8f0:	621c      	str	r4, [r3, #32]
 800b8f2:	9b01      	ldr	r3, [sp, #4]
 800b8f4:	621d      	str	r5, [r3, #32]
 800b8f6:	a801      	add	r0, sp, #4
 800b8f8:	f005 f8b0 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b8fc:	b005      	add	sp, #20
 800b8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b900 <WM__RemoveWindowFromList>:
 800b900:	b570      	push	{r4, r5, r6, lr}
 800b902:	4604      	mov	r4, r0
 800b904:	f005 f892 	bl	8010a2c <GUI_ALLOC_h2p>
 800b908:	4605      	mov	r5, r0
 800b90a:	6980      	ldr	r0, [r0, #24]
 800b90c:	b1a8      	cbz	r0, 800b93a <WM__RemoveWindowFromList+0x3a>
 800b90e:	f005 f88d 	bl	8010a2c <GUI_ALLOC_h2p>
 800b912:	69c3      	ldr	r3, [r0, #28]
 800b914:	42a3      	cmp	r3, r4
 800b916:	4606      	mov	r6, r0
 800b918:	d105      	bne.n	800b926 <WM__RemoveWindowFromList+0x26>
 800b91a:	4618      	mov	r0, r3
 800b91c:	f005 f886 	bl	8010a2c <GUI_ALLOC_h2p>
 800b920:	6a03      	ldr	r3, [r0, #32]
 800b922:	61f3      	str	r3, [r6, #28]
 800b924:	bd70      	pop	{r4, r5, r6, pc}
 800b926:	b143      	cbz	r3, 800b93a <WM__RemoveWindowFromList+0x3a>
 800b928:	4618      	mov	r0, r3
 800b92a:	f005 f87f 	bl	8010a2c <GUI_ALLOC_h2p>
 800b92e:	6a03      	ldr	r3, [r0, #32]
 800b930:	42a3      	cmp	r3, r4
 800b932:	d1f8      	bne.n	800b926 <WM__RemoveWindowFromList+0x26>
 800b934:	6a2b      	ldr	r3, [r5, #32]
 800b936:	6203      	str	r3, [r0, #32]
 800b938:	bd70      	pop	{r4, r5, r6, pc}
 800b93a:	bd70      	pop	{r4, r5, r6, pc}

0800b93c <WM__Client2Screen>:
 800b93c:	4603      	mov	r3, r0
 800b93e:	4608      	mov	r0, r1
 800b940:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800b944:	f9b3 1000 	ldrsh.w	r1, [r3]
 800b948:	f004 b8e4 	b.w	800fb14 <GUI_MoveRect>

0800b94c <_SetClipRectUserIntersect>:
 800b94c:	4b11      	ldr	r3, [pc, #68]	; (800b994 <_SetClipRectUserIntersect+0x48>)
 800b94e:	b530      	push	{r4, r5, lr}
 800b950:	681c      	ldr	r4, [r3, #0]
 800b952:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b954:	b085      	sub	sp, #20
 800b956:	4605      	mov	r5, r0
 800b958:	b1ba      	cbz	r2, 800b98a <_SetClipRectUserIntersect+0x3e>
 800b95a:	6810      	ldr	r0, [r2, #0]
 800b95c:	6851      	ldr	r1, [r2, #4]
 800b95e:	ab02      	add	r3, sp, #8
 800b960:	c303      	stmia	r3!, {r0, r1}
 800b962:	4b0d      	ldr	r3, [pc, #52]	; (800b998 <_SetClipRectUserIntersect+0x4c>)
 800b964:	6818      	ldr	r0, [r3, #0]
 800b966:	b900      	cbnz	r0, 800b96a <_SetClipRectUserIntersect+0x1e>
 800b968:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b96a:	f005 f869 	bl	8010a40 <GUI_ALLOC_LockH>
 800b96e:	ac04      	add	r4, sp, #16
 800b970:	a902      	add	r1, sp, #8
 800b972:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800b976:	f7ff ffe1 	bl	800b93c <WM__Client2Screen>
 800b97a:	4620      	mov	r0, r4
 800b97c:	f005 f86e 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b980:	a802      	add	r0, sp, #8
 800b982:	4629      	mov	r1, r5
 800b984:	f003 fa94 	bl	800eeb0 <GUI__IntersectRect>
 800b988:	a802      	add	r0, sp, #8
 800b98a:	f002 fc69 	bl	800e260 <LCD_SetClipRectEx>
 800b98e:	b005      	add	sp, #20
 800b990:	bd30      	pop	{r4, r5, pc}
 800b992:	bf00      	nop
 800b994:	20000308 	.word	0x20000308
 800b998:	20021b74 	.word	0x20021b74

0800b99c <WM__ActivateClipRect>:
 800b99c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b99e:	4b0e      	ldr	r3, [pc, #56]	; (800b9d8 <WM__ActivateClipRect+0x3c>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800b9a6:	b10a      	cbz	r2, 800b9ac <WM__ActivateClipRect+0x10>
 800b9a8:	480c      	ldr	r0, [pc, #48]	; (800b9dc <WM__ActivateClipRect+0x40>)
 800b9aa:	e011      	b.n	800b9d0 <WM__ActivateClipRect+0x34>
 800b9ac:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b9ae:	f005 f847 	bl	8010a40 <GUI_ALLOC_LockH>
 800b9b2:	9001      	str	r0, [sp, #4]
 800b9b4:	c803      	ldmia	r0, {r0, r1}
 800b9b6:	ac02      	add	r4, sp, #8
 800b9b8:	e884 0003 	stmia.w	r4, {r0, r1}
 800b9bc:	a801      	add	r0, sp, #4
 800b9be:	f005 f84d 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800b9c2:	4b07      	ldr	r3, [pc, #28]	; (800b9e0 <WM__ActivateClipRect+0x44>)
 800b9c4:	6819      	ldr	r1, [r3, #0]
 800b9c6:	b111      	cbz	r1, 800b9ce <WM__ActivateClipRect+0x32>
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	f7ff ff19 	bl	800b800 <WM__ClipAtParentBorders>
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f7ff ffbc 	bl	800b94c <_SetClipRectUserIntersect>
 800b9d4:	b004      	add	sp, #16
 800b9d6:	bd10      	pop	{r4, pc}
 800b9d8:	20000308 	.word	0x20000308
 800b9dc:	200015e8 	.word	0x200015e8
 800b9e0:	20021b74 	.word	0x20021b74

0800b9e4 <WM__IsWindow>:
 800b9e4:	4b06      	ldr	r3, [pc, #24]	; (800ba00 <WM__IsWindow+0x1c>)
 800b9e6:	b510      	push	{r4, lr}
 800b9e8:	4604      	mov	r4, r0
 800b9ea:	6818      	ldr	r0, [r3, #0]
 800b9ec:	b128      	cbz	r0, 800b9fa <WM__IsWindow+0x16>
 800b9ee:	42a0      	cmp	r0, r4
 800b9f0:	d004      	beq.n	800b9fc <WM__IsWindow+0x18>
 800b9f2:	f005 f81b 	bl	8010a2c <GUI_ALLOC_h2p>
 800b9f6:	6940      	ldr	r0, [r0, #20]
 800b9f8:	e7f8      	b.n	800b9ec <WM__IsWindow+0x8>
 800b9fa:	bd10      	pop	{r4, pc}
 800b9fc:	2001      	movs	r0, #1
 800b9fe:	bd10      	pop	{r4, pc}
 800ba00:	20021b94 	.word	0x20021b94

0800ba04 <WM__InvalidateDrawAndDescs>:
 800ba04:	b513      	push	{r0, r1, r4, lr}
 800ba06:	4604      	mov	r4, r0
 800ba08:	b300      	cbz	r0, 800ba4c <WM__InvalidateDrawAndDescs+0x48>
 800ba0a:	f005 f819 	bl	8010a40 <GUI_ALLOC_LockH>
 800ba0e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800ba10:	9001      	str	r0, [sp, #4]
 800ba12:	0793      	lsls	r3, r2, #30
 800ba14:	d517      	bpl.n	800ba46 <WM__InvalidateDrawAndDescs+0x42>
 800ba16:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800ba18:	b140      	cbz	r0, 800ba2c <WM__InvalidateDrawAndDescs+0x28>
 800ba1a:	4b0d      	ldr	r3, [pc, #52]	; (800ba50 <WM__InvalidateDrawAndDescs+0x4c>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	42a3      	cmp	r3, r4
 800ba20:	d004      	beq.n	800ba2c <WM__InvalidateDrawAndDescs+0x28>
 800ba22:	f001 fdcb 	bl	800d5bc <GUI_MEMDEV_Delete>
 800ba26:	9b01      	ldr	r3, [sp, #4]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	625a      	str	r2, [r3, #36]	; 0x24
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f7ff fb73 	bl	800b118 <WM_GetFirstChild>
 800ba32:	4604      	mov	r4, r0
 800ba34:	b13c      	cbz	r4, 800ba46 <WM__InvalidateDrawAndDescs+0x42>
 800ba36:	4620      	mov	r0, r4
 800ba38:	f7ff ffe4 	bl	800ba04 <WM__InvalidateDrawAndDescs>
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	f004 fff5 	bl	8010a2c <GUI_ALLOC_h2p>
 800ba42:	6a04      	ldr	r4, [r0, #32]
 800ba44:	e7f6      	b.n	800ba34 <WM__InvalidateDrawAndDescs+0x30>
 800ba46:	a801      	add	r0, sp, #4
 800ba48:	f005 f808 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800ba4c:	b002      	add	sp, #8
 800ba4e:	bd10      	pop	{r4, pc}
 800ba50:	20021bbc 	.word	0x20021bbc

0800ba54 <WM__RectIsNZ>:
 800ba54:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ba58:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	dc08      	bgt.n	800ba72 <WM__RectIsNZ+0x1e>
 800ba60:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800ba64:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	bfcc      	ite	gt
 800ba6c:	2000      	movgt	r0, #0
 800ba6e:	2001      	movle	r0, #1
 800ba70:	4770      	bx	lr
 800ba72:	2000      	movs	r0, #0
 800ba74:	4770      	bx	lr
	...

0800ba78 <_Invalidate1Abs>:
 800ba78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba7a:	b085      	sub	sp, #20
 800ba7c:	4606      	mov	r6, r0
 800ba7e:	460d      	mov	r5, r1
 800ba80:	4617      	mov	r7, r2
 800ba82:	f004 ffd3 	bl	8010a2c <GUI_ALLOC_h2p>
 800ba86:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ba88:	9001      	str	r0, [sp, #4]
 800ba8a:	07a3      	lsls	r3, r4, #30
 800ba8c:	d534      	bpl.n	800baf8 <_Invalidate1Abs+0x80>
 800ba8e:	4628      	mov	r0, r5
 800ba90:	f7ff ffe0 	bl	800ba54 <WM__RectIsNZ>
 800ba94:	2800      	cmp	r0, #0
 800ba96:	d02f      	beq.n	800baf8 <_Invalidate1Abs+0x80>
 800ba98:	f640 0301 	movw	r3, #2049	; 0x801
 800ba9c:	4023      	ands	r3, r4
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d02a      	beq.n	800baf8 <_Invalidate1Abs+0x80>
 800baa2:	4630      	mov	r0, r6
 800baa4:	f004 ffcc 	bl	8010a40 <GUI_ALLOC_LockH>
 800baa8:	ac02      	add	r4, sp, #8
 800baaa:	4602      	mov	r2, r0
 800baac:	9001      	str	r0, [sp, #4]
 800baae:	4629      	mov	r1, r5
 800bab0:	4620      	mov	r0, r4
 800bab2:	f003 f9cb 	bl	800ee4c <GUI__IntersectRects>
 800bab6:	4620      	mov	r0, r4
 800bab8:	f7ff ffcc 	bl	800ba54 <WM__RectIsNZ>
 800babc:	b1c8      	cbz	r0, 800baf2 <_Invalidate1Abs+0x7a>
 800babe:	9b01      	ldr	r3, [sp, #4]
 800bac0:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 800bac2:	f244 0120 	movw	r1, #16416	; 0x4020
 800bac6:	4031      	ands	r1, r6
 800bac8:	f103 0508 	add.w	r5, r3, #8
 800bacc:	b129      	cbz	r1, 800bada <_Invalidate1Abs+0x62>
 800bace:	4628      	mov	r0, r5
 800bad0:	4629      	mov	r1, r5
 800bad2:	4622      	mov	r2, r4
 800bad4:	f004 f82e 	bl	800fb34 <GUI_MergeRect>
 800bad8:	e00b      	b.n	800baf2 <_Invalidate1Abs+0x7a>
 800bada:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bade:	433e      	orrs	r6, r7
 800bae0:	e885 0003 	stmia.w	r5, {r0, r1}
 800bae4:	629e      	str	r6, [r3, #40]	; 0x28
 800bae6:	4b05      	ldr	r3, [pc, #20]	; (800bafc <_Invalidate1Abs+0x84>)
 800bae8:	881a      	ldrh	r2, [r3, #0]
 800baea:	3201      	adds	r2, #1
 800baec:	801a      	strh	r2, [r3, #0]
 800baee:	f003 fc5f 	bl	800f3b0 <GUI_SignalEvent>
 800baf2:	a801      	add	r0, sp, #4
 800baf4:	f004 ffb2 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800baf8:	b005      	add	sp, #20
 800bafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bafc:	20021b90 	.word	0x20021b90

0800bb00 <WM__Invalidate1Abs>:
 800bb00:	2220      	movs	r2, #32
 800bb02:	f7ff bfb9 	b.w	800ba78 <_Invalidate1Abs>

0800bb06 <WM_InvalidateWindowAndDescsEx>:
 800bb06:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb08:	460f      	mov	r7, r1
 800bb0a:	b085      	sub	sp, #20
 800bb0c:	4615      	mov	r5, r2
 800bb0e:	4606      	mov	r6, r0
 800bb10:	b348      	cbz	r0, 800bb66 <WM_InvalidateWindowAndDescsEx+0x60>
 800bb12:	f004 ff95 	bl	8010a40 <GUI_ALLOC_LockH>
 800bb16:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bb18:	ac04      	add	r4, sp, #16
 800bb1a:	079b      	lsls	r3, r3, #30
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800bb22:	d403      	bmi.n	800bb2c <WM_InvalidateWindowAndDescsEx+0x26>
 800bb24:	4620      	mov	r0, r4
 800bb26:	f004 ff99 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800bb2a:	e01c      	b.n	800bb66 <WM_InvalidateWindowAndDescsEx+0x60>
 800bb2c:	a802      	add	r0, sp, #8
 800bb2e:	4639      	mov	r1, r7
 800bb30:	f003 f98c 	bl	800ee4c <GUI__IntersectRects>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	d0f5      	beq.n	800bb24 <WM_InvalidateWindowAndDescsEx+0x1e>
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f004 ff8f 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800bb3e:	4630      	mov	r0, r6
 800bb40:	a902      	add	r1, sp, #8
 800bb42:	462a      	mov	r2, r5
 800bb44:	f7ff ff98 	bl	800ba78 <_Invalidate1Abs>
 800bb48:	4630      	mov	r0, r6
 800bb4a:	f7ff fae5 	bl	800b118 <WM_GetFirstChild>
 800bb4e:	4604      	mov	r4, r0
 800bb50:	b14c      	cbz	r4, 800bb66 <WM_InvalidateWindowAndDescsEx+0x60>
 800bb52:	4620      	mov	r0, r4
 800bb54:	a902      	add	r1, sp, #8
 800bb56:	462a      	mov	r2, r5
 800bb58:	f7ff ffd5 	bl	800bb06 <WM_InvalidateWindowAndDescsEx>
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	f004 ff65 	bl	8010a2c <GUI_ALLOC_h2p>
 800bb62:	6a04      	ldr	r4, [r0, #32]
 800bb64:	e7f4      	b.n	800bb50 <WM_InvalidateWindowAndDescsEx+0x4a>
 800bb66:	b005      	add	sp, #20
 800bb68:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bb6a <WM__InvalidateRect>:
 800bb6a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800bb6e:	4680      	mov	r8, r0
 800bb70:	4617      	mov	r7, r2
 800bb72:	461d      	mov	r5, r3
 800bb74:	460c      	mov	r4, r1
 800bb76:	2900      	cmp	r1, #0
 800bb78:	d030      	beq.n	800bbdc <WM__InvalidateRect+0x72>
 800bb7a:	4608      	mov	r0, r1
 800bb7c:	f004 ff60 	bl	8010a40 <GUI_ALLOC_LockH>
 800bb80:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800bb82:	9001      	str	r0, [sp, #4]
 800bb84:	07b3      	lsls	r3, r6, #30
 800bb86:	4602      	mov	r2, r0
 800bb88:	d525      	bpl.n	800bbd6 <WM__InvalidateRect+0x6c>
 800bb8a:	a802      	add	r0, sp, #8
 800bb8c:	4641      	mov	r1, r8
 800bb8e:	f003 f95d 	bl	800ee4c <GUI__IntersectRects>
 800bb92:	b300      	cbz	r0, 800bbd6 <WM__InvalidateRect+0x6c>
 800bb94:	f640 0301 	movw	r3, #2049	; 0x801
 800bb98:	4033      	ands	r3, r6
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d107      	bne.n	800bbae <WM__InvalidateRect+0x44>
 800bb9e:	9b01      	ldr	r3, [sp, #4]
 800bba0:	a802      	add	r0, sp, #8
 800bba2:	6999      	ldr	r1, [r3, #24]
 800bba4:	6a1a      	ldr	r2, [r3, #32]
 800bba6:	462b      	mov	r3, r5
 800bba8:	f7ff ffdf 	bl	800bb6a <WM__InvalidateRect>
 800bbac:	e004      	b.n	800bbb8 <WM__InvalidateRect+0x4e>
 800bbae:	4620      	mov	r0, r4
 800bbb0:	a902      	add	r1, sp, #8
 800bbb2:	462a      	mov	r2, r5
 800bbb4:	f7ff ff60 	bl	800ba78 <_Invalidate1Abs>
 800bbb8:	9b01      	ldr	r3, [sp, #4]
 800bbba:	69dc      	ldr	r4, [r3, #28]
 800bbbc:	b15c      	cbz	r4, 800bbd6 <WM__InvalidateRect+0x6c>
 800bbbe:	42bc      	cmp	r4, r7
 800bbc0:	d009      	beq.n	800bbd6 <WM__InvalidateRect+0x6c>
 800bbc2:	4620      	mov	r0, r4
 800bbc4:	a902      	add	r1, sp, #8
 800bbc6:	462a      	mov	r2, r5
 800bbc8:	f7ff ff9d 	bl	800bb06 <WM_InvalidateWindowAndDescsEx>
 800bbcc:	4620      	mov	r0, r4
 800bbce:	f004 ff2d 	bl	8010a2c <GUI_ALLOC_h2p>
 800bbd2:	6a04      	ldr	r4, [r0, #32]
 800bbd4:	e7f2      	b.n	800bbbc <WM__InvalidateRect+0x52>
 800bbd6:	a801      	add	r0, sp, #4
 800bbd8:	f004 ff40 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800bbdc:	b004      	add	sp, #16
 800bbde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bbe2 <WM__InvalidateParent>:
 800bbe2:	b570      	push	{r4, r5, r6, lr}
 800bbe4:	4605      	mov	r5, r0
 800bbe6:	4608      	mov	r0, r1
 800bbe8:	460c      	mov	r4, r1
 800bbea:	4616      	mov	r6, r2
 800bbec:	f004 ff1e 	bl	8010a2c <GUI_ALLOC_h2p>
 800bbf0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bbf2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	4621      	mov	r1, r4
 800bbfa:	4632      	mov	r2, r6
 800bbfc:	bf0c      	ite	eq
 800bbfe:	2320      	moveq	r3, #32
 800bc00:	f44f 4380 	movne.w	r3, #16384	; 0x4000
 800bc04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc08:	f7ff bfaf 	b.w	800bb6a <WM__InvalidateRect>

0800bc0c <WM__InvalidateRectEx>:
 800bc0c:	2320      	movs	r3, #32
 800bc0e:	f7ff bfac 	b.w	800bb6a <WM__InvalidateRect>

0800bc12 <WM__DetachWindow>:
 800bc12:	b513      	push	{r0, r1, r4, lr}
 800bc14:	4604      	mov	r4, r0
 800bc16:	f004 ff13 	bl	8010a40 <GUI_ALLOC_LockH>
 800bc1a:	6981      	ldr	r1, [r0, #24]
 800bc1c:	9001      	str	r0, [sp, #4]
 800bc1e:	b141      	cbz	r1, 800bc32 <WM__DetachWindow+0x20>
 800bc20:	6a02      	ldr	r2, [r0, #32]
 800bc22:	f7ff fff3 	bl	800bc0c <WM__InvalidateRectEx>
 800bc26:	4620      	mov	r0, r4
 800bc28:	f7ff fe6a 	bl	800b900 <WM__RemoveWindowFromList>
 800bc2c:	9b01      	ldr	r3, [sp, #4]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	619a      	str	r2, [r3, #24]
 800bc32:	a801      	add	r0, sp, #4
 800bc34:	f004 ff12 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800bc38:	b002      	add	sp, #8
 800bc3a:	bd10      	pop	{r4, pc}

0800bc3c <WM_SendMessage>:
 800bc3c:	b108      	cbz	r0, 800bc42 <WM_SendMessage+0x6>
 800bc3e:	f7fe bcef 	b.w	800a620 <WM__SendMessage>
 800bc42:	4770      	bx	lr

0800bc44 <WM__SendMsgNoData>:
 800bc44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc46:	ab04      	add	r3, sp, #16
 800bc48:	9001      	str	r0, [sp, #4]
 800bc4a:	f843 1d10 	str.w	r1, [r3, #-16]!
 800bc4e:	4669      	mov	r1, sp
 800bc50:	f7fe fce6 	bl	800a620 <WM__SendMessage>
 800bc54:	b005      	add	sp, #20
 800bc56:	f85d fb04 	ldr.w	pc, [sp], #4

0800bc5a <WM__GetClientRectWin>:
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	800b      	strh	r3, [r1, #0]
 800bc5e:	8882      	ldrh	r2, [r0, #4]
 800bc60:	804b      	strh	r3, [r1, #2]
 800bc62:	8803      	ldrh	r3, [r0, #0]
 800bc64:	1ad3      	subs	r3, r2, r3
 800bc66:	808b      	strh	r3, [r1, #4]
 800bc68:	88c2      	ldrh	r2, [r0, #6]
 800bc6a:	8843      	ldrh	r3, [r0, #2]
 800bc6c:	1ad3      	subs	r3, r2, r3
 800bc6e:	80cb      	strh	r3, [r1, #6]
 800bc70:	4770      	bx	lr

0800bc72 <WM_InvalidateRect>:
 800bc72:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc74:	460f      	mov	r7, r1
 800bc76:	b087      	sub	sp, #28
 800bc78:	4605      	mov	r5, r0
 800bc7a:	2800      	cmp	r0, #0
 800bc7c:	d033      	beq.n	800bce6 <WM_InvalidateRect+0x74>
 800bc7e:	f004 fedf 	bl	8010a40 <GUI_ALLOC_LockH>
 800bc82:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800bc84:	9001      	str	r0, [sp, #4]
 800bc86:	07b2      	lsls	r2, r6, #30
 800bc88:	d52a      	bpl.n	800bce0 <WM_InvalidateRect+0x6e>
 800bc8a:	c803      	ldmia	r0, {r0, r1}
 800bc8c:	ac04      	add	r4, sp, #16
 800bc8e:	03f3      	lsls	r3, r6, #15
 800bc90:	e884 0003 	stmia.w	r4, {r0, r1}
 800bc94:	d502      	bpl.n	800bc9c <WM_InvalidateRect+0x2a>
 800bc96:	4628      	mov	r0, r5
 800bc98:	f7ff feb4 	bl	800ba04 <WM__InvalidateDrawAndDescs>
 800bc9c:	b15f      	cbz	r7, 800bcb6 <WM_InvalidateRect+0x44>
 800bc9e:	6838      	ldr	r0, [r7, #0]
 800bca0:	6879      	ldr	r1, [r7, #4]
 800bca2:	ab02      	add	r3, sp, #8
 800bca4:	c303      	stmia	r3!, {r0, r1}
 800bca6:	9801      	ldr	r0, [sp, #4]
 800bca8:	a902      	add	r1, sp, #8
 800bcaa:	f7ff fe47 	bl	800b93c <WM__Client2Screen>
 800bcae:	4620      	mov	r0, r4
 800bcb0:	a902      	add	r1, sp, #8
 800bcb2:	f003 f8fd 	bl	800eeb0 <GUI__IntersectRect>
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	4629      	mov	r1, r5
 800bcba:	f7ff fda1 	bl	800b800 <WM__ClipAtParentBorders>
 800bcbe:	b178      	cbz	r0, 800bce0 <WM_InvalidateRect+0x6e>
 800bcc0:	f640 0301 	movw	r3, #2049	; 0x801
 800bcc4:	4033      	ands	r3, r6
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d106      	bne.n	800bcd8 <WM_InvalidateRect+0x66>
 800bcca:	9b01      	ldr	r3, [sp, #4]
 800bccc:	4620      	mov	r0, r4
 800bcce:	6999      	ldr	r1, [r3, #24]
 800bcd0:	6a1a      	ldr	r2, [r3, #32]
 800bcd2:	f7ff ff9b 	bl	800bc0c <WM__InvalidateRectEx>
 800bcd6:	e003      	b.n	800bce0 <WM_InvalidateRect+0x6e>
 800bcd8:	4628      	mov	r0, r5
 800bcda:	4621      	mov	r1, r4
 800bcdc:	f7ff ff10 	bl	800bb00 <WM__Invalidate1Abs>
 800bce0:	a801      	add	r0, sp, #4
 800bce2:	f004 febb 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800bce6:	b007      	add	sp, #28
 800bce8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bcea <WM_InvalidateWindow>:
 800bcea:	2100      	movs	r1, #0
 800bcec:	f7ff bfc1 	b.w	800bc72 <WM_InvalidateRect>

0800bcf0 <WM__GetTopLevelLayer>:
 800bcf0:	b510      	push	{r4, lr}
 800bcf2:	4604      	mov	r4, r0
 800bcf4:	f004 fe9a 	bl	8010a2c <GUI_ALLOC_h2p>
 800bcf8:	6980      	ldr	r0, [r0, #24]
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	d1f9      	bne.n	800bcf2 <WM__GetTopLevelLayer+0x2>
 800bcfe:	4b05      	ldr	r3, [pc, #20]	; (800bd14 <WM__GetTopLevelLayer+0x24>)
 800bd00:	681a      	ldr	r2, [r3, #0]
 800bd02:	4294      	cmp	r4, r2
 800bd04:	d005      	beq.n	800bd12 <WM__GetTopLevelLayer+0x22>
 800bd06:	6858      	ldr	r0, [r3, #4]
 800bd08:	4284      	cmp	r4, r0
 800bd0a:	bf14      	ite	ne
 800bd0c:	f04f 30ff 	movne.w	r0, #4294967295
 800bd10:	2001      	moveq	r0, #1
 800bd12:	bd10      	pop	{r4, pc}
 800bd14:	20021b78 	.word	0x20021b78

0800bd18 <WM__SelectTopLevelLayer>:
 800bd18:	b508      	push	{r3, lr}
 800bd1a:	f7ff ffe9 	bl	800bcf0 <WM__GetTopLevelLayer>
 800bd1e:	2800      	cmp	r0, #0
 800bd20:	db03      	blt.n	800bd2a <WM__SelectTopLevelLayer+0x12>
 800bd22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bd26:	f003 bdc7 	b.w	800f8b8 <GUI_SelectLayer>
 800bd2a:	bd08      	pop	{r3, pc}

0800bd2c <WM_SelectWindow>:
 800bd2c:	4a0d      	ldr	r2, [pc, #52]	; (800bd64 <WM_SelectWindow+0x38>)
 800bd2e:	6813      	ldr	r3, [r2, #0]
 800bd30:	b570      	push	{r4, r5, r6, lr}
 800bd32:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 800bd34:	4604      	mov	r4, r0
 800bd36:	4616      	mov	r6, r2
 800bd38:	b908      	cbnz	r0, 800bd3e <WM_SelectWindow+0x12>
 800bd3a:	4a0b      	ldr	r2, [pc, #44]	; (800bd68 <WM_SelectWindow+0x3c>)
 800bd3c:	6814      	ldr	r4, [r2, #0]
 800bd3e:	649c      	str	r4, [r3, #72]	; 0x48
 800bd40:	4620      	mov	r0, r4
 800bd42:	f7ff ffe9 	bl	800bd18 <WM__SelectTopLevelLayer>
 800bd46:	f002 fecf 	bl	800eae8 <LCD_SetClipRectMax>
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	f004 fe6e 	bl	8010a2c <GUI_ALLOC_h2p>
 800bd50:	6833      	ldr	r3, [r6, #0]
 800bd52:	f9b0 1000 	ldrsh.w	r1, [r0]
 800bd56:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800bd5a:	64d9      	str	r1, [r3, #76]	; 0x4c
 800bd5c:	651a      	str	r2, [r3, #80]	; 0x50
 800bd5e:	4628      	mov	r0, r5
 800bd60:	bd70      	pop	{r4, r5, r6, pc}
 800bd62:	bf00      	nop
 800bd64:	20000308 	.word	0x20000308
 800bd68:	20021b94 	.word	0x20021b94

0800bd6c <WM_CreateWindowAsChild>:
 800bd6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bd72:	469b      	mov	fp, r3
 800bd74:	4b4b      	ldr	r3, [pc, #300]	; (800bea4 <WM_CreateWindowAsChild+0x138>)
 800bd76:	4607      	mov	r7, r0
 800bd78:	4688      	mov	r8, r1
 800bd7a:	4692      	mov	sl, r2
 800bd7c:	681e      	ldr	r6, [r3, #0]
 800bd7e:	bb65      	cbnz	r5, 800bdda <WM_CreateWindowAsChild+0x6e>
 800bd80:	4b49      	ldr	r3, [pc, #292]	; (800bea8 <WM_CreateWindowAsChild+0x13c>)
 800bd82:	881b      	ldrh	r3, [r3, #0]
 800bd84:	b363      	cbz	r3, 800bde0 <WM_CreateWindowAsChild+0x74>
 800bd86:	4b49      	ldr	r3, [pc, #292]	; (800beac <WM_CreateWindowAsChild+0x140>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	7c5a      	ldrb	r2, [r3, #17]
 800bd8c:	4b48      	ldr	r3, [pc, #288]	; (800beb0 <WM_CreateWindowAsChild+0x144>)
 800bd8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd92:	1c5a      	adds	r2, r3, #1
 800bd94:	d024      	beq.n	800bde0 <WM_CreateWindowAsChild+0x74>
 800bd96:	b31b      	cbz	r3, 800bde0 <WM_CreateWindowAsChild+0x74>
 800bd98:	461d      	mov	r5, r3
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	f004 fe50 	bl	8010a40 <GUI_ALLOC_LockH>
 800bda0:	f9b0 2000 	ldrsh.w	r2, [r0]
 800bda4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800bda8:	9001      	str	r0, [sp, #4]
 800bdaa:	4417      	add	r7, r2
 800bdac:	4498      	add	r8, r3
 800bdae:	f1ba 0f00 	cmp.w	sl, #0
 800bdb2:	d105      	bne.n	800bdc0 <WM_CreateWindowAsChild+0x54>
 800bdb4:	f9b0 a004 	ldrsh.w	sl, [r0, #4]
 800bdb8:	ebc2 0a0a 	rsb	sl, r2, sl
 800bdbc:	f10a 0a01 	add.w	sl, sl, #1
 800bdc0:	f1bb 0f00 	cmp.w	fp, #0
 800bdc4:	d105      	bne.n	800bdd2 <WM_CreateWindowAsChild+0x66>
 800bdc6:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 800bdca:	ebc3 0b0b 	rsb	fp, r3, fp
 800bdce:	f10b 0b01 	add.w	fp, fp, #1
 800bdd2:	a801      	add	r0, sp, #4
 800bdd4:	f004 fe42 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800bdd8:	e002      	b.n	800bde0 <WM_CreateWindowAsChild+0x74>
 800bdda:	1c6b      	adds	r3, r5, #1
 800bddc:	d1dd      	bne.n	800bd9a <WM_CreateWindowAsChild+0x2e>
 800bdde:	2500      	movs	r5, #0
 800bde0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800bde2:	302c      	adds	r0, #44	; 0x2c
 800bde4:	f005 f89d 	bl	8010f22 <GUI_ALLOC_AllocZero>
 800bde8:	4604      	mov	r4, r0
 800bdea:	2800      	cmp	r0, #0
 800bdec:	d056      	beq.n	800be9c <WM_CreateWindowAsChild+0x130>
 800bdee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdf0:	431e      	orrs	r6, r3
 800bdf2:	4b2d      	ldr	r3, [pc, #180]	; (800bea8 <WM_CreateWindowAsChild+0x13c>)
 800bdf4:	881a      	ldrh	r2, [r3, #0]
 800bdf6:	3201      	adds	r2, #1
 800bdf8:	801a      	strh	r2, [r3, #0]
 800bdfa:	f004 fe21 	bl	8010a40 <GUI_ALLOC_LockH>
 800bdfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be00:	6103      	str	r3, [r0, #16]
 800be02:	f10d 0908 	add.w	r9, sp, #8
 800be06:	4b2b      	ldr	r3, [pc, #172]	; (800beb4 <WM_CreateWindowAsChild+0x148>)
 800be08:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800be0a:	f849 0d08 	str.w	r0, [r9, #-8]!
 800be0e:	4033      	ands	r3, r6
 800be10:	8007      	strh	r7, [r0, #0]
 800be12:	f8a0 8002 	strh.w	r8, [r0, #2]
 800be16:	4457      	add	r7, sl
 800be18:	44d8      	add	r8, fp
 800be1a:	4313      	orrs	r3, r2
 800be1c:	3f01      	subs	r7, #1
 800be1e:	f108 38ff 	add.w	r8, r8, #4294967295
 800be22:	6283      	str	r3, [r0, #40]	; 0x28
 800be24:	8087      	strh	r7, [r0, #4]
 800be26:	f8a0 8006 	strh.w	r8, [r0, #6]
 800be2a:	4668      	mov	r0, sp
 800be2c:	f004 fe16 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800be30:	4b21      	ldr	r3, [pc, #132]	; (800beb8 <WM_CreateWindowAsChild+0x14c>)
 800be32:	6818      	ldr	r0, [r3, #0]
 800be34:	b148      	cbz	r0, 800be4a <WM_CreateWindowAsChild+0xde>
 800be36:	f004 fdf9 	bl	8010a2c <GUI_ALLOC_h2p>
 800be3a:	4607      	mov	r7, r0
 800be3c:	4620      	mov	r0, r4
 800be3e:	f004 fdf5 	bl	8010a2c <GUI_ALLOC_h2p>
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	6143      	str	r3, [r0, #20]
 800be46:	617c      	str	r4, [r7, #20]
 800be48:	e000      	b.n	800be4c <WM_CreateWindowAsChild+0xe0>
 800be4a:	601c      	str	r4, [r3, #0]
 800be4c:	4629      	mov	r1, r5
 800be4e:	4620      	mov	r0, r4
 800be50:	f7ff fd04 	bl	800b85c <WM__InsertWindowIntoList>
 800be54:	06b5      	lsls	r5, r6, #26
 800be56:	d502      	bpl.n	800be5e <WM_CreateWindowAsChild+0xf2>
 800be58:	4620      	mov	r0, r4
 800be5a:	f7ff ff67 	bl	800bd2c <WM_SelectWindow>
 800be5e:	07f0      	lsls	r0, r6, #31
 800be60:	d503      	bpl.n	800be6a <WM_CreateWindowAsChild+0xfe>
 800be62:	4b16      	ldr	r3, [pc, #88]	; (800bebc <WM_CreateWindowAsChild+0x150>)
 800be64:	681a      	ldr	r2, [r3, #0]
 800be66:	3201      	adds	r2, #1
 800be68:	601a      	str	r2, [r3, #0]
 800be6a:	0671      	lsls	r1, r6, #25
 800be6c:	d502      	bpl.n	800be74 <WM_CreateWindowAsChild+0x108>
 800be6e:	4620      	mov	r0, r4
 800be70:	f008 fef0 	bl	8014c54 <WM_BringToBottom>
 800be74:	07b2      	lsls	r2, r6, #30
 800be76:	d50d      	bpl.n	800be94 <WM_CreateWindowAsChild+0x128>
 800be78:	4620      	mov	r0, r4
 800be7a:	f004 fde1 	bl	8010a40 <GUI_ALLOC_LockH>
 800be7e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800be80:	9000      	str	r0, [sp, #0]
 800be82:	f043 0302 	orr.w	r3, r3, #2
 800be86:	6283      	str	r3, [r0, #40]	; 0x28
 800be88:	4668      	mov	r0, sp
 800be8a:	f004 fde7 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800be8e:	4620      	mov	r0, r4
 800be90:	f7ff ff2b 	bl	800bcea <WM_InvalidateWindow>
 800be94:	4620      	mov	r0, r4
 800be96:	2101      	movs	r1, #1
 800be98:	f7ff fed4 	bl	800bc44 <WM__SendMsgNoData>
 800be9c:	4620      	mov	r0, r4
 800be9e:	b003      	add	sp, #12
 800bea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bea4:	20021ba0 	.word	0x20021ba0
 800bea8:	20021b70 	.word	0x20021b70
 800beac:	20000308 	.word	0x20000308
 800beb0:	20021b78 	.word	0x20021b78
 800beb4:	003f3f9f 	.word	0x003f3f9f
 800beb8:	20021b94 	.word	0x20021b94
 800bebc:	20021bc0 	.word	0x20021bc0

0800bec0 <WM_DeleteWindow>:
 800bec0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bec2:	4604      	mov	r4, r0
 800bec4:	2800      	cmp	r0, #0
 800bec6:	d06c      	beq.n	800bfa2 <WM_DeleteWindow+0xe2>
 800bec8:	f7ff fd8c 	bl	800b9e4 <WM__IsWindow>
 800becc:	2800      	cmp	r0, #0
 800bece:	d068      	beq.n	800bfa2 <WM_DeleteWindow+0xe2>
 800bed0:	4620      	mov	r0, r4
 800bed2:	f7ff ff0d 	bl	800bcf0 <WM__GetTopLevelLayer>
 800bed6:	210b      	movs	r1, #11
 800bed8:	4606      	mov	r6, r0
 800beda:	4620      	mov	r0, r4
 800bedc:	f7ff feb2 	bl	800bc44 <WM__SendMsgNoData>
 800bee0:	4620      	mov	r0, r4
 800bee2:	f7fe fc21 	bl	800a728 <WM__DeleteAssocTimer>
 800bee6:	4620      	mov	r0, r4
 800bee8:	f004 fdaa 	bl	8010a40 <GUI_ALLOC_LockH>
 800beec:	9001      	str	r0, [sp, #4]
 800beee:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800bef0:	b108      	cbz	r0, 800bef6 <WM_DeleteWindow+0x36>
 800bef2:	f001 fb63 	bl	800d5bc <GUI_MEMDEV_Delete>
 800bef6:	4b2c      	ldr	r3, [pc, #176]	; (800bfa8 <WM_DeleteWindow+0xe8>)
 800bef8:	4a2c      	ldr	r2, [pc, #176]	; (800bfac <WM_DeleteWindow+0xec>)
 800befa:	2100      	movs	r1, #0
 800befc:	6019      	str	r1, [r3, #0]
 800befe:	4b2c      	ldr	r3, [pc, #176]	; (800bfb0 <WM_DeleteWindow+0xf0>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bf06:	42a0      	cmp	r0, r4
 800bf08:	bf08      	it	eq
 800bf0a:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 800bf0e:	4a29      	ldr	r2, [pc, #164]	; (800bfb4 <WM_DeleteWindow+0xf4>)
 800bf10:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bf14:	42a1      	cmp	r1, r4
 800bf16:	bf04      	itt	eq
 800bf18:	2100      	moveq	r1, #0
 800bf1a:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 800bf1e:	4b26      	ldr	r3, [pc, #152]	; (800bfb8 <WM_DeleteWindow+0xf8>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	b12b      	cbz	r3, 800bf30 <WM_DeleteWindow+0x70>
 800bf24:	685a      	ldr	r2, [r3, #4]
 800bf26:	42a2      	cmp	r2, r4
 800bf28:	bf04      	itt	eq
 800bf2a:	2200      	moveq	r2, #0
 800bf2c:	605a      	streq	r2, [r3, #4]
 800bf2e:	e7f7      	b.n	800bf20 <WM_DeleteWindow+0x60>
 800bf30:	4620      	mov	r0, r4
 800bf32:	2107      	movs	r1, #7
 800bf34:	f7fe ff27 	bl	800ad86 <WM_NotifyParent>
 800bf38:	9d01      	ldr	r5, [sp, #4]
 800bf3a:	69e8      	ldr	r0, [r5, #28]
 800bf3c:	f7ff ffc0 	bl	800bec0 <WM_DeleteWindow>
 800bf40:	69eb      	ldr	r3, [r5, #28]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d1f9      	bne.n	800bf3a <WM_DeleteWindow+0x7a>
 800bf46:	4620      	mov	r0, r4
 800bf48:	f7ff fe63 	bl	800bc12 <WM__DetachWindow>
 800bf4c:	4b1b      	ldr	r3, [pc, #108]	; (800bfbc <WM_DeleteWindow+0xfc>)
 800bf4e:	6818      	ldr	r0, [r3, #0]
 800bf50:	b150      	cbz	r0, 800bf68 <WM_DeleteWindow+0xa8>
 800bf52:	f004 fd6b 	bl	8010a2c <GUI_ALLOC_h2p>
 800bf56:	4605      	mov	r5, r0
 800bf58:	6940      	ldr	r0, [r0, #20]
 800bf5a:	42a0      	cmp	r0, r4
 800bf5c:	d1f8      	bne.n	800bf50 <WM_DeleteWindow+0x90>
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f004 fd64 	bl	8010a2c <GUI_ALLOC_h2p>
 800bf64:	6943      	ldr	r3, [r0, #20]
 800bf66:	616b      	str	r3, [r5, #20]
 800bf68:	9b01      	ldr	r3, [sp, #4]
 800bf6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf6c:	07da      	lsls	r2, r3, #31
 800bf6e:	d503      	bpl.n	800bf78 <WM_DeleteWindow+0xb8>
 800bf70:	4a13      	ldr	r2, [pc, #76]	; (800bfc0 <WM_DeleteWindow+0x100>)
 800bf72:	6811      	ldr	r1, [r2, #0]
 800bf74:	3901      	subs	r1, #1
 800bf76:	6011      	str	r1, [r2, #0]
 800bf78:	069b      	lsls	r3, r3, #26
 800bf7a:	d503      	bpl.n	800bf84 <WM_DeleteWindow+0xc4>
 800bf7c:	4b11      	ldr	r3, [pc, #68]	; (800bfc4 <WM_DeleteWindow+0x104>)
 800bf7e:	881a      	ldrh	r2, [r3, #0]
 800bf80:	3a01      	subs	r2, #1
 800bf82:	801a      	strh	r2, [r3, #0]
 800bf84:	a801      	add	r0, sp, #4
 800bf86:	f004 fd69 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800bf8a:	4b0f      	ldr	r3, [pc, #60]	; (800bfc8 <WM_DeleteWindow+0x108>)
 800bf8c:	881a      	ldrh	r2, [r3, #0]
 800bf8e:	4620      	mov	r0, r4
 800bf90:	3a01      	subs	r2, #1
 800bf92:	801a      	strh	r2, [r3, #0]
 800bf94:	f004 fd8e 	bl	8010ab4 <GUI_ALLOC_Free>
 800bf98:	4b0c      	ldr	r3, [pc, #48]	; (800bfcc <WM_DeleteWindow+0x10c>)
 800bf9a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bf9e:	f7ff fec5 	bl	800bd2c <WM_SelectWindow>
 800bfa2:	b002      	add	sp, #8
 800bfa4:	bd70      	pop	{r4, r5, r6, pc}
 800bfa6:	bf00      	nop
 800bfa8:	20001600 	.word	0x20001600
 800bfac:	20021b88 	.word	0x20021b88
 800bfb0:	20021b98 	.word	0x20021b98
 800bfb4:	20021bb4 	.word	0x20021bb4
 800bfb8:	20021bac 	.word	0x20021bac
 800bfbc:	20021b94 	.word	0x20021b94
 800bfc0:	20021bc0 	.word	0x20021bc0
 800bfc4:	20021b90 	.word	0x20021b90
 800bfc8:	20021b70 	.word	0x20021b70
 800bfcc:	20021b78 	.word	0x20021b78

0800bfd0 <WM_GetActiveWindow>:
 800bfd0:	4b01      	ldr	r3, [pc, #4]	; (800bfd8 <WM_GetActiveWindow+0x8>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800bfd6:	4770      	bx	lr
 800bfd8:	20000308 	.word	0x20000308

0800bfdc <WM__GetNextIVR>:
 800bfdc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800bfe0:	4f5d      	ldr	r7, [pc, #372]	; (800c158 <WM__GetNextIVR+0x17c>)
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 800bfe8:	2800      	cmp	r0, #0
 800bfea:	f000 80b2 	beq.w	800c152 <WM__GetNextIVR+0x176>
 800bfee:	4b5b      	ldr	r3, [pc, #364]	; (800c15c <WM__GetNextIVR+0x180>)
 800bff0:	695a      	ldr	r2, [r3, #20]
 800bff2:	2a01      	cmp	r2, #1
 800bff4:	461c      	mov	r4, r3
 800bff6:	dd03      	ble.n	800c000 <WM__GetNextIVR+0x24>
 800bff8:	3a01      	subs	r2, #1
 800bffa:	615a      	str	r2, [r3, #20]
 800bffc:	2000      	movs	r0, #0
 800bffe:	e0a8      	b.n	800c152 <WM__GetNextIVR+0x176>
 800c000:	f104 0608 	add.w	r6, r4, #8
 800c004:	691b      	ldr	r3, [r3, #16]
 800c006:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c00a:	3301      	adds	r3, #1
 800c00c:	ad02      	add	r5, sp, #8
 800c00e:	6123      	str	r3, [r4, #16]
 800c010:	e885 0003 	stmia.w	r5, {r0, r1}
 800c014:	b923      	cbnz	r3, 800c020 <WM__GetNextIVR+0x44>
 800c016:	8823      	ldrh	r3, [r4, #0]
 800c018:	f8ad 3008 	strh.w	r3, [sp, #8]
 800c01c:	8863      	ldrh	r3, [r4, #2]
 800c01e:	e011      	b.n	800c044 <WM__GetNextIVR+0x68>
 800c020:	89a3      	ldrh	r3, [r4, #12]
 800c022:	8962      	ldrh	r2, [r4, #10]
 800c024:	f8ad 200a 	strh.w	r2, [sp, #10]
 800c028:	3301      	adds	r3, #1
 800c02a:	b29b      	uxth	r3, r3
 800c02c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800c030:	f8ad 3008 	strh.w	r3, [sp, #8]
 800c034:	b21b      	sxth	r3, r3
 800c036:	429a      	cmp	r2, r3
 800c038:	da06      	bge.n	800c048 <WM__GetNextIVR+0x6c>
 800c03a:	8823      	ldrh	r3, [r4, #0]
 800c03c:	f8ad 3008 	strh.w	r3, [sp, #8]
 800c040:	89e3      	ldrh	r3, [r4, #14]
 800c042:	3301      	adds	r3, #1
 800c044:	f8ad 300a 	strh.w	r3, [sp, #10]
 800c048:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800c04c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800c050:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800c15c <WM__GetNextIVR+0x180>
 800c054:	429a      	cmp	r2, r3
 800c056:	dd04      	ble.n	800c062 <WM__GetNextIVR+0x86>
 800c058:	6963      	ldr	r3, [r4, #20]
 800c05a:	3b01      	subs	r3, #1
 800c05c:	2000      	movs	r0, #0
 800c05e:	6163      	str	r3, [r4, #20]
 800c060:	e077      	b.n	800c152 <WM__GetNextIVR+0x176>
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800c066:	f004 fceb 	bl	8010a40 <GUI_ALLOC_LockH>
 800c06a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800c06e:	f9b8 3000 	ldrsh.w	r3, [r8]
 800c072:	9001      	str	r0, [sp, #4]
 800c074:	429a      	cmp	r2, r3
 800c076:	d11c      	bne.n	800c0b2 <WM__GetNextIVR+0xd6>
 800c078:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800c07c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c080:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800c084:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c088:	4b33      	ldr	r3, [pc, #204]	; (800c158 <WM__GetNextIVR+0x17c>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c08e:	b15a      	cbz	r2, 800c0a8 <WM__GetNextIVR+0xcc>
 800c090:	4610      	mov	r0, r2
 800c092:	f004 fccb 	bl	8010a2c <GUI_ALLOC_h2p>
 800c096:	4680      	mov	r8, r0
 800c098:	2200      	movs	r2, #0
 800c09a:	6a00      	ldr	r0, [r0, #32]
 800c09c:	4629      	mov	r1, r5
 800c09e:	f7ff f9c3 	bl	800b428 <_Findy1>
 800c0a2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800c0a6:	e7f2      	b.n	800c08e <WM__GetNextIVR+0xb2>
 800c0a8:	9b01      	ldr	r3, [sp, #4]
 800c0aa:	4629      	mov	r1, r5
 800c0ac:	69d8      	ldr	r0, [r3, #28]
 800c0ae:	f7ff f9bb 	bl	800b428 <_Findy1>
 800c0b2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800c0b6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c0be:	b16a      	cbz	r2, 800c0dc <WM__GetNextIVR+0x100>
 800c0c0:	4610      	mov	r0, r2
 800c0c2:	f004 fcb3 	bl	8010a2c <GUI_ALLOC_h2p>
 800c0c6:	4629      	mov	r1, r5
 800c0c8:	4680      	mov	r8, r0
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	6a00      	ldr	r0, [r0, #32]
 800c0ce:	f7ff fa01 	bl	800b4d4 <_Findx0>
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	d1ed      	bne.n	800c0b2 <WM__GetNextIVR+0xd6>
 800c0d6:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800c0da:	e7f0      	b.n	800c0be <WM__GetNextIVR+0xe2>
 800c0dc:	9b01      	ldr	r3, [sp, #4]
 800c0de:	4629      	mov	r1, r5
 800c0e0:	69d8      	ldr	r0, [r3, #28]
 800c0e2:	f7ff f9f7 	bl	800b4d4 <_Findx0>
 800c0e6:	2800      	cmp	r0, #0
 800c0e8:	d1e3      	bne.n	800c0b2 <WM__GetNextIVR+0xd6>
 800c0ea:	88a3      	ldrh	r3, [r4, #4]
 800c0ec:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800c0f0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c0f4:	b21b      	sxth	r3, r3
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	dd07      	ble.n	800c10a <WM__GetNextIVR+0x12e>
 800c0fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c0fe:	e886 0003 	stmia.w	r6, {r0, r1}
 800c102:	a801      	add	r0, sp, #4
 800c104:	f004 fcaa 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800c108:	e797      	b.n	800c03a <WM__GetNextIVR+0x5e>
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c10e:	b152      	cbz	r2, 800c126 <WM__GetNextIVR+0x14a>
 800c110:	4610      	mov	r0, r2
 800c112:	f004 fc8b 	bl	8010a2c <GUI_ALLOC_h2p>
 800c116:	4607      	mov	r7, r0
 800c118:	2200      	movs	r2, #0
 800c11a:	6a00      	ldr	r0, [r0, #32]
 800c11c:	4629      	mov	r1, r5
 800c11e:	f7ff fa1d 	bl	800b55c <_Findx1>
 800c122:	69ba      	ldr	r2, [r7, #24]
 800c124:	e7f3      	b.n	800c10e <WM__GetNextIVR+0x132>
 800c126:	af04      	add	r7, sp, #16
 800c128:	4629      	mov	r1, r5
 800c12a:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 800c12e:	69d8      	ldr	r0, [r3, #28]
 800c130:	f7ff fa14 	bl	800b55c <_Findx1>
 800c134:	4638      	mov	r0, r7
 800c136:	f004 fc91 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800c13a:	6923      	ldr	r3, [r4, #16]
 800c13c:	f644 6220 	movw	r2, #20000	; 0x4e20
 800c140:	4293      	cmp	r3, r2
 800c142:	dc89      	bgt.n	800c058 <WM__GetNextIVR+0x7c>
 800c144:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c148:	e886 0003 	stmia.w	r6, {r0, r1}
 800c14c:	f7ff fc26 	bl	800b99c <WM__ActivateClipRect>
 800c150:	2001      	movs	r0, #1
 800c152:	b004      	add	sp, #16
 800c154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c158:	20000308 	.word	0x20000308
 800c15c:	200015e0 	.word	0x200015e0

0800c160 <WM__InitIVRSearch>:
 800c160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c164:	4f39      	ldr	r7, [pc, #228]	; (800c24c <WM__InitIVRSearch+0xec>)
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800c16c:	b086      	sub	sp, #24
 800c16e:	4606      	mov	r6, r0
 800c170:	b912      	cbnz	r2, 800c178 <WM__InitIVRSearch+0x18>
 800c172:	f7ff fc13 	bl	800b99c <WM__ActivateClipRect>
 800c176:	e064      	b.n	800c242 <WM__InitIVRSearch+0xe2>
 800c178:	4d35      	ldr	r5, [pc, #212]	; (800c250 <WM__InitIVRSearch+0xf0>)
 800c17a:	696a      	ldr	r2, [r5, #20]
 800c17c:	3201      	adds	r2, #1
 800c17e:	2a01      	cmp	r2, #1
 800c180:	616a      	str	r2, [r5, #20]
 800c182:	462c      	mov	r4, r5
 800c184:	dc5d      	bgt.n	800c242 <WM__InitIVRSearch+0xe2>
 800c186:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800c188:	f004 fc5a 	bl	8010a40 <GUI_ALLOC_LockH>
 800c18c:	f04f 32ff 	mov.w	r2, #4294967295
 800c190:	612a      	str	r2, [r5, #16]
 800c192:	4a30      	ldr	r2, [pc, #192]	; (800c254 <WM__InitIVRSearch+0xf4>)
 800c194:	9000      	str	r0, [sp, #0]
 800c196:	7812      	ldrb	r2, [r2, #0]
 800c198:	b12a      	cbz	r2, 800c1a6 <WM__InitIVRSearch+0x46>
 800c19a:	f100 0308 	add.w	r3, r0, #8
 800c19e:	aa02      	add	r2, sp, #8
 800c1a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c1a4:	e005      	b.n	800c1b2 <WM__InitIVRSearch+0x52>
 800c1a6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800c1a8:	f012 0802 	ands.w	r8, r2, #2
 800c1ac:	d00a      	beq.n	800c1c4 <WM__InitIVRSearch+0x64>
 800c1ae:	c803      	ldmia	r0, {r0, r1}
 800c1b0:	aa02      	add	r2, sp, #8
 800c1b2:	e882 0003 	stmia.w	r2, {r0, r1}
 800c1b6:	ad02      	add	r5, sp, #8
 800c1b8:	b166      	cbz	r6, 800c1d4 <WM__InitIVRSearch+0x74>
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	4631      	mov	r1, r6
 800c1be:	f002 fe77 	bl	800eeb0 <GUI__IntersectRect>
 800c1c2:	e007      	b.n	800c1d4 <WM__InitIVRSearch+0x74>
 800c1c4:	696b      	ldr	r3, [r5, #20]
 800c1c6:	4668      	mov	r0, sp
 800c1c8:	3b01      	subs	r3, #1
 800c1ca:	616b      	str	r3, [r5, #20]
 800c1cc:	f004 fc46 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800c1d0:	4640      	mov	r0, r8
 800c1d2:	e037      	b.n	800c244 <WM__InitIVRSearch+0xe4>
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	4e20      	ldr	r6, [pc, #128]	; (800c258 <WM__InitIVRSearch+0xf8>)
 800c1d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c1da:	b1c2      	cbz	r2, 800c20e <WM__InitIVRSearch+0xae>
 800c1dc:	9b00      	ldr	r3, [sp, #0]
 800c1de:	6810      	ldr	r0, [r2, #0]
 800c1e0:	6851      	ldr	r1, [r2, #4]
 800c1e2:	9301      	str	r3, [sp, #4]
 800c1e4:	ab04      	add	r3, sp, #16
 800c1e6:	c303      	stmia	r3!, {r0, r1}
 800c1e8:	6833      	ldr	r3, [r6, #0]
 800c1ea:	b133      	cbz	r3, 800c1fa <WM__InitIVRSearch+0x9a>
 800c1ec:	a801      	add	r0, sp, #4
 800c1ee:	f004 fc35 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800c1f2:	6830      	ldr	r0, [r6, #0]
 800c1f4:	f004 fc24 	bl	8010a40 <GUI_ALLOC_LockH>
 800c1f8:	9001      	str	r0, [sp, #4]
 800c1fa:	9801      	ldr	r0, [sp, #4]
 800c1fc:	a904      	add	r1, sp, #16
 800c1fe:	f7ff fb9d 	bl	800b93c <WM__Client2Screen>
 800c202:	4628      	mov	r0, r5
 800c204:	a904      	add	r1, sp, #16
 800c206:	f002 fe53 	bl	800eeb0 <GUI__IntersectRect>
 800c20a:	a801      	add	r0, sp, #4
 800c20c:	e000      	b.n	800c210 <WM__InitIVRSearch+0xb0>
 800c20e:	4668      	mov	r0, sp
 800c210:	f004 fc24 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800c214:	6831      	ldr	r1, [r6, #0]
 800c216:	b119      	cbz	r1, 800c220 <WM__InitIVRSearch+0xc0>
 800c218:	4628      	mov	r0, r5
 800c21a:	f7ff faf1 	bl	800b800 <WM__ClipAtParentBorders>
 800c21e:	b128      	cbz	r0, 800c22c <WM__InitIVRSearch+0xcc>
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	4628      	mov	r0, r5
 800c224:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800c226:	f7ff faeb 	bl	800b800 <WM__ClipAtParentBorders>
 800c22a:	b918      	cbnz	r0, 800c234 <WM__InitIVRSearch+0xd4>
 800c22c:	6963      	ldr	r3, [r4, #20]
 800c22e:	3b01      	subs	r3, #1
 800c230:	6163      	str	r3, [r4, #20]
 800c232:	e007      	b.n	800c244 <WM__InitIVRSearch+0xe4>
 800c234:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c238:	e884 0003 	stmia.w	r4, {r0, r1}
 800c23c:	f7ff fece 	bl	800bfdc <WM__GetNextIVR>
 800c240:	e000      	b.n	800c244 <WM__InitIVRSearch+0xe4>
 800c242:	2001      	movs	r0, #1
 800c244:	b006      	add	sp, #24
 800c246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c24a:	bf00      	nop
 800c24c:	20000308 	.word	0x20000308
 800c250:	200015e0 	.word	0x200015e0
 800c254:	20021b9d 	.word	0x20021b9d
 800c258:	20021b74 	.word	0x20021b74

0800c25c <WM_SetDefault>:
 800c25c:	b508      	push	{r3, lr}
 800c25e:	f003 fae1 	bl	800f824 <GL_SetDefault>
 800c262:	4b02      	ldr	r3, [pc, #8]	; (800c26c <WM_SetDefault+0x10>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2200      	movs	r2, #0
 800c268:	645a      	str	r2, [r3, #68]	; 0x44
 800c26a:	bd08      	pop	{r3, pc}
 800c26c:	20000308 	.word	0x20000308

0800c270 <WM__Paint1>:
 800c270:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c272:	b089      	sub	sp, #36	; 0x24
 800c274:	4604      	mov	r4, r0
 800c276:	f004 fbe3 	bl	8010a40 <GUI_ALLOC_LockH>
 800c27a:	6907      	ldr	r7, [r0, #16]
 800c27c:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800c27e:	9001      	str	r0, [sp, #4]
 800c280:	3008      	adds	r0, #8
 800c282:	c803      	ldmia	r0, {r0, r1}
 800c284:	ad02      	add	r5, sp, #8
 800c286:	e885 0003 	stmia.w	r5, {r0, r1}
 800c28a:	a801      	add	r0, sp, #4
 800c28c:	f004 fbe6 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800c290:	2f00      	cmp	r7, #0
 800c292:	d031      	beq.n	800c2f8 <WM__Paint1+0x88>
 800c294:	07b3      	lsls	r3, r6, #30
 800c296:	d52f      	bpl.n	800c2f8 <WM__Paint1+0x88>
 800c298:	4620      	mov	r0, r4
 800c29a:	212e      	movs	r1, #46	; 0x2e
 800c29c:	f7fe fc88 	bl	800abb0 <WM_SendMessageNoPara>
 800c2a0:	4b16      	ldr	r3, [pc, #88]	; (800c2fc <WM__Paint1+0x8c>)
 800c2a2:	781a      	ldrb	r2, [r3, #0]
 800c2a4:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 800c2a8:	f102 0201 	add.w	r2, r2, #1
 800c2ac:	701a      	strb	r2, [r3, #0]
 800c2ae:	461e      	mov	r6, r3
 800c2b0:	d00a      	beq.n	800c2c8 <WM__Paint1+0x58>
 800c2b2:	230f      	movs	r3, #15
 800c2b4:	9405      	str	r4, [sp, #20]
 800c2b6:	9304      	str	r3, [sp, #16]
 800c2b8:	9507      	str	r5, [sp, #28]
 800c2ba:	f7ff ffcf 	bl	800c25c <WM_SetDefault>
 800c2be:	4620      	mov	r0, r4
 800c2c0:	a904      	add	r1, sp, #16
 800c2c2:	f7fe f9ad 	bl	800a620 <WM__SendMessage>
 800c2c6:	e010      	b.n	800c2ea <WM__Paint1+0x7a>
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	f7ff ff49 	bl	800c160 <WM__InitIVRSearch>
 800c2ce:	b160      	cbz	r0, 800c2ea <WM__Paint1+0x7a>
 800c2d0:	230f      	movs	r3, #15
 800c2d2:	9304      	str	r3, [sp, #16]
 800c2d4:	9405      	str	r4, [sp, #20]
 800c2d6:	9507      	str	r5, [sp, #28]
 800c2d8:	f7ff ffc0 	bl	800c25c <WM_SetDefault>
 800c2dc:	4620      	mov	r0, r4
 800c2de:	a904      	add	r1, sp, #16
 800c2e0:	f7fe f99e 	bl	800a620 <WM__SendMessage>
 800c2e4:	f7ff fe7a 	bl	800bfdc <WM__GetNextIVR>
 800c2e8:	e7f1      	b.n	800c2ce <WM__Paint1+0x5e>
 800c2ea:	7833      	ldrb	r3, [r6, #0]
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	3b01      	subs	r3, #1
 800c2f0:	212f      	movs	r1, #47	; 0x2f
 800c2f2:	7033      	strb	r3, [r6, #0]
 800c2f4:	f7fe fc5c 	bl	800abb0 <WM_SendMessageNoPara>
 800c2f8:	b009      	add	sp, #36	; 0x24
 800c2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2fc:	20021b9d 	.word	0x20021b9d

0800c300 <WM__Paint>:
 800c300:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c302:	b089      	sub	sp, #36	; 0x24
 800c304:	ac06      	add	r4, sp, #24
 800c306:	9003      	str	r0, [sp, #12]
 800c308:	f004 fb9a 	bl	8010a40 <GUI_ALLOC_LockH>
 800c30c:	f100 0208 	add.w	r2, r0, #8
 800c310:	4603      	mov	r3, r0
 800c312:	9005      	str	r0, [sp, #20]
 800c314:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c318:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800c31a:	699e      	ldr	r6, [r3, #24]
 800c31c:	691f      	ldr	r7, [r3, #16]
 800c31e:	e884 0003 	stmia.w	r4, {r0, r1}
 800c322:	a805      	add	r0, sp, #20
 800c324:	f004 fb9a 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800c328:	f244 0320 	movw	r3, #16416	; 0x4020
 800c32c:	402b      	ands	r3, r5
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d034      	beq.n	800c39c <WM__Paint+0x9c>
 800c332:	b1bf      	cbz	r7, 800c364 <WM__Paint+0x64>
 800c334:	4620      	mov	r0, r4
 800c336:	9903      	ldr	r1, [sp, #12]
 800c338:	f7ff fa62 	bl	800b800 <WM__ClipAtParentBorders>
 800c33c:	b190      	cbz	r0, 800c364 <WM__Paint+0x64>
 800c33e:	9803      	ldr	r0, [sp, #12]
 800c340:	f7ff fcf4 	bl	800bd2c <WM_SelectWindow>
 800c344:	0769      	lsls	r1, r5, #29
 800c346:	d50f      	bpl.n	800c368 <WM__Paint+0x68>
 800c348:	b126      	cbz	r6, 800c354 <WM__Paint+0x54>
 800c34a:	f005 0501 	and.w	r5, r5, #1
 800c34e:	f085 0501 	eor.w	r5, r5, #1
 800c352:	e000      	b.n	800c356 <WM__Paint+0x56>
 800c354:	2501      	movs	r5, #1
 800c356:	9500      	str	r5, [sp, #0]
 800c358:	4620      	mov	r0, r4
 800c35a:	4912      	ldr	r1, [pc, #72]	; (800c3a4 <WM__Paint+0xa4>)
 800c35c:	aa03      	add	r2, sp, #12
 800c35e:	2300      	movs	r3, #0
 800c360:	f000 fada 	bl	800c918 <GUI_MEMDEV_Draw>
 800c364:	2400      	movs	r4, #0
 800c366:	e003      	b.n	800c370 <WM__Paint+0x70>
 800c368:	9803      	ldr	r0, [sp, #12]
 800c36a:	f7ff f9d9 	bl	800b720 <WM__PaintWinAndOverlays>
 800c36e:	2401      	movs	r4, #1
 800c370:	9803      	ldr	r0, [sp, #12]
 800c372:	f004 fb65 	bl	8010a40 <GUI_ALLOC_LockH>
 800c376:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800c378:	9005      	str	r0, [sp, #20]
 800c37a:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 800c37e:	f023 0320 	bic.w	r3, r3, #32
 800c382:	0492      	lsls	r2, r2, #18
 800c384:	bf48      	it	mi
 800c386:	f043 0304 	orrmi.w	r3, r3, #4
 800c38a:	6283      	str	r3, [r0, #40]	; 0x28
 800c38c:	a805      	add	r0, sp, #20
 800c38e:	f004 fb65 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800c392:	4b05      	ldr	r3, [pc, #20]	; (800c3a8 <WM__Paint+0xa8>)
 800c394:	881a      	ldrh	r2, [r3, #0]
 800c396:	3a01      	subs	r2, #1
 800c398:	801a      	strh	r2, [r3, #0]
 800c39a:	e000      	b.n	800c39e <WM__Paint+0x9e>
 800c39c:	461c      	mov	r4, r3
 800c39e:	4620      	mov	r0, r4
 800c3a0:	b009      	add	sp, #36	; 0x24
 800c3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3a4:	0800b799 	.word	0x0800b799
 800c3a8:	20021b90 	.word	0x20021b90

0800c3ac <WM__DeleteSecure>:
 800c3ac:	b508      	push	{r3, lr}
 800c3ae:	f004 fb3d 	bl	8010a2c <GUI_ALLOC_h2p>
 800c3b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c3b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3b8:	6283      	str	r3, [r0, #40]	; 0x28
 800c3ba:	4b02      	ldr	r3, [pc, #8]	; (800c3c4 <WM__DeleteSecure+0x18>)
 800c3bc:	2201      	movs	r2, #1
 800c3be:	601a      	str	r2, [r3, #0]
 800c3c0:	bd08      	pop	{r3, pc}
 800c3c2:	bf00      	nop
 800c3c4:	200015dc 	.word	0x200015dc

0800c3c8 <WM_Exec>:
 800c3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3cc:	4b4c      	ldr	r3, [pc, #304]	; (800c500 <WM_Exec+0x138>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	b09f      	sub	sp, #124	; 0x7c
 800c3d2:	b103      	cbz	r3, 800c3d6 <WM_Exec+0xe>
 800c3d4:	4798      	blx	r3
 800c3d6:	2600      	movs	r6, #0
 800c3d8:	4d4a      	ldr	r5, [pc, #296]	; (800c504 <WM_Exec+0x13c>)
 800c3da:	682b      	ldr	r3, [r5, #0]
 800c3dc:	b1db      	cbz	r3, 800c416 <WM_Exec+0x4e>
 800c3de:	4b4a      	ldr	r3, [pc, #296]	; (800c508 <WM_Exec+0x140>)
 800c3e0:	681c      	ldr	r4, [r3, #0]
 800c3e2:	b1bc      	cbz	r4, 800c414 <WM_Exec+0x4c>
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	f004 fb2b 	bl	8010a40 <GUI_ALLOC_LockH>
 800c3ea:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800c3ec:	6947      	ldr	r7, [r0, #20]
 800c3ee:	ab1e      	add	r3, sp, #120	; 0x78
 800c3f0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800c3f4:	f843 0d70 	str.w	r0, [r3, #-112]!
 800c3f8:	d007      	beq.n	800c40a <WM_Exec+0x42>
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f004 fb2e 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800c400:	4620      	mov	r0, r4
 800c402:	f7ff fd5d 	bl	800bec0 <WM_DeleteWindow>
 800c406:	463c      	mov	r4, r7
 800c408:	e7eb      	b.n	800c3e2 <WM_Exec+0x1a>
 800c40a:	4618      	mov	r0, r3
 800c40c:	463c      	mov	r4, r7
 800c40e:	f004 fb25 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800c412:	e7e6      	b.n	800c3e2 <WM_Exec+0x1a>
 800c414:	602c      	str	r4, [r5, #0]
 800c416:	4b3d      	ldr	r3, [pc, #244]	; (800c50c <WM_Exec+0x144>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	b103      	cbz	r3, 800c41e <WM_Exec+0x56>
 800c41c:	4798      	blx	r3
 800c41e:	4b3c      	ldr	r3, [pc, #240]	; (800c510 <WM_Exec+0x148>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	b92b      	cbnz	r3, 800c430 <WM_Exec+0x68>
 800c424:	4f3b      	ldr	r7, [pc, #236]	; (800c514 <WM_Exec+0x14c>)
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c42c:	b143      	cbz	r3, 800c440 <WM_Exec+0x78>
 800c42e:	e003      	b.n	800c438 <WM_Exec+0x70>
 800c430:	4798      	blx	r3
 800c432:	2800      	cmp	r0, #0
 800c434:	d0f6      	beq.n	800c424 <WM_Exec+0x5c>
 800c436:	e058      	b.n	800c4ea <WM_Exec+0x122>
 800c438:	f003 fb50 	bl	800fadc <GUI_PollKeyMsg>
 800c43c:	2800      	cmp	r0, #0
 800c43e:	d154      	bne.n	800c4ea <WM_Exec+0x122>
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	f893 5054 	ldrb.w	r5, [r3, #84]	; 0x54
 800c446:	b14d      	cbz	r5, 800c45c <WM_Exec+0x94>
 800c448:	4b33      	ldr	r3, [pc, #204]	; (800c518 <WM_Exec+0x150>)
 800c44a:	881d      	ldrh	r5, [r3, #0]
 800c44c:	b135      	cbz	r5, 800c45c <WM_Exec+0x94>
 800c44e:	4b33      	ldr	r3, [pc, #204]	; (800c51c <WM_Exec+0x154>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d04b      	beq.n	800c4ee <WM_Exec+0x126>
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4798      	blx	r3
 800c45a:	2501      	movs	r5, #1
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c462:	b913      	cbnz	r3, 800c46a <WM_Exec+0xa2>
 800c464:	2d00      	cmp	r5, #0
 800c466:	d137      	bne.n	800c4d8 <WM_Exec+0x110>
 800c468:	e045      	b.n	800c4f6 <WM_Exec+0x12e>
 800c46a:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800c518 <WM_Exec+0x150>
 800c46e:	f8b8 3000 	ldrh.w	r3, [r8]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d0f6      	beq.n	800c464 <WM_Exec+0x9c>
 800c476:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800c520 <WM_Exec+0x158>
 800c47a:	f8d9 4000 	ldr.w	r4, [r9]
 800c47e:	b90c      	cbnz	r4, 800c484 <WM_Exec+0xbc>
 800c480:	4b21      	ldr	r3, [pc, #132]	; (800c508 <WM_Exec+0x140>)
 800c482:	681c      	ldr	r4, [r3, #0]
 800c484:	a802      	add	r0, sp, #8
 800c486:	f003 fa35 	bl	800f8f4 <GUI_SaveContext_W>
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 800c490:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 800c494:	b914      	cbnz	r4, 800c49c <WM_Exec+0xd4>
 800c496:	2400      	movs	r4, #0
 800c498:	e00d      	b.n	800c4b6 <WM_Exec+0xee>
 800c49a:	b963      	cbnz	r3, 800c4b6 <WM_Exec+0xee>
 800c49c:	4620      	mov	r0, r4
 800c49e:	f7ff ff2f 	bl	800c300 <WM__Paint>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	9301      	str	r3, [sp, #4]
 800c4a8:	f004 fac0 	bl	8010a2c <GUI_ALLOC_h2p>
 800c4ac:	6944      	ldr	r4, [r0, #20]
 800c4ae:	9b01      	ldr	r3, [sp, #4]
 800c4b0:	2c00      	cmp	r4, #0
 800c4b2:	d1f2      	bne.n	800c49a <WM_Exec+0xd2>
 800c4b4:	e7ef      	b.n	800c496 <WM_Exec+0xce>
 800c4b6:	4658      	mov	r0, fp
 800c4b8:	f8c9 4000 	str.w	r4, [r9]
 800c4bc:	f003 f9d4 	bl	800f868 <GUI_SetColor>
 800c4c0:	4650      	mov	r0, sl
 800c4c2:	f003 f9cf 	bl	800f864 <GUI_SetBkColor>
 800c4c6:	a802      	add	r0, sp, #8
 800c4c8:	f003 fa1e 	bl	800f908 <GUI_RestoreContext>
 800c4cc:	f8b8 3000 	ldrh.w	r3, [r8]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d0c7      	beq.n	800c464 <WM_Exec+0x9c>
 800c4d4:	2601      	movs	r6, #1
 800c4d6:	e7c1      	b.n	800c45c <WM_Exec+0x94>
 800c4d8:	4b10      	ldr	r3, [pc, #64]	; (800c51c <WM_Exec+0x154>)
 800c4da:	6818      	ldr	r0, [r3, #0]
 800c4dc:	b110      	cbz	r0, 800c4e4 <WM_Exec+0x11c>
 800c4de:	6843      	ldr	r3, [r0, #4]
 800c4e0:	4798      	blx	r3
 800c4e2:	e008      	b.n	800c4f6 <WM_Exec+0x12e>
 800c4e4:	f002 fcaa 	bl	800ee3c <GUI__ManageCache>
 800c4e8:	e005      	b.n	800c4f6 <WM_Exec+0x12e>
 800c4ea:	2601      	movs	r6, #1
 800c4ec:	e774      	b.n	800c3d8 <WM_Exec+0x10>
 800c4ee:	2001      	movs	r0, #1
 800c4f0:	f002 fca4 	bl	800ee3c <GUI__ManageCache>
 800c4f4:	e7b1      	b.n	800c45a <WM_Exec+0x92>
 800c4f6:	4630      	mov	r0, r6
 800c4f8:	b01f      	add	sp, #124	; 0x7c
 800c4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4fe:	bf00      	nop
 800c500:	20021b84 	.word	0x20021b84
 800c504:	200015dc 	.word	0x200015dc
 800c508:	20021b94 	.word	0x20021b94
 800c50c:	20021b80 	.word	0x20021b80
 800c510:	20021c18 	.word	0x20021c18
 800c514:	20000308 	.word	0x20000308
 800c518:	20021b90 	.word	0x20021b90
 800c51c:	20021bb0 	.word	0x20021bb0
 800c520:	20001600 	.word	0x20001600

0800c524 <WM_Activate>:
 800c524:	4b02      	ldr	r3, [pc, #8]	; (800c530 <WM_Activate+0xc>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	2201      	movs	r2, #1
 800c52a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800c52e:	4770      	bx	lr
 800c530:	20000308 	.word	0x20000308

0800c534 <WM_Deactivate>:
 800c534:	4b03      	ldr	r3, [pc, #12]	; (800c544 <WM_Deactivate+0x10>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	2200      	movs	r2, #0
 800c53a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800c53e:	f002 bad3 	b.w	800eae8 <LCD_SetClipRectMax>
 800c542:	bf00      	nop
 800c544:	20000308 	.word	0x20000308

0800c548 <WM_DefaultProc>:
 800c548:	b510      	push	{r4, lr}
 800c54a:	4604      	mov	r4, r0
 800c54c:	6840      	ldr	r0, [r0, #4]
 800c54e:	6823      	ldr	r3, [r4, #0]
 800c550:	68e1      	ldr	r1, [r4, #12]
 800c552:	2b17      	cmp	r3, #23
 800c554:	d00f      	beq.n	800c576 <WM_DefaultProc+0x2e>
 800c556:	dc06      	bgt.n	800c566 <WM_DefaultProc+0x1e>
 800c558:	2b0e      	cmp	r3, #14
 800c55a:	d00e      	beq.n	800c57a <WM_DefaultProc+0x32>
 800c55c:	2b14      	cmp	r3, #20
 800c55e:	d114      	bne.n	800c58a <WM_DefaultProc+0x42>
 800c560:	f7fe fe28 	bl	800b1b4 <WM__GetClientRectEx>
 800c564:	e011      	b.n	800c58a <WM_DefaultProc+0x42>
 800c566:	2b22      	cmp	r3, #34	; 0x22
 800c568:	d00c      	beq.n	800c584 <WM_DefaultProc+0x3c>
 800c56a:	2b28      	cmp	r3, #40	; 0x28
 800c56c:	d10d      	bne.n	800c58a <WM_DefaultProc+0x42>
 800c56e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c572:	f7ff bbba 	b.w	800bcea <WM_InvalidateWindow>
 800c576:	60e0      	str	r0, [r4, #12]
 800c578:	bd10      	pop	{r4, pc}
 800c57a:	4621      	mov	r1, r4
 800c57c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c580:	f008 ba43 	b.w	8014a0a <WM_SendToParent>
 800c584:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800c588:	e000      	b.n	800c58c <WM_DefaultProc+0x44>
 800c58a:	2300      	movs	r3, #0
 800c58c:	60e3      	str	r3, [r4, #12]
 800c58e:	bd10      	pop	{r4, pc}

0800c590 <cbBackWin>:
 800c590:	6803      	ldr	r3, [r0, #0]
 800c592:	2b0e      	cmp	r3, #14
 800c594:	b510      	push	{r4, lr}
 800c596:	4604      	mov	r4, r0
 800c598:	d002      	beq.n	800c5a0 <cbBackWin+0x10>
 800c59a:	2b0f      	cmp	r3, #15
 800c59c:	d009      	beq.n	800c5b2 <cbBackWin+0x22>
 800c59e:	e020      	b.n	800c5e2 <cbBackWin+0x52>
 800c5a0:	68c3      	ldr	r3, [r0, #12]
 800c5a2:	685a      	ldr	r2, [r3, #4]
 800c5a4:	2a01      	cmp	r2, #1
 800c5a6:	d121      	bne.n	800c5ec <cbBackWin+0x5c>
 800c5a8:	6818      	ldr	r0, [r3, #0]
 800c5aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5ae:	f003 ba8d 	b.w	800facc <GUI_StoreKey>
 800c5b2:	4a0f      	ldr	r2, [pc, #60]	; (800c5f0 <cbBackWin+0x60>)
 800c5b4:	6843      	ldr	r3, [r0, #4]
 800c5b6:	6811      	ldr	r1, [r2, #0]
 800c5b8:	428b      	cmp	r3, r1
 800c5ba:	d006      	beq.n	800c5ca <cbBackWin+0x3a>
 800c5bc:	6852      	ldr	r2, [r2, #4]
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	bf14      	ite	ne
 800c5c2:	f04f 33ff 	movne.w	r3, #4294967295
 800c5c6:	2301      	moveq	r3, #1
 800c5c8:	e000      	b.n	800c5cc <cbBackWin+0x3c>
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	4a09      	ldr	r2, [pc, #36]	; (800c5f4 <cbBackWin+0x64>)
 800c5ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c5d2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800c5d6:	4298      	cmp	r0, r3
 800c5d8:	d003      	beq.n	800c5e2 <cbBackWin+0x52>
 800c5da:	f003 f943 	bl	800f864 <GUI_SetBkColor>
 800c5de:	f003 fe1d 	bl	801021c <GUI_Clear>
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5e8:	f7ff bfae 	b.w	800c548 <WM_DefaultProc>
 800c5ec:	bd10      	pop	{r4, pc}
 800c5ee:	bf00      	nop
 800c5f0:	20021b78 	.word	0x20021b78
 800c5f4:	20021ba4 	.word	0x20021ba4

0800c5f8 <WM_Init>:
 800c5f8:	b530      	push	{r4, r5, lr}
 800c5fa:	4b2b      	ldr	r3, [pc, #172]	; (800c6a8 <WM_Init+0xb0>)
 800c5fc:	7818      	ldrb	r0, [r3, #0]
 800c5fe:	b085      	sub	sp, #20
 800c600:	461d      	mov	r5, r3
 800c602:	2800      	cmp	r0, #0
 800c604:	d14d      	bne.n	800c6a2 <WM_Init+0xaa>
 800c606:	4b29      	ldr	r3, [pc, #164]	; (800c6ac <WM_Init+0xb4>)
 800c608:	6018      	str	r0, [r3, #0]
 800c60a:	4b29      	ldr	r3, [pc, #164]	; (800c6b0 <WM_Init+0xb8>)
 800c60c:	6018      	str	r0, [r3, #0]
 800c60e:	4b29      	ldr	r3, [pc, #164]	; (800c6b4 <WM_Init+0xbc>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	6458      	str	r0, [r3, #68]	; 0x44
 800c614:	4b28      	ldr	r3, [pc, #160]	; (800c6b8 <WM_Init+0xc0>)
 800c616:	8018      	strh	r0, [r3, #0]
 800c618:	4b28      	ldr	r3, [pc, #160]	; (800c6bc <WM_Init+0xc4>)
 800c61a:	4604      	mov	r4, r0
 800c61c:	8018      	strh	r0, [r3, #0]
 800c61e:	4620      	mov	r0, r4
 800c620:	f003 fce6 	bl	800fff0 <GUI_DEVICE__GetpDriver>
 800c624:	b1c0      	cbz	r0, 800c658 <WM_Init+0x60>
 800c626:	f04f 32ff 	mov.w	r2, #4294967295
 800c62a:	2302      	movs	r3, #2
 800c62c:	e88d 000c 	stmia.w	sp, {r2, r3}
 800c630:	2000      	movs	r0, #0
 800c632:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800c636:	4b22      	ldr	r3, [pc, #136]	; (800c6c0 <WM_Init+0xc8>)
 800c638:	9302      	str	r3, [sp, #8]
 800c63a:	9003      	str	r0, [sp, #12]
 800c63c:	4613      	mov	r3, r2
 800c63e:	4601      	mov	r1, r0
 800c640:	f7ff fb94 	bl	800bd6c <WM_CreateWindowAsChild>
 800c644:	4b1f      	ldr	r3, [pc, #124]	; (800c6c4 <WM_Init+0xcc>)
 800c646:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c64a:	4b1f      	ldr	r3, [pc, #124]	; (800c6c8 <WM_Init+0xd0>)
 800c64c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800c650:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800c654:	f7ff fb49 	bl	800bcea <WM_InvalidateWindow>
 800c658:	3401      	adds	r4, #1
 800c65a:	2c02      	cmp	r4, #2
 800c65c:	d1df      	bne.n	800c61e <WM_Init+0x26>
 800c65e:	481b      	ldr	r0, [pc, #108]	; (800c6cc <WM_Init+0xd4>)
 800c660:	f008 fac2 	bl	8014be8 <WM__AddCriticalHandle>
 800c664:	481a      	ldr	r0, [pc, #104]	; (800c6d0 <WM_Init+0xd8>)
 800c666:	f008 fabf 	bl	8014be8 <WM__AddCriticalHandle>
 800c66a:	481a      	ldr	r0, [pc, #104]	; (800c6d4 <WM_Init+0xdc>)
 800c66c:	f008 fabc 	bl	8014be8 <WM__AddCriticalHandle>
 800c670:	4819      	ldr	r0, [pc, #100]	; (800c6d8 <WM_Init+0xe0>)
 800c672:	f008 fab9 	bl	8014be8 <WM__AddCriticalHandle>
 800c676:	4819      	ldr	r0, [pc, #100]	; (800c6dc <WM_Init+0xe4>)
 800c678:	f008 fab6 	bl	8014be8 <WM__AddCriticalHandle>
 800c67c:	4818      	ldr	r0, [pc, #96]	; (800c6e0 <WM_Init+0xe8>)
 800c67e:	f008 fab3 	bl	8014be8 <WM__AddCriticalHandle>
 800c682:	4b10      	ldr	r3, [pc, #64]	; (800c6c4 <WM_Init+0xcc>)
 800c684:	6818      	ldr	r0, [r3, #0]
 800c686:	f7ff fb51 	bl	800bd2c <WM_SelectWindow>
 800c68a:	f7ff ff4b 	bl	800c524 <WM_Activate>
 800c68e:	2301      	movs	r3, #1
 800c690:	702b      	strb	r3, [r5, #0]
 800c692:	4814      	ldr	r0, [pc, #80]	; (800c6e4 <WM_Init+0xec>)
 800c694:	4b14      	ldr	r3, [pc, #80]	; (800c6e8 <WM_Init+0xf0>)
 800c696:	6003      	str	r3, [r0, #0]
 800c698:	b005      	add	sp, #20
 800c69a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c69e:	f003 bdcd 	b.w	801023c <GUI__RegisterExit>
 800c6a2:	b005      	add	sp, #20
 800c6a4:	bd30      	pop	{r4, r5, pc}
 800c6a6:	bf00      	nop
 800c6a8:	20001604 	.word	0x20001604
 800c6ac:	20021b94 	.word	0x20021b94
 800c6b0:	20001600 	.word	0x20001600
 800c6b4:	20000308 	.word	0x20000308
 800c6b8:	20021b90 	.word	0x20021b90
 800c6bc:	20021b70 	.word	0x20021b70
 800c6c0:	0800c591 	.word	0x0800c591
 800c6c4:	20021b78 	.word	0x20021b78
 800c6c8:	20021ba4 	.word	0x20021ba4
 800c6cc:	20021cfc 	.word	0x20021cfc
 800c6d0:	20021cec 	.word	0x20021cec
 800c6d4:	20021cdc 	.word	0x20021cdc
 800c6d8:	20021d04 	.word	0x20021d04
 800c6dc:	20021cf4 	.word	0x20021cf4
 800c6e0:	20021ce4 	.word	0x20021ce4
 800c6e4:	200015f8 	.word	0x200015f8
 800c6e8:	0800b3b5 	.word	0x0800b3b5

0800c6ec <_CreateStaticDevice>:
 800c6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f0:	b087      	sub	sp, #28
 800c6f2:	4604      	mov	r4, r0
 800c6f4:	f004 f9a4 	bl	8010a40 <GUI_ALLOC_LockH>
 800c6f8:	af06      	add	r7, sp, #24
 800c6fa:	f8b0 8000 	ldrh.w	r8, [r0]
 800c6fe:	8886      	ldrh	r6, [r0, #4]
 800c700:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 800c704:	f8b0 b006 	ldrh.w	fp, [r0, #6]
 800c708:	f847 0d04 	str.w	r0, [r7, #-4]!
 800c70c:	fa0f f888 	sxth.w	r8, r8
 800c710:	b236      	sxth	r6, r6
 800c712:	ebc8 0606 	rsb	r6, r8, r6
 800c716:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 800c71a:	3601      	adds	r6, #1
 800c71c:	4638      	mov	r0, r7
 800c71e:	fa0f f989 	sxth.w	r9, r9
 800c722:	fa0f f58b 	sxth.w	r5, fp
 800c726:	f004 f999 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800c72a:	ebc9 0505 	rsb	r5, r9, r5
 800c72e:	2e00      	cmp	r6, #0
 800c730:	f105 0501 	add.w	r5, r5, #1
 800c734:	dd4d      	ble.n	800c7d2 <_CreateStaticDevice+0xe6>
 800c736:	2d00      	cmp	r5, #0
 800c738:	dd4b      	ble.n	800c7d2 <_CreateStaticDevice+0xe6>
 800c73a:	f1ba 0f00 	cmp.w	sl, #0
 800c73e:	d04a      	beq.n	800c7d6 <_CreateStaticDevice+0xea>
 800c740:	4650      	mov	r0, sl
 800c742:	f004 f97d 	bl	8010a40 <GUI_ALLOC_LockH>
 800c746:	ab06      	add	r3, sp, #24
 800c748:	8886      	ldrh	r6, [r0, #4]
 800c74a:	f843 0d08 	str.w	r0, [r3, #-8]!
 800c74e:	88c5      	ldrh	r5, [r0, #6]
 800c750:	b236      	sxth	r6, r6
 800c752:	4618      	mov	r0, r3
 800c754:	f004 f982 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800c758:	4546      	cmp	r6, r8
 800c75a:	d102      	bne.n	800c762 <_CreateStaticDevice+0x76>
 800c75c:	b22d      	sxth	r5, r5
 800c75e:	454d      	cmp	r5, r9
 800c760:	d032      	beq.n	800c7c8 <_CreateStaticDevice+0xdc>
 800c762:	4650      	mov	r0, sl
 800c764:	4641      	mov	r1, r8
 800c766:	464a      	mov	r2, r9
 800c768:	f000 f886 	bl	800c878 <GUI_MEMDEV_SetOrg>
 800c76c:	e02c      	b.n	800c7c8 <_CreateStaticDevice+0xdc>
 800c76e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c774:	6283      	str	r3, [r0, #40]	; 0x28
 800c776:	4638      	mov	r0, r7
 800c778:	f004 f970 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800c77c:	4640      	mov	r0, r8
 800c77e:	f000 ff79 	bl	800d674 <GUI_MEMDEV_Select>
 800c782:	4607      	mov	r7, r0
 800c784:	4650      	mov	r0, sl
 800c786:	f003 f871 	bl	800f86c <GUI__AlphaSuppressMixing>
 800c78a:	4640      	mov	r0, r8
 800c78c:	f000 f8b4 	bl	800c8f8 <GUI_MEMDEV_GetDataPtr>
 800c790:	4b2d      	ldr	r3, [pc, #180]	; (800c848 <_CreateStaticDevice+0x15c>)
 800c792:	fb05 f206 	mul.w	r2, r5, r6
 800c796:	7819      	ldrb	r1, [r3, #0]
 800c798:	4d2c      	ldr	r5, [pc, #176]	; (800c84c <_CreateStaticDevice+0x160>)
 800c79a:	4e2d      	ldr	r6, [pc, #180]	; (800c850 <_CreateStaticDevice+0x164>)
 800c79c:	0092      	lsls	r2, r2, #2
 800c79e:	f002 fa6e 	bl	800ec7e <GUI__memset>
 800c7a2:	4620      	mov	r0, r4
 800c7a4:	f8d5 8000 	ldr.w	r8, [r5]
 800c7a8:	6034      	str	r4, [r6, #0]
 800c7aa:	f7fe fc82 	bl	800b0b2 <WM_GetWindowOrgX>
 800c7ae:	6028      	str	r0, [r5, #0]
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	f7ff fd5d 	bl	800c270 <WM__Paint1>
 800c7b6:	2000      	movs	r0, #0
 800c7b8:	f8c5 8000 	str.w	r8, [r5]
 800c7bc:	6030      	str	r0, [r6, #0]
 800c7be:	f003 f855 	bl	800f86c <GUI__AlphaSuppressMixing>
 800c7c2:	4638      	mov	r0, r7
 800c7c4:	f000 ff56 	bl	800d674 <GUI_MEMDEV_Select>
 800c7c8:	4620      	mov	r0, r4
 800c7ca:	f004 f92f 	bl	8010a2c <GUI_ALLOC_h2p>
 800c7ce:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800c7d0:	e037      	b.n	800c842 <_CreateStaticDevice+0x156>
 800c7d2:	2000      	movs	r0, #0
 800c7d4:	e035      	b.n	800c842 <_CreateStaticDevice+0x156>
 800c7d6:	f7fe fcd3 	bl	800b180 <WM_GetDesktopWindow>
 800c7da:	4284      	cmp	r4, r0
 800c7dc:	d112      	bne.n	800c804 <_CreateStaticDevice+0x118>
 800c7de:	f001 fe39 	bl	800e454 <LCD_GetXSize>
 800c7e2:	4682      	mov	sl, r0
 800c7e4:	f001 fe3e 	bl	800e464 <LCD_GetYSize>
 800c7e8:	4556      	cmp	r6, sl
 800c7ea:	dc02      	bgt.n	800c7f2 <_CreateStaticDevice+0x106>
 800c7ec:	4285      	cmp	r5, r0
 800c7ee:	dd09      	ble.n	800c804 <_CreateStaticDevice+0x118>
 800c7f0:	e000      	b.n	800c7f4 <_CreateStaticDevice+0x108>
 800c7f2:	4656      	mov	r6, sl
 800c7f4:	4285      	cmp	r5, r0
 800c7f6:	bfa8      	it	ge
 800c7f8:	4605      	movge	r5, r0
 800c7fa:	4631      	mov	r1, r6
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	462a      	mov	r2, r5
 800c800:	f7fe f85b 	bl	800a8ba <WM_SetSize>
 800c804:	4b13      	ldr	r3, [pc, #76]	; (800c854 <_CreateStaticDevice+0x168>)
 800c806:	9301      	str	r3, [sp, #4]
 800c808:	f04f 0a01 	mov.w	sl, #1
 800c80c:	4b12      	ldr	r3, [pc, #72]	; (800c858 <_CreateStaticDevice+0x16c>)
 800c80e:	9302      	str	r3, [sp, #8]
 800c810:	4640      	mov	r0, r8
 800c812:	4649      	mov	r1, r9
 800c814:	4632      	mov	r2, r6
 800c816:	462b      	mov	r3, r5
 800c818:	f8cd a000 	str.w	sl, [sp]
 800c81c:	f000 fe36 	bl	800d48c <GUI_MEMDEV__CreateFixed>
 800c820:	4680      	mov	r8, r0
 800c822:	4620      	mov	r0, r4
 800c824:	f004 f90c 	bl	8010a40 <GUI_ALLOC_LockH>
 800c828:	9005      	str	r0, [sp, #20]
 800c82a:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
 800c82e:	f1b8 0f00 	cmp.w	r8, #0
 800c832:	d19c      	bne.n	800c76e <_CreateStaticDevice+0x82>
 800c834:	4638      	mov	r0, r7
 800c836:	f004 f911 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800c83a:	4620      	mov	r0, r4
 800c83c:	f7ff fd18 	bl	800c270 <WM__Paint1>
 800c840:	4640      	mov	r0, r8
 800c842:	b007      	add	sp, #28
 800c844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c848:	200002e0 	.word	0x200002e0
 800c84c:	20021be8 	.word	0x20021be8
 800c850:	20021bbc 	.word	0x20021bbc
 800c854:	0801db94 	.word	0x0801db94
 800c858:	08020b10 	.word	0x08020b10

0800c85c <GUI_MEMDEV_Paint1Static>:
 800c85c:	b538      	push	{r3, r4, r5, lr}
 800c85e:	4605      	mov	r5, r0
 800c860:	2405      	movs	r4, #5
 800c862:	4628      	mov	r0, r5
 800c864:	f7ff ff42 	bl	800c6ec <_CreateStaticDevice>
 800c868:	b910      	cbnz	r0, 800c870 <GUI_MEMDEV_Paint1Static+0x14>
 800c86a:	3c01      	subs	r4, #1
 800c86c:	d1f9      	bne.n	800c862 <GUI_MEMDEV_Paint1Static+0x6>
 800c86e:	bd38      	pop	{r3, r4, r5, pc}
 800c870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c874:	f008 befa 	b.w	801566c <GUI_MEMDEV_Write>

0800c878 <GUI_MEMDEV_SetOrg>:
 800c878:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c87a:	460d      	mov	r5, r1
 800c87c:	4614      	mov	r4, r2
 800c87e:	b918      	cbnz	r0, 800c888 <GUI_MEMDEV_SetOrg+0x10>
 800c880:	4b11      	ldr	r3, [pc, #68]	; (800c8c8 <GUI_MEMDEV_SetOrg+0x50>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c886:	b1e8      	cbz	r0, 800c8c4 <GUI_MEMDEV_SetOrg+0x4c>
 800c888:	f004 f8da 	bl	8010a40 <GUI_ALLOC_LockH>
 800c88c:	b2a4      	uxth	r4, r4
 800c88e:	b2ad      	uxth	r5, r5
 800c890:	80c4      	strh	r4, [r0, #6]
 800c892:	8085      	strh	r5, [r0, #4]
 800c894:	9000      	str	r0, [sp, #0]
 800c896:	f002 f927 	bl	800eae8 <LCD_SetClipRectMax>
 800c89a:	9b00      	ldr	r3, [sp, #0]
 800c89c:	6958      	ldr	r0, [r3, #20]
 800c89e:	b170      	cbz	r0, 800c8be <GUI_MEMDEV_SetOrg+0x46>
 800c8a0:	f004 f8ce 	bl	8010a40 <GUI_ALLOC_LockH>
 800c8a4:	9b00      	ldr	r3, [sp, #0]
 800c8a6:	9001      	str	r0, [sp, #4]
 800c8a8:	891a      	ldrh	r2, [r3, #8]
 800c8aa:	895b      	ldrh	r3, [r3, #10]
 800c8ac:	8082      	strh	r2, [r0, #4]
 800c8ae:	80c3      	strh	r3, [r0, #6]
 800c8b0:	b112      	cbz	r2, 800c8b8 <GUI_MEMDEV_SetOrg+0x40>
 800c8b2:	b10b      	cbz	r3, 800c8b8 <GUI_MEMDEV_SetOrg+0x40>
 800c8b4:	8005      	strh	r5, [r0, #0]
 800c8b6:	8044      	strh	r4, [r0, #2]
 800c8b8:	a801      	add	r0, sp, #4
 800c8ba:	f004 f8cf 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800c8be:	4668      	mov	r0, sp
 800c8c0:	f004 f8cc 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800c8c4:	b003      	add	sp, #12
 800c8c6:	bd30      	pop	{r4, r5, pc}
 800c8c8:	20000308 	.word	0x20000308

0800c8cc <GUI_MEMDEV_GetYSize>:
 800c8cc:	b513      	push	{r0, r1, r4, lr}
 800c8ce:	b920      	cbnz	r0, 800c8da <GUI_MEMDEV_GetYSize+0xe>
 800c8d0:	4b08      	ldr	r3, [pc, #32]	; (800c8f4 <GUI_MEMDEV_GetYSize+0x28>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	b148      	cbz	r0, 800c8ee <GUI_MEMDEV_GetYSize+0x22>
 800c8da:	f004 f8b1 	bl	8010a40 <GUI_ALLOC_LockH>
 800c8de:	ab02      	add	r3, sp, #8
 800c8e0:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 800c8e4:	f843 0d04 	str.w	r0, [r3, #-4]!
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f004 f8b7 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800c8ee:	4620      	mov	r0, r4
 800c8f0:	b002      	add	sp, #8
 800c8f2:	bd10      	pop	{r4, pc}
 800c8f4:	20000308 	.word	0x20000308

0800c8f8 <GUI_MEMDEV_GetDataPtr>:
 800c8f8:	b513      	push	{r0, r1, r4, lr}
 800c8fa:	b150      	cbz	r0, 800c912 <GUI_MEMDEV_GetDataPtr+0x1a>
 800c8fc:	f004 f8a0 	bl	8010a40 <GUI_ALLOC_LockH>
 800c900:	4604      	mov	r4, r0
 800c902:	a802      	add	r0, sp, #8
 800c904:	f840 4d04 	str.w	r4, [r0, #-4]!
 800c908:	f004 f8a8 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800c90c:	f104 0018 	add.w	r0, r4, #24
 800c910:	e7ff      	b.n	800c912 <GUI_MEMDEV_GetDataPtr+0x1a>
 800c912:	b002      	add	sp, #8
 800c914:	bd10      	pop	{r4, pc}
	...

0800c918 <GUI_MEMDEV_Draw>:
 800c918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c91c:	4698      	mov	r8, r3
 800c91e:	4b47      	ldr	r3, [pc, #284]	; (800ca3c <GUI_MEMDEV_Draw+0x124>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	7c5c      	ldrb	r4, [r3, #17]
 800c924:	4b46      	ldr	r3, [pc, #280]	; (800ca40 <GUI_MEMDEV_Draw+0x128>)
 800c926:	571b      	ldrsb	r3, [r3, r4]
 800c928:	b087      	sub	sp, #28
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	4605      	mov	r5, r0
 800c92e:	9102      	str	r1, [sp, #8]
 800c930:	4693      	mov	fp, r2
 800c932:	4620      	mov	r0, r4
 800c934:	dd06      	ble.n	800c944 <GUI_MEMDEV_Draw+0x2c>
 800c936:	f001 fd71 	bl	800e41c <LCD_GetXSizeEx>
 800c93a:	4606      	mov	r6, r0
 800c93c:	4620      	mov	r0, r4
 800c93e:	f001 fd70 	bl	800e422 <LCD_GetYSizeEx>
 800c942:	e005      	b.n	800c950 <GUI_MEMDEV_Draw+0x38>
 800c944:	f001 fd70 	bl	800e428 <LCD_GetVXSizeEx>
 800c948:	4606      	mov	r6, r0
 800c94a:	4620      	mov	r0, r4
 800c94c:	f001 fd6f 	bl	800e42e <LCD_GetVYSizeEx>
 800c950:	4604      	mov	r4, r0
 800c952:	b325      	cbz	r5, 800c99e <GUI_MEMDEV_Draw+0x86>
 800c954:	a804      	add	r0, sp, #16
 800c956:	a905      	add	r1, sp, #20
 800c958:	f003 f98a 	bl	800fc70 <GUI_GetOrg>
 800c95c:	9b04      	ldr	r3, [sp, #16]
 800c95e:	f9b5 9000 	ldrsh.w	r9, [r5]
 800c962:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800c966:	f9b5 7002 	ldrsh.w	r7, [r5, #2]
 800c96a:	441e      	add	r6, r3
 800c96c:	9b05      	ldr	r3, [sp, #20]
 800c96e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c972:	3e01      	subs	r6, #1
 800c974:	4296      	cmp	r6, r2
 800c976:	bfd4      	ite	le
 800c978:	ebc9 0606 	rsble	r6, r9, r6
 800c97c:	ebc9 0602 	rsbgt	r6, r9, r2
 800c980:	441c      	add	r4, r3
 800c982:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 800c986:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 800c98a:	3c01      	subs	r4, #1
 800c98c:	4294      	cmp	r4, r2
 800c98e:	bfd4      	ite	le
 800c990:	ebc7 0404 	rsble	r4, r7, r4
 800c994:	ebc7 0402 	rsbgt	r4, r7, r2
 800c998:	3601      	adds	r6, #1
 800c99a:	3401      	adds	r4, #1
 800c99c:	e001      	b.n	800c9a2 <GUI_MEMDEV_Draw+0x8a>
 800c99e:	462f      	mov	r7, r5
 800c9a0:	46a9      	mov	r9, r5
 800c9a2:	f1b8 0f00 	cmp.w	r8, #0
 800c9a6:	d101      	bne.n	800c9ac <GUI_MEMDEV_Draw+0x94>
 800c9a8:	f1c4 0800 	rsb	r8, r4, #0
 800c9ac:	2e00      	cmp	r6, #0
 800c9ae:	dd40      	ble.n	800ca32 <GUI_MEMDEV_Draw+0x11a>
 800c9b0:	2c00      	cmp	r4, #0
 800c9b2:	dd3e      	ble.n	800ca32 <GUI_MEMDEV_Draw+0x11a>
 800c9b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c9b6:	9300      	str	r3, [sp, #0]
 800c9b8:	4648      	mov	r0, r9
 800c9ba:	4639      	mov	r1, r7
 800c9bc:	4632      	mov	r2, r6
 800c9be:	4643      	mov	r3, r8
 800c9c0:	f000 fe1e 	bl	800d600 <GUI_MEMDEV_CreateEx>
 800c9c4:	4605      	mov	r5, r0
 800c9c6:	b920      	cbnz	r0, 800c9d2 <GUI_MEMDEV_Draw+0xba>
 800c9c8:	4658      	mov	r0, fp
 800c9ca:	9b02      	ldr	r3, [sp, #8]
 800c9cc:	4798      	blx	r3
 800c9ce:	2001      	movs	r0, #1
 800c9d0:	e030      	b.n	800ca34 <GUI_MEMDEV_Draw+0x11c>
 800c9d2:	f7ff ff7b 	bl	800c8cc <GUI_MEMDEV_GetYSize>
 800c9d6:	4682      	mov	sl, r0
 800c9d8:	4628      	mov	r0, r5
 800c9da:	f000 fe4b 	bl	800d674 <GUI_MEMDEV_Select>
 800c9de:	f1ca 0300 	rsb	r3, sl, #0
 800c9e2:	9303      	str	r3, [sp, #12]
 800c9e4:	46a0      	mov	r8, r4
 800c9e6:	2600      	movs	r6, #0
 800c9e8:	45d0      	cmp	r8, sl
 800c9ea:	da03      	bge.n	800c9f4 <GUI_MEMDEV_Draw+0xdc>
 800c9ec:	4628      	mov	r0, r5
 800c9ee:	4641      	mov	r1, r8
 800c9f0:	f008 ff3c 	bl	801586c <GUI_MEMDEV_ReduceYSize>
 800c9f4:	b13e      	cbz	r6, 800ca06 <GUI_MEMDEV_Draw+0xee>
 800c9f6:	4628      	mov	r0, r5
 800c9f8:	4649      	mov	r1, r9
 800c9fa:	19f2      	adds	r2, r6, r7
 800c9fc:	f7ff ff3c 	bl	800c878 <GUI_MEMDEV_SetOrg>
 800ca00:	4628      	mov	r0, r5
 800ca02:	f008 ff49 	bl	8015898 <GUI_MEMDEV_Clear>
 800ca06:	9b02      	ldr	r3, [sp, #8]
 800ca08:	4658      	mov	r0, fp
 800ca0a:	4798      	blx	r3
 800ca0c:	4b0d      	ldr	r3, [pc, #52]	; (800ca44 <GUI_MEMDEV_Draw+0x12c>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	b10b      	cbz	r3, 800ca16 <GUI_MEMDEV_Draw+0xfe>
 800ca12:	2000      	movs	r0, #0
 800ca14:	4798      	blx	r3
 800ca16:	4628      	mov	r0, r5
 800ca18:	f000 fea4 	bl	800d764 <GUI_MEMDEV_CopyToLCD>
 800ca1c:	4456      	add	r6, sl
 800ca1e:	9b03      	ldr	r3, [sp, #12]
 800ca20:	42a6      	cmp	r6, r4
 800ca22:	4498      	add	r8, r3
 800ca24:	dbe0      	blt.n	800c9e8 <GUI_MEMDEV_Draw+0xd0>
 800ca26:	4628      	mov	r0, r5
 800ca28:	f000 fdc8 	bl	800d5bc <GUI_MEMDEV_Delete>
 800ca2c:	2000      	movs	r0, #0
 800ca2e:	f000 fe21 	bl	800d674 <GUI_MEMDEV_Select>
 800ca32:	2000      	movs	r0, #0
 800ca34:	b007      	add	sp, #28
 800ca36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca3a:	bf00      	nop
 800ca3c:	20000308 	.word	0x20000308
 800ca40:	20021be0 	.word	0x20021be0
 800ca44:	20001608 	.word	0x20001608

0800ca48 <_GetDevData>:
 800ca48:	4802      	ldr	r0, [pc, #8]	; (800ca54 <_GetDevData+0xc>)
 800ca4a:	2901      	cmp	r1, #1
 800ca4c:	bf18      	it	ne
 800ca4e:	2000      	movne	r0, #0
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop
 800ca54:	0801db94 	.word	0x0801db94

0800ca58 <_GetDevFunc>:
 800ca58:	4802      	ldr	r0, [pc, #8]	; (800ca64 <_GetDevFunc+0xc>)
 800ca5a:	2916      	cmp	r1, #22
 800ca5c:	bf18      	it	ne
 800ca5e:	2000      	movne	r0, #0
 800ca60:	4770      	bx	lr
 800ca62:	bf00      	nop
 800ca64:	0801547d 	.word	0x0801547d

0800ca68 <_GetDevProp>:
 800ca68:	2908      	cmp	r1, #8
 800ca6a:	bf0c      	ite	eq
 800ca6c:	2020      	moveq	r0, #32
 800ca6e:	2000      	movne	r0, #0
 800ca70:	4770      	bx	lr

0800ca72 <_SetOrg>:
 800ca72:	b508      	push	{r3, lr}
 800ca74:	6800      	ldr	r0, [r0, #0]
 800ca76:	68c3      	ldr	r3, [r0, #12]
 800ca78:	6a1b      	ldr	r3, [r3, #32]
 800ca7a:	4798      	blx	r3
 800ca7c:	bd08      	pop	{r3, pc}

0800ca7e <_GetRect>:
 800ca7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca80:	6880      	ldr	r0, [r0, #8]
 800ca82:	460c      	mov	r4, r1
 800ca84:	f003 ffdc 	bl	8010a40 <GUI_ALLOC_LockH>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	a802      	add	r0, sp, #8
 800ca8c:	8899      	ldrh	r1, [r3, #4]
 800ca8e:	88da      	ldrh	r2, [r3, #6]
 800ca90:	891d      	ldrh	r5, [r3, #8]
 800ca92:	f840 3d04 	str.w	r3, [r0, #-4]!
 800ca96:	895b      	ldrh	r3, [r3, #10]
 800ca98:	8021      	strh	r1, [r4, #0]
 800ca9a:	8062      	strh	r2, [r4, #2]
 800ca9c:	4429      	add	r1, r5
 800ca9e:	441a      	add	r2, r3
 800caa0:	3901      	subs	r1, #1
 800caa2:	3a01      	subs	r2, #1
 800caa4:	80a1      	strh	r1, [r4, #4]
 800caa6:	80e2      	strh	r2, [r4, #6]
 800caa8:	f003 ffd8 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800caac:	b003      	add	sp, #12
 800caae:	bd30      	pop	{r4, r5, pc}

0800cab0 <_XY2PTR>:
 800cab0:	4b0e      	ldr	r3, [pc, #56]	; (800caec <_XY2PTR+0x3c>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cab6:	4605      	mov	r5, r0
 800cab8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800caba:	460e      	mov	r6, r1
 800cabc:	f003 ffc0 	bl	8010a40 <GUI_ALLOC_LockH>
 800cac0:	4603      	mov	r3, r0
 800cac2:	a802      	add	r0, sp, #8
 800cac4:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800cac8:	f840 3d04 	str.w	r3, [r0, #-4]!
 800cacc:	f103 0118 	add.w	r1, r3, #24
 800cad0:	1b36      	subs	r6, r6, r4
 800cad2:	68dc      	ldr	r4, [r3, #12]
 800cad4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cad8:	fb04 1406 	mla	r4, r4, r6, r1
 800cadc:	1aed      	subs	r5, r5, r3
 800cade:	f003 ffbd 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800cae2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800cae6:	4620      	mov	r0, r4
 800cae8:	b002      	add	sp, #8
 800caea:	bd70      	pop	{r4, r5, r6, pc}
 800caec:	20000308 	.word	0x20000308

0800caf0 <_GetPixelIndex>:
 800caf0:	b508      	push	{r3, lr}
 800caf2:	4608      	mov	r0, r1
 800caf4:	4611      	mov	r1, r2
 800caf6:	f7ff ffdb 	bl	800cab0 <_XY2PTR>
 800cafa:	6800      	ldr	r0, [r0, #0]
 800cafc:	bd08      	pop	{r3, pc}
	...

0800cb00 <_XorPixel>:
 800cb00:	4b15      	ldr	r3, [pc, #84]	; (800cb58 <_XorPixel+0x58>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb06:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800cb08:	4615      	mov	r5, r2
 800cb0a:	460e      	mov	r6, r1
 800cb0c:	f003 ff98 	bl	8010a40 <GUI_ALLOC_LockH>
 800cb10:	4629      	mov	r1, r5
 800cb12:	9000      	str	r0, [sp, #0]
 800cb14:	4630      	mov	r0, r6
 800cb16:	f7ff ffcb 	bl	800cab0 <_XY2PTR>
 800cb1a:	9b00      	ldr	r3, [sp, #0]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	691b      	ldr	r3, [r3, #16]
 800cb20:	4604      	mov	r4, r0
 800cb22:	689b      	ldr	r3, [r3, #8]
 800cb24:	4798      	blx	r3
 800cb26:	6823      	ldr	r3, [r4, #0]
 800cb28:	4058      	eors	r0, r3
 800cb2a:	9b00      	ldr	r3, [sp, #0]
 800cb2c:	6020      	str	r0, [r4, #0]
 800cb2e:	6958      	ldr	r0, [r3, #20]
 800cb30:	b160      	cbz	r0, 800cb4c <_XorPixel+0x4c>
 800cb32:	f003 ff85 	bl	8010a40 <GUI_ALLOC_LockH>
 800cb36:	ac02      	add	r4, sp, #8
 800cb38:	6883      	ldr	r3, [r0, #8]
 800cb3a:	f844 0d04 	str.w	r0, [r4, #-4]!
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4631      	mov	r1, r6
 800cb42:	462a      	mov	r2, r5
 800cb44:	4798      	blx	r3
 800cb46:	4620      	mov	r0, r4
 800cb48:	f003 ff88 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800cb4c:	4668      	mov	r0, sp
 800cb4e:	f003 ff85 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800cb52:	b002      	add	sp, #8
 800cb54:	bd70      	pop	{r4, r5, r6, pc}
 800cb56:	bf00      	nop
 800cb58:	20000308 	.word	0x20000308

0800cb5c <_SetPixelIndex>:
 800cb5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb5e:	461c      	mov	r4, r3
 800cb60:	4b10      	ldr	r3, [pc, #64]	; (800cba4 <_SetPixelIndex+0x48>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800cb66:	460e      	mov	r6, r1
 800cb68:	4615      	mov	r5, r2
 800cb6a:	f003 ff69 	bl	8010a40 <GUI_ALLOC_LockH>
 800cb6e:	4629      	mov	r1, r5
 800cb70:	9000      	str	r0, [sp, #0]
 800cb72:	4630      	mov	r0, r6
 800cb74:	f7ff ff9c 	bl	800cab0 <_XY2PTR>
 800cb78:	9b00      	ldr	r3, [sp, #0]
 800cb7a:	6004      	str	r4, [r0, #0]
 800cb7c:	6958      	ldr	r0, [r3, #20]
 800cb7e:	b160      	cbz	r0, 800cb9a <_SetPixelIndex+0x3e>
 800cb80:	f003 ff5e 	bl	8010a40 <GUI_ALLOC_LockH>
 800cb84:	ac02      	add	r4, sp, #8
 800cb86:	6883      	ldr	r3, [r0, #8]
 800cb88:	f844 0d04 	str.w	r0, [r4, #-4]!
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	4631      	mov	r1, r6
 800cb90:	462a      	mov	r2, r5
 800cb92:	4798      	blx	r3
 800cb94:	4620      	mov	r0, r4
 800cb96:	f003 ff61 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800cb9a:	4668      	mov	r0, sp
 800cb9c:	f003 ff5e 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800cba0:	b002      	add	sp, #8
 800cba2:	bd70      	pop	{r4, r5, r6, pc}
 800cba4:	20000308 	.word	0x20000308

0800cba8 <_DrawVLine>:
 800cba8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cbac:	4d2c      	ldr	r5, [pc, #176]	; (800cc60 <_DrawVLine+0xb8>)
 800cbae:	461e      	mov	r6, r3
 800cbb0:	682b      	ldr	r3, [r5, #0]
 800cbb2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800cbb4:	460f      	mov	r7, r1
 800cbb6:	4614      	mov	r4, r2
 800cbb8:	f003 ff42 	bl	8010a40 <GUI_ALLOC_LockH>
 800cbbc:	9000      	str	r0, [sp, #0]
 800cbbe:	6940      	ldr	r0, [r0, #20]
 800cbc0:	46a9      	mov	r9, r5
 800cbc2:	b108      	cbz	r0, 800cbc8 <_DrawVLine+0x20>
 800cbc4:	f003 ff3c 	bl	8010a40 <GUI_ALLOC_LockH>
 800cbc8:	9001      	str	r0, [sp, #4]
 800cbca:	4621      	mov	r1, r4
 800cbcc:	4638      	mov	r0, r7
 800cbce:	f7ff ff6f 	bl	800cab0 <_XY2PTR>
 800cbd2:	f8d9 2000 	ldr.w	r2, [r9]
 800cbd6:	9b00      	ldr	r3, [sp, #0]
 800cbd8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800cbda:	7c12      	ldrb	r2, [r2, #16]
 800cbdc:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800cbe0:	f8d1 9000 	ldr.w	r9, [r1]
 800cbe4:	07d2      	lsls	r2, r2, #31
 800cbe6:	4605      	mov	r5, r0
 800cbe8:	d51f      	bpl.n	800cc2a <_DrawVLine+0x82>
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	691b      	ldr	r3, [r3, #16]
 800cbee:	689b      	ldr	r3, [r3, #8]
 800cbf0:	4798      	blx	r3
 800cbf2:	4680      	mov	r8, r0
 800cbf4:	9801      	ldr	r0, [sp, #4]
 800cbf6:	b128      	cbz	r0, 800cc04 <_DrawVLine+0x5c>
 800cbf8:	6882      	ldr	r2, [r0, #8]
 800cbfa:	4639      	mov	r1, r7
 800cbfc:	f8d2 c000 	ldr.w	ip, [r2]
 800cc00:	4622      	mov	r2, r4
 800cc02:	47e0      	blx	ip
 800cc04:	682b      	ldr	r3, [r5, #0]
 800cc06:	ea83 0308 	eor.w	r3, r3, r8
 800cc0a:	602b      	str	r3, [r5, #0]
 800cc0c:	9b00      	ldr	r3, [sp, #0]
 800cc0e:	3401      	adds	r4, #1
 800cc10:	68db      	ldr	r3, [r3, #12]
 800cc12:	42b4      	cmp	r4, r6
 800cc14:	441d      	add	r5, r3
 800cc16:	dded      	ble.n	800cbf4 <_DrawVLine+0x4c>
 800cc18:	4668      	mov	r0, sp
 800cc1a:	f003 ff1f 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800cc1e:	9b01      	ldr	r3, [sp, #4]
 800cc20:	b1d3      	cbz	r3, 800cc58 <_DrawVLine+0xb0>
 800cc22:	a801      	add	r0, sp, #4
 800cc24:	f003 ff1a 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800cc28:	e016      	b.n	800cc58 <_DrawVLine+0xb0>
 800cc2a:	9b01      	ldr	r3, [sp, #4]
 800cc2c:	b163      	cbz	r3, 800cc48 <_DrawVLine+0xa0>
 800cc2e:	9801      	ldr	r0, [sp, #4]
 800cc30:	6883      	ldr	r3, [r0, #8]
 800cc32:	4622      	mov	r2, r4
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	4639      	mov	r1, r7
 800cc38:	3401      	adds	r4, #1
 800cc3a:	4798      	blx	r3
 800cc3c:	42b4      	cmp	r4, r6
 800cc3e:	f8c5 9000 	str.w	r9, [r5]
 800cc42:	4445      	add	r5, r8
 800cc44:	ddf3      	ble.n	800cc2e <_DrawVLine+0x86>
 800cc46:	e7e7      	b.n	800cc18 <_DrawVLine+0x70>
 800cc48:	1b34      	subs	r4, r6, r4
 800cc4a:	3401      	adds	r4, #1
 800cc4c:	3c01      	subs	r4, #1
 800cc4e:	f8c5 9000 	str.w	r9, [r5]
 800cc52:	4445      	add	r5, r8
 800cc54:	d1fa      	bne.n	800cc4c <_DrawVLine+0xa4>
 800cc56:	e7df      	b.n	800cc18 <_DrawVLine+0x70>
 800cc58:	b003      	add	sp, #12
 800cc5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc5e:	bf00      	nop
 800cc60:	20000308 	.word	0x20000308

0800cc64 <_FillRect>:
 800cc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc68:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800cd18 <_FillRect+0xb4>
 800cc6c:	4614      	mov	r4, r2
 800cc6e:	f8db 2000 	ldr.w	r2, [fp]
 800cc72:	b085      	sub	sp, #20
 800cc74:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800cc76:	460f      	mov	r7, r1
 800cc78:	461d      	mov	r5, r3
 800cc7a:	f003 fee1 	bl	8010a40 <GUI_ALLOC_LockH>
 800cc7e:	4621      	mov	r1, r4
 800cc80:	9002      	str	r0, [sp, #8]
 800cc82:	4638      	mov	r0, r7
 800cc84:	f7ff ff14 	bl	800cab0 <_XY2PTR>
 800cc88:	9a02      	ldr	r2, [sp, #8]
 800cc8a:	f8db 3000 	ldr.w	r3, [fp]
 800cc8e:	f8d2 900c 	ldr.w	r9, [r2, #12]
 800cc92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc94:	4606      	mov	r6, r0
 800cc96:	6950      	ldr	r0, [r2, #20]
 800cc98:	f8d3 a000 	ldr.w	sl, [r3]
 800cc9c:	1bed      	subs	r5, r5, r7
 800cc9e:	3501      	adds	r5, #1
 800cca0:	b338      	cbz	r0, 800ccf2 <_FillRect+0x8e>
 800cca2:	f003 fecd 	bl	8010a40 <GUI_ALLOC_LockH>
 800cca6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cca8:	f10d 0810 	add.w	r8, sp, #16
 800ccac:	1b13      	subs	r3, r2, r4
 800ccae:	f848 0d04 	str.w	r0, [r8, #-4]!
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	9300      	str	r3, [sp, #0]
 800ccb6:	4639      	mov	r1, r7
 800ccb8:	4622      	mov	r2, r4
 800ccba:	462b      	mov	r3, r5
 800ccbc:	f008 fdc0 	bl	8015840 <GUI_USAGE_AddRect>
 800ccc0:	4640      	mov	r0, r8
 800ccc2:	f003 fecb 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800ccc6:	e014      	b.n	800ccf2 <_FillRect+0x8e>
 800ccc8:	f8db 3000 	ldr.w	r3, [fp]
 800cccc:	7c1b      	ldrb	r3, [r3, #16]
 800ccce:	07db      	lsls	r3, r3, #31
 800ccd0:	d513      	bpl.n	800ccfa <_FillRect+0x96>
 800ccd2:	9b02      	ldr	r3, [sp, #8]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	691b      	ldr	r3, [r3, #16]
 800ccd8:	689b      	ldr	r3, [r3, #8]
 800ccda:	4798      	blx	r3
 800ccdc:	4632      	mov	r2, r6
 800ccde:	462b      	mov	r3, r5
 800cce0:	6811      	ldr	r1, [r2, #0]
 800cce2:	3b01      	subs	r3, #1
 800cce4:	ea81 0100 	eor.w	r1, r1, r0
 800cce8:	f842 1b04 	str.w	r1, [r2], #4
 800ccec:	d1f8      	bne.n	800cce0 <_FillRect+0x7c>
 800ccee:	444e      	add	r6, r9
 800ccf0:	3401      	adds	r4, #1
 800ccf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ccf4:	429c      	cmp	r4, r3
 800ccf6:	dde7      	ble.n	800ccc8 <_FillRect+0x64>
 800ccf8:	e008      	b.n	800cd0c <_FillRect+0xa8>
 800ccfa:	2d00      	cmp	r5, #0
 800ccfc:	ddf7      	ble.n	800ccee <_FillRect+0x8a>
 800ccfe:	462b      	mov	r3, r5
 800cd00:	4632      	mov	r2, r6
 800cd02:	3b01      	subs	r3, #1
 800cd04:	f842 ab04 	str.w	sl, [r2], #4
 800cd08:	d1fb      	bne.n	800cd02 <_FillRect+0x9e>
 800cd0a:	e7f0      	b.n	800ccee <_FillRect+0x8a>
 800cd0c:	a802      	add	r0, sp, #8
 800cd0e:	f003 fea5 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800cd12:	b005      	add	sp, #20
 800cd14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd18:	20000308 	.word	0x20000308

0800cd1c <_DrawHLine>:
 800cd1c:	b507      	push	{r0, r1, r2, lr}
 800cd1e:	9200      	str	r2, [sp, #0]
 800cd20:	f7ff ffa0 	bl	800cc64 <_FillRect>
 800cd24:	b003      	add	sp, #12
 800cd26:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800cd2c <_DrawBitmap>:
 800cd2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd30:	4c9e      	ldr	r4, [pc, #632]	; (800cfac <_DrawBitmap+0x280>)
 800cd32:	469a      	mov	sl, r3
 800cd34:	6823      	ldr	r3, [r4, #0]
 800cd36:	b091      	sub	sp, #68	; 0x44
 800cd38:	4680      	mov	r8, r0
 800cd3a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800cd3c:	9207      	str	r2, [sp, #28]
 800cd3e:	460e      	mov	r6, r1
 800cd40:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800cd44:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800cd46:	2800      	cmp	r0, #0
 800cd48:	f000 837f 	beq.w	800d44a <_DrawBitmap+0x71e>
 800cd4c:	f003 fe78 	bl	8010a40 <GUI_ALLOC_LockH>
 800cd50:	900e      	str	r0, [sp, #56]	; 0x38
 800cd52:	6940      	ldr	r0, [r0, #20]
 800cd54:	b108      	cbz	r0, 800cd5a <_DrawBitmap+0x2e>
 800cd56:	f003 fe73 	bl	8010a40 <GUI_ALLOC_LockH>
 800cd5a:	900f      	str	r0, [sp, #60]	; 0x3c
 800cd5c:	a810      	add	r0, sp, #64	; 0x40
 800cd5e:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800cd62:	68db      	ldr	r3, [r3, #12]
 800cd64:	930a      	str	r3, [sp, #40]	; 0x28
 800cd66:	f003 fe79 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800cd6a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800cd6c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800cd6e:	4437      	add	r7, r6
 800cd70:	9704      	str	r7, [sp, #16]
 800cd72:	b150      	cbz	r0, 800cd8a <_DrawBitmap+0x5e>
 800cd74:	6823      	ldr	r3, [r4, #0]
 800cd76:	7c1b      	ldrb	r3, [r3, #16]
 800cd78:	079c      	lsls	r4, r3, #30
 800cd7a:	d406      	bmi.n	800cd8a <_DrawBitmap+0x5e>
 800cd7c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800cd7e:	9700      	str	r7, [sp, #0]
 800cd80:	9904      	ldr	r1, [sp, #16]
 800cd82:	9a07      	ldr	r2, [sp, #28]
 800cd84:	4653      	mov	r3, sl
 800cd86:	f008 fd5b 	bl	8015840 <GUI_USAGE_AddRect>
 800cd8a:	9804      	ldr	r0, [sp, #16]
 800cd8c:	9907      	ldr	r1, [sp, #28]
 800cd8e:	f7ff fe8f 	bl	800cab0 <_XY2PTR>
 800cd92:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800cd94:	2f17      	cmp	r7, #23
 800cd96:	4606      	mov	r6, r0
 800cd98:	dd5b      	ble.n	800ce52 <_DrawBitmap+0x126>
 800cd9a:	ea4f 078a 	mov.w	r7, sl, lsl #2
 800cd9e:	9705      	str	r7, [sp, #20]
 800cda0:	f04f 0900 	mov.w	r9, #0
 800cda4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800cda6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800cda8:	45b9      	cmp	r9, r7
 800cdaa:	da4e      	bge.n	800ce4a <_DrawBitmap+0x11e>
 800cdac:	b130      	cbz	r0, 800cdbc <_DrawBitmap+0x90>
 800cdae:	6883      	ldr	r3, [r0, #8]
 800cdb0:	9a07      	ldr	r2, [sp, #28]
 800cdb2:	685c      	ldr	r4, [r3, #4]
 800cdb4:	9904      	ldr	r1, [sp, #16]
 800cdb6:	444a      	add	r2, r9
 800cdb8:	4653      	mov	r3, sl
 800cdba:	47a0      	blx	r4
 800cdbc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800cdc0:	68db      	ldr	r3, [r3, #12]
 800cdc2:	b12b      	cbz	r3, 800cdd0 <_DrawBitmap+0xa4>
 800cdc4:	4630      	mov	r0, r6
 800cdc6:	4659      	mov	r1, fp
 800cdc8:	9a05      	ldr	r2, [sp, #20]
 800cdca:	f00b ff28 	bl	8018c1e <memcpy>
 800cdce:	e035      	b.n	800ce3c <_DrawBitmap+0x110>
 800cdd0:	4635      	mov	r5, r6
 800cdd2:	4657      	mov	r7, sl
 800cdd4:	465c      	mov	r4, fp
 800cdd6:	463b      	mov	r3, r7
 800cdd8:	4622      	mov	r2, r4
 800cdda:	f04f 0c00 	mov.w	ip, #0
 800cdde:	f852 1b04 	ldr.w	r1, [r2], #4
 800cde2:	0e09      	lsrs	r1, r1, #24
 800cde4:	bf08      	it	eq
 800cde6:	f10c 0c01 	addeq.w	ip, ip, #1
 800cdea:	3b01      	subs	r3, #1
 800cdec:	b1a1      	cbz	r1, 800ce18 <_DrawBitmap+0xec>
 800cdee:	f1bc 0f00 	cmp.w	ip, #0
 800cdf2:	d014      	beq.n	800ce1e <_DrawBitmap+0xf2>
 800cdf4:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800cdf8:	4628      	mov	r0, r5
 800cdfa:	4621      	mov	r1, r4
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	9303      	str	r3, [sp, #12]
 800ce00:	f8cd c008 	str.w	ip, [sp, #8]
 800ce04:	f00b ff0b 	bl	8018c1e <memcpy>
 800ce08:	9b03      	ldr	r3, [sp, #12]
 800ce0a:	f8dd c008 	ldr.w	ip, [sp, #8]
 800ce0e:	441d      	add	r5, r3
 800ce10:	441c      	add	r4, r3
 800ce12:	ebcc 0707 	rsb	r7, ip, r7
 800ce16:	e00f      	b.n	800ce38 <_DrawBitmap+0x10c>
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d1e0      	bne.n	800cdde <_DrawBitmap+0xb2>
 800ce1c:	e7e7      	b.n	800cdee <_DrawBitmap+0xc2>
 800ce1e:	6820      	ldr	r0, [r4, #0]
 800ce20:	0e02      	lsrs	r2, r0, #24
 800ce22:	2aff      	cmp	r2, #255	; 0xff
 800ce24:	d005      	beq.n	800ce32 <_DrawBitmap+0x106>
 800ce26:	43d2      	mvns	r2, r2
 800ce28:	6829      	ldr	r1, [r5, #0]
 800ce2a:	b2d2      	uxtb	r2, r2
 800ce2c:	f002 f919 	bl	800f062 <GUI__MixColors>
 800ce30:	6028      	str	r0, [r5, #0]
 800ce32:	3504      	adds	r5, #4
 800ce34:	3404      	adds	r4, #4
 800ce36:	3f01      	subs	r7, #1
 800ce38:	2f00      	cmp	r7, #0
 800ce3a:	d1cc      	bne.n	800cdd6 <_DrawBitmap+0xaa>
 800ce3c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800ce3e:	44bb      	add	fp, r7
 800ce40:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ce42:	f109 0901 	add.w	r9, r9, #1
 800ce46:	443e      	add	r6, r7
 800ce48:	e7ac      	b.n	800cda4 <_DrawBitmap+0x78>
 800ce4a:	2800      	cmp	r0, #0
 800ce4c:	f040 82fa 	bne.w	800d444 <_DrawBitmap+0x718>
 800ce50:	e2fb      	b.n	800d44a <_DrawBitmap+0x71e>
 800ce52:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800ce54:	2f10      	cmp	r7, #16
 800ce56:	d137      	bne.n	800cec8 <_DrawBitmap+0x19c>
 800ce58:	1f06      	subs	r6, r0, #4
 800ce5a:	2500      	movs	r5, #0
 800ce5c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800ce5e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800ce60:	42bd      	cmp	r5, r7
 800ce62:	f280 809e 	bge.w	800cfa2 <_DrawBitmap+0x276>
 800ce66:	9f07      	ldr	r7, [sp, #28]
 800ce68:	442f      	add	r7, r5
 800ce6a:	b13c      	cbz	r4, 800ce7c <_DrawBitmap+0x150>
 800ce6c:	68a3      	ldr	r3, [r4, #8]
 800ce6e:	9904      	ldr	r1, [sp, #16]
 800ce70:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800ce74:	4620      	mov	r0, r4
 800ce76:	463a      	mov	r2, r7
 800ce78:	4653      	mov	r3, sl
 800ce7a:	47e0      	blx	ip
 800ce7c:	f1ab 0302 	sub.w	r3, fp, #2
 800ce80:	9306      	str	r3, [sp, #24]
 800ce82:	9605      	str	r6, [sp, #20]
 800ce84:	46d1      	mov	r9, sl
 800ce86:	9904      	ldr	r1, [sp, #16]
 800ce88:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ce8c:	9a06      	ldr	r2, [sp, #24]
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 800ce94:	9206      	str	r2, [sp, #24]
 800ce96:	4451      	add	r1, sl
 800ce98:	ebc9 0101 	rsb	r1, r9, r1
 800ce9c:	9103      	str	r1, [sp, #12]
 800ce9e:	4798      	blx	r3
 800cea0:	9b05      	ldr	r3, [sp, #20]
 800cea2:	9903      	ldr	r1, [sp, #12]
 800cea4:	f843 0f04 	str.w	r0, [r3, #4]!
 800cea8:	9305      	str	r3, [sp, #20]
 800ceaa:	b124      	cbz	r4, 800ceb6 <_DrawBitmap+0x18a>
 800ceac:	68a3      	ldr	r3, [r4, #8]
 800ceae:	4620      	mov	r0, r4
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	463a      	mov	r2, r7
 800ceb4:	4798      	blx	r3
 800ceb6:	f1b9 0901 	subs.w	r9, r9, #1
 800ceba:	d1e4      	bne.n	800ce86 <_DrawBitmap+0x15a>
 800cebc:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800cebe:	44bb      	add	fp, r7
 800cec0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800cec2:	3501      	adds	r5, #1
 800cec4:	443e      	add	r6, r7
 800cec6:	e7c9      	b.n	800ce5c <_DrawBitmap+0x130>
 800cec8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800ceca:	2f08      	cmp	r7, #8
 800cecc:	f100 0604 	add.w	r6, r0, #4
 800ced0:	d16e      	bne.n	800cfb0 <_DrawBitmap+0x284>
 800ced2:	9f07      	ldr	r7, [sp, #28]
 800ced4:	9a07      	ldr	r2, [sp, #28]
 800ced6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ced8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800ceda:	1abb      	subs	r3, r7, r2
 800cedc:	428b      	cmp	r3, r1
 800cede:	f1a6 0004 	sub.w	r0, r6, #4
 800cee2:	da5e      	bge.n	800cfa2 <_DrawBitmap+0x276>
 800cee4:	4b31      	ldr	r3, [pc, #196]	; (800cfac <_DrawBitmap+0x280>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	7c1b      	ldrb	r3, [r3, #16]
 800ceea:	b36d      	cbz	r5, 800cf48 <_DrawBitmap+0x21c>
 800ceec:	f013 0303 	ands.w	r3, r3, #3
 800cef0:	d005      	beq.n	800cefe <_DrawBitmap+0x1d2>
 800cef2:	2b02      	cmp	r3, #2
 800cef4:	d14f      	bne.n	800cf96 <_DrawBitmap+0x26a>
 800cef6:	46b1      	mov	r9, r6
 800cef8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800cefc:	e01c      	b.n	800cf38 <_DrawBitmap+0x20c>
 800cefe:	f81b 2003 	ldrb.w	r2, [fp, r3]
 800cf02:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800cf06:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	4553      	cmp	r3, sl
 800cf0e:	d1f6      	bne.n	800cefe <_DrawBitmap+0x1d2>
 800cf10:	e041      	b.n	800cf96 <_DrawBitmap+0x26a>
 800cf12:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800cf16:	f849 3c04 	str.w	r3, [r9, #-4]
 800cf1a:	b12c      	cbz	r4, 800cf28 <_DrawBitmap+0x1fc>
 800cf1c:	68a3      	ldr	r3, [r4, #8]
 800cf1e:	4620      	mov	r0, r4
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	4641      	mov	r1, r8
 800cf24:	463a      	mov	r2, r7
 800cf26:	4798      	blx	r3
 800cf28:	9b04      	ldr	r3, [sp, #16]
 800cf2a:	f108 0801 	add.w	r8, r8, #1
 800cf2e:	4453      	add	r3, sl
 800cf30:	4543      	cmp	r3, r8
 800cf32:	f109 0904 	add.w	r9, r9, #4
 800cf36:	d02e      	beq.n	800cf96 <_DrawBitmap+0x26a>
 800cf38:	9904      	ldr	r1, [sp, #16]
 800cf3a:	ebc1 030b 	rsb	r3, r1, fp
 800cf3e:	f813 3008 	ldrb.w	r3, [r3, r8]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d0f0      	beq.n	800cf28 <_DrawBitmap+0x1fc>
 800cf46:	e7e4      	b.n	800cf12 <_DrawBitmap+0x1e6>
 800cf48:	f013 0303 	ands.w	r3, r3, #3
 800cf4c:	d005      	beq.n	800cf5a <_DrawBitmap+0x22e>
 800cf4e:	2b02      	cmp	r3, #2
 800cf50:	d121      	bne.n	800cf96 <_DrawBitmap+0x26a>
 800cf52:	46b1      	mov	r9, r6
 800cf54:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800cf58:	e015      	b.n	800cf86 <_DrawBitmap+0x25a>
 800cf5a:	4659      	mov	r1, fp
 800cf5c:	4652      	mov	r2, sl
 800cf5e:	f00b fe5e 	bl	8018c1e <memcpy>
 800cf62:	e018      	b.n	800cf96 <_DrawBitmap+0x26a>
 800cf64:	f849 3c04 	str.w	r3, [r9, #-4]
 800cf68:	b12c      	cbz	r4, 800cf76 <_DrawBitmap+0x24a>
 800cf6a:	68a3      	ldr	r3, [r4, #8]
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4641      	mov	r1, r8
 800cf72:	463a      	mov	r2, r7
 800cf74:	4798      	blx	r3
 800cf76:	9b04      	ldr	r3, [sp, #16]
 800cf78:	f108 0801 	add.w	r8, r8, #1
 800cf7c:	4453      	add	r3, sl
 800cf7e:	4543      	cmp	r3, r8
 800cf80:	f109 0904 	add.w	r9, r9, #4
 800cf84:	d007      	beq.n	800cf96 <_DrawBitmap+0x26a>
 800cf86:	9a04      	ldr	r2, [sp, #16]
 800cf88:	ebc2 030b 	rsb	r3, r2, fp
 800cf8c:	f813 3008 	ldrb.w	r3, [r3, r8]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d0f0      	beq.n	800cf76 <_DrawBitmap+0x24a>
 800cf94:	e7e6      	b.n	800cf64 <_DrawBitmap+0x238>
 800cf96:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800cf98:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cf9a:	449b      	add	fp, r3
 800cf9c:	3701      	adds	r7, #1
 800cf9e:	440e      	add	r6, r1
 800cfa0:	e798      	b.n	800ced4 <_DrawBitmap+0x1a8>
 800cfa2:	2c00      	cmp	r4, #0
 800cfa4:	f040 824e 	bne.w	800d444 <_DrawBitmap+0x718>
 800cfa8:	e24f      	b.n	800d44a <_DrawBitmap+0x71e>
 800cfaa:	bf00      	nop
 800cfac:	20000308 	.word	0x20000308
 800cfb0:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800cfb2:	4bb2      	ldr	r3, [pc, #712]	; (800d27c <_DrawBitmap+0x550>)
 800cfb4:	9609      	str	r6, [sp, #36]	; 0x24
 800cfb6:	007f      	lsls	r7, r7, #1
 800cfb8:	970c      	str	r7, [sp, #48]	; 0x30
 800cfba:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800cfbc:	00bf      	lsls	r7, r7, #2
 800cfbe:	970d      	str	r7, [sp, #52]	; 0x34
 800cfc0:	9f07      	ldr	r7, [sp, #28]
 800cfc2:	9705      	str	r7, [sp, #20]
 800cfc4:	2d00      	cmp	r5, #0
 800cfc6:	bf08      	it	eq
 800cfc8:	461d      	moveq	r5, r3
 800cfca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cfcc:	9907      	ldr	r1, [sp, #28]
 800cfce:	1f3c      	subs	r4, r7, #4
 800cfd0:	9f05      	ldr	r7, [sp, #20]
 800cfd2:	1a7b      	subs	r3, r7, r1
 800cfd4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800cfd6:	42bb      	cmp	r3, r7
 800cfd8:	f280 8232 	bge.w	800d440 <_DrawBitmap+0x714>
 800cfdc:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800cfde:	2f02      	cmp	r7, #2
 800cfe0:	f000 80ad 	beq.w	800d13e <_DrawBitmap+0x412>
 800cfe4:	2f04      	cmp	r7, #4
 800cfe6:	f000 814f 	beq.w	800d288 <_DrawBitmap+0x55c>
 800cfea:	2f01      	cmp	r7, #1
 800cfec:	f040 821e 	bne.w	800d42c <_DrawBitmap+0x700>
 800cff0:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800d284 <_DrawBitmap+0x558>
 800cff4:	f8d9 3000 	ldr.w	r3, [r9]
 800cff8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800cffa:	f003 fd21 	bl	8010a40 <GUI_ALLOC_LockH>
 800cffe:	f89b 3000 	ldrb.w	r3, [fp]
 800d002:	4a9f      	ldr	r2, [pc, #636]	; (800d280 <_DrawBitmap+0x554>)
 800d004:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d006:	5cd6      	ldrb	r6, [r2, r3]
 800d008:	f8d9 3000 	ldr.w	r3, [r9]
 800d00c:	900e      	str	r0, [sp, #56]	; 0x38
 800d00e:	7c1b      	ldrb	r3, [r3, #16]
 800d010:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800d014:	f003 0303 	and.w	r3, r3, #3
 800d018:	2b02      	cmp	r3, #2
 800d01a:	4657      	mov	r7, sl
 800d01c:	f1c1 0808 	rsb	r8, r1, #8
 800d020:	fa46 f601 	asr.w	r6, r6, r1
 800d024:	d020      	beq.n	800d068 <_DrawBitmap+0x33c>
 800d026:	2b03      	cmp	r3, #3
 800d028:	d061      	beq.n	800d0ee <_DrawBitmap+0x3c2>
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d05f      	beq.n	800d0ee <_DrawBitmap+0x3c2>
 800d02e:	465a      	mov	r2, fp
 800d030:	4547      	cmp	r7, r8
 800d032:	bf38      	it	cc
 800d034:	46b8      	movcc	r8, r7
 800d036:	ebc8 0707 	rsb	r7, r8, r7
 800d03a:	4643      	mov	r3, r8
 800d03c:	4621      	mov	r1, r4
 800d03e:	f006 0001 	and.w	r0, r6, #1
 800d042:	3b01      	subs	r3, #1
 800d044:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800d048:	f841 0b04 	str.w	r0, [r1], #4
 800d04c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d050:	d1f5      	bne.n	800d03e <_DrawBitmap+0x312>
 800d052:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800d056:	2f00      	cmp	r7, #0
 800d058:	d06d      	beq.n	800d136 <_DrawBitmap+0x40a>
 800d05a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800d05e:	4988      	ldr	r1, [pc, #544]	; (800d280 <_DrawBitmap+0x554>)
 800d060:	f04f 0808 	mov.w	r8, #8
 800d064:	5cce      	ldrb	r6, [r1, r3]
 800d066:	e7e3      	b.n	800d030 <_DrawBitmap+0x304>
 800d068:	686b      	ldr	r3, [r5, #4]
 800d06a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800d06e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d070:	f8cd b020 	str.w	fp, [sp, #32]
 800d074:	4547      	cmp	r7, r8
 800d076:	bf38      	it	cc
 800d078:	46b8      	movcc	r8, r7
 800d07a:	ebc8 0707 	rsb	r7, r8, r7
 800d07e:	f1bc 0f00 	cmp.w	ip, #0
 800d082:	d026      	beq.n	800d0d2 <_DrawBitmap+0x3a6>
 800d084:	b91e      	cbnz	r6, 800d08e <_DrawBitmap+0x362>
 800d086:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800d08a:	44c1      	add	r9, r8
 800d08c:	e025      	b.n	800d0da <_DrawBitmap+0x3ae>
 800d08e:	07f0      	lsls	r0, r6, #31
 800d090:	d50c      	bpl.n	800d0ac <_DrawBitmap+0x380>
 800d092:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800d096:	9a05      	ldr	r2, [sp, #20]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f8cd c008 	str.w	ip, [sp, #8]
 800d09e:	4660      	mov	r0, ip
 800d0a0:	4649      	mov	r1, r9
 800d0a2:	4798      	blx	r3
 800d0a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0a6:	f8dd c008 	ldr.w	ip, [sp, #8]
 800d0aa:	6023      	str	r3, [r4, #0]
 800d0ac:	f1b8 0801 	subs.w	r8, r8, #1
 800d0b0:	f109 0901 	add.w	r9, r9, #1
 800d0b4:	f104 0404 	add.w	r4, r4, #4
 800d0b8:	d00f      	beq.n	800d0da <_DrawBitmap+0x3ae>
 800d0ba:	0876      	lsrs	r6, r6, #1
 800d0bc:	e7e2      	b.n	800d084 <_DrawBitmap+0x358>
 800d0be:	07f1      	lsls	r1, r6, #31
 800d0c0:	bf44      	itt	mi
 800d0c2:	9b0b      	ldrmi	r3, [sp, #44]	; 0x2c
 800d0c4:	6023      	strmi	r3, [r4, #0]
 800d0c6:	f1b8 0801 	subs.w	r8, r8, #1
 800d0ca:	f104 0404 	add.w	r4, r4, #4
 800d0ce:	d004      	beq.n	800d0da <_DrawBitmap+0x3ae>
 800d0d0:	0876      	lsrs	r6, r6, #1
 800d0d2:	2e00      	cmp	r6, #0
 800d0d4:	d1f3      	bne.n	800d0be <_DrawBitmap+0x392>
 800d0d6:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800d0da:	b367      	cbz	r7, 800d136 <_DrawBitmap+0x40a>
 800d0dc:	9908      	ldr	r1, [sp, #32]
 800d0de:	4a68      	ldr	r2, [pc, #416]	; (800d280 <_DrawBitmap+0x554>)
 800d0e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d0e4:	9108      	str	r1, [sp, #32]
 800d0e6:	5cd6      	ldrb	r6, [r2, r3]
 800d0e8:	f04f 0808 	mov.w	r8, #8
 800d0ec:	e7c2      	b.n	800d074 <_DrawBitmap+0x348>
 800d0ee:	6803      	ldr	r3, [r0, #0]
 800d0f0:	691b      	ldr	r3, [r3, #16]
 800d0f2:	689b      	ldr	r3, [r3, #8]
 800d0f4:	4798      	blx	r3
 800d0f6:	4659      	mov	r1, fp
 800d0f8:	4547      	cmp	r7, r8
 800d0fa:	bf38      	it	cc
 800d0fc:	46b8      	movcc	r8, r7
 800d0fe:	ebc8 0707 	rsb	r7, r8, r7
 800d102:	1d23      	adds	r3, r4, #4
 800d104:	46c6      	mov	lr, r8
 800d106:	07f2      	lsls	r2, r6, #31
 800d108:	d504      	bpl.n	800d114 <_DrawBitmap+0x3e8>
 800d10a:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800d10e:	4042      	eors	r2, r0
 800d110:	f843 2c04 	str.w	r2, [r3, #-4]
 800d114:	f1be 0e01 	subs.w	lr, lr, #1
 800d118:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d11c:	f103 0304 	add.w	r3, r3, #4
 800d120:	d1f1      	bne.n	800d106 <_DrawBitmap+0x3da>
 800d122:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800d126:	b137      	cbz	r7, 800d136 <_DrawBitmap+0x40a>
 800d128:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d12c:	4a54      	ldr	r2, [pc, #336]	; (800d280 <_DrawBitmap+0x554>)
 800d12e:	f04f 0808 	mov.w	r8, #8
 800d132:	5cd6      	ldrb	r6, [r2, r3]
 800d134:	e7e0      	b.n	800d0f8 <_DrawBitmap+0x3cc>
 800d136:	a80e      	add	r0, sp, #56	; 0x38
 800d138:	f003 fc90 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800d13c:	e176      	b.n	800d42c <_DrawBitmap+0x700>
 800d13e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800d140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d142:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800d146:	f1c7 0604 	rsb	r6, r7, #4
 800d14a:	f89b 7000 	ldrb.w	r7, [fp]
 800d14e:	409f      	lsls	r7, r3
 800d150:	4b4c      	ldr	r3, [pc, #304]	; (800d284 <_DrawBitmap+0x558>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	7c1b      	ldrb	r3, [r3, #16]
 800d156:	f003 0303 	and.w	r3, r3, #3
 800d15a:	2b01      	cmp	r3, #1
 800d15c:	b2f6      	uxtb	r6, r6
 800d15e:	b2ff      	uxtb	r7, r7
 800d160:	d066      	beq.n	800d230 <_DrawBitmap+0x504>
 800d162:	d308      	bcc.n	800d176 <_DrawBitmap+0x44a>
 800d164:	2b02      	cmp	r3, #2
 800d166:	f040 8161 	bne.w	800d42c <_DrawBitmap+0x700>
 800d16a:	9904      	ldr	r1, [sp, #16]
 800d16c:	f8cd b020 	str.w	fp, [sp, #32]
 800d170:	46d0      	mov	r8, sl
 800d172:	9106      	str	r1, [sp, #24]
 800d174:	e03e      	b.n	800d1f4 <_DrawBitmap+0x4c8>
 800d176:	465a      	mov	r2, fp
 800d178:	4653      	mov	r3, sl
 800d17a:	429e      	cmp	r6, r3
 800d17c:	bfc8      	it	gt
 800d17e:	b2de      	uxtbgt	r6, r3
 800d180:	1b9b      	subs	r3, r3, r6
 800d182:	4631      	mov	r1, r6
 800d184:	4620      	mov	r0, r4
 800d186:	ea4f 1c97 	mov.w	ip, r7, lsr #6
 800d18a:	3901      	subs	r1, #1
 800d18c:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 800d190:	f840 cb04 	str.w	ip, [r0], #4
 800d194:	00bf      	lsls	r7, r7, #2
 800d196:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800d19a:	b2ff      	uxtb	r7, r7
 800d19c:	d1f3      	bne.n	800d186 <_DrawBitmap+0x45a>
 800d19e:	3e01      	subs	r6, #1
 800d1a0:	b2f6      	uxtb	r6, r6
 800d1a2:	3601      	adds	r6, #1
 800d1a4:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	f000 813f 	beq.w	800d42c <_DrawBitmap+0x700>
 800d1ae:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 800d1b2:	2604      	movs	r6, #4
 800d1b4:	e7e1      	b.n	800d17a <_DrawBitmap+0x44e>
 800d1b6:	9906      	ldr	r1, [sp, #24]
 800d1b8:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 800d1bc:	4449      	add	r1, r9
 800d1be:	d122      	bne.n	800d206 <_DrawBitmap+0x4da>
 800d1c0:	f109 0901 	add.w	r9, r9, #1
 800d1c4:	fa5f f289 	uxtb.w	r2, r9
 800d1c8:	00bf      	lsls	r7, r7, #2
 800d1ca:	4296      	cmp	r6, r2
 800d1cc:	b2ff      	uxtb	r7, r7
 800d1ce:	d1f2      	bne.n	800d1b6 <_DrawBitmap+0x48a>
 800d1d0:	9f06      	ldr	r7, [sp, #24]
 800d1d2:	3e01      	subs	r6, #1
 800d1d4:	b2f6      	uxtb	r6, r6
 800d1d6:	1c7b      	adds	r3, r7, #1
 800d1d8:	1c72      	adds	r2, r6, #1
 800d1da:	199e      	adds	r6, r3, r6
 800d1dc:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800d1e0:	9606      	str	r6, [sp, #24]
 800d1e2:	f1b8 0f00 	cmp.w	r8, #0
 800d1e6:	f000 8121 	beq.w	800d42c <_DrawBitmap+0x700>
 800d1ea:	9b08      	ldr	r3, [sp, #32]
 800d1ec:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800d1f0:	9308      	str	r3, [sp, #32]
 800d1f2:	2604      	movs	r6, #4
 800d1f4:	4546      	cmp	r6, r8
 800d1f6:	bfc8      	it	gt
 800d1f8:	fa5f f688 	uxtbgt.w	r6, r8
 800d1fc:	ebc6 0808 	rsb	r8, r6, r8
 800d200:	f04f 0900 	mov.w	r9, #0
 800d204:	e7d7      	b.n	800d1b6 <_DrawBitmap+0x48a>
 800d206:	09ba      	lsrs	r2, r7, #6
 800d208:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800d20c:	f844 2029 	str.w	r2, [r4, r9, lsl #2]
 800d210:	f1bc 0f00 	cmp.w	ip, #0
 800d214:	d0d4      	beq.n	800d1c0 <_DrawBitmap+0x494>
 800d216:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800d21a:	6812      	ldr	r2, [r2, #0]
 800d21c:	920b      	str	r2, [sp, #44]	; 0x2c
 800d21e:	4660      	mov	r0, ip
 800d220:	f8cd c008 	str.w	ip, [sp, #8]
 800d224:	9a05      	ldr	r2, [sp, #20]
 800d226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d228:	4798      	blx	r3
 800d22a:	f8dd c008 	ldr.w	ip, [sp, #8]
 800d22e:	e7c7      	b.n	800d1c0 <_DrawBitmap+0x494>
 800d230:	4658      	mov	r0, fp
 800d232:	4653      	mov	r3, sl
 800d234:	429e      	cmp	r6, r3
 800d236:	bfc8      	it	gt
 800d238:	b2de      	uxtbgt	r6, r3
 800d23a:	1b9b      	subs	r3, r3, r6
 800d23c:	1d22      	adds	r2, r4, #4
 800d23e:	46b4      	mov	ip, r6
 800d240:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 800d244:	d005      	beq.n	800d252 <_DrawBitmap+0x526>
 800d246:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800d24a:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800d24e:	f842 1c04 	str.w	r1, [r2, #-4]
 800d252:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d256:	00bf      	lsls	r7, r7, #2
 800d258:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800d25c:	b2ff      	uxtb	r7, r7
 800d25e:	f102 0204 	add.w	r2, r2, #4
 800d262:	d1ed      	bne.n	800d240 <_DrawBitmap+0x514>
 800d264:	3e01      	subs	r6, #1
 800d266:	b2f6      	uxtb	r6, r6
 800d268:	3601      	adds	r6, #1
 800d26a:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800d26e:	2b00      	cmp	r3, #0
 800d270:	f000 80dc 	beq.w	800d42c <_DrawBitmap+0x700>
 800d274:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800d278:	2604      	movs	r6, #4
 800d27a:	e7db      	b.n	800d234 <_DrawBitmap+0x508>
 800d27c:	0801db54 	.word	0x0801db54
 800d280:	080209fc 	.word	0x080209fc
 800d284:	20000308 	.word	0x20000308
 800d288:	4a71      	ldr	r2, [pc, #452]	; (800d450 <_DrawBitmap+0x724>)
 800d28a:	f89b 3000 	ldrb.w	r3, [fp]
 800d28e:	6812      	ldr	r2, [r2, #0]
 800d290:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d292:	7c12      	ldrb	r2, [r2, #16]
 800d294:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800d296:	f002 0203 	and.w	r2, r2, #3
 800d29a:	408b      	lsls	r3, r1
 800d29c:	2a01      	cmp	r2, #1
 800d29e:	b2de      	uxtb	r6, r3
 800d2a0:	f000 809c 	beq.w	800d3dc <_DrawBitmap+0x6b0>
 800d2a4:	d302      	bcc.n	800d2ac <_DrawBitmap+0x580>
 800d2a6:	2a02      	cmp	r2, #2
 800d2a8:	d035      	beq.n	800d316 <_DrawBitmap+0x5ea>
 800d2aa:	e0bf      	b.n	800d42c <_DrawBitmap+0x700>
 800d2ac:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800d2ae:	b15f      	cbz	r7, 800d2c8 <_DrawBitmap+0x59c>
 800d2b0:	0936      	lsrs	r6, r6, #4
 800d2b2:	f10b 0201 	add.w	r2, fp, #1
 800d2b6:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800d2ba:	6023      	str	r3, [r4, #0]
 800d2bc:	f89b 6001 	ldrb.w	r6, [fp, #1]
 800d2c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d2c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d2c6:	e001      	b.n	800d2cc <_DrawBitmap+0x5a0>
 800d2c8:	4653      	mov	r3, sl
 800d2ca:	465a      	mov	r2, fp
 800d2cc:	2b01      	cmp	r3, #1
 800d2ce:	dd1a      	ble.n	800d306 <_DrawBitmap+0x5da>
 800d2d0:	1058      	asrs	r0, r3, #1
 800d2d2:	f104 0108 	add.w	r1, r4, #8
 800d2d6:	f003 0301 	and.w	r3, r3, #1
 800d2da:	eb02 0800 	add.w	r8, r2, r0
 800d2de:	ea4f 1c16 	mov.w	ip, r6, lsr #4
 800d2e2:	f006 060f 	and.w	r6, r6, #15
 800d2e6:	f855 702c 	ldr.w	r7, [r5, ip, lsl #2]
 800d2ea:	f841 7c08 	str.w	r7, [r1, #-8]
 800d2ee:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800d2f2:	f841 6c04 	str.w	r6, [r1, #-4]
 800d2f6:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800d2fa:	4542      	cmp	r2, r8
 800d2fc:	f101 0108 	add.w	r1, r1, #8
 800d300:	d1ed      	bne.n	800d2de <_DrawBitmap+0x5b2>
 800d302:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800d306:	2b00      	cmp	r3, #0
 800d308:	f000 8090 	beq.w	800d42c <_DrawBitmap+0x700>
 800d30c:	0936      	lsrs	r6, r6, #4
 800d30e:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800d312:	6023      	str	r3, [r4, #0]
 800d314:	e08a      	b.n	800d42c <_DrawBitmap+0x700>
 800d316:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d318:	b1c1      	cbz	r1, 800d34c <_DrawBitmap+0x620>
 800d31a:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800d31e:	d00a      	beq.n	800d336 <_DrawBitmap+0x60a>
 800d320:	0936      	lsrs	r6, r6, #4
 800d322:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800d326:	6023      	str	r3, [r4, #0]
 800d328:	b12f      	cbz	r7, 800d336 <_DrawBitmap+0x60a>
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	9904      	ldr	r1, [sp, #16]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	9a05      	ldr	r2, [sp, #20]
 800d332:	4638      	mov	r0, r7
 800d334:	4798      	blx	r3
 800d336:	9a04      	ldr	r2, [sp, #16]
 800d338:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d33a:	f89b 6001 	ldrb.w	r6, [fp, #1]
 800d33e:	f102 0801 	add.w	r8, r2, #1
 800d342:	f10a 3cff 	add.w	ip, sl, #4294967295
 800d346:	f10b 0901 	add.w	r9, fp, #1
 800d34a:	e011      	b.n	800d370 <_DrawBitmap+0x644>
 800d34c:	46d4      	mov	ip, sl
 800d34e:	46d9      	mov	r9, fp
 800d350:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d354:	e00c      	b.n	800d370 <_DrawBitmap+0x644>
 800d356:	f016 0ff0 	tst.w	r6, #240	; 0xf0
 800d35a:	d10d      	bne.n	800d378 <_DrawBitmap+0x64c>
 800d35c:	f016 060f 	ands.w	r6, r6, #15
 800d360:	d11b      	bne.n	800d39a <_DrawBitmap+0x66e>
 800d362:	f819 6f01 	ldrb.w	r6, [r9, #1]!
 800d366:	3408      	adds	r4, #8
 800d368:	f108 0802 	add.w	r8, r8, #2
 800d36c:	f1ac 0c02 	sub.w	ip, ip, #2
 800d370:	f1bc 0f01 	cmp.w	ip, #1
 800d374:	dcef      	bgt.n	800d356 <_DrawBitmap+0x62a>
 800d376:	e021      	b.n	800d3bc <_DrawBitmap+0x690>
 800d378:	0933      	lsrs	r3, r6, #4
 800d37a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800d37e:	6023      	str	r3, [r4, #0]
 800d380:	2f00      	cmp	r7, #0
 800d382:	d0eb      	beq.n	800d35c <_DrawBitmap+0x630>
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	9a05      	ldr	r2, [sp, #20]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	f8cd c008 	str.w	ip, [sp, #8]
 800d38e:	4638      	mov	r0, r7
 800d390:	4641      	mov	r1, r8
 800d392:	4798      	blx	r3
 800d394:	f8dd c008 	ldr.w	ip, [sp, #8]
 800d398:	e7e0      	b.n	800d35c <_DrawBitmap+0x630>
 800d39a:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800d39e:	6063      	str	r3, [r4, #4]
 800d3a0:	2f00      	cmp	r7, #0
 800d3a2:	d0de      	beq.n	800d362 <_DrawBitmap+0x636>
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	9a05      	ldr	r2, [sp, #20]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	f8cd c008 	str.w	ip, [sp, #8]
 800d3ae:	4638      	mov	r0, r7
 800d3b0:	f108 0101 	add.w	r1, r8, #1
 800d3b4:	4798      	blx	r3
 800d3b6:	f8dd c008 	ldr.w	ip, [sp, #8]
 800d3ba:	e7d2      	b.n	800d362 <_DrawBitmap+0x636>
 800d3bc:	f1bc 0f00 	cmp.w	ip, #0
 800d3c0:	d034      	beq.n	800d42c <_DrawBitmap+0x700>
 800d3c2:	0936      	lsrs	r6, r6, #4
 800d3c4:	d032      	beq.n	800d42c <_DrawBitmap+0x700>
 800d3c6:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800d3ca:	6023      	str	r3, [r4, #0]
 800d3cc:	b377      	cbz	r7, 800d42c <_DrawBitmap+0x700>
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	9a05      	ldr	r2, [sp, #20]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	4638      	mov	r0, r7
 800d3d6:	4641      	mov	r1, r8
 800d3d8:	4798      	blx	r3
 800d3da:	e027      	b.n	800d42c <_DrawBitmap+0x700>
 800d3dc:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800d3de:	f1c7 0302 	rsb	r3, r7, #2
 800d3e2:	b2db      	uxtb	r3, r3
 800d3e4:	465f      	mov	r7, fp
 800d3e6:	4652      	mov	r2, sl
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	bfc8      	it	gt
 800d3ec:	b2d3      	uxtbgt	r3, r2
 800d3ee:	1ad2      	subs	r2, r2, r3
 800d3f0:	1d20      	adds	r0, r4, #4
 800d3f2:	469c      	mov	ip, r3
 800d3f4:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800d3f8:	d005      	beq.n	800d406 <_DrawBitmap+0x6da>
 800d3fa:	f850 1c04 	ldr.w	r1, [r0, #-4]
 800d3fe:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800d402:	f840 1c04 	str.w	r1, [r0, #-4]
 800d406:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d40a:	0136      	lsls	r6, r6, #4
 800d40c:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800d410:	b2f6      	uxtb	r6, r6
 800d412:	f100 0004 	add.w	r0, r0, #4
 800d416:	d1ed      	bne.n	800d3f4 <_DrawBitmap+0x6c8>
 800d418:	3b01      	subs	r3, #1
 800d41a:	b2db      	uxtb	r3, r3
 800d41c:	3301      	adds	r3, #1
 800d41e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800d422:	b11a      	cbz	r2, 800d42c <_DrawBitmap+0x700>
 800d424:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 800d428:	2302      	movs	r3, #2
 800d42a:	e7dd      	b.n	800d3e8 <_DrawBitmap+0x6bc>
 800d42c:	9b05      	ldr	r3, [sp, #20]
 800d42e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800d430:	3301      	adds	r3, #1
 800d432:	44bb      	add	fp, r7
 800d434:	9305      	str	r3, [sp, #20]
 800d436:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800d438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d43a:	443b      	add	r3, r7
 800d43c:	9309      	str	r3, [sp, #36]	; 0x24
 800d43e:	e5c4      	b.n	800cfca <_DrawBitmap+0x29e>
 800d440:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d442:	b113      	cbz	r3, 800d44a <_DrawBitmap+0x71e>
 800d444:	a80f      	add	r0, sp, #60	; 0x3c
 800d446:	f003 fb09 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800d44a:	b011      	add	sp, #68	; 0x44
 800d44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d450:	20000308 	.word	0x20000308

0800d454 <GUI_MEMDEV__WriteToActiveAt>:
 800d454:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d458:	460e      	mov	r6, r1
 800d45a:	4690      	mov	r8, r2
 800d45c:	4607      	mov	r7, r0
 800d45e:	f003 faef 	bl	8010a40 <GUI_ALLOC_LockH>
 800d462:	6803      	ldr	r3, [r0, #0]
 800d464:	ac02      	add	r4, sp, #8
 800d466:	68db      	ldr	r3, [r3, #12]
 800d468:	f844 0d04 	str.w	r0, [r4, #-4]!
 800d46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d46e:	2000      	movs	r0, #0
 800d470:	2116      	movs	r1, #22
 800d472:	4798      	blx	r3
 800d474:	4605      	mov	r5, r0
 800d476:	4620      	mov	r0, r4
 800d478:	f003 faf0 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800d47c:	b11d      	cbz	r5, 800d486 <GUI_MEMDEV__WriteToActiveAt+0x32>
 800d47e:	4638      	mov	r0, r7
 800d480:	4631      	mov	r1, r6
 800d482:	4642      	mov	r2, r8
 800d484:	47a8      	blx	r5
 800d486:	b002      	add	sp, #8
 800d488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d48c <GUI_MEMDEV__CreateFixed>:
 800d48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d490:	4e3e      	ldr	r6, [pc, #248]	; (800d58c <GUI_MEMDEV__CreateFixed+0x100>)
 800d492:	b087      	sub	sp, #28
 800d494:	461d      	mov	r5, r3
 800d496:	6833      	ldr	r3, [r6, #0]
 800d498:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800d49a:	7c5b      	ldrb	r3, [r3, #17]
 800d49c:	4683      	mov	fp, r0
 800d49e:	468a      	mov	sl, r1
 800d4a0:	4690      	mov	r8, r2
 800d4a2:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d4a4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	f002 fdb4 	bl	8010014 <GUI_DEVICE_Create>
 800d4ac:	4604      	mov	r4, r0
 800d4ae:	2800      	cmp	r0, #0
 800d4b0:	d033      	beq.n	800d51a <GUI_MEMDEV__CreateFixed+0x8e>
 800d4b2:	6903      	ldr	r3, [r0, #16]
 800d4b4:	689b      	ldr	r3, [r3, #8]
 800d4b6:	4798      	blx	r3
 800d4b8:	f001 f854 	bl	800e564 <LCD__GetBPPDevice>
 800d4bc:	fb08 f600 	mul.w	r6, r8, r0
 800d4c0:	9003      	str	r0, [sp, #12]
 800d4c2:	3607      	adds	r6, #7
 800d4c4:	f003 fc84 	bl	8010dd0 <GUI_ALLOC_RequestSize>
 800d4c8:	f017 0901 	ands.w	r9, r7, #1
 800d4cc:	ea4f 06d6 	mov.w	r6, r6, lsr #3
 800d4d0:	d104      	bne.n	800d4dc <GUI_MEMDEV__CreateFixed+0x50>
 800d4d2:	2304      	movs	r3, #4
 800d4d4:	fb90 f0f3 	sdiv	r0, r0, r3
 800d4d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d4dc:	2d00      	cmp	r5, #0
 800d4de:	dc09      	bgt.n	800d4f4 <GUI_MEMDEV__CreateFixed+0x68>
 800d4e0:	b11e      	cbz	r6, 800d4ea <GUI_MEMDEV__CreateFixed+0x5e>
 800d4e2:	3818      	subs	r0, #24
 800d4e4:	fbb0 f0f6 	udiv	r0, r0, r6
 800d4e8:	e000      	b.n	800d4ec <GUI_MEMDEV__CreateFixed+0x60>
 800d4ea:	4630      	mov	r0, r6
 800d4ec:	426d      	negs	r5, r5
 800d4ee:	42a8      	cmp	r0, r5
 800d4f0:	bfb8      	it	lt
 800d4f2:	4605      	movlt	r5, r0
 800d4f4:	f1b9 0f00 	cmp.w	r9, #0
 800d4f8:	d109      	bne.n	800d50e <GUI_MEMDEV__CreateFixed+0x82>
 800d4fa:	f8cd 9000 	str.w	r9, [sp]
 800d4fe:	4658      	mov	r0, fp
 800d500:	4651      	mov	r1, sl
 800d502:	4642      	mov	r2, r8
 800d504:	462b      	mov	r3, r5
 800d506:	f008 f95b 	bl	80157c0 <GUI_USAGE_BM_Create>
 800d50a:	4607      	mov	r7, r0
 800d50c:	e000      	b.n	800d510 <GUI_MEMDEV__CreateFixed+0x84>
 800d50e:	2700      	movs	r7, #0
 800d510:	2d00      	cmp	r5, #0
 800d512:	dc04      	bgt.n	800d51e <GUI_MEMDEV__CreateFixed+0x92>
 800d514:	4620      	mov	r0, r4
 800d516:	f002 fd7b 	bl	8010010 <GUI_DEVICE_Delete>
 800d51a:	2000      	movs	r0, #0
 800d51c:	e032      	b.n	800d584 <GUI_MEMDEV__CreateFixed+0xf8>
 800d51e:	fb06 f005 	mul.w	r0, r6, r5
 800d522:	3018      	adds	r0, #24
 800d524:	f1b9 0f00 	cmp.w	r9, #0
 800d528:	d002      	beq.n	800d530 <GUI_MEMDEV__CreateFixed+0xa4>
 800d52a:	f003 fce1 	bl	8010ef0 <GUI_ALLOC_AllocNoInit>
 800d52e:	e001      	b.n	800d534 <GUI_MEMDEV__CreateFixed+0xa8>
 800d530:	f003 fcf7 	bl	8010f22 <GUI_ALLOC_AllocZero>
 800d534:	4681      	mov	r9, r0
 800d536:	b940      	cbnz	r0, 800d54a <GUI_MEMDEV__CreateFixed+0xbe>
 800d538:	4620      	mov	r0, r4
 800d53a:	f002 fd69 	bl	8010010 <GUI_DEVICE_Delete>
 800d53e:	2f00      	cmp	r7, #0
 800d540:	d0eb      	beq.n	800d51a <GUI_MEMDEV__CreateFixed+0x8e>
 800d542:	4638      	mov	r0, r7
 800d544:	f003 fab6 	bl	8010ab4 <GUI_ALLOC_Free>
 800d548:	e01b      	b.n	800d582 <GUI_MEMDEV__CreateFixed+0xf6>
 800d54a:	f003 fa79 	bl	8010a40 <GUI_ALLOC_LockH>
 800d54e:	4603      	mov	r3, r0
 800d550:	a806      	add	r0, sp, #24
 800d552:	9a03      	ldr	r2, [sp, #12]
 800d554:	f840 3d04 	str.w	r3, [r0, #-4]!
 800d558:	611a      	str	r2, [r3, #16]
 800d55a:	601c      	str	r4, [r3, #0]
 800d55c:	f8a3 b004 	strh.w	fp, [r3, #4]
 800d560:	f8a3 a006 	strh.w	sl, [r3, #6]
 800d564:	f8a3 8008 	strh.w	r8, [r3, #8]
 800d568:	815d      	strh	r5, [r3, #10]
 800d56a:	60de      	str	r6, [r3, #12]
 800d56c:	615f      	str	r7, [r3, #20]
 800d56e:	f003 fa75 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800d572:	4a06      	ldr	r2, [pc, #24]	; (800d58c <GUI_MEMDEV__CreateFixed+0x100>)
 800d574:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d576:	6123      	str	r3, [r4, #16]
 800d578:	6813      	ldr	r3, [r2, #0]
 800d57a:	f8c4 9008 	str.w	r9, [r4, #8]
 800d57e:	7c5b      	ldrb	r3, [r3, #17]
 800d580:	61a3      	str	r3, [r4, #24]
 800d582:	4648      	mov	r0, r9
 800d584:	b007      	add	sp, #28
 800d586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d58a:	bf00      	nop
 800d58c:	20000308 	.word	0x20000308

0800d590 <GUI_MEMDEV_GetBitsPerPixel>:
 800d590:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d592:	4605      	mov	r5, r0
 800d594:	b170      	cbz	r0, 800d5b4 <GUI_MEMDEV_GetBitsPerPixel+0x24>
 800d596:	f003 fa53 	bl	8010a40 <GUI_ALLOC_LockH>
 800d59a:	6803      	ldr	r3, [r0, #0]
 800d59c:	ac02      	add	r4, sp, #8
 800d59e:	691b      	ldr	r3, [r3, #16]
 800d5a0:	f844 0d04 	str.w	r0, [r4, #-4]!
 800d5a4:	689b      	ldr	r3, [r3, #8]
 800d5a6:	4798      	blx	r3
 800d5a8:	f000 ffdc 	bl	800e564 <LCD__GetBPPDevice>
 800d5ac:	4605      	mov	r5, r0
 800d5ae:	4620      	mov	r0, r4
 800d5b0:	f003 fa54 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800d5b4:	4628      	mov	r0, r5
 800d5b6:	b003      	add	sp, #12
 800d5b8:	bd30      	pop	{r4, r5, pc}
	...

0800d5bc <GUI_MEMDEV_Delete>:
 800d5bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5be:	4604      	mov	r4, r0
 800d5c0:	b1d0      	cbz	r0, 800d5f8 <GUI_MEMDEV_Delete+0x3c>
 800d5c2:	4b0e      	ldr	r3, [pc, #56]	; (800d5fc <GUI_MEMDEV_Delete+0x40>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d5c8:	4283      	cmp	r3, r0
 800d5ca:	d101      	bne.n	800d5d0 <GUI_MEMDEV_Delete+0x14>
 800d5cc:	f002 f988 	bl	800f8e0 <GUI_SelectLCD>
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	f003 fa35 	bl	8010a40 <GUI_ALLOC_LockH>
 800d5d6:	9001      	str	r0, [sp, #4]
 800d5d8:	6940      	ldr	r0, [r0, #20]
 800d5da:	b108      	cbz	r0, 800d5e0 <GUI_MEMDEV_Delete+0x24>
 800d5dc:	f008 f91c 	bl	8015818 <GUI_USAGE_DecUseCnt>
 800d5e0:	ad02      	add	r5, sp, #8
 800d5e2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d5e6:	6818      	ldr	r0, [r3, #0]
 800d5e8:	f002 fd12 	bl	8010010 <GUI_DEVICE_Delete>
 800d5ec:	4628      	mov	r0, r5
 800d5ee:	f003 fa35 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	f003 fa5e 	bl	8010ab4 <GUI_ALLOC_Free>
 800d5f8:	b003      	add	sp, #12
 800d5fa:	bd30      	pop	{r4, r5, pc}
 800d5fc:	20000308 	.word	0x20000308

0800d600 <GUI_MEMDEV_CreateEx>:
 800d600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d604:	469a      	mov	sl, r3
 800d606:	4b18      	ldr	r3, [pc, #96]	; (800d668 <GUI_MEMDEV_CreateEx+0x68>)
 800d608:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	4607      	mov	r7, r0
 800d60e:	7c58      	ldrb	r0, [r3, #17]
 800d610:	4b16      	ldr	r3, [pc, #88]	; (800d66c <GUI_MEMDEV_CreateEx+0x6c>)
 800d612:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800d616:	4688      	mov	r8, r1
 800d618:	4691      	mov	r9, r2
 800d61a:	68e3      	ldr	r3, [r4, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	2b04      	cmp	r3, #4
 800d620:	d005      	beq.n	800d62e <GUI_MEMDEV_CreateEx+0x2e>
 800d622:	6824      	ldr	r4, [r4, #0]
 800d624:	2c00      	cmp	r4, #0
 800d626:	d1f8      	bne.n	800d61a <GUI_MEMDEV_CreateEx+0x1a>
 800d628:	f002 fce2 	bl	800fff0 <GUI_DEVICE__GetpDriver>
 800d62c:	4604      	mov	r4, r0
 800d62e:	68e3      	ldr	r3, [r4, #12]
 800d630:	4620      	mov	r0, r4
 800d632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d634:	2101      	movs	r1, #1
 800d636:	4798      	blx	r3
 800d638:	4606      	mov	r6, r0
 800d63a:	b188      	cbz	r0, 800d660 <GUI_MEMDEV_CreateEx+0x60>
 800d63c:	6924      	ldr	r4, [r4, #16]
 800d63e:	68a3      	ldr	r3, [r4, #8]
 800d640:	4798      	blx	r3
 800d642:	3001      	adds	r0, #1
 800d644:	bf04      	itt	eq
 800d646:	f045 0501 	orreq.w	r5, r5, #1
 800d64a:	4c09      	ldreq	r4, [pc, #36]	; (800d670 <GUI_MEMDEV_CreateEx+0x70>)
 800d64c:	9402      	str	r4, [sp, #8]
 800d64e:	e88d 0060 	stmia.w	sp, {r5, r6}
 800d652:	4638      	mov	r0, r7
 800d654:	4641      	mov	r1, r8
 800d656:	464a      	mov	r2, r9
 800d658:	4653      	mov	r3, sl
 800d65a:	f7ff ff17 	bl	800d48c <GUI_MEMDEV__CreateFixed>
 800d65e:	e7ff      	b.n	800d660 <GUI_MEMDEV_CreateEx+0x60>
 800d660:	b004      	add	sp, #16
 800d662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d666:	bf00      	nop
 800d668:	20000308 	.word	0x20000308
 800d66c:	20021c0c 	.word	0x20021c0c
 800d670:	08020b10 	.word	0x08020b10

0800d674 <GUI_MEMDEV_Select>:
 800d674:	4b11      	ldr	r3, [pc, #68]	; (800d6bc <GUI_MEMDEV_Select+0x48>)
 800d676:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	4604      	mov	r4, r0
 800d67c:	6e16      	ldr	r6, [r2, #96]	; 0x60
 800d67e:	461f      	mov	r7, r3
 800d680:	b910      	cbnz	r0, 800d688 <GUI_MEMDEV_Select+0x14>
 800d682:	f002 f92d 	bl	800f8e0 <GUI_SelectLCD>
 800d686:	e016      	b.n	800d6b6 <GUI_MEMDEV_Select+0x42>
 800d688:	b10e      	cbz	r6, 800d68e <GUI_MEMDEV_Select+0x1a>
 800d68a:	f002 f929 	bl	800f8e0 <GUI_SelectLCD>
 800d68e:	f7fe ff51 	bl	800c534 <WM_Deactivate>
 800d692:	4620      	mov	r0, r4
 800d694:	f003 f9d4 	bl	8010a40 <GUI_ALLOC_LockH>
 800d698:	ad02      	add	r5, sp, #8
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	f845 0d04 	str.w	r0, [r5, #-4]!
 800d6a0:	661c      	str	r4, [r3, #96]	; 0x60
 800d6a2:	6800      	ldr	r0, [r0, #0]
 800d6a4:	f002 fcde 	bl	8010064 <GUI_DEVICE_Link>
 800d6a8:	4628      	mov	r0, r5
 800d6aa:	f003 f9d7 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800d6ae:	f000 fdc5 	bl	800e23c <LCD_UpdateColorIndices>
 800d6b2:	f001 fa19 	bl	800eae8 <LCD_SetClipRectMax>
 800d6b6:	4630      	mov	r0, r6
 800d6b8:	b003      	add	sp, #12
 800d6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6bc:	20000308 	.word	0x20000308

0800d6c0 <GUI_MEMDEV_CopyToLCDAt>:
 800d6c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6c4:	460c      	mov	r4, r1
 800d6c6:	b085      	sub	sp, #20
 800d6c8:	4615      	mov	r5, r2
 800d6ca:	4606      	mov	r6, r0
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	d041      	beq.n	800d754 <GUI_MEMDEV_CopyToLCDAt+0x94>
 800d6d0:	2000      	movs	r0, #0
 800d6d2:	f002 f8a5 	bl	800f820 <GUI_SetDrawMode>
 800d6d6:	4b21      	ldr	r3, [pc, #132]	; (800d75c <GUI_MEMDEV_CopyToLCDAt+0x9c>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4607      	mov	r7, r0
 800d6dc:	4630      	mov	r0, r6
 800d6de:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 800d6e2:	f003 f9ad 	bl	8010a40 <GUI_ALLOC_LockH>
 800d6e6:	6803      	ldr	r3, [r0, #0]
 800d6e8:	9001      	str	r0, [sp, #4]
 800d6ea:	6998      	ldr	r0, [r3, #24]
 800d6ec:	f002 f8e4 	bl	800f8b8 <GUI_SelectLayer>
 800d6f0:	4b1b      	ldr	r3, [pc, #108]	; (800d760 <GUI_MEMDEV_CopyToLCDAt+0xa0>)
 800d6f2:	429c      	cmp	r4, r3
 800d6f4:	9b01      	ldr	r3, [sp, #4]
 800d6f6:	bf04      	itt	eq
 800d6f8:	f9b3 4004 	ldrsheq.w	r4, [r3, #4]
 800d6fc:	f9b3 5006 	ldrsheq.w	r5, [r3, #6]
 800d700:	891a      	ldrh	r2, [r3, #8]
 800d702:	895b      	ldrh	r3, [r3, #10]
 800d704:	f8ad 4008 	strh.w	r4, [sp, #8]
 800d708:	3a01      	subs	r2, #1
 800d70a:	3b01      	subs	r3, #1
 800d70c:	4422      	add	r2, r4
 800d70e:	442b      	add	r3, r5
 800d710:	4681      	mov	r9, r0
 800d712:	f8ad 200c 	strh.w	r2, [sp, #12]
 800d716:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d71a:	f8ad 500a 	strh.w	r5, [sp, #10]
 800d71e:	f7fe ff01 	bl	800c524 <WM_Activate>
 800d722:	a801      	add	r0, sp, #4
 800d724:	f003 f99a 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800d728:	a802      	add	r0, sp, #8
 800d72a:	f7fe fd19 	bl	800c160 <WM__InitIVRSearch>
 800d72e:	b948      	cbnz	r0, 800d744 <GUI_MEMDEV_CopyToLCDAt+0x84>
 800d730:	4648      	mov	r0, r9
 800d732:	f002 f8c1 	bl	800f8b8 <GUI_SelectLayer>
 800d736:	4640      	mov	r0, r8
 800d738:	f7ff ff9c 	bl	800d674 <GUI_MEMDEV_Select>
 800d73c:	4638      	mov	r0, r7
 800d73e:	f002 f86f 	bl	800f820 <GUI_SetDrawMode>
 800d742:	e007      	b.n	800d754 <GUI_MEMDEV_CopyToLCDAt+0x94>
 800d744:	4630      	mov	r0, r6
 800d746:	4621      	mov	r1, r4
 800d748:	462a      	mov	r2, r5
 800d74a:	f007 fb07 	bl	8014d5c <GUI_MEMDEV__WriteToActiveOpaque>
 800d74e:	f7fe fc45 	bl	800bfdc <WM__GetNextIVR>
 800d752:	e7ec      	b.n	800d72e <GUI_MEMDEV_CopyToLCDAt+0x6e>
 800d754:	b005      	add	sp, #20
 800d756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d75a:	bf00      	nop
 800d75c:	20000308 	.word	0x20000308
 800d760:	fffff001 	.word	0xfffff001

0800d764 <GUI_MEMDEV_CopyToLCD>:
 800d764:	4901      	ldr	r1, [pc, #4]	; (800d76c <GUI_MEMDEV_CopyToLCD+0x8>)
 800d766:	460a      	mov	r2, r1
 800d768:	f7ff bfaa 	b.w	800d6c0 <GUI_MEMDEV_CopyToLCDAt>
 800d76c:	fffff001 	.word	0xfffff001

0800d770 <_GetRect>:
 800d770:	6883      	ldr	r3, [r0, #8]
 800d772:	2200      	movs	r2, #0
 800d774:	800a      	strh	r2, [r1, #0]
 800d776:	804a      	strh	r2, [r1, #2]
 800d778:	695a      	ldr	r2, [r3, #20]
 800d77a:	699b      	ldr	r3, [r3, #24]
 800d77c:	3a01      	subs	r2, #1
 800d77e:	3b01      	subs	r3, #1
 800d780:	808a      	strh	r2, [r1, #4]
 800d782:	80cb      	strh	r3, [r1, #6]
 800d784:	4770      	bx	lr

0800d786 <_SetPixelIndex>:
 800d786:	b510      	push	{r4, lr}
 800d788:	6880      	ldr	r0, [r0, #8]
 800d78a:	69c4      	ldr	r4, [r0, #28]
 800d78c:	6800      	ldr	r0, [r0, #0]
 800d78e:	fb04 1202 	mla	r2, r4, r2, r1
 800d792:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800d796:	bd10      	pop	{r4, pc}

0800d798 <_GetPixelIndex>:
 800d798:	6883      	ldr	r3, [r0, #8]
 800d79a:	69d8      	ldr	r0, [r3, #28]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	fb00 1202 	mla	r2, r0, r2, r1
 800d7a2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d7a6:	4770      	bx	lr

0800d7a8 <_XorPixel>:
 800d7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7ac:	4604      	mov	r4, r0
 800d7ae:	460f      	mov	r7, r1
 800d7b0:	4616      	mov	r6, r2
 800d7b2:	f7ff fff1 	bl	800d798 <_GetPixelIndex>
 800d7b6:	6925      	ldr	r5, [r4, #16]
 800d7b8:	68ab      	ldr	r3, [r5, #8]
 800d7ba:	4680      	mov	r8, r0
 800d7bc:	4798      	blx	r3
 800d7be:	4639      	mov	r1, r7
 800d7c0:	ea80 0308 	eor.w	r3, r0, r8
 800d7c4:	4632      	mov	r2, r6
 800d7c6:	4620      	mov	r0, r4
 800d7c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7cc:	f7ff bfdb 	b.w	800d786 <_SetPixelIndex>

0800d7d0 <_FillRect>:
 800d7d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7d4:	6886      	ldr	r6, [r0, #8]
 800d7d6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800d7d8:	6b34      	ldr	r4, [r6, #48]	; 0x30
 800d7da:	f8df c114 	ldr.w	ip, [pc, #276]	; 800d8f0 <_FillRect+0x120>
 800d7de:	4689      	mov	r9, r1
 800d7e0:	4692      	mov	sl, r2
 800d7e2:	b144      	cbz	r4, 800d7f6 <_FillRect+0x26>
 800d7e4:	9700      	str	r7, [sp, #0]
 800d7e6:	f8dc 5000 	ldr.w	r5, [ip]
 800d7ea:	6bed      	ldr	r5, [r5, #60]	; 0x3c
 800d7ec:	682d      	ldr	r5, [r5, #0]
 800d7ee:	9501      	str	r5, [sp, #4]
 800d7f0:	6980      	ldr	r0, [r0, #24]
 800d7f2:	47a0      	blx	r4
 800d7f4:	e079      	b.n	800d8ea <_FillRect+0x11a>
 800d7f6:	1a5b      	subs	r3, r3, r1
 800d7f8:	f8dc 1000 	ldr.w	r1, [ip]
 800d7fc:	f891 c010 	ldrb.w	ip, [r1, #16]
 800d800:	ebc2 0807 	rsb	r8, r2, r7
 800d804:	f01c 0c01 	ands.w	ip, ip, #1
 800d808:	f103 0401 	add.w	r4, r3, #1
 800d80c:	f108 0501 	add.w	r5, r8, #1
 800d810:	69f7      	ldr	r7, [r6, #28]
 800d812:	d021      	beq.n	800d858 <_FillRect+0x88>
 800d814:	6903      	ldr	r3, [r0, #16]
 800d816:	689b      	ldr	r3, [r3, #8]
 800d818:	4798      	blx	r3
 800d81a:	69f2      	ldr	r2, [r6, #28]
 800d81c:	2c00      	cmp	r4, #0
 800d81e:	d064      	beq.n	800d8ea <_FillRect+0x11a>
 800d820:	f06f 0c03 	mvn.w	ip, #3
 800d824:	fb02 990a 	mla	r9, r2, sl, r9
 800d828:	fb0c fc07 	mul.w	ip, ip, r7
 800d82c:	fb07 9708 	mla	r7, r7, r8, r9
 800d830:	00bf      	lsls	r7, r7, #2
 800d832:	2d00      	cmp	r5, #0
 800d834:	d059      	beq.n	800d8ea <_FillRect+0x11a>
 800d836:	3d01      	subs	r5, #1
 800d838:	463b      	mov	r3, r7
 800d83a:	4622      	mov	r2, r4
 800d83c:	f8d6 8000 	ldr.w	r8, [r6]
 800d840:	f853 1008 	ldr.w	r1, [r3, r8]
 800d844:	3a01      	subs	r2, #1
 800d846:	ea81 0100 	eor.w	r1, r1, r0
 800d84a:	f843 1008 	str.w	r1, [r3, r8]
 800d84e:	f103 0304 	add.w	r3, r3, #4
 800d852:	d1f3      	bne.n	800d83c <_FillRect+0x6c>
 800d854:	4467      	add	r7, ip
 800d856:	e7ec      	b.n	800d832 <_FillRect+0x62>
 800d858:	6830      	ldr	r0, [r6, #0]
 800d85a:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800d85c:	fb07 9202 	mla	r2, r7, r2, r9
 800d860:	2c0f      	cmp	r4, #15
 800d862:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d866:	6808      	ldr	r0, [r1, #0]
 800d868:	d92f      	bls.n	800d8ca <_FillRect+0xfa>
 800d86a:	f1a3 0a0f 	sub.w	sl, r3, #15
 800d86e:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
 800d872:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800d876:	f108 4180 	add.w	r1, r8, #1073741824	; 0x40000000
 800d87a:	f10a 0a01 	add.w	sl, sl, #1
 800d87e:	fb09 2101 	mla	r1, r9, r1, r2
 800d882:	ea4f 1a8a 	mov.w	sl, sl, lsl #6
 800d886:	462e      	mov	r6, r5
 800d888:	4662      	mov	r2, ip
 800d88a:	b1e6      	cbz	r6, 800d8c6 <_FillRect+0xf6>
 800d88c:	4622      	mov	r2, r4
 800d88e:	460b      	mov	r3, r1
 800d890:	3a10      	subs	r2, #16
 800d892:	2a0f      	cmp	r2, #15
 800d894:	6018      	str	r0, [r3, #0]
 800d896:	6058      	str	r0, [r3, #4]
 800d898:	6098      	str	r0, [r3, #8]
 800d89a:	60d8      	str	r0, [r3, #12]
 800d89c:	6118      	str	r0, [r3, #16]
 800d89e:	6158      	str	r0, [r3, #20]
 800d8a0:	6198      	str	r0, [r3, #24]
 800d8a2:	61d8      	str	r0, [r3, #28]
 800d8a4:	6218      	str	r0, [r3, #32]
 800d8a6:	6258      	str	r0, [r3, #36]	; 0x24
 800d8a8:	6298      	str	r0, [r3, #40]	; 0x28
 800d8aa:	62d8      	str	r0, [r3, #44]	; 0x2c
 800d8ac:	6318      	str	r0, [r3, #48]	; 0x30
 800d8ae:	6358      	str	r0, [r3, #52]	; 0x34
 800d8b0:	6398      	str	r0, [r3, #56]	; 0x38
 800d8b2:	63d8      	str	r0, [r3, #60]	; 0x3c
 800d8b4:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800d8b8:	d8ea      	bhi.n	800d890 <_FillRect+0xc0>
 800d8ba:	eb01 020a 	add.w	r2, r1, sl
 800d8be:	3e01      	subs	r6, #1
 800d8c0:	ebc9 0101 	rsb	r1, r9, r1
 800d8c4:	e7e1      	b.n	800d88a <_FillRect+0xba>
 800d8c6:	f004 040f 	and.w	r4, r4, #15
 800d8ca:	b174      	cbz	r4, 800d8ea <_FillRect+0x11a>
 800d8cc:	00bf      	lsls	r7, r7, #2
 800d8ce:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800d8d2:	fb07 2208 	mla	r2, r7, r8, r2
 800d8d6:	b145      	cbz	r5, 800d8ea <_FillRect+0x11a>
 800d8d8:	4611      	mov	r1, r2
 800d8da:	4623      	mov	r3, r4
 800d8dc:	3b01      	subs	r3, #1
 800d8de:	f841 0b04 	str.w	r0, [r1], #4
 800d8e2:	d1fb      	bne.n	800d8dc <_FillRect+0x10c>
 800d8e4:	3d01      	subs	r5, #1
 800d8e6:	1bd2      	subs	r2, r2, r7
 800d8e8:	e7f5      	b.n	800d8d6 <_FillRect+0x106>
 800d8ea:	b002      	add	sp, #8
 800d8ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8f0:	20000308 	.word	0x20000308

0800d8f4 <_DrawHLine>:
 800d8f4:	b507      	push	{r0, r1, r2, lr}
 800d8f6:	9200      	str	r2, [sp, #0]
 800d8f8:	f7ff ff6a 	bl	800d7d0 <_FillRect>
 800d8fc:	b003      	add	sp, #12
 800d8fe:	f85d fb04 	ldr.w	pc, [sp], #4

0800d902 <_DrawVLine>:
 800d902:	b507      	push	{r0, r1, r2, lr}
 800d904:	9300      	str	r3, [sp, #0]
 800d906:	460b      	mov	r3, r1
 800d908:	f7ff ff62 	bl	800d7d0 <_FillRect>
 800d90c:	b003      	add	sp, #12
 800d90e:	f85d fb04 	ldr.w	pc, [sp], #4

0800d912 <_GetDevProp>:
 800d912:	3901      	subs	r1, #1
 800d914:	6883      	ldr	r3, [r0, #8]
 800d916:	290d      	cmp	r1, #13
 800d918:	d814      	bhi.n	800d944 <_GetDevProp+0x32>
 800d91a:	e8df f001 	tbb	[pc, r1]
 800d91e:	0b09      	.short	0x0b09
 800d920:	13130f0d 	.word	0x13130f0d
 800d924:	11160713 	.word	0x11160713
 800d928:	16161611 	.word	0x16161611
 800d92c:	2020      	movs	r0, #32
 800d92e:	4770      	bx	lr
 800d930:	68d8      	ldr	r0, [r3, #12]
 800d932:	4770      	bx	lr
 800d934:	6918      	ldr	r0, [r3, #16]
 800d936:	4770      	bx	lr
 800d938:	6958      	ldr	r0, [r3, #20]
 800d93a:	4770      	bx	lr
 800d93c:	6998      	ldr	r0, [r3, #24]
 800d93e:	4770      	bx	lr
 800d940:	2001      	movs	r0, #1
 800d942:	4770      	bx	lr
 800d944:	f04f 30ff 	mov.w	r0, #4294967295
 800d948:	4770      	bx	lr
 800d94a:	2000      	movs	r0, #0
 800d94c:	4770      	bx	lr
	...

0800d950 <_GetDevData>:
 800d950:	4802      	ldr	r0, [pc, #8]	; (800d95c <_GetDevData+0xc>)
 800d952:	2901      	cmp	r1, #1
 800d954:	bf18      	it	ne
 800d956:	2000      	movne	r0, #0
 800d958:	4770      	bx	lr
 800d95a:	bf00      	nop
 800d95c:	0801db94 	.word	0x0801db94

0800d960 <_ReadRect>:
 800d960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d964:	460f      	mov	r7, r1
 800d966:	6881      	ldr	r1, [r0, #8]
 800d968:	69c8      	ldr	r0, [r1, #28]
 800d96a:	f06f 0903 	mvn.w	r9, #3
 800d96e:	fb00 7502 	mla	r5, r0, r2, r7
 800d972:	1bdb      	subs	r3, r3, r7
 800d974:	00ae      	lsls	r6, r5, #2
 800d976:	fb09 fc00 	mul.w	ip, r9, r0
 800d97a:	fb09 f505 	mul.w	r5, r9, r5
 800d97e:	f103 0901 	add.w	r9, r3, #1
 800d982:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800d986:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800d98a:	1c5f      	adds	r7, r3, #1
 800d98c:	4630      	mov	r0, r6
 800d98e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d992:	680c      	ldr	r4, [r1, #0]
 800d994:	44aa      	add	sl, r5
 800d996:	f850 b004 	ldr.w	fp, [r0, r4]
 800d99a:	f84a b000 	str.w	fp, [sl, r0]
 800d99e:	3f01      	subs	r7, #1
 800d9a0:	f100 0004 	add.w	r0, r0, #4
 800d9a4:	d1f3      	bne.n	800d98e <_ReadRect+0x2e>
 800d9a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d9a8:	444c      	add	r4, r9
 800d9aa:	940a      	str	r4, [sp, #40]	; 0x28
 800d9ac:	3201      	adds	r2, #1
 800d9ae:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d9b0:	1e50      	subs	r0, r2, #1
 800d9b2:	42a0      	cmp	r0, r4
 800d9b4:	4446      	add	r6, r8
 800d9b6:	4465      	add	r5, ip
 800d9b8:	dbe7      	blt.n	800d98a <_ReadRect+0x2a>
 800d9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800d9c0 <_GetDevFunc>:
 800d9c0:	3901      	subs	r1, #1
 800d9c2:	2924      	cmp	r1, #36	; 0x24
 800d9c4:	d844      	bhi.n	800da50 <_GetDevFunc+0x90>
 800d9c6:	e8df f001 	tbb	[pc, r1]
 800d9ca:	1b41      	.short	0x1b41
 800d9cc:	1d431917 	.word	0x1d431917
 800d9d0:	45134343 	.word	0x45134343
 800d9d4:	21431f15 	.word	0x21431f15
 800d9d8:	43434323 	.word	0x43434323
 800d9dc:	2f292725 	.word	0x2f292725
 800d9e0:	43314343 	.word	0x43314343
 800d9e4:	43434343 	.word	0x43434343
 800d9e8:	2d2b3543 	.word	0x2d2b3543
 800d9ec:	433d      	.short	0x433d
 800d9ee:	39          	.byte	0x39
 800d9ef:	00          	.byte	0x00
 800d9f0:	4819      	ldr	r0, [pc, #100]	; (800da58 <_GetDevFunc+0x98>)
 800d9f2:	4770      	bx	lr
 800d9f4:	4819      	ldr	r0, [pc, #100]	; (800da5c <_GetDevFunc+0x9c>)
 800d9f6:	4770      	bx	lr
 800d9f8:	4819      	ldr	r0, [pc, #100]	; (800da60 <_GetDevFunc+0xa0>)
 800d9fa:	4770      	bx	lr
 800d9fc:	4819      	ldr	r0, [pc, #100]	; (800da64 <_GetDevFunc+0xa4>)
 800d9fe:	4770      	bx	lr
 800da00:	4819      	ldr	r0, [pc, #100]	; (800da68 <_GetDevFunc+0xa8>)
 800da02:	4770      	bx	lr
 800da04:	4819      	ldr	r0, [pc, #100]	; (800da6c <_GetDevFunc+0xac>)
 800da06:	4770      	bx	lr
 800da08:	4819      	ldr	r0, [pc, #100]	; (800da70 <_GetDevFunc+0xb0>)
 800da0a:	4770      	bx	lr
 800da0c:	4819      	ldr	r0, [pc, #100]	; (800da74 <_GetDevFunc+0xb4>)
 800da0e:	4770      	bx	lr
 800da10:	4819      	ldr	r0, [pc, #100]	; (800da78 <_GetDevFunc+0xb8>)
 800da12:	4770      	bx	lr
 800da14:	4819      	ldr	r0, [pc, #100]	; (800da7c <_GetDevFunc+0xbc>)
 800da16:	4770      	bx	lr
 800da18:	4819      	ldr	r0, [pc, #100]	; (800da80 <_GetDevFunc+0xc0>)
 800da1a:	4770      	bx	lr
 800da1c:	4819      	ldr	r0, [pc, #100]	; (800da84 <_GetDevFunc+0xc4>)
 800da1e:	4770      	bx	lr
 800da20:	4819      	ldr	r0, [pc, #100]	; (800da88 <_GetDevFunc+0xc8>)
 800da22:	4770      	bx	lr
 800da24:	4819      	ldr	r0, [pc, #100]	; (800da8c <_GetDevFunc+0xcc>)
 800da26:	4770      	bx	lr
 800da28:	4819      	ldr	r0, [pc, #100]	; (800da90 <_GetDevFunc+0xd0>)
 800da2a:	4770      	bx	lr
 800da2c:	6803      	ldr	r3, [r0, #0]
 800da2e:	689b      	ldr	r3, [r3, #8]
 800da30:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800da32:	4770      	bx	lr
 800da34:	6803      	ldr	r3, [r0, #0]
 800da36:	689b      	ldr	r3, [r3, #8]
 800da38:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800da3a:	4770      	bx	lr
 800da3c:	6803      	ldr	r3, [r0, #0]
 800da3e:	689b      	ldr	r3, [r3, #8]
 800da40:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800da42:	4770      	bx	lr
 800da44:	6803      	ldr	r3, [r0, #0]
 800da46:	689b      	ldr	r3, [r3, #8]
 800da48:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800da4a:	4770      	bx	lr
 800da4c:	4811      	ldr	r0, [pc, #68]	; (800da94 <_GetDevFunc+0xd4>)
 800da4e:	4770      	bx	lr
 800da50:	2000      	movs	r0, #0
 800da52:	4770      	bx	lr
 800da54:	4810      	ldr	r0, [pc, #64]	; (800da98 <_GetDevFunc+0xd8>)
 800da56:	4770      	bx	lr
 800da58:	0800e159 	.word	0x0800e159
 800da5c:	0800e1d5 	.word	0x0800e1d5
 800da60:	0800e12b 	.word	0x0800e12b
 800da64:	0800e07f 	.word	0x0800e07f
 800da68:	0800e103 	.word	0x0800e103
 800da6c:	0800e0db 	.word	0x0800e0db
 800da70:	0800e0c1 	.word	0x0800e0c1
 800da74:	0800dae9 	.word	0x0800dae9
 800da78:	0800dadf 	.word	0x0800dadf
 800da7c:	0800dac9 	.word	0x0800dac9
 800da80:	0800dab3 	.word	0x0800dab3
 800da84:	0800da9d 	.word	0x0800da9d
 800da88:	0800e183 	.word	0x0800e183
 800da8c:	0800e09b 	.word	0x0800e09b
 800da90:	0800e039 	.word	0x0800e039
 800da94:	0800d961 	.word	0x0800d961
 800da98:	0800e217 	.word	0x0800e217

0800da9c <_SetChroma>:
 800da9c:	b507      	push	{r0, r1, r2, lr}
 800da9e:	6980      	ldr	r0, [r0, #24]
 800daa0:	e88d 0006 	stmia.w	sp, {r1, r2}
 800daa4:	210d      	movs	r1, #13
 800daa6:	466a      	mov	r2, sp
 800daa8:	f7f9 f928 	bl	8006cfc <LCD_X_DisplayDriver>
 800daac:	b003      	add	sp, #12
 800daae:	f85d fb04 	ldr.w	pc, [sp], #4

0800dab2 <_SetChromaMode>:
 800dab2:	b507      	push	{r0, r1, r2, lr}
 800dab4:	aa02      	add	r2, sp, #8
 800dab6:	6980      	ldr	r0, [r0, #24]
 800dab8:	f842 1d04 	str.w	r1, [r2, #-4]!
 800dabc:	210c      	movs	r1, #12
 800dabe:	f7f9 f91d 	bl	8006cfc <LCD_X_DisplayDriver>
 800dac2:	b003      	add	sp, #12
 800dac4:	f85d fb04 	ldr.w	pc, [sp], #4

0800dac8 <_SetAlphaMode>:
 800dac8:	b507      	push	{r0, r1, r2, lr}
 800daca:	aa02      	add	r2, sp, #8
 800dacc:	6980      	ldr	r0, [r0, #24]
 800dace:	f842 1d04 	str.w	r1, [r2, #-4]!
 800dad2:	210b      	movs	r1, #11
 800dad4:	f7f9 f912 	bl	8006cfc <LCD_X_DisplayDriver>
 800dad8:	b003      	add	sp, #12
 800dada:	f85d fb04 	ldr.w	pc, [sp], #4

0800dade <_Off>:
 800dade:	6980      	ldr	r0, [r0, #24]
 800dae0:	2106      	movs	r1, #6
 800dae2:	2200      	movs	r2, #0
 800dae4:	f7f9 b90a 	b.w	8006cfc <LCD_X_DisplayDriver>

0800dae8 <_On>:
 800dae8:	6980      	ldr	r0, [r0, #24]
 800daea:	2105      	movs	r1, #5
 800daec:	2200      	movs	r2, #0
 800daee:	f7f9 b905 	b.w	8006cfc <LCD_X_DisplayDriver>

0800daf2 <_SetOrg>:
 800daf2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800daf6:	2300      	movs	r3, #0
 800daf8:	4607      	mov	r7, r0
 800dafa:	6884      	ldr	r4, [r0, #8]
 800dafc:	6980      	ldr	r0, [r0, #24]
 800dafe:	9300      	str	r3, [sp, #0]
 800db00:	460d      	mov	r5, r1
 800db02:	4616      	mov	r6, r2
 800db04:	9301      	str	r3, [sp, #4]
 800db06:	f000 fc9b 	bl	800e440 <LCD_GetMirrorXEx>
 800db0a:	4680      	mov	r8, r0
 800db0c:	69b8      	ldr	r0, [r7, #24]
 800db0e:	f000 fc9a 	bl	800e446 <LCD_GetMirrorYEx>
 800db12:	4681      	mov	r9, r0
 800db14:	69b8      	ldr	r0, [r7, #24]
 800db16:	f000 fc99 	bl	800e44c <LCD_GetSwapXYEx>
 800db1a:	0080      	lsls	r0, r0, #2
 800db1c:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
 800db20:	ea40 0008 	orr.w	r0, r0, r8
 800db24:	2807      	cmp	r0, #7
 800db26:	d826      	bhi.n	800db76 <_SetOrg+0x84>
 800db28:	e8df f000 	tbb	[pc, r0]
 800db2c:	0b0f0408 	.word	0x0b0f0408
 800db30:	1b1f1519 	.word	0x1b1f1519
 800db34:	6962      	ldr	r2, [r4, #20]
 800db36:	68e3      	ldr	r3, [r4, #12]
 800db38:	1ad3      	subs	r3, r2, r3
 800db3a:	1b5d      	subs	r5, r3, r5
 800db3c:	9500      	str	r5, [sp, #0]
 800db3e:	9601      	str	r6, [sp, #4]
 800db40:	e019      	b.n	800db76 <_SetOrg+0x84>
 800db42:	6962      	ldr	r2, [r4, #20]
 800db44:	68e3      	ldr	r3, [r4, #12]
 800db46:	1ad3      	subs	r3, r2, r3
 800db48:	1b5d      	subs	r5, r3, r5
 800db4a:	69a2      	ldr	r2, [r4, #24]
 800db4c:	6923      	ldr	r3, [r4, #16]
 800db4e:	9500      	str	r5, [sp, #0]
 800db50:	1ad3      	subs	r3, r2, r3
 800db52:	1b9e      	subs	r6, r3, r6
 800db54:	e7f3      	b.n	800db3e <_SetOrg+0x4c>
 800db56:	69a2      	ldr	r2, [r4, #24]
 800db58:	6923      	ldr	r3, [r4, #16]
 800db5a:	1ad3      	subs	r3, r2, r3
 800db5c:	1b9e      	subs	r6, r3, r6
 800db5e:	9600      	str	r6, [sp, #0]
 800db60:	e008      	b.n	800db74 <_SetOrg+0x82>
 800db62:	69a2      	ldr	r2, [r4, #24]
 800db64:	6923      	ldr	r3, [r4, #16]
 800db66:	1ad3      	subs	r3, r2, r3
 800db68:	1b9e      	subs	r6, r3, r6
 800db6a:	6962      	ldr	r2, [r4, #20]
 800db6c:	68e3      	ldr	r3, [r4, #12]
 800db6e:	9600      	str	r6, [sp, #0]
 800db70:	1ad3      	subs	r3, r2, r3
 800db72:	1b5d      	subs	r5, r3, r5
 800db74:	9501      	str	r5, [sp, #4]
 800db76:	69b8      	ldr	r0, [r7, #24]
 800db78:	2103      	movs	r1, #3
 800db7a:	466a      	mov	r2, sp
 800db7c:	f7f9 f8be 	bl	8006cfc <LCD_X_DisplayDriver>
 800db80:	b003      	add	sp, #12
 800db82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800db88 <_DrawBitmap>:
 800db88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db8c:	b08d      	sub	sp, #52	; 0x34
 800db8e:	4606      	mov	r6, r0
 800db90:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800db92:	910a      	str	r1, [sp, #40]	; 0x28
 800db94:	2804      	cmp	r0, #4
 800db96:	469b      	mov	fp, r3
 800db98:	9209      	str	r2, [sp, #36]	; 0x24
 800db9a:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800db9c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800db9e:	68b3      	ldr	r3, [r6, #8]
 800dba0:	d011      	beq.n	800dbc6 <_DrawBitmap+0x3e>
 800dba2:	dc09      	bgt.n	800dbb8 <_DrawBitmap+0x30>
 800dba4:	2801      	cmp	r0, #1
 800dba6:	d013      	beq.n	800dbd0 <_DrawBitmap+0x48>
 800dba8:	2802      	cmp	r0, #2
 800dbaa:	f040 822d 	bne.w	800e008 <_DrawBitmap+0x480>
 800dbae:	4aab      	ldr	r2, [pc, #684]	; (800de5c <_DrawBitmap+0x2d4>)
 800dbb0:	6812      	ldr	r2, [r2, #0]
 800dbb2:	920b      	str	r2, [sp, #44]	; 0x2c
 800dbb4:	2100      	movs	r1, #0
 800dbb6:	e0b8      	b.n	800dd2a <_DrawBitmap+0x1a2>
 800dbb8:	2808      	cmp	r0, #8
 800dbba:	f000 8172 	beq.w	800dea2 <_DrawBitmap+0x31a>
 800dbbe:	2820      	cmp	r0, #32
 800dbc0:	f000 81fb 	beq.w	800dfba <_DrawBitmap+0x432>
 800dbc4:	e220      	b.n	800e008 <_DrawBitmap+0x480>
 800dbc6:	4aa5      	ldr	r2, [pc, #660]	; (800de5c <_DrawBitmap+0x2d4>)
 800dbc8:	6812      	ldr	r2, [r2, #0]
 800dbca:	920b      	str	r2, [sp, #44]	; 0x2c
 800dbcc:	2100      	movs	r1, #0
 800dbce:	e10a      	b.n	800dde6 <_DrawBitmap+0x25e>
 800dbd0:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800dbd2:	b90f      	cbnz	r7, 800dbd8 <_DrawBitmap+0x50>
 800dbd4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800dbd6:	e042      	b.n	800dc5e <_DrawBitmap+0xd6>
 800dbd8:	4ba0      	ldr	r3, [pc, #640]	; (800de5c <_DrawBitmap+0x2d4>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	7c1b      	ldrb	r3, [r3, #16]
 800dbde:	07db      	lsls	r3, r3, #31
 800dbe0:	d4f8      	bmi.n	800dbd4 <_DrawBitmap+0x4c>
 800dbe2:	981a      	ldr	r0, [sp, #104]	; 0x68
 800dbe4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dbe6:	9302      	str	r3, [sp, #8]
 800dbe8:	e88d 0801 	stmia.w	sp, {r0, fp}
 800dbec:	9818      	ldr	r0, [sp, #96]	; 0x60
 800dbee:	9003      	str	r0, [sp, #12]
 800dbf0:	9504      	str	r5, [sp, #16]
 800dbf2:	69b0      	ldr	r0, [r6, #24]
 800dbf4:	4623      	mov	r3, r4
 800dbf6:	47b8      	blx	r7
 800dbf8:	e206      	b.n	800e008 <_DrawBitmap+0x480>
 800dbfa:	4b98      	ldr	r3, [pc, #608]	; (800de5c <_DrawBitmap+0x2d4>)
 800dbfc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	991a      	ldr	r1, [sp, #104]	; 0x68
 800dc04:	7c1b      	ldrb	r3, [r3, #16]
 800dc06:	f8d5 c000 	ldr.w	ip, [r5]
 800dc0a:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800dc0e:	68b0      	ldr	r0, [r6, #8]
 800dc10:	f003 0303 	and.w	r3, r3, #3
 800dc14:	2b02      	cmp	r3, #2
 800dc16:	448a      	add	sl, r1
 800dc18:	d02d      	beq.n	800dc76 <_DrawBitmap+0xee>
 800dc1a:	2b03      	cmp	r3, #3
 800dc1c:	d04d      	beq.n	800dcba <_DrawBitmap+0x132>
 800dc1e:	2b01      	cmp	r3, #1
 800dc20:	d04b      	beq.n	800dcba <_DrawBitmap+0x132>
 800dc22:	f1c1 0308 	rsb	r3, r1, #8
 800dc26:	7822      	ldrb	r2, [r4, #0]
 800dc28:	498d      	ldr	r1, [pc, #564]	; (800de60 <_DrawBitmap+0x2d8>)
 800dc2a:	5c8a      	ldrb	r2, [r1, r2]
 800dc2c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800dc2e:	410a      	asrs	r2, r1
 800dc30:	69c1      	ldr	r1, [r0, #28]
 800dc32:	6800      	ldr	r0, [r0, #0]
 800dc34:	fb01 a107 	mla	r1, r1, r7, sl
 800dc38:	eb00 0a81 	add.w	sl, r0, r1, lsl #2
 800dc3c:	4659      	mov	r1, fp
 800dc3e:	4620      	mov	r0, r4
 800dc40:	f012 0f01 	tst.w	r2, #1
 800dc44:	bf0c      	ite	eq
 800dc46:	46e0      	moveq	r8, ip
 800dc48:	46c8      	movne	r8, r9
 800dc4a:	3b01      	subs	r3, #1
 800dc4c:	d00d      	beq.n	800dc6a <_DrawBitmap+0xe2>
 800dc4e:	0852      	lsrs	r2, r2, #1
 800dc50:	3901      	subs	r1, #1
 800dc52:	f84a 8b04 	str.w	r8, [sl], #4
 800dc56:	d1f3      	bne.n	800dc40 <_DrawBitmap+0xb8>
 800dc58:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800dc5a:	3701      	adds	r7, #1
 800dc5c:	4414      	add	r4, r2
 800dc5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc60:	9916      	ldr	r1, [sp, #88]	; 0x58
 800dc62:	1a3b      	subs	r3, r7, r0
 800dc64:	428b      	cmp	r3, r1
 800dc66:	dbc8      	blt.n	800dbfa <_DrawBitmap+0x72>
 800dc68:	e1ce      	b.n	800e008 <_DrawBitmap+0x480>
 800dc6a:	7843      	ldrb	r3, [r0, #1]
 800dc6c:	4a7c      	ldr	r2, [pc, #496]	; (800de60 <_DrawBitmap+0x2d8>)
 800dc6e:	3001      	adds	r0, #1
 800dc70:	5cd2      	ldrb	r2, [r2, r3]
 800dc72:	2308      	movs	r3, #8
 800dc74:	e7ec      	b.n	800dc50 <_DrawBitmap+0xc8>
 800dc76:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dc78:	4979      	ldr	r1, [pc, #484]	; (800de60 <_DrawBitmap+0x2d8>)
 800dc7a:	f1c2 0308 	rsb	r3, r2, #8
 800dc7e:	7822      	ldrb	r2, [r4, #0]
 800dc80:	5c89      	ldrb	r1, [r1, r2]
 800dc82:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dc84:	4111      	asrs	r1, r2
 800dc86:	69c2      	ldr	r2, [r0, #28]
 800dc88:	6800      	ldr	r0, [r0, #0]
 800dc8a:	fb02 a207 	mla	r2, r2, r7, sl
 800dc8e:	eb00 0a82 	add.w	sl, r0, r2, lsl #2
 800dc92:	4622      	mov	r2, r4
 800dc94:	2000      	movs	r0, #0
 800dc96:	f011 0f01 	tst.w	r1, #1
 800dc9a:	bf18      	it	ne
 800dc9c:	f84a 9020 	strne.w	r9, [sl, r0, lsl #2]
 800dca0:	3b01      	subs	r3, #1
 800dca2:	d001      	beq.n	800dca8 <_DrawBitmap+0x120>
 800dca4:	0849      	lsrs	r1, r1, #1
 800dca6:	e004      	b.n	800dcb2 <_DrawBitmap+0x12a>
 800dca8:	7853      	ldrb	r3, [r2, #1]
 800dcaa:	496d      	ldr	r1, [pc, #436]	; (800de60 <_DrawBitmap+0x2d8>)
 800dcac:	3201      	adds	r2, #1
 800dcae:	5cc9      	ldrb	r1, [r1, r3]
 800dcb0:	2308      	movs	r3, #8
 800dcb2:	3001      	adds	r0, #1
 800dcb4:	4558      	cmp	r0, fp
 800dcb6:	d1ee      	bne.n	800dc96 <_DrawBitmap+0x10e>
 800dcb8:	e7ce      	b.n	800dc58 <_DrawBitmap+0xd0>
 800dcba:	6933      	ldr	r3, [r6, #16]
 800dcbc:	689b      	ldr	r3, [r3, #8]
 800dcbe:	4798      	blx	r3
 800dcc0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800dcc4:	900b      	str	r0, [sp, #44]	; 0x2c
 800dcc6:	46d9      	mov	r9, fp
 800dcc8:	46a4      	mov	ip, r4
 800dcca:	f89c 1000 	ldrb.w	r1, [ip]
 800dcce:	2280      	movs	r2, #128	; 0x80
 800dcd0:	fa42 f208 	asr.w	r2, r2, r8
 800dcd4:	eb0a 030b 	add.w	r3, sl, fp
 800dcd8:	4211      	tst	r1, r2
 800dcda:	ebc9 0303 	rsb	r3, r9, r3
 800dcde:	d013      	beq.n	800dd08 <_DrawBitmap+0x180>
 800dce0:	4619      	mov	r1, r3
 800dce2:	463a      	mov	r2, r7
 800dce4:	4630      	mov	r0, r6
 800dce6:	f8cd c01c 	str.w	ip, [sp, #28]
 800dcea:	9308      	str	r3, [sp, #32]
 800dcec:	f7ff fd54 	bl	800d798 <_GetPixelIndex>
 800dcf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dcf2:	9b08      	ldr	r3, [sp, #32]
 800dcf4:	ea80 0e01 	eor.w	lr, r0, r1
 800dcf8:	463a      	mov	r2, r7
 800dcfa:	4619      	mov	r1, r3
 800dcfc:	4630      	mov	r0, r6
 800dcfe:	4673      	mov	r3, lr
 800dd00:	f7ff fd41 	bl	800d786 <_SetPixelIndex>
 800dd04:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800dd08:	f108 0801 	add.w	r8, r8, #1
 800dd0c:	f1b8 0f08 	cmp.w	r8, #8
 800dd10:	bf04      	itt	eq
 800dd12:	f10c 0c01 	addeq.w	ip, ip, #1
 800dd16:	f04f 0800 	moveq.w	r8, #0
 800dd1a:	f1b9 0901 	subs.w	r9, r9, #1
 800dd1e:	d1d4      	bne.n	800dcca <_DrawBitmap+0x142>
 800dd20:	e79a      	b.n	800dc58 <_DrawBitmap+0xd0>
 800dd22:	b935      	cbnz	r5, 800dd32 <_DrawBitmap+0x1aa>
 800dd24:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800dd26:	3101      	adds	r1, #1
 800dd28:	443c      	add	r4, r7
 800dd2a:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800dd2c:	42b9      	cmp	r1, r7
 800dd2e:	dbf8      	blt.n	800dd22 <_DrawBitmap+0x19a>
 800dd30:	e16a      	b.n	800e008 <_DrawBitmap+0x480>
 800dd32:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800dd36:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dd38:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800dd3a:	69da      	ldr	r2, [r3, #28]
 800dd3c:	7826      	ldrb	r6, [r4, #0]
 800dd3e:	4438      	add	r0, r7
 800dd40:	4488      	add	r8, r1
 800dd42:	fb02 0808 	mla	r8, r2, r8, r0
 800dd46:	681a      	ldr	r2, [r3, #0]
 800dd48:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800dd4a:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 800dd4e:	7c02      	ldrb	r2, [r0, #16]
 800dd50:	f012 0203 	ands.w	r2, r2, #3
 800dd54:	46c4      	mov	ip, r8
 800dd56:	d005      	beq.n	800dd64 <_DrawBitmap+0x1dc>
 800dd58:	2a02      	cmp	r2, #2
 800dd5a:	d1e3      	bne.n	800dd24 <_DrawBitmap+0x19c>
 800dd5c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dd5e:	9406      	str	r4, [sp, #24]
 800dd60:	2000      	movs	r0, #0
 800dd62:	e020      	b.n	800dda6 <_DrawBitmap+0x21e>
 800dd64:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dd66:	4658      	mov	r0, fp
 800dd68:	4627      	mov	r7, r4
 800dd6a:	f1c2 0803 	rsb	r8, r2, #3
 800dd6e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800dd72:	f1c8 0906 	rsb	r9, r8, #6
 800dd76:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 800dd7a:	fa4a f909 	asr.w	r9, sl, r9
 800dd7e:	ea09 0906 	and.w	r9, r9, r6
 800dd82:	fa29 f808 	lsr.w	r8, r9, r8
 800dd86:	3201      	adds	r2, #1
 800dd88:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
 800dd8c:	f84c 8b04 	str.w	r8, [ip], #4
 800dd90:	2a04      	cmp	r2, #4
 800dd92:	d102      	bne.n	800dd9a <_DrawBitmap+0x212>
 800dd94:	787e      	ldrb	r6, [r7, #1]
 800dd96:	2200      	movs	r2, #0
 800dd98:	3701      	adds	r7, #1
 800dd9a:	3801      	subs	r0, #1
 800dd9c:	d1e5      	bne.n	800dd6a <_DrawBitmap+0x1e2>
 800dd9e:	e7c1      	b.n	800dd24 <_DrawBitmap+0x19c>
 800dda0:	3001      	adds	r0, #1
 800dda2:	4558      	cmp	r0, fp
 800dda4:	d0be      	beq.n	800dd24 <_DrawBitmap+0x19c>
 800dda6:	f1c2 0c03 	rsb	ip, r2, #3
 800ddaa:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800ddae:	f1cc 0906 	rsb	r9, ip, #6
 800ddb2:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 800ddb6:	fa4a f909 	asr.w	r9, sl, r9
 800ddba:	ea09 0906 	and.w	r9, r9, r6
 800ddbe:	fa39 fc0c 	lsrs.w	ip, r9, ip
 800ddc2:	bf1c      	itt	ne
 800ddc4:	f855 702c 	ldrne.w	r7, [r5, ip, lsl #2]
 800ddc8:	f848 7020 	strne.w	r7, [r8, r0, lsl #2]
 800ddcc:	3201      	adds	r2, #1
 800ddce:	2a04      	cmp	r2, #4
 800ddd0:	d1e6      	bne.n	800dda0 <_DrawBitmap+0x218>
 800ddd2:	9a06      	ldr	r2, [sp, #24]
 800ddd4:	7856      	ldrb	r6, [r2, #1]
 800ddd6:	3201      	adds	r2, #1
 800ddd8:	9206      	str	r2, [sp, #24]
 800ddda:	2200      	movs	r2, #0
 800dddc:	e7e0      	b.n	800dda0 <_DrawBitmap+0x218>
 800ddde:	b935      	cbnz	r5, 800ddee <_DrawBitmap+0x266>
 800dde0:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800dde2:	3101      	adds	r1, #1
 800dde4:	443c      	add	r4, r7
 800dde6:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800dde8:	42b9      	cmp	r1, r7
 800ddea:	dbf8      	blt.n	800ddde <_DrawBitmap+0x256>
 800ddec:	e10c      	b.n	800e008 <_DrawBitmap+0x480>
 800ddee:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800ddf2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ddf4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800ddf6:	69da      	ldr	r2, [r3, #28]
 800ddf8:	7826      	ldrb	r6, [r4, #0]
 800ddfa:	4438      	add	r0, r7
 800ddfc:	4488      	add	r8, r1
 800ddfe:	fb02 0808 	mla	r8, r2, r8, r0
 800de02:	681a      	ldr	r2, [r3, #0]
 800de04:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800de06:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 800de0a:	7c02      	ldrb	r2, [r0, #16]
 800de0c:	f012 0203 	ands.w	r2, r2, #3
 800de10:	46c4      	mov	ip, r8
 800de12:	d005      	beq.n	800de20 <_DrawBitmap+0x298>
 800de14:	2a02      	cmp	r2, #2
 800de16:	d1e3      	bne.n	800dde0 <_DrawBitmap+0x258>
 800de18:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800de1a:	9406      	str	r4, [sp, #24]
 800de1c:	2000      	movs	r0, #0
 800de1e:	e024      	b.n	800de6a <_DrawBitmap+0x2e2>
 800de20:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800de22:	4658      	mov	r0, fp
 800de24:	4627      	mov	r7, r4
 800de26:	f1c2 0801 	rsb	r8, r2, #1
 800de2a:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800de2e:	f1c8 0904 	rsb	r9, r8, #4
 800de32:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 800de36:	fa4a f909 	asr.w	r9, sl, r9
 800de3a:	ea09 0906 	and.w	r9, r9, r6
 800de3e:	fa29 f808 	lsr.w	r8, r9, r8
 800de42:	3201      	adds	r2, #1
 800de44:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
 800de48:	f84c 8b04 	str.w	r8, [ip], #4
 800de4c:	2a02      	cmp	r2, #2
 800de4e:	d102      	bne.n	800de56 <_DrawBitmap+0x2ce>
 800de50:	787e      	ldrb	r6, [r7, #1]
 800de52:	2200      	movs	r2, #0
 800de54:	3701      	adds	r7, #1
 800de56:	3801      	subs	r0, #1
 800de58:	d1e5      	bne.n	800de26 <_DrawBitmap+0x29e>
 800de5a:	e7c1      	b.n	800dde0 <_DrawBitmap+0x258>
 800de5c:	20000308 	.word	0x20000308
 800de60:	080209fc 	.word	0x080209fc
 800de64:	3001      	adds	r0, #1
 800de66:	4558      	cmp	r0, fp
 800de68:	d0ba      	beq.n	800dde0 <_DrawBitmap+0x258>
 800de6a:	f1c2 0c01 	rsb	ip, r2, #1
 800de6e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800de72:	f1cc 0904 	rsb	r9, ip, #4
 800de76:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 800de7a:	fa4a f909 	asr.w	r9, sl, r9
 800de7e:	ea09 0906 	and.w	r9, r9, r6
 800de82:	fa39 fc0c 	lsrs.w	ip, r9, ip
 800de86:	bf1c      	itt	ne
 800de88:	f855 702c 	ldrne.w	r7, [r5, ip, lsl #2]
 800de8c:	f848 7020 	strne.w	r7, [r8, r0, lsl #2]
 800de90:	3201      	adds	r2, #1
 800de92:	2a02      	cmp	r2, #2
 800de94:	d1e6      	bne.n	800de64 <_DrawBitmap+0x2dc>
 800de96:	9a06      	ldr	r2, [sp, #24]
 800de98:	7856      	ldrb	r6, [r2, #1]
 800de9a:	3201      	adds	r2, #1
 800de9c:	9206      	str	r2, [sp, #24]
 800de9e:	2200      	movs	r2, #0
 800dea0:	e7e0      	b.n	800de64 <_DrawBitmap+0x2dc>
 800dea2:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800dea4:	f8df c168 	ldr.w	ip, [pc, #360]	; 800e010 <_DrawBitmap+0x488>
 800dea8:	b127      	cbz	r7, 800deb4 <_DrawBitmap+0x32c>
 800deaa:	f8dc 0000 	ldr.w	r0, [ip]
 800deae:	7c00      	ldrb	r0, [r0, #16]
 800deb0:	0780      	lsls	r0, r0, #30
 800deb2:	d504      	bpl.n	800debe <_DrawBitmap+0x336>
 800deb4:	f8dc c000 	ldr.w	ip, [ip]
 800deb8:	f04f 0900 	mov.w	r9, #0
 800debc:	e011      	b.n	800dee2 <_DrawBitmap+0x35a>
 800debe:	2d00      	cmp	r5, #0
 800dec0:	d0f8      	beq.n	800deb4 <_DrawBitmap+0x32c>
 800dec2:	9816      	ldr	r0, [sp, #88]	; 0x58
 800dec4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dec6:	9302      	str	r3, [sp, #8]
 800dec8:	f8cd b000 	str.w	fp, [sp]
 800decc:	9001      	str	r0, [sp, #4]
 800dece:	9503      	str	r5, [sp, #12]
 800ded0:	69b0      	ldr	r0, [r6, #24]
 800ded2:	4623      	mov	r3, r4
 800ded4:	47b8      	blx	r7
 800ded6:	e097      	b.n	800e008 <_DrawBitmap+0x480>
 800ded8:	b93d      	cbnz	r5, 800deea <_DrawBitmap+0x362>
 800deda:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800dedc:	f109 0901 	add.w	r9, r9, #1
 800dee0:	443c      	add	r4, r7
 800dee2:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800dee4:	45b9      	cmp	r9, r7
 800dee6:	dbf7      	blt.n	800ded8 <_DrawBitmap+0x350>
 800dee8:	e08e      	b.n	800e008 <_DrawBitmap+0x480>
 800deea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800deec:	69da      	ldr	r2, [r3, #28]
 800deee:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800def0:	4448      	add	r0, r9
 800def2:	fb02 7000 	mla	r0, r2, r0, r7
 800def6:	681a      	ldr	r2, [r3, #0]
 800def8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800defc:	f89c 2010 	ldrb.w	r2, [ip, #16]
 800df00:	f012 0203 	ands.w	r2, r2, #3
 800df04:	4601      	mov	r1, r0
 800df06:	d003      	beq.n	800df10 <_DrawBitmap+0x388>
 800df08:	2a02      	cmp	r2, #2
 800df0a:	d1e6      	bne.n	800deda <_DrawBitmap+0x352>
 800df0c:	2100      	movs	r1, #0
 800df0e:	e04f      	b.n	800dfb0 <_DrawBitmap+0x428>
 800df10:	4658      	mov	r0, fp
 800df12:	4622      	mov	r2, r4
 800df14:	2807      	cmp	r0, #7
 800df16:	dd23      	ble.n	800df60 <_DrawBitmap+0x3d8>
 800df18:	7816      	ldrb	r6, [r2, #0]
 800df1a:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800df1e:	600e      	str	r6, [r1, #0]
 800df20:	7856      	ldrb	r6, [r2, #1]
 800df22:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800df26:	604e      	str	r6, [r1, #4]
 800df28:	7896      	ldrb	r6, [r2, #2]
 800df2a:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800df2e:	608e      	str	r6, [r1, #8]
 800df30:	78d6      	ldrb	r6, [r2, #3]
 800df32:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800df36:	60ce      	str	r6, [r1, #12]
 800df38:	7916      	ldrb	r6, [r2, #4]
 800df3a:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800df3e:	610e      	str	r6, [r1, #16]
 800df40:	7956      	ldrb	r6, [r2, #5]
 800df42:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800df46:	614e      	str	r6, [r1, #20]
 800df48:	7996      	ldrb	r6, [r2, #6]
 800df4a:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800df4e:	618e      	str	r6, [r1, #24]
 800df50:	79d6      	ldrb	r6, [r2, #7]
 800df52:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800df56:	61ce      	str	r6, [r1, #28]
 800df58:	3808      	subs	r0, #8
 800df5a:	3208      	adds	r2, #8
 800df5c:	3120      	adds	r1, #32
 800df5e:	e7d9      	b.n	800df14 <_DrawBitmap+0x38c>
 800df60:	2803      	cmp	r0, #3
 800df62:	dd13      	ble.n	800df8c <_DrawBitmap+0x404>
 800df64:	7816      	ldrb	r6, [r2, #0]
 800df66:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800df6a:	600e      	str	r6, [r1, #0]
 800df6c:	7856      	ldrb	r6, [r2, #1]
 800df6e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800df72:	604e      	str	r6, [r1, #4]
 800df74:	7896      	ldrb	r6, [r2, #2]
 800df76:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800df7a:	608e      	str	r6, [r1, #8]
 800df7c:	78d6      	ldrb	r6, [r2, #3]
 800df7e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800df82:	60ce      	str	r6, [r1, #12]
 800df84:	3804      	subs	r0, #4
 800df86:	3204      	adds	r2, #4
 800df88:	3110      	adds	r1, #16
 800df8a:	e7e9      	b.n	800df60 <_DrawBitmap+0x3d8>
 800df8c:	2600      	movs	r6, #0
 800df8e:	4286      	cmp	r6, r0
 800df90:	d0a3      	beq.n	800deda <_DrawBitmap+0x352>
 800df92:	f812 8006 	ldrb.w	r8, [r2, r6]
 800df96:	f855 7028 	ldr.w	r7, [r5, r8, lsl #2]
 800df9a:	f841 7026 	str.w	r7, [r1, r6, lsl #2]
 800df9e:	3601      	adds	r6, #1
 800dfa0:	e7f5      	b.n	800df8e <_DrawBitmap+0x406>
 800dfa2:	5c62      	ldrb	r2, [r4, r1]
 800dfa4:	b11a      	cbz	r2, 800dfae <_DrawBitmap+0x426>
 800dfa6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800dfaa:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
 800dfae:	3101      	adds	r1, #1
 800dfb0:	ebc1 020b 	rsb	r2, r1, fp
 800dfb4:	2a00      	cmp	r2, #0
 800dfb6:	dcf4      	bgt.n	800dfa2 <_DrawBitmap+0x41a>
 800dfb8:	e78f      	b.n	800deda <_DrawBitmap+0x352>
 800dfba:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800dfbc:	b90d      	cbnz	r5, 800dfc2 <_DrawBitmap+0x43a>
 800dfbe:	462b      	mov	r3, r5
 800dfc0:	e012      	b.n	800dfe8 <_DrawBitmap+0x460>
 800dfc2:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800dfc4:	9701      	str	r7, [sp, #4]
 800dfc6:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800dfc8:	f8cd b000 	str.w	fp, [sp]
 800dfcc:	9702      	str	r7, [sp, #8]
 800dfce:	69b0      	ldr	r0, [r6, #24]
 800dfd0:	4623      	mov	r3, r4
 800dfd2:	47a8      	blx	r5
 800dfd4:	e018      	b.n	800e008 <_DrawBitmap+0x480>
 800dfd6:	f851 7f04 	ldr.w	r7, [r1, #4]!
 800dfda:	1b0d      	subs	r5, r1, r4
 800dfdc:	3a01      	subs	r2, #1
 800dfde:	502f      	str	r7, [r5, r0]
 800dfe0:	d1f9      	bne.n	800dfd6 <_DrawBitmap+0x44e>
 800dfe2:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800dfe4:	3301      	adds	r3, #1
 800dfe6:	443c      	add	r4, r7
 800dfe8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800dfea:	42ab      	cmp	r3, r5
 800dfec:	da0c      	bge.n	800e008 <_DrawBitmap+0x480>
 800dfee:	68b2      	ldr	r2, [r6, #8]
 800dff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dff2:	69d1      	ldr	r1, [r2, #28]
 800dff4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800dff6:	6812      	ldr	r2, [r2, #0]
 800dff8:	4418      	add	r0, r3
 800dffa:	fb01 5100 	mla	r1, r1, r0, r5
 800dffe:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800e002:	1f21      	subs	r1, r4, #4
 800e004:	465a      	mov	r2, fp
 800e006:	e7e6      	b.n	800dfd6 <_DrawBitmap+0x44e>
 800e008:	b00d      	add	sp, #52	; 0x34
 800e00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e00e:	bf00      	nop
 800e010:	20000308 	.word	0x20000308

0800e014 <_InitOnce.isra.4>:
 800e014:	b538      	push	{r3, r4, r5, lr}
 800e016:	6805      	ldr	r5, [r0, #0]
 800e018:	4604      	mov	r4, r0
 800e01a:	b93d      	cbnz	r5, 800e02c <_InitOnce.isra.4+0x18>
 800e01c:	2048      	movs	r0, #72	; 0x48
 800e01e:	f002 fe67 	bl	8010cf0 <GUI_ALLOC_GetFixedBlock>
 800e022:	4629      	mov	r1, r5
 800e024:	6020      	str	r0, [r4, #0]
 800e026:	2248      	movs	r2, #72	; 0x48
 800e028:	f000 fe29 	bl	800ec7e <GUI__memset>
 800e02c:	6820      	ldr	r0, [r4, #0]
 800e02e:	f1d0 0001 	rsbs	r0, r0, #1
 800e032:	bf38      	it	cc
 800e034:	2000      	movcc	r0, #0
 800e036:	bd38      	pop	{r3, r4, r5, pc}

0800e038 <_SetDevFunc>:
 800e038:	b570      	push	{r4, r5, r6, lr}
 800e03a:	4605      	mov	r5, r0
 800e03c:	3008      	adds	r0, #8
 800e03e:	460e      	mov	r6, r1
 800e040:	4614      	mov	r4, r2
 800e042:	f7ff ffe7 	bl	800e014 <_InitOnce.isra.4>
 800e046:	68ab      	ldr	r3, [r5, #8]
 800e048:	b1c3      	cbz	r3, 800e07c <_SetDevFunc+0x44>
 800e04a:	f1a6 0119 	sub.w	r1, r6, #25
 800e04e:	290f      	cmp	r1, #15
 800e050:	d814      	bhi.n	800e07c <_SetDevFunc+0x44>
 800e052:	e8df f001 	tbb	[pc, r1]
 800e056:	1308      	.short	0x1308
 800e058:	13131313 	.word	0x13131313
 800e05c:	130a0c13 	.word	0x130a0c13
 800e060:	130e1310 	.word	0x130e1310
 800e064:	1213      	.short	0x1213
 800e066:	631c      	str	r4, [r3, #48]	; 0x30
 800e068:	bd70      	pop	{r4, r5, r6, pc}
 800e06a:	635c      	str	r4, [r3, #52]	; 0x34
 800e06c:	bd70      	pop	{r4, r5, r6, pc}
 800e06e:	639c      	str	r4, [r3, #56]	; 0x38
 800e070:	bd70      	pop	{r4, r5, r6, pc}
 800e072:	63dc      	str	r4, [r3, #60]	; 0x3c
 800e074:	bd70      	pop	{r4, r5, r6, pc}
 800e076:	641c      	str	r4, [r3, #64]	; 0x40
 800e078:	bd70      	pop	{r4, r5, r6, pc}
 800e07a:	645c      	str	r4, [r3, #68]	; 0x44
 800e07c:	bd70      	pop	{r4, r5, r6, pc}

0800e07e <_GetPos>:
 800e07e:	b570      	push	{r4, r5, r6, lr}
 800e080:	4604      	mov	r4, r0
 800e082:	3008      	adds	r0, #8
 800e084:	460d      	mov	r5, r1
 800e086:	4616      	mov	r6, r2
 800e088:	f7ff ffc4 	bl	800e014 <_InitOnce.isra.4>
 800e08c:	68a3      	ldr	r3, [r4, #8]
 800e08e:	b11b      	cbz	r3, 800e098 <_GetPos+0x1a>
 800e090:	6a18      	ldr	r0, [r3, #32]
 800e092:	6028      	str	r0, [r5, #0]
 800e094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e096:	6033      	str	r3, [r6, #0]
 800e098:	bd70      	pop	{r4, r5, r6, pc}

0800e09a <_ShowBuffer>:
 800e09a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e09c:	4604      	mov	r4, r0
 800e09e:	2300      	movs	r3, #0
 800e0a0:	3008      	adds	r0, #8
 800e0a2:	9301      	str	r3, [sp, #4]
 800e0a4:	460d      	mov	r5, r1
 800e0a6:	f7ff ffb5 	bl	800e014 <_InitOnce.isra.4>
 800e0aa:	68a3      	ldr	r3, [r4, #8]
 800e0ac:	b133      	cbz	r3, 800e0bc <_ShowBuffer+0x22>
 800e0ae:	aa02      	add	r2, sp, #8
 800e0b0:	69a0      	ldr	r0, [r4, #24]
 800e0b2:	f842 5d04 	str.w	r5, [r2, #-4]!
 800e0b6:	210e      	movs	r1, #14
 800e0b8:	f7f8 fe20 	bl	8006cfc <LCD_X_DisplayDriver>
 800e0bc:	b003      	add	sp, #12
 800e0be:	bd30      	pop	{r4, r5, pc}

0800e0c0 <_Init>:
 800e0c0:	b538      	push	{r3, r4, r5, lr}
 800e0c2:	4604      	mov	r4, r0
 800e0c4:	3008      	adds	r0, #8
 800e0c6:	f7ff ffa5 	bl	800e014 <_InitOnce.isra.4>
 800e0ca:	2101      	movs	r1, #1
 800e0cc:	4605      	mov	r5, r0
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	69a0      	ldr	r0, [r4, #24]
 800e0d2:	f7f8 fe13 	bl	8006cfc <LCD_X_DisplayDriver>
 800e0d6:	4328      	orrs	r0, r5
 800e0d8:	bd38      	pop	{r3, r4, r5, pc}

0800e0da <_SetVis>:
 800e0da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e0dc:	4604      	mov	r4, r0
 800e0de:	2300      	movs	r3, #0
 800e0e0:	3008      	adds	r0, #8
 800e0e2:	9301      	str	r3, [sp, #4]
 800e0e4:	460d      	mov	r5, r1
 800e0e6:	f7ff ff95 	bl	800e014 <_InitOnce.isra.4>
 800e0ea:	68a3      	ldr	r3, [r4, #8]
 800e0ec:	b13b      	cbz	r3, 800e0fe <_SetVis+0x24>
 800e0ee:	aa02      	add	r2, sp, #8
 800e0f0:	62dd      	str	r5, [r3, #44]	; 0x2c
 800e0f2:	f842 5d04 	str.w	r5, [r2, #-4]!
 800e0f6:	69a0      	ldr	r0, [r4, #24]
 800e0f8:	2109      	movs	r1, #9
 800e0fa:	f7f8 fdff 	bl	8006cfc <LCD_X_DisplayDriver>
 800e0fe:	b003      	add	sp, #12
 800e100:	bd30      	pop	{r4, r5, pc}

0800e102 <_SetAlpha>:
 800e102:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e104:	4604      	mov	r4, r0
 800e106:	2300      	movs	r3, #0
 800e108:	3008      	adds	r0, #8
 800e10a:	9301      	str	r3, [sp, #4]
 800e10c:	460d      	mov	r5, r1
 800e10e:	f7ff ff81 	bl	800e014 <_InitOnce.isra.4>
 800e112:	68a3      	ldr	r3, [r4, #8]
 800e114:	b13b      	cbz	r3, 800e126 <_SetAlpha+0x24>
 800e116:	aa02      	add	r2, sp, #8
 800e118:	629d      	str	r5, [r3, #40]	; 0x28
 800e11a:	f842 5d04 	str.w	r5, [r2, #-4]!
 800e11e:	69a0      	ldr	r0, [r4, #24]
 800e120:	210a      	movs	r1, #10
 800e122:	f7f8 fdeb 	bl	8006cfc <LCD_X_DisplayDriver>
 800e126:	b003      	add	sp, #12
 800e128:	bd30      	pop	{r4, r5, pc}

0800e12a <_SetPos>:
 800e12a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e12c:	4604      	mov	r4, r0
 800e12e:	2300      	movs	r3, #0
 800e130:	3008      	adds	r0, #8
 800e132:	9300      	str	r3, [sp, #0]
 800e134:	9301      	str	r3, [sp, #4]
 800e136:	460d      	mov	r5, r1
 800e138:	4616      	mov	r6, r2
 800e13a:	f7ff ff6b 	bl	800e014 <_InitOnce.isra.4>
 800e13e:	68a3      	ldr	r3, [r4, #8]
 800e140:	b143      	cbz	r3, 800e154 <_SetPos+0x2a>
 800e142:	621d      	str	r5, [r3, #32]
 800e144:	625e      	str	r6, [r3, #36]	; 0x24
 800e146:	69a0      	ldr	r0, [r4, #24]
 800e148:	2108      	movs	r1, #8
 800e14a:	466a      	mov	r2, sp
 800e14c:	e88d 0060 	stmia.w	sp, {r5, r6}
 800e150:	f7f8 fdd4 	bl	8006cfc <LCD_X_DisplayDriver>
 800e154:	b002      	add	sp, #8
 800e156:	bd70      	pop	{r4, r5, r6, pc}

0800e158 <_SetVRAMAddr>:
 800e158:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e15a:	4604      	mov	r4, r0
 800e15c:	2300      	movs	r3, #0
 800e15e:	3008      	adds	r0, #8
 800e160:	9301      	str	r3, [sp, #4]
 800e162:	460d      	mov	r5, r1
 800e164:	f7ff ff56 	bl	800e014 <_InitOnce.isra.4>
 800e168:	68a3      	ldr	r3, [r4, #8]
 800e16a:	b143      	cbz	r3, 800e17e <_SetVRAMAddr+0x26>
 800e16c:	aa02      	add	r2, sp, #8
 800e16e:	601d      	str	r5, [r3, #0]
 800e170:	605d      	str	r5, [r3, #4]
 800e172:	f842 5d04 	str.w	r5, [r2, #-4]!
 800e176:	69a0      	ldr	r0, [r4, #24]
 800e178:	2102      	movs	r1, #2
 800e17a:	f7f8 fdbf 	bl	8006cfc <LCD_X_DisplayDriver>
 800e17e:	b003      	add	sp, #12
 800e180:	bd30      	pop	{r4, r5, pc}

0800e182 <_CopyBuffer>:
 800e182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e186:	4605      	mov	r5, r0
 800e188:	3008      	adds	r0, #8
 800e18a:	460e      	mov	r6, r1
 800e18c:	4617      	mov	r7, r2
 800e18e:	f7ff ff41 	bl	800e014 <_InitOnce.isra.4>
 800e192:	68ac      	ldr	r4, [r5, #8]
 800e194:	b1e4      	cbz	r4, 800e1d0 <_CopyBuffer+0x4e>
 800e196:	42be      	cmp	r6, r7
 800e198:	d01a      	beq.n	800e1d0 <_CopyBuffer+0x4e>
 800e19a:	68eb      	ldr	r3, [r5, #12]
 800e19c:	2108      	movs	r1, #8
 800e19e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1a0:	4628      	mov	r0, r5
 800e1a2:	4798      	blx	r3
 800e1a4:	6923      	ldr	r3, [r4, #16]
 800e1a6:	68e2      	ldr	r2, [r4, #12]
 800e1a8:	6861      	ldr	r1, [r4, #4]
 800e1aa:	435a      	muls	r2, r3
 800e1ac:	4350      	muls	r0, r2
 800e1ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e1b0:	08c2      	lsrs	r2, r0, #3
 800e1b2:	fb07 1802 	mla	r8, r7, r2, r1
 800e1b6:	b123      	cbz	r3, 800e1c2 <_CopyBuffer+0x40>
 800e1b8:	69a8      	ldr	r0, [r5, #24]
 800e1ba:	4631      	mov	r1, r6
 800e1bc:	463a      	mov	r2, r7
 800e1be:	4798      	blx	r3
 800e1c0:	e004      	b.n	800e1cc <_CopyBuffer+0x4a>
 800e1c2:	4640      	mov	r0, r8
 800e1c4:	fb06 1102 	mla	r1, r6, r2, r1
 800e1c8:	f00a fd29 	bl	8018c1e <memcpy>
 800e1cc:	f8c4 8000 	str.w	r8, [r4]
 800e1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e1d4 <_SetSize>:
 800e1d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e1d6:	4605      	mov	r5, r0
 800e1d8:	2300      	movs	r3, #0
 800e1da:	3008      	adds	r0, #8
 800e1dc:	460e      	mov	r6, r1
 800e1de:	4617      	mov	r7, r2
 800e1e0:	9300      	str	r3, [sp, #0]
 800e1e2:	9301      	str	r3, [sp, #4]
 800e1e4:	f7ff ff16 	bl	800e014 <_InitOnce.isra.4>
 800e1e8:	68ac      	ldr	r4, [r5, #8]
 800e1ea:	b194      	cbz	r4, 800e212 <_SetSize+0x3e>
 800e1ec:	69e3      	ldr	r3, [r4, #28]
 800e1ee:	b93b      	cbnz	r3, 800e200 <_SetSize+0x2c>
 800e1f0:	69a8      	ldr	r0, [r5, #24]
 800e1f2:	f000 f92b 	bl	800e44c <LCD_GetSwapXYEx>
 800e1f6:	2800      	cmp	r0, #0
 800e1f8:	bf0c      	ite	eq
 800e1fa:	4630      	moveq	r0, r6
 800e1fc:	4638      	movne	r0, r7
 800e1fe:	61e0      	str	r0, [r4, #28]
 800e200:	60e6      	str	r6, [r4, #12]
 800e202:	6127      	str	r7, [r4, #16]
 800e204:	69a8      	ldr	r0, [r5, #24]
 800e206:	2107      	movs	r1, #7
 800e208:	466a      	mov	r2, sp
 800e20a:	e88d 00c0 	stmia.w	sp, {r6, r7}
 800e20e:	f7f8 fd75 	bl	8006cfc <LCD_X_DisplayDriver>
 800e212:	b003      	add	sp, #12
 800e214:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e216 <_SetVSize>:
 800e216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e218:	4606      	mov	r6, r0
 800e21a:	3008      	adds	r0, #8
 800e21c:	460d      	mov	r5, r1
 800e21e:	4617      	mov	r7, r2
 800e220:	f7ff fef8 	bl	800e014 <_InitOnce.isra.4>
 800e224:	68b4      	ldr	r4, [r6, #8]
 800e226:	b144      	cbz	r4, 800e23a <_SetVSize+0x24>
 800e228:	69b0      	ldr	r0, [r6, #24]
 800e22a:	f000 f90f 	bl	800e44c <LCD_GetSwapXYEx>
 800e22e:	6165      	str	r5, [r4, #20]
 800e230:	61a7      	str	r7, [r4, #24]
 800e232:	b108      	cbz	r0, 800e238 <_SetVSize+0x22>
 800e234:	61e7      	str	r7, [r4, #28]
 800e236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e238:	61e5      	str	r5, [r4, #28]
 800e23a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e23c <LCD_UpdateColorIndices>:
 800e23c:	b510      	push	{r4, lr}
 800e23e:	4c07      	ldr	r4, [pc, #28]	; (800e25c <LCD_UpdateColorIndices+0x20>)
 800e240:	6823      	ldr	r3, [r4, #0]
 800e242:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e244:	f000 fcaa 	bl	800eb9c <LCD_Color2Index>
 800e248:	f000 fcc8 	bl	800ebdc <LCD_SetColorIndex>
 800e24c:	6823      	ldr	r3, [r4, #0]
 800e24e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e250:	f000 fca4 	bl	800eb9c <LCD_Color2Index>
 800e254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e258:	f000 bcdc 	b.w	800ec14 <LCD_SetBkColorIndex>
 800e25c:	20000308 	.word	0x20000308

0800e260 <LCD_SetClipRectEx>:
 800e260:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e262:	4c09      	ldr	r4, [pc, #36]	; (800e288 <LCD_SetClipRectEx+0x28>)
 800e264:	6823      	ldr	r3, [r4, #0]
 800e266:	7c5a      	ldrb	r2, [r3, #17]
 800e268:	4b08      	ldr	r3, [pc, #32]	; (800e28c <LCD_SetClipRectEx+0x2c>)
 800e26a:	4605      	mov	r5, r0
 800e26c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e270:	68c2      	ldr	r2, [r0, #12]
 800e272:	4669      	mov	r1, sp
 800e274:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e276:	4790      	blx	r2
 800e278:	6820      	ldr	r0, [r4, #0]
 800e27a:	4629      	mov	r1, r5
 800e27c:	466a      	mov	r2, sp
 800e27e:	3008      	adds	r0, #8
 800e280:	f000 fde4 	bl	800ee4c <GUI__IntersectRects>
 800e284:	b003      	add	sp, #12
 800e286:	bd30      	pop	{r4, r5, pc}
 800e288:	20000308 	.word	0x20000308
 800e28c:	20021c0c 	.word	0x20021c0c

0800e290 <LCD_SetVRAMAddrEx>:
 800e290:	b513      	push	{r0, r1, r4, lr}
 800e292:	460c      	mov	r4, r1
 800e294:	f001 feac 	bl	800fff0 <GUI_DEVICE__GetpDriver>
 800e298:	9001      	str	r0, [sp, #4]
 800e29a:	b908      	cbnz	r0, 800e2a0 <LCD_SetVRAMAddrEx+0x10>
 800e29c:	2001      	movs	r0, #1
 800e29e:	e00b      	b.n	800e2b8 <LCD_SetVRAMAddrEx+0x28>
 800e2a0:	68c3      	ldr	r3, [r0, #12]
 800e2a2:	2109      	movs	r1, #9
 800e2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2a6:	a801      	add	r0, sp, #4
 800e2a8:	4798      	blx	r3
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	2800      	cmp	r0, #0
 800e2ae:	d0f5      	beq.n	800e29c <LCD_SetVRAMAddrEx+0xc>
 800e2b0:	9801      	ldr	r0, [sp, #4]
 800e2b2:	4621      	mov	r1, r4
 800e2b4:	4798      	blx	r3
 800e2b6:	2000      	movs	r0, #0
 800e2b8:	b002      	add	sp, #8
 800e2ba:	bd10      	pop	{r4, pc}

0800e2bc <LCD_SetVSizeEx>:
 800e2bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e2be:	460d      	mov	r5, r1
 800e2c0:	4614      	mov	r4, r2
 800e2c2:	f001 fe95 	bl	800fff0 <GUI_DEVICE__GetpDriver>
 800e2c6:	9001      	str	r0, [sp, #4]
 800e2c8:	b908      	cbnz	r0, 800e2ce <LCD_SetVSizeEx+0x12>
 800e2ca:	2001      	movs	r0, #1
 800e2cc:	e00c      	b.n	800e2e8 <LCD_SetVSizeEx+0x2c>
 800e2ce:	68c3      	ldr	r3, [r0, #12]
 800e2d0:	210a      	movs	r1, #10
 800e2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2d4:	a801      	add	r0, sp, #4
 800e2d6:	4798      	blx	r3
 800e2d8:	4603      	mov	r3, r0
 800e2da:	2800      	cmp	r0, #0
 800e2dc:	d0f5      	beq.n	800e2ca <LCD_SetVSizeEx+0xe>
 800e2de:	9801      	ldr	r0, [sp, #4]
 800e2e0:	4629      	mov	r1, r5
 800e2e2:	4622      	mov	r2, r4
 800e2e4:	4798      	blx	r3
 800e2e6:	2000      	movs	r0, #0
 800e2e8:	b003      	add	sp, #12
 800e2ea:	bd30      	pop	{r4, r5, pc}

0800e2ec <LCD_SetSizeEx>:
 800e2ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e2ee:	460d      	mov	r5, r1
 800e2f0:	4614      	mov	r4, r2
 800e2f2:	f001 fe7d 	bl	800fff0 <GUI_DEVICE__GetpDriver>
 800e2f6:	9001      	str	r0, [sp, #4]
 800e2f8:	b908      	cbnz	r0, 800e2fe <LCD_SetSizeEx+0x12>
 800e2fa:	2001      	movs	r0, #1
 800e2fc:	e00c      	b.n	800e318 <LCD_SetSizeEx+0x2c>
 800e2fe:	68c3      	ldr	r3, [r0, #12]
 800e300:	210b      	movs	r1, #11
 800e302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e304:	a801      	add	r0, sp, #4
 800e306:	4798      	blx	r3
 800e308:	4603      	mov	r3, r0
 800e30a:	2800      	cmp	r0, #0
 800e30c:	d0f5      	beq.n	800e2fa <LCD_SetSizeEx+0xe>
 800e30e:	9801      	ldr	r0, [sp, #4]
 800e310:	4629      	mov	r1, r5
 800e312:	4622      	mov	r2, r4
 800e314:	4798      	blx	r3
 800e316:	2000      	movs	r0, #0
 800e318:	b003      	add	sp, #12
 800e31a:	bd30      	pop	{r4, r5, pc}

0800e31c <LCD_SetPosEx>:
 800e31c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e31e:	460d      	mov	r5, r1
 800e320:	4614      	mov	r4, r2
 800e322:	f001 fe65 	bl	800fff0 <GUI_DEVICE__GetpDriver>
 800e326:	9001      	str	r0, [sp, #4]
 800e328:	b908      	cbnz	r0, 800e32e <LCD_SetPosEx+0x12>
 800e32a:	2001      	movs	r0, #1
 800e32c:	e00c      	b.n	800e348 <LCD_SetPosEx+0x2c>
 800e32e:	68c3      	ldr	r3, [r0, #12]
 800e330:	2103      	movs	r1, #3
 800e332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e334:	a801      	add	r0, sp, #4
 800e336:	4798      	blx	r3
 800e338:	4603      	mov	r3, r0
 800e33a:	2800      	cmp	r0, #0
 800e33c:	d0f5      	beq.n	800e32a <LCD_SetPosEx+0xe>
 800e33e:	9801      	ldr	r0, [sp, #4]
 800e340:	4629      	mov	r1, r5
 800e342:	4622      	mov	r2, r4
 800e344:	4798      	blx	r3
 800e346:	2000      	movs	r0, #0
 800e348:	b003      	add	sp, #12
 800e34a:	bd30      	pop	{r4, r5, pc}

0800e34c <LCD_SetLUTEntryEx>:
 800e34c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e34e:	460d      	mov	r5, r1
 800e350:	4614      	mov	r4, r2
 800e352:	f001 fe4d 	bl	800fff0 <GUI_DEVICE__GetpDriver>
 800e356:	9001      	str	r0, [sp, #4]
 800e358:	b908      	cbnz	r0, 800e35e <LCD_SetLUTEntryEx+0x12>
 800e35a:	2001      	movs	r0, #1
 800e35c:	e00c      	b.n	800e378 <LCD_SetLUTEntryEx+0x2c>
 800e35e:	68c3      	ldr	r3, [r0, #12]
 800e360:	2110      	movs	r1, #16
 800e362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e364:	a801      	add	r0, sp, #4
 800e366:	4798      	blx	r3
 800e368:	4603      	mov	r3, r0
 800e36a:	2800      	cmp	r0, #0
 800e36c:	d0f5      	beq.n	800e35a <LCD_SetLUTEntryEx+0xe>
 800e36e:	9801      	ldr	r0, [sp, #4]
 800e370:	4629      	mov	r1, r5
 800e372:	4622      	mov	r2, r4
 800e374:	4798      	blx	r3
 800e376:	2000      	movs	r0, #0
 800e378:	b003      	add	sp, #12
 800e37a:	bd30      	pop	{r4, r5, pc}

0800e37c <LCD_GetPosEx>:
 800e37c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e37e:	460d      	mov	r5, r1
 800e380:	4614      	mov	r4, r2
 800e382:	f001 fe35 	bl	800fff0 <GUI_DEVICE__GetpDriver>
 800e386:	9001      	str	r0, [sp, #4]
 800e388:	b908      	cbnz	r0, 800e38e <LCD_GetPosEx+0x12>
 800e38a:	2001      	movs	r0, #1
 800e38c:	e00c      	b.n	800e3a8 <LCD_GetPosEx+0x2c>
 800e38e:	68c3      	ldr	r3, [r0, #12]
 800e390:	2104      	movs	r1, #4
 800e392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e394:	a801      	add	r0, sp, #4
 800e396:	4798      	blx	r3
 800e398:	4603      	mov	r3, r0
 800e39a:	2800      	cmp	r0, #0
 800e39c:	d0f5      	beq.n	800e38a <LCD_GetPosEx+0xe>
 800e39e:	9801      	ldr	r0, [sp, #4]
 800e3a0:	4629      	mov	r1, r5
 800e3a2:	4622      	mov	r2, r4
 800e3a4:	4798      	blx	r3
 800e3a6:	2000      	movs	r0, #0
 800e3a8:	b003      	add	sp, #12
 800e3aa:	bd30      	pop	{r4, r5, pc}

0800e3ac <LCD_SetDevFunc>:
 800e3ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e3ae:	460d      	mov	r5, r1
 800e3b0:	4614      	mov	r4, r2
 800e3b2:	f001 fe1d 	bl	800fff0 <GUI_DEVICE__GetpDriver>
 800e3b6:	9001      	str	r0, [sp, #4]
 800e3b8:	b908      	cbnz	r0, 800e3be <LCD_SetDevFunc+0x12>
 800e3ba:	2001      	movs	r0, #1
 800e3bc:	e00c      	b.n	800e3d8 <LCD_SetDevFunc+0x2c>
 800e3be:	68c3      	ldr	r3, [r0, #12]
 800e3c0:	2116      	movs	r1, #22
 800e3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3c4:	a801      	add	r0, sp, #4
 800e3c6:	4798      	blx	r3
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	2800      	cmp	r0, #0
 800e3cc:	d0f5      	beq.n	800e3ba <LCD_SetDevFunc+0xe>
 800e3ce:	9801      	ldr	r0, [sp, #4]
 800e3d0:	4629      	mov	r1, r5
 800e3d2:	4622      	mov	r2, r4
 800e3d4:	4798      	blx	r3
 800e3d6:	2000      	movs	r0, #0
 800e3d8:	b003      	add	sp, #12
 800e3da:	bd30      	pop	{r4, r5, pc}

0800e3dc <_GetDevProp>:
 800e3dc:	2801      	cmp	r0, #1
 800e3de:	b510      	push	{r4, lr}
 800e3e0:	460c      	mov	r4, r1
 800e3e2:	dc08      	bgt.n	800e3f6 <_GetDevProp+0x1a>
 800e3e4:	f001 fe04 	bl	800fff0 <GUI_DEVICE__GetpDriver>
 800e3e8:	b120      	cbz	r0, 800e3f4 <_GetDevProp+0x18>
 800e3ea:	68c3      	ldr	r3, [r0, #12]
 800e3ec:	4621      	mov	r1, r4
 800e3ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3f0:	4798      	blx	r3
 800e3f2:	bd10      	pop	{r4, pc}
 800e3f4:	bd10      	pop	{r4, pc}
 800e3f6:	2000      	movs	r0, #0
 800e3f8:	bd10      	pop	{r4, pc}

0800e3fa <_GetMaxValue>:
 800e3fa:	b538      	push	{r3, r4, r5, lr}
 800e3fc:	4604      	mov	r4, r0
 800e3fe:	4621      	mov	r1, r4
 800e400:	2001      	movs	r0, #1
 800e402:	f7ff ffeb 	bl	800e3dc <_GetDevProp>
 800e406:	4621      	mov	r1, r4
 800e408:	4605      	mov	r5, r0
 800e40a:	2000      	movs	r0, #0
 800e40c:	f7ff ffe6 	bl	800e3dc <_GetDevProp>
 800e410:	42a8      	cmp	r0, r5
 800e412:	bfb8      	it	lt
 800e414:	4628      	movlt	r0, r5
 800e416:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800e41a:	bd38      	pop	{r3, r4, r5, pc}

0800e41c <LCD_GetXSizeEx>:
 800e41c:	2101      	movs	r1, #1
 800e41e:	f7ff bfdd 	b.w	800e3dc <_GetDevProp>

0800e422 <LCD_GetYSizeEx>:
 800e422:	2102      	movs	r1, #2
 800e424:	f7ff bfda 	b.w	800e3dc <_GetDevProp>

0800e428 <LCD_GetVXSizeEx>:
 800e428:	2103      	movs	r1, #3
 800e42a:	f7ff bfd7 	b.w	800e3dc <_GetDevProp>

0800e42e <LCD_GetVYSizeEx>:
 800e42e:	2104      	movs	r1, #4
 800e430:	f7ff bfd4 	b.w	800e3dc <_GetDevProp>

0800e434 <LCD_GetBitsPerPixelEx>:
 800e434:	2108      	movs	r1, #8
 800e436:	f7ff bfd1 	b.w	800e3dc <_GetDevProp>

0800e43a <LCD_GetNumColorsEx>:
 800e43a:	2109      	movs	r1, #9
 800e43c:	f7ff bfce 	b.w	800e3dc <_GetDevProp>

0800e440 <LCD_GetMirrorXEx>:
 800e440:	210c      	movs	r1, #12
 800e442:	f7ff bfcb 	b.w	800e3dc <_GetDevProp>

0800e446 <LCD_GetMirrorYEx>:
 800e446:	210d      	movs	r1, #13
 800e448:	f7ff bfc8 	b.w	800e3dc <_GetDevProp>

0800e44c <LCD_GetSwapXYEx>:
 800e44c:	210e      	movs	r1, #14
 800e44e:	f7ff bfc5 	b.w	800e3dc <_GetDevProp>
	...

0800e454 <LCD_GetXSize>:
 800e454:	4b02      	ldr	r3, [pc, #8]	; (800e460 <LCD_GetXSize+0xc>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	7c58      	ldrb	r0, [r3, #17]
 800e45a:	f7ff bfdf 	b.w	800e41c <LCD_GetXSizeEx>
 800e45e:	bf00      	nop
 800e460:	20000308 	.word	0x20000308

0800e464 <LCD_GetYSize>:
 800e464:	4b02      	ldr	r3, [pc, #8]	; (800e470 <LCD_GetYSize+0xc>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	7c58      	ldrb	r0, [r3, #17]
 800e46a:	f7ff bfda 	b.w	800e422 <LCD_GetYSizeEx>
 800e46e:	bf00      	nop
 800e470:	20000308 	.word	0x20000308

0800e474 <LCD_GetNumColors>:
 800e474:	4b02      	ldr	r3, [pc, #8]	; (800e480 <LCD_GetNumColors+0xc>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	7c58      	ldrb	r0, [r3, #17]
 800e47a:	f7ff bfde 	b.w	800e43a <LCD_GetNumColorsEx>
 800e47e:	bf00      	nop
 800e480:	20000308 	.word	0x20000308

0800e484 <GUI_GetBitsPerPixelEx>:
 800e484:	b508      	push	{r3, lr}
 800e486:	4b04      	ldr	r3, [pc, #16]	; (800e498 <GUI_GetBitsPerPixelEx+0x14>)
 800e488:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800e48c:	68c3      	ldr	r3, [r0, #12]
 800e48e:	2108      	movs	r1, #8
 800e490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e492:	4798      	blx	r3
 800e494:	bd08      	pop	{r3, pc}
 800e496:	bf00      	nop
 800e498:	20021c0c 	.word	0x20021c0c

0800e49c <LCD_GetPaletteEx>:
 800e49c:	b508      	push	{r3, lr}
 800e49e:	f001 fda7 	bl	800fff0 <GUI_DEVICE__GetpDriver>
 800e4a2:	b120      	cbz	r0, 800e4ae <LCD_GetPaletteEx+0x12>
 800e4a4:	68c3      	ldr	r3, [r0, #12]
 800e4a6:	2102      	movs	r1, #2
 800e4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4aa:	4798      	blx	r3
 800e4ac:	bd08      	pop	{r3, pc}
 800e4ae:	bd08      	pop	{r3, pc}

0800e4b0 <LCD_GetPalette>:
 800e4b0:	4b02      	ldr	r3, [pc, #8]	; (800e4bc <LCD_GetPalette+0xc>)
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	7c58      	ldrb	r0, [r3, #17]
 800e4b6:	f7ff bff1 	b.w	800e49c <LCD_GetPaletteEx>
 800e4ba:	bf00      	nop
 800e4bc:	20000308 	.word	0x20000308

0800e4c0 <GUI_GetpfIndex2ColorEx>:
 800e4c0:	4b02      	ldr	r3, [pc, #8]	; (800e4cc <GUI_GetpfIndex2ColorEx+0xc>)
 800e4c2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e4c6:	691b      	ldr	r3, [r3, #16]
 800e4c8:	6858      	ldr	r0, [r3, #4]
 800e4ca:	4770      	bx	lr
 800e4cc:	20021c0c 	.word	0x20021c0c

0800e4d0 <GUI_GetpfColor2IndexEx>:
 800e4d0:	4b02      	ldr	r3, [pc, #8]	; (800e4dc <GUI_GetpfColor2IndexEx+0xc>)
 800e4d2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e4d6:	691b      	ldr	r3, [r3, #16]
 800e4d8:	6818      	ldr	r0, [r3, #0]
 800e4da:	4770      	bx	lr
 800e4dc:	20021c0c 	.word	0x20021c0c

0800e4e0 <LCD_GetVXSizeMax>:
 800e4e0:	2003      	movs	r0, #3
 800e4e2:	f7ff bf8a 	b.w	800e3fa <_GetMaxValue>

0800e4e6 <LCD__GetBPP>:
 800e4e6:	2800      	cmp	r0, #0
 800e4e8:	d03b      	beq.n	800e562 <LCD__GetBPP+0x7c>
 800e4ea:	f030 0301 	bics.w	r3, r0, #1
 800e4ee:	d029      	beq.n	800e544 <LCD__GetBPP+0x5e>
 800e4f0:	f030 0303 	bics.w	r3, r0, #3
 800e4f4:	d028      	beq.n	800e548 <LCD__GetBPP+0x62>
 800e4f6:	f030 0307 	bics.w	r3, r0, #7
 800e4fa:	d027      	beq.n	800e54c <LCD__GetBPP+0x66>
 800e4fc:	f030 030f 	bics.w	r3, r0, #15
 800e500:	d026      	beq.n	800e550 <LCD__GetBPP+0x6a>
 800e502:	f030 031f 	bics.w	r3, r0, #31
 800e506:	d025      	beq.n	800e554 <LCD__GetBPP+0x6e>
 800e508:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 800e50c:	d024      	beq.n	800e558 <LCD__GetBPP+0x72>
 800e50e:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 800e512:	f023 0301 	bic.w	r3, r3, #1
 800e516:	b30b      	cbz	r3, 800e55c <LCD__GetBPP+0x76>
 800e518:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 800e51c:	f023 030f 	bic.w	r3, r3, #15
 800e520:	b1e3      	cbz	r3, 800e55c <LCD__GetBPP+0x76>
 800e522:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 800e526:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e52a:	b1bb      	cbz	r3, 800e55c <LCD__GetBPP+0x76>
 800e52c:	0c03      	lsrs	r3, r0, #16
 800e52e:	041b      	lsls	r3, r3, #16
 800e530:	b1a3      	cbz	r3, 800e55c <LCD__GetBPP+0x76>
 800e532:	0c83      	lsrs	r3, r0, #18
 800e534:	049b      	lsls	r3, r3, #18
 800e536:	b19b      	cbz	r3, 800e560 <LCD__GetBPP+0x7a>
 800e538:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e53c:	bf0c      	ite	eq
 800e53e:	2018      	moveq	r0, #24
 800e540:	2020      	movne	r0, #32
 800e542:	4770      	bx	lr
 800e544:	2001      	movs	r0, #1
 800e546:	4770      	bx	lr
 800e548:	2002      	movs	r0, #2
 800e54a:	4770      	bx	lr
 800e54c:	2003      	movs	r0, #3
 800e54e:	4770      	bx	lr
 800e550:	2004      	movs	r0, #4
 800e552:	4770      	bx	lr
 800e554:	2005      	movs	r0, #5
 800e556:	4770      	bx	lr
 800e558:	2008      	movs	r0, #8
 800e55a:	4770      	bx	lr
 800e55c:	2010      	movs	r0, #16
 800e55e:	4770      	bx	lr
 800e560:	2012      	movs	r0, #18
 800e562:	4770      	bx	lr

0800e564 <LCD__GetBPPDevice>:
 800e564:	b508      	push	{r3, lr}
 800e566:	f7ff ffbe 	bl	800e4e6 <LCD__GetBPP>
 800e56a:	2801      	cmp	r0, #1
 800e56c:	d00f      	beq.n	800e58e <LCD__GetBPPDevice+0x2a>
 800e56e:	1e83      	subs	r3, r0, #2
 800e570:	2b06      	cmp	r3, #6
 800e572:	d909      	bls.n	800e588 <LCD__GetBPPDevice+0x24>
 800e574:	f1a0 0309 	sub.w	r3, r0, #9
 800e578:	2b07      	cmp	r3, #7
 800e57a:	d907      	bls.n	800e58c <LCD__GetBPPDevice+0x28>
 800e57c:	3811      	subs	r0, #17
 800e57e:	2810      	cmp	r0, #16
 800e580:	bf34      	ite	cc
 800e582:	2020      	movcc	r0, #32
 800e584:	2000      	movcs	r0, #0
 800e586:	bd08      	pop	{r3, pc}
 800e588:	2008      	movs	r0, #8
 800e58a:	bd08      	pop	{r3, pc}
 800e58c:	2010      	movs	r0, #16
 800e58e:	bd08      	pop	{r3, pc}

0800e590 <_SetDrawMode>:
 800e590:	b570      	push	{r4, r5, r6, lr}
 800e592:	4b08      	ldr	r3, [pc, #32]	; (800e5b4 <_SetDrawMode+0x24>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	7c1a      	ldrb	r2, [r3, #16]
 800e598:	ea80 0102 	eor.w	r1, r0, r2
 800e59c:	0749      	lsls	r1, r1, #29
 800e59e:	d505      	bpl.n	800e5ac <_SetDrawMode+0x1c>
 800e5a0:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800e5a2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e5a4:	6826      	ldr	r6, [r4, #0]
 800e5a6:	680d      	ldr	r5, [r1, #0]
 800e5a8:	6025      	str	r5, [r4, #0]
 800e5aa:	600e      	str	r6, [r1, #0]
 800e5ac:	7418      	strb	r0, [r3, #16]
 800e5ae:	4610      	mov	r0, r2
 800e5b0:	bd70      	pop	{r4, r5, r6, pc}
 800e5b2:	bf00      	nop
 800e5b4:	20000308 	.word	0x20000308

0800e5b8 <LCD_SetDrawMode>:
 800e5b8:	b508      	push	{r3, lr}
 800e5ba:	4b02      	ldr	r3, [pc, #8]	; (800e5c4 <LCD_SetDrawMode+0xc>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	689b      	ldr	r3, [r3, #8]
 800e5c0:	4798      	blx	r3
 800e5c2:	bd08      	pop	{r3, pc}
 800e5c4:	200002e4 	.word	0x200002e4

0800e5c8 <LCD_DrawPixel>:
 800e5c8:	b538      	push	{r3, r4, r5, lr}
 800e5ca:	4b14      	ldr	r3, [pc, #80]	; (800e61c <LCD_DrawPixel+0x54>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	460a      	mov	r2, r1
 800e5d0:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800e5d4:	428a      	cmp	r2, r1
 800e5d6:	4604      	mov	r4, r0
 800e5d8:	db1e      	blt.n	800e618 <LCD_DrawPixel+0x50>
 800e5da:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800e5de:	428a      	cmp	r2, r1
 800e5e0:	dc1a      	bgt.n	800e618 <LCD_DrawPixel+0x50>
 800e5e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800e5e6:	4288      	cmp	r0, r1
 800e5e8:	db16      	blt.n	800e618 <LCD_DrawPixel+0x50>
 800e5ea:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800e5ee:	4288      	cmp	r0, r1
 800e5f0:	dc12      	bgt.n	800e618 <LCD_DrawPixel+0x50>
 800e5f2:	7c19      	ldrb	r1, [r3, #16]
 800e5f4:	7c58      	ldrb	r0, [r3, #17]
 800e5f6:	f011 0f01 	tst.w	r1, #1
 800e5fa:	4909      	ldr	r1, [pc, #36]	; (800e620 <LCD_DrawPixel+0x58>)
 800e5fc:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800e600:	d004      	beq.n	800e60c <LCD_DrawPixel+0x44>
 800e602:	68c3      	ldr	r3, [r0, #12]
 800e604:	4621      	mov	r1, r4
 800e606:	69db      	ldr	r3, [r3, #28]
 800e608:	4798      	blx	r3
 800e60a:	bd38      	pop	{r3, r4, r5, pc}
 800e60c:	68c1      	ldr	r1, [r0, #12]
 800e60e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e610:	698d      	ldr	r5, [r1, #24]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	4621      	mov	r1, r4
 800e616:	47a8      	blx	r5
 800e618:	bd38      	pop	{r3, r4, r5, pc}
 800e61a:	bf00      	nop
 800e61c:	20000308 	.word	0x20000308
 800e620:	20021c0c 	.word	0x20021c0c

0800e624 <LCD_DrawHLine>:
 800e624:	b538      	push	{r3, r4, r5, lr}
 800e626:	4b10      	ldr	r3, [pc, #64]	; (800e668 <LCD_DrawHLine+0x44>)
 800e628:	681c      	ldr	r4, [r3, #0]
 800e62a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800e62e:	4299      	cmp	r1, r3
 800e630:	460d      	mov	r5, r1
 800e632:	db17      	blt.n	800e664 <LCD_DrawHLine+0x40>
 800e634:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800e638:	4299      	cmp	r1, r3
 800e63a:	dc13      	bgt.n	800e664 <LCD_DrawHLine+0x40>
 800e63c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800e640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e644:	4288      	cmp	r0, r1
 800e646:	bfa8      	it	ge
 800e648:	4601      	movge	r1, r0
 800e64a:	429a      	cmp	r2, r3
 800e64c:	bfb8      	it	lt
 800e64e:	4613      	movlt	r3, r2
 800e650:	428b      	cmp	r3, r1
 800e652:	db07      	blt.n	800e664 <LCD_DrawHLine+0x40>
 800e654:	7c60      	ldrb	r0, [r4, #17]
 800e656:	4a05      	ldr	r2, [pc, #20]	; (800e66c <LCD_DrawHLine+0x48>)
 800e658:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800e65c:	68c2      	ldr	r2, [r0, #12]
 800e65e:	6894      	ldr	r4, [r2, #8]
 800e660:	462a      	mov	r2, r5
 800e662:	47a0      	blx	r4
 800e664:	bd38      	pop	{r3, r4, r5, pc}
 800e666:	bf00      	nop
 800e668:	20000308 	.word	0x20000308
 800e66c:	20021c0c 	.word	0x20021c0c

0800e670 <LCD_DrawVLine>:
 800e670:	b538      	push	{r3, r4, r5, lr}
 800e672:	4b10      	ldr	r3, [pc, #64]	; (800e6b4 <LCD_DrawVLine+0x44>)
 800e674:	681c      	ldr	r4, [r3, #0]
 800e676:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800e67a:	4605      	mov	r5, r0
 800e67c:	429d      	cmp	r5, r3
 800e67e:	4610      	mov	r0, r2
 800e680:	db17      	blt.n	800e6b2 <LCD_DrawVLine+0x42>
 800e682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e686:	429d      	cmp	r5, r3
 800e688:	dc13      	bgt.n	800e6b2 <LCD_DrawVLine+0x42>
 800e68a:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800e68e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800e692:	4291      	cmp	r1, r2
 800e694:	bfa8      	it	ge
 800e696:	460a      	movge	r2, r1
 800e698:	4298      	cmp	r0, r3
 800e69a:	bfb8      	it	lt
 800e69c:	4603      	movlt	r3, r0
 800e69e:	4293      	cmp	r3, r2
 800e6a0:	db07      	blt.n	800e6b2 <LCD_DrawVLine+0x42>
 800e6a2:	7c60      	ldrb	r0, [r4, #17]
 800e6a4:	4904      	ldr	r1, [pc, #16]	; (800e6b8 <LCD_DrawVLine+0x48>)
 800e6a6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800e6aa:	68c1      	ldr	r1, [r0, #12]
 800e6ac:	68cc      	ldr	r4, [r1, #12]
 800e6ae:	4629      	mov	r1, r5
 800e6b0:	47a0      	blx	r4
 800e6b2:	bd38      	pop	{r3, r4, r5, pc}
 800e6b4:	20000308 	.word	0x20000308
 800e6b8:	20021c0c 	.word	0x20021c0c

0800e6bc <LCD_FillRect>:
 800e6bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e6be:	460e      	mov	r6, r1
 800e6c0:	4912      	ldr	r1, [pc, #72]	; (800e70c <LCD_FillRect+0x50>)
 800e6c2:	680c      	ldr	r4, [r1, #0]
 800e6c4:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800e6c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e6cc:	4288      	cmp	r0, r1
 800e6ce:	bfa8      	it	ge
 800e6d0:	4601      	movge	r1, r0
 800e6d2:	42aa      	cmp	r2, r5
 800e6d4:	bfb8      	it	lt
 800e6d6:	4615      	movlt	r5, r2
 800e6d8:	428d      	cmp	r5, r1
 800e6da:	db14      	blt.n	800e706 <LCD_FillRect+0x4a>
 800e6dc:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800e6e0:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800e6e4:	4296      	cmp	r6, r2
 800e6e6:	bfa8      	it	ge
 800e6e8:	4632      	movge	r2, r6
 800e6ea:	4283      	cmp	r3, r0
 800e6ec:	bfa8      	it	ge
 800e6ee:	4603      	movge	r3, r0
 800e6f0:	4293      	cmp	r3, r2
 800e6f2:	db08      	blt.n	800e706 <LCD_FillRect+0x4a>
 800e6f4:	7c64      	ldrb	r4, [r4, #17]
 800e6f6:	4806      	ldr	r0, [pc, #24]	; (800e710 <LCD_FillRect+0x54>)
 800e6f8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800e6fc:	68c4      	ldr	r4, [r0, #12]
 800e6fe:	9300      	str	r3, [sp, #0]
 800e700:	6924      	ldr	r4, [r4, #16]
 800e702:	462b      	mov	r3, r5
 800e704:	47a0      	blx	r4
 800e706:	b002      	add	sp, #8
 800e708:	bd70      	pop	{r4, r5, r6, pc}
 800e70a:	bf00      	nop
 800e70c:	20000308 	.word	0x20000308
 800e710:	20021c0c 	.word	0x20021c0c

0800e714 <LCD__DrawBitmap_1bpp>:
 800e714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e718:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 800e8d0 <LCD__DrawBitmap_1bpp+0x1bc>
 800e71c:	b08f      	sub	sp, #60	; 0x3c
 800e71e:	f8dc c000 	ldr.w	ip, [ip]
 800e722:	9009      	str	r0, [sp, #36]	; 0x24
 800e724:	460e      	mov	r6, r1
 800e726:	4615      	mov	r5, r2
 800e728:	469b      	mov	fp, r3
 800e72a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800e72c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800e730:	f1bc 0f00 	cmp.w	ip, #0
 800e734:	d00d      	beq.n	800e752 <LCD__DrawBitmap_1bpp+0x3e>
 800e736:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800e738:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800e73a:	9500      	str	r5, [sp, #0]
 800e73c:	9601      	str	r6, [sp, #4]
 800e73e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800e740:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e742:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800e744:	9702      	str	r7, [sp, #8]
 800e746:	9503      	str	r5, [sp, #12]
 800e748:	9404      	str	r4, [sp, #16]
 800e74a:	9605      	str	r6, [sp, #20]
 800e74c:	f8dc 4000 	ldr.w	r4, [ip]
 800e750:	e053      	b.n	800e7fa <LCD__DrawBitmap_1bpp+0xe6>
 800e752:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800e754:	9819      	ldr	r0, [sp, #100]	; 0x64
 800e756:	ea47 0300 	orr.w	r3, r7, r0
 800e75a:	2b01      	cmp	r3, #1
 800e75c:	d14f      	bne.n	800e7fe <LCD__DrawBitmap_1bpp+0xea>
 800e75e:	4b5a      	ldr	r3, [pc, #360]	; (800e8c8 <LCD__DrawBitmap_1bpp+0x1b4>)
 800e760:	6818      	ldr	r0, [r3, #0]
 800e762:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e766:	1a51      	subs	r1, r2, r1
 800e768:	2900      	cmp	r1, #0
 800e76a:	dd08      	ble.n	800e77e <LCD__DrawBitmap_1bpp+0x6a>
 800e76c:	ebc1 030b 	rsb	r3, r1, fp
 800e770:	2b00      	cmp	r3, #0
 800e772:	f340 80a5 	ble.w	800e8c0 <LCD__DrawBitmap_1bpp+0x1ac>
 800e776:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800e778:	fb07 4401 	mla	r4, r7, r1, r4
 800e77c:	e001      	b.n	800e782 <LCD__DrawBitmap_1bpp+0x6e>
 800e77e:	465b      	mov	r3, fp
 800e780:	4632      	mov	r2, r6
 800e782:	445e      	add	r6, fp
 800e784:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 800e788:	3e01      	subs	r6, #1
 800e78a:	1a76      	subs	r6, r6, r1
 800e78c:	2e00      	cmp	r6, #0
 800e78e:	dd03      	ble.n	800e798 <LCD__DrawBitmap_1bpp+0x84>
 800e790:	1b9b      	subs	r3, r3, r6
 800e792:	2b00      	cmp	r3, #0
 800e794:	f340 8094 	ble.w	800e8c0 <LCD__DrawBitmap_1bpp+0x1ac>
 800e798:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e79a:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 800e79e:	4429      	add	r1, r5
 800e7a0:	3901      	subs	r1, #1
 800e7a2:	1b89      	subs	r1, r1, r6
 800e7a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e7a6:	2900      	cmp	r1, #0
 800e7a8:	bfc8      	it	gt
 800e7aa:	ebc1 0505 	rsbgt	r5, r1, r5
 800e7ae:	ebc8 0106 	rsb	r1, r8, r6
 800e7b2:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 800e7b6:	42b1      	cmp	r1, r6
 800e7b8:	da0c      	bge.n	800e7d4 <LCD__DrawBitmap_1bpp+0xc0>
 800e7ba:	ebc1 0c06 	rsb	ip, r1, r6
 800e7be:	eb08 070c 	add.w	r7, r8, ip
 800e7c2:	1b8e      	subs	r6, r1, r6
 800e7c4:	f02c 0c07 	bic.w	ip, ip, #7
 800e7c8:	4435      	add	r5, r6
 800e7ca:	eb04 04e7 	add.w	r4, r4, r7, asr #3
 800e7ce:	4461      	add	r1, ip
 800e7d0:	f007 0807 	and.w	r8, r7, #7
 800e7d4:	2d00      	cmp	r5, #0
 800e7d6:	dd73      	ble.n	800e8c0 <LCD__DrawBitmap_1bpp+0x1ac>
 800e7d8:	7c46      	ldrb	r6, [r0, #17]
 800e7da:	483c      	ldr	r0, [pc, #240]	; (800e8cc <LCD__DrawBitmap_1bpp+0x1b8>)
 800e7dc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800e7de:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800e7e2:	68c6      	ldr	r6, [r0, #12]
 800e7e4:	9701      	str	r7, [sp, #4]
 800e7e6:	9403      	str	r4, [sp, #12]
 800e7e8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800e7ea:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800e7ec:	9300      	str	r3, [sp, #0]
 800e7ee:	9702      	str	r7, [sp, #8]
 800e7f0:	f8cd 8010 	str.w	r8, [sp, #16]
 800e7f4:	9405      	str	r4, [sp, #20]
 800e7f6:	6874      	ldr	r4, [r6, #4]
 800e7f8:	462b      	mov	r3, r5
 800e7fa:	47a0      	blx	r4
 800e7fc:	e060      	b.n	800e8c0 <LCD__DrawBitmap_1bpp+0x1ac>
 800e7fe:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800e800:	f1c7 0708 	rsb	r7, r7, #8
 800e804:	970c      	str	r7, [sp, #48]	; 0x30
 800e806:	46e0      	mov	r8, ip
 800e808:	4667      	mov	r7, ip
 800e80a:	455f      	cmp	r7, fp
 800e80c:	da58      	bge.n	800e8c0 <LCD__DrawBitmap_1bpp+0x1ac>
 800e80e:	4b2e      	ldr	r3, [pc, #184]	; (800e8c8 <LCD__DrawBitmap_1bpp+0x1b4>)
 800e810:	9819      	ldr	r0, [sp, #100]	; 0x64
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	4430      	add	r0, r6
 800e816:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800e81a:	900a      	str	r0, [sp, #40]	; 0x28
 800e81c:	1e41      	subs	r1, r0, #1
 800e81e:	4291      	cmp	r1, r2
 800e820:	910b      	str	r1, [sp, #44]	; 0x2c
 800e822:	db48      	blt.n	800e8b6 <LCD__DrawBitmap_1bpp+0x1a2>
 800e824:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800e828:	429e      	cmp	r6, r3
 800e82a:	dc44      	bgt.n	800e8b6 <LCD__DrawBitmap_1bpp+0x1a2>
 800e82c:	f04f 0900 	mov.w	r9, #0
 800e830:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800e834:	9408      	str	r4, [sp, #32]
 800e836:	46cc      	mov	ip, r9
 800e838:	45a9      	cmp	r9, r5
 800e83a:	da3c      	bge.n	800e8b6 <LCD__DrawBitmap_1bpp+0x1a2>
 800e83c:	f1bc 0f00 	cmp.w	ip, #0
 800e840:	d106      	bne.n	800e850 <LCD__DrawBitmap_1bpp+0x13c>
 800e842:	9a08      	ldr	r2, [sp, #32]
 800e844:	f892 8000 	ldrb.w	r8, [r2]
 800e848:	3201      	adds	r2, #1
 800e84a:	9208      	str	r2, [sp, #32]
 800e84c:	f04f 0c08 	mov.w	ip, #8
 800e850:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e852:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e854:	4a1c      	ldr	r2, [pc, #112]	; (800e8c8 <LCD__DrawBitmap_1bpp+0x1b4>)
 800e856:	fa48 f300 	asr.w	r3, r8, r0
 800e85a:	ebc1 0c0c 	rsb	ip, r1, ip
 800e85e:	fa08 f801 	lsl.w	r8, r8, r1
 800e862:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800e866:	fa5f f888 	uxtb.w	r8, r8
 800e86a:	d103      	bne.n	800e874 <LCD__DrawBitmap_1bpp+0x160>
 800e86c:	6810      	ldr	r0, [r2, #0]
 800e86e:	7c00      	ldrb	r0, [r0, #16]
 800e870:	0780      	lsls	r0, r0, #30
 800e872:	d41b      	bmi.n	800e8ac <LCD__DrawBitmap_1bpp+0x198>
 800e874:	6812      	ldr	r2, [r2, #0]
 800e876:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800e878:	6810      	ldr	r0, [r2, #0]
 800e87a:	900d      	str	r0, [sp, #52]	; 0x34
 800e87c:	981d      	ldr	r0, [sp, #116]	; 0x74
 800e87e:	b110      	cbz	r0, 800e886 <LCD__DrawBitmap_1bpp+0x172>
 800e880:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800e884:	e000      	b.n	800e888 <LCD__DrawBitmap_1bpp+0x174>
 800e886:	b2db      	uxtb	r3, r3
 800e888:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e88a:	6013      	str	r3, [r2, #0]
 800e88c:	1e4a      	subs	r2, r1, #1
 800e88e:	4452      	add	r2, sl
 800e890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e892:	f8cd c01c 	str.w	ip, [sp, #28]
 800e896:	4650      	mov	r0, sl
 800e898:	4631      	mov	r1, r6
 800e89a:	f7ff ff0f 	bl	800e6bc <LCD_FillRect>
 800e89e:	4b0a      	ldr	r3, [pc, #40]	; (800e8c8 <LCD__DrawBitmap_1bpp+0x1b4>)
 800e8a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800e8a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8aa:	601a      	str	r2, [r3, #0]
 800e8ac:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e8ae:	f109 0901 	add.w	r9, r9, #1
 800e8b2:	449a      	add	sl, r3
 800e8b4:	e7c0      	b.n	800e838 <LCD__DrawBitmap_1bpp+0x124>
 800e8b6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800e8b8:	3701      	adds	r7, #1
 800e8ba:	4434      	add	r4, r6
 800e8bc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800e8be:	e7a4      	b.n	800e80a <LCD__DrawBitmap_1bpp+0xf6>
 800e8c0:	b00f      	add	sp, #60	; 0x3c
 800e8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8c6:	bf00      	nop
 800e8c8:	20000308 	.word	0x20000308
 800e8cc:	20021c0c 	.word	0x20021c0c
 800e8d0:	20021be4 	.word	0x20021be4

0800e8d4 <LCD_DrawBitmap>:
 800e8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8d8:	f8df c208 	ldr.w	ip, [pc, #520]	; 800eae4 <LCD_DrawBitmap+0x210>
 800e8dc:	b091      	sub	sp, #68	; 0x44
 800e8de:	f8dc c000 	ldr.w	ip, [ip]
 800e8e2:	9207      	str	r2, [sp, #28]
 800e8e4:	4605      	mov	r5, r0
 800e8e6:	4688      	mov	r8, r1
 800e8e8:	469b      	mov	fp, r3
 800e8ea:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800e8ec:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800e8ee:	f1bc 0f00 	cmp.w	ip, #0
 800e8f2:	d00c      	beq.n	800e90e <LCD_DrawBitmap+0x3a>
 800e8f4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800e8f6:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800e8f8:	9500      	str	r5, [sp, #0]
 800e8fa:	9701      	str	r7, [sp, #4]
 800e8fc:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800e8fe:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800e900:	9602      	str	r6, [sp, #8]
 800e902:	9503      	str	r5, [sp, #12]
 800e904:	9404      	str	r4, [sp, #16]
 800e906:	9705      	str	r7, [sp, #20]
 800e908:	f8dc 4000 	ldr.w	r4, [ip]
 800e90c:	e081      	b.n	800ea12 <LCD_DrawBitmap+0x13e>
 800e90e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800e910:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800e912:	ea47 0300 	orr.w	r3, r7, r0
 800e916:	2b01      	cmp	r3, #1
 800e918:	d17d      	bne.n	800ea16 <LCD_DrawBitmap+0x142>
 800e91a:	4b70      	ldr	r3, [pc, #448]	; (800eadc <LCD_DrawBitmap+0x208>)
 800e91c:	6818      	ldr	r0, [r3, #0]
 800e91e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e922:	1a53      	subs	r3, r2, r1
 800e924:	2b00      	cmp	r3, #0
 800e926:	dd08      	ble.n	800e93a <LCD_DrawBitmap+0x66>
 800e928:	ebc3 010b 	rsb	r1, r3, fp
 800e92c:	2900      	cmp	r1, #0
 800e92e:	f340 80d2 	ble.w	800ead6 <LCD_DrawBitmap+0x202>
 800e932:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800e934:	fb07 4403 	mla	r4, r7, r3, r4
 800e938:	e001      	b.n	800e93e <LCD_DrawBitmap+0x6a>
 800e93a:	4659      	mov	r1, fp
 800e93c:	4642      	mov	r2, r8
 800e93e:	44d8      	add	r8, fp
 800e940:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800e944:	f108 38ff 	add.w	r8, r8, #4294967295
 800e948:	ebc3 0808 	rsb	r8, r3, r8
 800e94c:	f1b8 0f00 	cmp.w	r8, #0
 800e950:	dd04      	ble.n	800e95c <LCD_DrawBitmap+0x88>
 800e952:	ebc8 0101 	rsb	r1, r8, r1
 800e956:	2900      	cmp	r1, #0
 800e958:	f340 80bd 	ble.w	800ead6 <LCD_DrawBitmap+0x202>
 800e95c:	9b07      	ldr	r3, [sp, #28]
 800e95e:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 800e962:	442b      	add	r3, r5
 800e964:	3b01      	subs	r3, #1
 800e966:	ebcc 0303 	rsb	r3, ip, r3
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	dd02      	ble.n	800e974 <LCD_DrawBitmap+0xa0>
 800e96e:	9f07      	ldr	r7, [sp, #28]
 800e970:	1aff      	subs	r7, r7, r3
 800e972:	9707      	str	r7, [sp, #28]
 800e974:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 800e978:	4565      	cmp	r5, ip
 800e97a:	da33      	bge.n	800e9e4 <LCD_DrawBitmap+0x110>
 800e97c:	9f07      	ldr	r7, [sp, #28]
 800e97e:	ebc5 030c 	rsb	r3, r5, ip
 800e982:	1aff      	subs	r7, r7, r3
 800e984:	2e08      	cmp	r6, #8
 800e986:	9707      	str	r7, [sp, #28]
 800e988:	d027      	beq.n	800e9da <LCD_DrawBitmap+0x106>
 800e98a:	dc0d      	bgt.n	800e9a8 <LCD_DrawBitmap+0xd4>
 800e98c:	2e02      	cmp	r6, #2
 800e98e:	d014      	beq.n	800e9ba <LCD_DrawBitmap+0xe6>
 800e990:	2e04      	cmp	r6, #4
 800e992:	d01a      	beq.n	800e9ca <LCD_DrawBitmap+0xf6>
 800e994:	2e01      	cmp	r6, #1
 800e996:	d126      	bne.n	800e9e6 <LCD_DrawBitmap+0x112>
 800e998:	f023 0c07 	bic.w	ip, r3, #7
 800e99c:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800e9a0:	4465      	add	r5, ip
 800e9a2:	f003 0307 	and.w	r3, r3, #7
 800e9a6:	e01e      	b.n	800e9e6 <LCD_DrawBitmap+0x112>
 800e9a8:	2e18      	cmp	r6, #24
 800e9aa:	d018      	beq.n	800e9de <LCD_DrawBitmap+0x10a>
 800e9ac:	2e20      	cmp	r6, #32
 800e9ae:	d016      	beq.n	800e9de <LCD_DrawBitmap+0x10a>
 800e9b0:	2e10      	cmp	r6, #16
 800e9b2:	d118      	bne.n	800e9e6 <LCD_DrawBitmap+0x112>
 800e9b4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800e9b8:	e013      	b.n	800e9e2 <LCD_DrawBitmap+0x10e>
 800e9ba:	f023 0c03 	bic.w	ip, r3, #3
 800e9be:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 800e9c2:	4465      	add	r5, ip
 800e9c4:	f003 0303 	and.w	r3, r3, #3
 800e9c8:	e00d      	b.n	800e9e6 <LCD_DrawBitmap+0x112>
 800e9ca:	f023 0c01 	bic.w	ip, r3, #1
 800e9ce:	eb04 0463 	add.w	r4, r4, r3, asr #1
 800e9d2:	4465      	add	r5, ip
 800e9d4:	f003 0301 	and.w	r3, r3, #1
 800e9d8:	e005      	b.n	800e9e6 <LCD_DrawBitmap+0x112>
 800e9da:	441c      	add	r4, r3
 800e9dc:	e001      	b.n	800e9e2 <LCD_DrawBitmap+0x10e>
 800e9de:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800e9e2:	4665      	mov	r5, ip
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	9f07      	ldr	r7, [sp, #28]
 800e9e8:	2f00      	cmp	r7, #0
 800e9ea:	dd74      	ble.n	800ead6 <LCD_DrawBitmap+0x202>
 800e9ec:	f890 e011 	ldrb.w	lr, [r0, #17]
 800e9f0:	483b      	ldr	r0, [pc, #236]	; (800eae0 <LCD_DrawBitmap+0x20c>)
 800e9f2:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800e9f4:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 800e9f8:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800e9fc:	9403      	str	r4, [sp, #12]
 800e9fe:	e88d 0042 	stmia.w	sp, {r1, r6}
 800ea02:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800ea04:	9304      	str	r3, [sp, #16]
 800ea06:	9702      	str	r7, [sp, #8]
 800ea08:	9405      	str	r4, [sp, #20]
 800ea0a:	f8de 4004 	ldr.w	r4, [lr, #4]
 800ea0e:	9b07      	ldr	r3, [sp, #28]
 800ea10:	4629      	mov	r1, r5
 800ea12:	47a0      	blx	r4
 800ea14:	e05f      	b.n	800ead6 <LCD_DrawBitmap+0x202>
 800ea16:	f1c6 0708 	rsb	r7, r6, #8
 800ea1a:	970e      	str	r7, [sp, #56]	; 0x38
 800ea1c:	4667      	mov	r7, ip
 800ea1e:	45dc      	cmp	ip, fp
 800ea20:	da59      	bge.n	800ead6 <LCD_DrawBitmap+0x202>
 800ea22:	4b2e      	ldr	r3, [pc, #184]	; (800eadc <LCD_DrawBitmap+0x208>)
 800ea24:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	4440      	add	r0, r8
 800ea2a:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800ea2e:	900c      	str	r0, [sp, #48]	; 0x30
 800ea30:	1e41      	subs	r1, r0, #1
 800ea32:	4291      	cmp	r1, r2
 800ea34:	910d      	str	r1, [sp, #52]	; 0x34
 800ea36:	db47      	blt.n	800eac8 <LCD_DrawBitmap+0x1f4>
 800ea38:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ea3c:	4598      	cmp	r8, r3
 800ea3e:	dc43      	bgt.n	800eac8 <LCD_DrawBitmap+0x1f4>
 800ea40:	f04f 0900 	mov.w	r9, #0
 800ea44:	940b      	str	r4, [sp, #44]	; 0x2c
 800ea46:	46aa      	mov	sl, r5
 800ea48:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800ea4c:	9807      	ldr	r0, [sp, #28]
 800ea4e:	4581      	cmp	r9, r0
 800ea50:	da3a      	bge.n	800eac8 <LCD_DrawBitmap+0x1f4>
 800ea52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea54:	b92a      	cbnz	r2, 800ea62 <LCD_DrawBitmap+0x18e>
 800ea56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea58:	2008      	movs	r0, #8
 800ea5a:	781f      	ldrb	r7, [r3, #0]
 800ea5c:	900a      	str	r0, [sp, #40]	; 0x28
 800ea5e:	3301      	adds	r3, #1
 800ea60:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea62:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ea64:	fa07 f206 	lsl.w	r2, r7, r6
 800ea68:	fa47 f301 	asr.w	r3, r7, r1
 800ea6c:	b2d7      	uxtb	r7, r2
 800ea6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea70:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800ea74:	ebc6 0202 	rsb	r2, r6, r2
 800ea78:	920a      	str	r2, [sp, #40]	; 0x28
 800ea7a:	4a18      	ldr	r2, [pc, #96]	; (800eadc <LCD_DrawBitmap+0x208>)
 800ea7c:	d103      	bne.n	800ea86 <LCD_DrawBitmap+0x1b2>
 800ea7e:	6810      	ldr	r0, [r2, #0]
 800ea80:	7c00      	ldrb	r0, [r0, #16]
 800ea82:	0780      	lsls	r0, r0, #30
 800ea84:	d41b      	bmi.n	800eabe <LCD_DrawBitmap+0x1ea>
 800ea86:	6812      	ldr	r2, [r2, #0]
 800ea88:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ea8a:	6810      	ldr	r0, [r2, #0]
 800ea8c:	900f      	str	r0, [sp, #60]	; 0x3c
 800ea8e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800ea90:	b110      	cbz	r0, 800ea98 <LCD_DrawBitmap+0x1c4>
 800ea92:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800ea96:	e000      	b.n	800ea9a <LCD_DrawBitmap+0x1c6>
 800ea98:	b2db      	uxtb	r3, r3
 800ea9a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ea9c:	6013      	str	r3, [r2, #0]
 800ea9e:	1e4a      	subs	r2, r1, #1
 800eaa0:	4452      	add	r2, sl
 800eaa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eaa4:	f8cd c020 	str.w	ip, [sp, #32]
 800eaa8:	4650      	mov	r0, sl
 800eaaa:	4641      	mov	r1, r8
 800eaac:	f7ff fe06 	bl	800e6bc <LCD_FillRect>
 800eab0:	4b0a      	ldr	r3, [pc, #40]	; (800eadc <LCD_DrawBitmap+0x208>)
 800eab2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	f8dd c020 	ldr.w	ip, [sp, #32]
 800eaba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eabc:	601a      	str	r2, [r3, #0]
 800eabe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800eac0:	f109 0901 	add.w	r9, r9, #1
 800eac4:	449a      	add	sl, r3
 800eac6:	e7c1      	b.n	800ea4c <LCD_DrawBitmap+0x178>
 800eac8:	991d      	ldr	r1, [sp, #116]	; 0x74
 800eaca:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800eace:	f10c 0c01 	add.w	ip, ip, #1
 800ead2:	440c      	add	r4, r1
 800ead4:	e7a3      	b.n	800ea1e <LCD_DrawBitmap+0x14a>
 800ead6:	b011      	add	sp, #68	; 0x44
 800ead8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eadc:	20000308 	.word	0x20000308
 800eae0:	20021c0c 	.word	0x20021c0c
 800eae4:	20021be4 	.word	0x20021be4

0800eae8 <LCD_SetClipRectMax>:
 800eae8:	b508      	push	{r3, lr}
 800eaea:	4b05      	ldr	r3, [pc, #20]	; (800eb00 <LCD_SetClipRectMax+0x18>)
 800eaec:	6819      	ldr	r1, [r3, #0]
 800eaee:	4b05      	ldr	r3, [pc, #20]	; (800eb04 <LCD_SetClipRectMax+0x1c>)
 800eaf0:	7c4a      	ldrb	r2, [r1, #17]
 800eaf2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800eaf6:	68c3      	ldr	r3, [r0, #12]
 800eaf8:	3108      	adds	r1, #8
 800eafa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eafc:	4798      	blx	r3
 800eafe:	bd08      	pop	{r3, pc}
 800eb00:	20000308 	.word	0x20000308
 800eb04:	20021c0c 	.word	0x20021c0c

0800eb08 <emWin_LCD_Init>:
 800eb08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb0a:	f7ff ffed 	bl	800eae8 <LCD_SetClipRectMax>
 800eb0e:	f007 faab 	bl	8016068 <LCD_InitColors>
 800eb12:	4604      	mov	r4, r0
 800eb14:	2800      	cmp	r0, #0
 800eb16:	d13d      	bne.n	800eb94 <emWin_LCD_Init+0x8c>
 800eb18:	4605      	mov	r5, r0
 800eb1a:	4628      	mov	r0, r5
 800eb1c:	f001 fa68 	bl	800fff0 <GUI_DEVICE__GetpDriver>
 800eb20:	9001      	str	r0, [sp, #4]
 800eb22:	b148      	cbz	r0, 800eb38 <emWin_LCD_Init+0x30>
 800eb24:	68c3      	ldr	r3, [r0, #12]
 800eb26:	210c      	movs	r1, #12
 800eb28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb2a:	a801      	add	r0, sp, #4
 800eb2c:	4798      	blx	r3
 800eb2e:	4603      	mov	r3, r0
 800eb30:	b370      	cbz	r0, 800eb90 <emWin_LCD_Init+0x88>
 800eb32:	9801      	ldr	r0, [sp, #4]
 800eb34:	4798      	blx	r3
 800eb36:	4304      	orrs	r4, r0
 800eb38:	3501      	adds	r5, #1
 800eb3a:	2d02      	cmp	r5, #2
 800eb3c:	d1ed      	bne.n	800eb1a <emWin_LCD_Init+0x12>
 800eb3e:	bb4c      	cbnz	r4, 800eb94 <emWin_LCD_Init+0x8c>
 800eb40:	f007 faae 	bl	80160a0 <LCD_InitLUT>
 800eb44:	2401      	movs	r4, #1
 800eb46:	4620      	mov	r0, r4
 800eb48:	f001 fa52 	bl	800fff0 <GUI_DEVICE__GetpDriver>
 800eb4c:	9001      	str	r0, [sp, #4]
 800eb4e:	b1d0      	cbz	r0, 800eb86 <emWin_LCD_Init+0x7e>
 800eb50:	4620      	mov	r0, r4
 800eb52:	f000 feb1 	bl	800f8b8 <GUI_SelectLayer>
 800eb56:	2004      	movs	r0, #4
 800eb58:	f7ff fd2e 	bl	800e5b8 <LCD_SetDrawMode>
 800eb5c:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800eb60:	2000      	movs	r0, #0
 800eb62:	4601      	mov	r1, r0
 800eb64:	4613      	mov	r3, r2
 800eb66:	f7ff fda9 	bl	800e6bc <LCD_FillRect>
 800eb6a:	2000      	movs	r0, #0
 800eb6c:	f7ff fd24 	bl	800e5b8 <LCD_SetDrawMode>
 800eb70:	a802      	add	r0, sp, #8
 800eb72:	210e      	movs	r1, #14
 800eb74:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800eb78:	68db      	ldr	r3, [r3, #12]
 800eb7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb7c:	4798      	blx	r3
 800eb7e:	4603      	mov	r3, r0
 800eb80:	b108      	cbz	r0, 800eb86 <emWin_LCD_Init+0x7e>
 800eb82:	9801      	ldr	r0, [sp, #4]
 800eb84:	4798      	blx	r3
 800eb86:	f114 34ff 	adds.w	r4, r4, #4294967295
 800eb8a:	d2dc      	bcs.n	800eb46 <emWin_LCD_Init+0x3e>
 800eb8c:	2000      	movs	r0, #0
 800eb8e:	e002      	b.n	800eb96 <emWin_LCD_Init+0x8e>
 800eb90:	2001      	movs	r0, #1
 800eb92:	e000      	b.n	800eb96 <emWin_LCD_Init+0x8e>
 800eb94:	4620      	mov	r0, r4
 800eb96:	b003      	add	sp, #12
 800eb98:	bd30      	pop	{r4, r5, pc}
	...

0800eb9c <LCD_Color2Index>:
 800eb9c:	b508      	push	{r3, lr}
 800eb9e:	4b05      	ldr	r3, [pc, #20]	; (800ebb4 <LCD_Color2Index+0x18>)
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	7c5a      	ldrb	r2, [r3, #17]
 800eba4:	4b04      	ldr	r3, [pc, #16]	; (800ebb8 <LCD_Color2Index+0x1c>)
 800eba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebaa:	691b      	ldr	r3, [r3, #16]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	4798      	blx	r3
 800ebb0:	bd08      	pop	{r3, pc}
 800ebb2:	bf00      	nop
 800ebb4:	20000308 	.word	0x20000308
 800ebb8:	20021c0c 	.word	0x20021c0c

0800ebbc <LCD_Index2Color>:
 800ebbc:	b508      	push	{r3, lr}
 800ebbe:	4b05      	ldr	r3, [pc, #20]	; (800ebd4 <LCD_Index2Color+0x18>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	7c5a      	ldrb	r2, [r3, #17]
 800ebc4:	4b04      	ldr	r3, [pc, #16]	; (800ebd8 <LCD_Index2Color+0x1c>)
 800ebc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebca:	691b      	ldr	r3, [r3, #16]
 800ebcc:	685b      	ldr	r3, [r3, #4]
 800ebce:	4798      	blx	r3
 800ebd0:	bd08      	pop	{r3, pc}
 800ebd2:	bf00      	nop
 800ebd4:	20000308 	.word	0x20000308
 800ebd8:	20021c0c 	.word	0x20021c0c

0800ebdc <LCD_SetColorIndex>:
 800ebdc:	4b04      	ldr	r3, [pc, #16]	; (800ebf0 <LCD_SetColorIndex+0x14>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	7c1a      	ldrb	r2, [r3, #16]
 800ebe2:	0752      	lsls	r2, r2, #29
 800ebe4:	bf4c      	ite	mi
 800ebe6:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 800ebe8:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 800ebea:	6018      	str	r0, [r3, #0]
 800ebec:	4770      	bx	lr
 800ebee:	bf00      	nop
 800ebf0:	20000308 	.word	0x20000308

0800ebf4 <_SetColor>:
 800ebf4:	b508      	push	{r3, lr}
 800ebf6:	4b06      	ldr	r3, [pc, #24]	; (800ec10 <_SetColor+0x1c>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ebfc:	4281      	cmp	r1, r0
 800ebfe:	d006      	beq.n	800ec0e <_SetColor+0x1a>
 800ec00:	6318      	str	r0, [r3, #48]	; 0x30
 800ec02:	f7ff ffcb 	bl	800eb9c <LCD_Color2Index>
 800ec06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ec0a:	f7ff bfe7 	b.w	800ebdc <LCD_SetColorIndex>
 800ec0e:	bd08      	pop	{r3, pc}
 800ec10:	20000308 	.word	0x20000308

0800ec14 <LCD_SetBkColorIndex>:
 800ec14:	4b04      	ldr	r3, [pc, #16]	; (800ec28 <LCD_SetBkColorIndex+0x14>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	7c1a      	ldrb	r2, [r3, #16]
 800ec1a:	0752      	lsls	r2, r2, #29
 800ec1c:	bf4c      	ite	mi
 800ec1e:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 800ec20:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 800ec22:	6018      	str	r0, [r3, #0]
 800ec24:	4770      	bx	lr
 800ec26:	bf00      	nop
 800ec28:	20000308 	.word	0x20000308

0800ec2c <_SetBkColor>:
 800ec2c:	b508      	push	{r3, lr}
 800ec2e:	4b06      	ldr	r3, [pc, #24]	; (800ec48 <_SetBkColor+0x1c>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ec34:	4281      	cmp	r1, r0
 800ec36:	d006      	beq.n	800ec46 <_SetBkColor+0x1a>
 800ec38:	6358      	str	r0, [r3, #52]	; 0x34
 800ec3a:	f7ff ffaf 	bl	800eb9c <LCD_Color2Index>
 800ec3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ec42:	f7ff bfe7 	b.w	800ec14 <LCD_SetBkColorIndex>
 800ec46:	bd08      	pop	{r3, pc}
 800ec48:	20000308 	.word	0x20000308

0800ec4c <LCD_SetBkColor>:
 800ec4c:	b508      	push	{r3, lr}
 800ec4e:	4b02      	ldr	r3, [pc, #8]	; (800ec58 <LCD_SetBkColor+0xc>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	685b      	ldr	r3, [r3, #4]
 800ec54:	4798      	blx	r3
 800ec56:	bd08      	pop	{r3, pc}
 800ec58:	200002e4 	.word	0x200002e4

0800ec5c <LCD_SetColor>:
 800ec5c:	b508      	push	{r3, lr}
 800ec5e:	4b02      	ldr	r3, [pc, #8]	; (800ec68 <LCD_SetColor+0xc>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	4798      	blx	r3
 800ec66:	bd08      	pop	{r3, pc}
 800ec68:	200002e4 	.word	0x200002e4

0800ec6c <GUI__strlen>:
 800ec6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec70:	b118      	cbz	r0, 800ec7a <GUI__strlen+0xe>
 800ec72:	3301      	adds	r3, #1
 800ec74:	5cc2      	ldrb	r2, [r0, r3]
 800ec76:	2a00      	cmp	r2, #0
 800ec78:	d1fb      	bne.n	800ec72 <GUI__strlen+0x6>
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	4770      	bx	lr

0800ec7e <GUI__memset>:
 800ec7e:	b570      	push	{r4, r5, r6, lr}
 800ec80:	b12a      	cbz	r2, 800ec8e <GUI__memset+0x10>
 800ec82:	0783      	lsls	r3, r0, #30
 800ec84:	d003      	beq.n	800ec8e <GUI__memset+0x10>
 800ec86:	f800 1b01 	strb.w	r1, [r0], #1
 800ec8a:	3a01      	subs	r2, #1
 800ec8c:	e7f8      	b.n	800ec80 <GUI__memset+0x2>
 800ec8e:	0893      	lsrs	r3, r2, #2
 800ec90:	d101      	bne.n	800ec96 <GUI__memset+0x18>
 800ec92:	4402      	add	r2, r0
 800ec94:	e017      	b.n	800ecc6 <GUI__memset+0x48>
 800ec96:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 800ec9a:	f002 0203 	and.w	r2, r2, #3
 800ec9e:	434c      	muls	r4, r1
 800eca0:	2b03      	cmp	r3, #3
 800eca2:	4605      	mov	r5, r0
 800eca4:	dd06      	ble.n	800ecb4 <GUI__memset+0x36>
 800eca6:	6004      	str	r4, [r0, #0]
 800eca8:	6044      	str	r4, [r0, #4]
 800ecaa:	6084      	str	r4, [r0, #8]
 800ecac:	60c4      	str	r4, [r0, #12]
 800ecae:	3b04      	subs	r3, #4
 800ecb0:	3010      	adds	r0, #16
 800ecb2:	e7f5      	b.n	800eca0 <GUI__memset+0x22>
 800ecb4:	461e      	mov	r6, r3
 800ecb6:	b11b      	cbz	r3, 800ecc0 <GUI__memset+0x42>
 800ecb8:	f845 4b04 	str.w	r4, [r5], #4
 800ecbc:	3b01      	subs	r3, #1
 800ecbe:	e7fa      	b.n	800ecb6 <GUI__memset+0x38>
 800ecc0:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 800ecc4:	e7e5      	b.n	800ec92 <GUI__memset+0x14>
 800ecc6:	4290      	cmp	r0, r2
 800ecc8:	d002      	beq.n	800ecd0 <GUI__memset+0x52>
 800ecca:	f800 1b01 	strb.w	r1, [r0], #1
 800ecce:	e7fa      	b.n	800ecc6 <GUI__memset+0x48>
 800ecd0:	bd70      	pop	{r4, r5, r6, pc}

0800ecd2 <GUI__SetText>:
 800ecd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ecd4:	6807      	ldr	r7, [r0, #0]
 800ecd6:	4605      	mov	r5, r0
 800ecd8:	4638      	mov	r0, r7
 800ecda:	460e      	mov	r6, r1
 800ecdc:	f007 fbd0 	bl	8016480 <GUI__strcmp_hp>
 800ece0:	b908      	cbnz	r0, 800ece6 <GUI__SetText+0x14>
 800ece2:	2000      	movs	r0, #0
 800ece4:	e02e      	b.n	800ed44 <GUI__SetText+0x72>
 800ece6:	4630      	mov	r0, r6
 800ece8:	f7ff ffc0 	bl	800ec6c <GUI__strlen>
 800ecec:	1c44      	adds	r4, r0, #1
 800ecee:	4638      	mov	r0, r7
 800ecf0:	f001 fed4 	bl	8010a9c <GUI_ALLOC_GetSize>
 800ecf4:	4284      	cmp	r4, r0
 800ecf6:	d10f      	bne.n	800ed18 <GUI__SetText+0x46>
 800ecf8:	2c00      	cmp	r4, #0
 800ecfa:	d0f2      	beq.n	800ece2 <GUI__SetText+0x10>
 800ecfc:	4638      	mov	r0, r7
 800ecfe:	f001 fe9f 	bl	8010a40 <GUI_ALLOC_LockH>
 800ed02:	ad02      	add	r5, sp, #8
 800ed04:	4631      	mov	r1, r6
 800ed06:	f845 0d04 	str.w	r0, [r5, #-4]!
 800ed0a:	4622      	mov	r2, r4
 800ed0c:	f009 ff87 	bl	8018c1e <memcpy>
 800ed10:	4628      	mov	r0, r5
 800ed12:	f001 fea3 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800ed16:	e014      	b.n	800ed42 <GUI__SetText+0x70>
 800ed18:	4620      	mov	r0, r4
 800ed1a:	f002 f8e9 	bl	8010ef0 <GUI_ALLOC_AllocNoInit>
 800ed1e:	4607      	mov	r7, r0
 800ed20:	2800      	cmp	r0, #0
 800ed22:	d0de      	beq.n	800ece2 <GUI__SetText+0x10>
 800ed24:	f001 fe8c 	bl	8010a40 <GUI_ALLOC_LockH>
 800ed28:	ac02      	add	r4, sp, #8
 800ed2a:	4631      	mov	r1, r6
 800ed2c:	f844 0d04 	str.w	r0, [r4, #-4]!
 800ed30:	f009 ffb2 	bl	8018c98 <strcpy>
 800ed34:	4620      	mov	r0, r4
 800ed36:	f001 fe91 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800ed3a:	4628      	mov	r0, r5
 800ed3c:	f002 f8dc 	bl	8010ef8 <GUI_ALLOC_FreePtr>
 800ed40:	602f      	str	r7, [r5, #0]
 800ed42:	2001      	movs	r0, #1
 800ed44:	b003      	add	sp, #12
 800ed46:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ed48 <GUI__ReduceRect>:
 800ed48:	880b      	ldrh	r3, [r1, #0]
 800ed4a:	b292      	uxth	r2, r2
 800ed4c:	4413      	add	r3, r2
 800ed4e:	8003      	strh	r3, [r0, #0]
 800ed50:	888b      	ldrh	r3, [r1, #4]
 800ed52:	1a9b      	subs	r3, r3, r2
 800ed54:	8083      	strh	r3, [r0, #4]
 800ed56:	884b      	ldrh	r3, [r1, #2]
 800ed58:	4413      	add	r3, r2
 800ed5a:	8043      	strh	r3, [r0, #2]
 800ed5c:	88cb      	ldrh	r3, [r1, #6]
 800ed5e:	1a9a      	subs	r2, r3, r2
 800ed60:	80c2      	strh	r2, [r0, #6]
 800ed62:	4770      	bx	lr

0800ed64 <GUI__ManageCacheEx>:
 800ed64:	2801      	cmp	r0, #1
 800ed66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed68:	4604      	mov	r4, r0
 800ed6a:	460d      	mov	r5, r1
 800ed6c:	dc5e      	bgt.n	800ee2c <GUI__ManageCacheEx+0xc8>
 800ed6e:	2901      	cmp	r1, #1
 800ed70:	d004      	beq.n	800ed7c <GUI__ManageCacheEx+0x18>
 800ed72:	2902      	cmp	r1, #2
 800ed74:	d020      	beq.n	800edb8 <GUI__ManageCacheEx+0x54>
 800ed76:	2900      	cmp	r1, #0
 800ed78:	d158      	bne.n	800ee2c <GUI__ManageCacheEx+0xc8>
 800ed7a:	e033      	b.n	800ede4 <GUI__ManageCacheEx+0x80>
 800ed7c:	4e2d      	ldr	r6, [pc, #180]	; (800ee34 <GUI__ManageCacheEx+0xd0>)
 800ed7e:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 800ed82:	b9af      	cbnz	r7, 800edb0 <GUI__ManageCacheEx+0x4c>
 800ed84:	f001 f934 	bl	800fff0 <GUI_DEVICE__GetpDriver>
 800ed88:	9001      	str	r0, [sp, #4]
 800ed8a:	2800      	cmp	r0, #0
 800ed8c:	d04e      	beq.n	800ee2c <GUI__ManageCacheEx+0xc8>
 800ed8e:	68c3      	ldr	r3, [r0, #12]
 800ed90:	210d      	movs	r1, #13
 800ed92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed94:	a801      	add	r0, sp, #4
 800ed96:	4798      	blx	r3
 800ed98:	4603      	mov	r3, r0
 800ed9a:	2800      	cmp	r0, #0
 800ed9c:	d046      	beq.n	800ee2c <GUI__ManageCacheEx+0xc8>
 800ed9e:	9801      	ldr	r0, [sp, #4]
 800eda0:	4629      	mov	r1, r5
 800eda2:	4798      	blx	r3
 800eda4:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800eda8:	3301      	adds	r3, #1
 800edaa:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 800edae:	e017      	b.n	800ede0 <GUI__ManageCacheEx+0x7c>
 800edb0:	3701      	adds	r7, #1
 800edb2:	f846 7020 	str.w	r7, [r6, r0, lsl #2]
 800edb6:	e039      	b.n	800ee2c <GUI__ManageCacheEx+0xc8>
 800edb8:	f001 f91a 	bl	800fff0 <GUI_DEVICE__GetpDriver>
 800edbc:	9001      	str	r0, [sp, #4]
 800edbe:	2800      	cmp	r0, #0
 800edc0:	d034      	beq.n	800ee2c <GUI__ManageCacheEx+0xc8>
 800edc2:	68c3      	ldr	r3, [r0, #12]
 800edc4:	210d      	movs	r1, #13
 800edc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edc8:	a801      	add	r0, sp, #4
 800edca:	4798      	blx	r3
 800edcc:	4604      	mov	r4, r0
 800edce:	2800      	cmp	r0, #0
 800edd0:	d02c      	beq.n	800ee2c <GUI__ManageCacheEx+0xc8>
 800edd2:	4b19      	ldr	r3, [pc, #100]	; (800ee38 <GUI__ManageCacheEx+0xd4>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	b103      	cbz	r3, 800edda <GUI__ManageCacheEx+0x76>
 800edd8:	4798      	blx	r3
 800edda:	9801      	ldr	r0, [sp, #4]
 800eddc:	2102      	movs	r1, #2
 800edde:	47a0      	blx	r4
 800ede0:	2000      	movs	r0, #0
 800ede2:	e024      	b.n	800ee2e <GUI__ManageCacheEx+0xca>
 800ede4:	4d13      	ldr	r5, [pc, #76]	; (800ee34 <GUI__ManageCacheEx+0xd0>)
 800ede6:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 800edea:	2b01      	cmp	r3, #1
 800edec:	d001      	beq.n	800edf2 <GUI__ManageCacheEx+0x8e>
 800edee:	2001      	movs	r0, #1
 800edf0:	e014      	b.n	800ee1c <GUI__ManageCacheEx+0xb8>
 800edf2:	f001 f8fd 	bl	800fff0 <GUI_DEVICE__GetpDriver>
 800edf6:	9001      	str	r0, [sp, #4]
 800edf8:	2800      	cmp	r0, #0
 800edfa:	d0f8      	beq.n	800edee <GUI__ManageCacheEx+0x8a>
 800edfc:	68c3      	ldr	r3, [r0, #12]
 800edfe:	210d      	movs	r1, #13
 800ee00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee02:	a801      	add	r0, sp, #4
 800ee04:	4798      	blx	r3
 800ee06:	4606      	mov	r6, r0
 800ee08:	2800      	cmp	r0, #0
 800ee0a:	d0f0      	beq.n	800edee <GUI__ManageCacheEx+0x8a>
 800ee0c:	4b0a      	ldr	r3, [pc, #40]	; (800ee38 <GUI__ManageCacheEx+0xd4>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	b103      	cbz	r3, 800ee14 <GUI__ManageCacheEx+0xb0>
 800ee12:	4798      	blx	r3
 800ee14:	9801      	ldr	r0, [sp, #4]
 800ee16:	2100      	movs	r1, #0
 800ee18:	47b0      	blx	r6
 800ee1a:	2000      	movs	r0, #0
 800ee1c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	bf18      	it	ne
 800ee24:	3b01      	subne	r3, #1
 800ee26:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 800ee2a:	e000      	b.n	800ee2e <GUI__ManageCacheEx+0xca>
 800ee2c:	2001      	movs	r0, #1
 800ee2e:	b003      	add	sp, #12
 800ee30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee32:	bf00      	nop
 800ee34:	20001610 	.word	0x20001610
 800ee38:	2000160c 	.word	0x2000160c

0800ee3c <GUI__ManageCache>:
 800ee3c:	4b02      	ldr	r3, [pc, #8]	; (800ee48 <GUI__ManageCache+0xc>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	4601      	mov	r1, r0
 800ee42:	7c58      	ldrb	r0, [r3, #17]
 800ee44:	f7ff bf8e 	b.w	800ed64 <GUI__ManageCacheEx>
 800ee48:	20000308 	.word	0x20000308

0800ee4c <GUI__IntersectRects>:
 800ee4c:	b570      	push	{r4, r5, r6, lr}
 800ee4e:	f9b2 3000 	ldrsh.w	r3, [r2]
 800ee52:	f9b1 4000 	ldrsh.w	r4, [r1]
 800ee56:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800ee5a:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 800ee5e:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800ee62:	429c      	cmp	r4, r3
 800ee64:	bfb8      	it	lt
 800ee66:	461c      	movlt	r4, r3
 800ee68:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800ee6c:	429d      	cmp	r5, r3
 800ee6e:	bfa8      	it	ge
 800ee70:	462b      	movge	r3, r5
 800ee72:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 800ee76:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800ee7a:	42ae      	cmp	r6, r5
 800ee7c:	bfb8      	it	lt
 800ee7e:	4635      	movlt	r5, r6
 800ee80:	b2a4      	uxth	r4, r4
 800ee82:	b2ad      	uxth	r5, r5
 800ee84:	4291      	cmp	r1, r2
 800ee86:	bfb8      	it	lt
 800ee88:	460a      	movlt	r2, r1
 800ee8a:	8004      	strh	r4, [r0, #0]
 800ee8c:	8085      	strh	r5, [r0, #4]
 800ee8e:	b224      	sxth	r4, r4
 800ee90:	b22d      	sxth	r5, r5
 800ee92:	b29b      	uxth	r3, r3
 800ee94:	b292      	uxth	r2, r2
 800ee96:	42a5      	cmp	r5, r4
 800ee98:	8043      	strh	r3, [r0, #2]
 800ee9a:	80c2      	strh	r2, [r0, #6]
 800ee9c:	db06      	blt.n	800eeac <GUI__IntersectRects+0x60>
 800ee9e:	b210      	sxth	r0, r2
 800eea0:	b21b      	sxth	r3, r3
 800eea2:	4298      	cmp	r0, r3
 800eea4:	bfb4      	ite	lt
 800eea6:	2000      	movlt	r0, #0
 800eea8:	2001      	movge	r0, #1
 800eeaa:	bd70      	pop	{r4, r5, r6, pc}
 800eeac:	2000      	movs	r0, #0
 800eeae:	bd70      	pop	{r4, r5, r6, pc}

0800eeb0 <GUI__IntersectRect>:
 800eeb0:	880b      	ldrh	r3, [r1, #0]
 800eeb2:	b510      	push	{r4, lr}
 800eeb4:	f9b0 4000 	ldrsh.w	r4, [r0]
 800eeb8:	b21a      	sxth	r2, r3
 800eeba:	4294      	cmp	r4, r2
 800eebc:	bfb8      	it	lt
 800eebe:	8003      	strhlt	r3, [r0, #0]
 800eec0:	884b      	ldrh	r3, [r1, #2]
 800eec2:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800eec6:	b21a      	sxth	r2, r3
 800eec8:	4294      	cmp	r4, r2
 800eeca:	bfb8      	it	lt
 800eecc:	8043      	strhlt	r3, [r0, #2]
 800eece:	888b      	ldrh	r3, [r1, #4]
 800eed0:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800eed4:	b21a      	sxth	r2, r3
 800eed6:	4294      	cmp	r4, r2
 800eed8:	bfc8      	it	gt
 800eeda:	8083      	strhgt	r3, [r0, #4]
 800eedc:	88cb      	ldrh	r3, [r1, #6]
 800eede:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800eee2:	b21a      	sxth	r2, r3
 800eee4:	4291      	cmp	r1, r2
 800eee6:	bfc8      	it	gt
 800eee8:	80c3      	strhgt	r3, [r0, #6]
 800eeea:	bd10      	pop	{r4, pc}

0800eeec <GUI__GetNumChars>:
 800eeec:	b513      	push	{r0, r1, r4, lr}
 800eeee:	9001      	str	r0, [sp, #4]
 800eef0:	b130      	cbz	r0, 800ef00 <GUI__GetNumChars+0x14>
 800eef2:	2400      	movs	r4, #0
 800eef4:	a801      	add	r0, sp, #4
 800eef6:	f000 fa83 	bl	800f400 <GUI_UC__GetCharCodeInc>
 800eefa:	b110      	cbz	r0, 800ef02 <GUI__GetNumChars+0x16>
 800eefc:	3401      	adds	r4, #1
 800eefe:	e7f9      	b.n	800eef4 <GUI__GetNumChars+0x8>
 800ef00:	4604      	mov	r4, r0
 800ef02:	4620      	mov	r0, r4
 800ef04:	b002      	add	sp, #8
 800ef06:	bd10      	pop	{r4, pc}

0800ef08 <_GetCursorPosX>:
 800ef08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef0a:	4615      	mov	r5, r2
 800ef0c:	9001      	str	r0, [sp, #4]
 800ef0e:	2400      	movs	r4, #0
 800ef10:	b13d      	cbz	r5, 800ef22 <_GetCursorPosX+0x1a>
 800ef12:	a801      	add	r0, sp, #4
 800ef14:	f000 fa74 	bl	800f400 <GUI_UC__GetCharCodeInc>
 800ef18:	f001 fc84 	bl	8010824 <GUI_GetCharDistX>
 800ef1c:	3d01      	subs	r5, #1
 800ef1e:	4404      	add	r4, r0
 800ef20:	e7f6      	b.n	800ef10 <_GetCursorPosX+0x8>
 800ef22:	4620      	mov	r0, r4
 800ef24:	b003      	add	sp, #12
 800ef26:	bd30      	pop	{r4, r5, pc}

0800ef28 <_GetCursorCharacter>:
 800ef28:	b538      	push	{r3, r4, r5, lr}
 800ef2a:	4604      	mov	r4, r0
 800ef2c:	b10b      	cbz	r3, 800ef32 <_GetCursorCharacter+0xa>
 800ef2e:	2200      	movs	r2, #0
 800ef30:	601a      	str	r2, [r3, #0]
 800ef32:	460d      	mov	r5, r1
 800ef34:	b13d      	cbz	r5, 800ef46 <_GetCursorCharacter+0x1e>
 800ef36:	4b06      	ldr	r3, [pc, #24]	; (800ef50 <_GetCursorCharacter+0x28>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	4620      	mov	r0, r4
 800ef3c:	685b      	ldr	r3, [r3, #4]
 800ef3e:	4798      	blx	r3
 800ef40:	3d01      	subs	r5, #1
 800ef42:	4404      	add	r4, r0
 800ef44:	e7f6      	b.n	800ef34 <_GetCursorCharacter+0xc>
 800ef46:	4620      	mov	r0, r4
 800ef48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef4c:	f000 ba40 	b.w	800f3d0 <GUI_UC_GetCharCode>
 800ef50:	20021c04 	.word	0x20021c04

0800ef54 <_GetCursorPosChar>:
 800ef54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef58:	4607      	mov	r7, r0
 800ef5a:	460d      	mov	r5, r1
 800ef5c:	4690      	mov	r8, r2
 800ef5e:	4604      	mov	r4, r0
 800ef60:	2600      	movs	r6, #0
 800ef62:	3d01      	subs	r5, #1
 800ef64:	2d00      	cmp	r5, #0
 800ef66:	dd09      	ble.n	800ef7c <_GetCursorPosChar+0x28>
 800ef68:	4620      	mov	r0, r4
 800ef6a:	f000 fa31 	bl	800f3d0 <GUI_UC_GetCharCode>
 800ef6e:	4681      	mov	r9, r0
 800ef70:	f001 fc58 	bl	8010824 <GUI_GetCharDistX>
 800ef74:	4406      	add	r6, r0
 800ef76:	f1b9 0f00 	cmp.w	r9, #0
 800ef7a:	d105      	bne.n	800ef88 <_GetCursorPosChar+0x34>
 800ef7c:	4638      	mov	r0, r7
 800ef7e:	1be1      	subs	r1, r4, r7
 800ef80:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef84:	f000 ba62 	b.w	800f44c <GUI_UC__NumBytes2NumChars>
 800ef88:	4546      	cmp	r6, r8
 800ef8a:	dcf7      	bgt.n	800ef7c <_GetCursorPosChar+0x28>
 800ef8c:	4620      	mov	r0, r4
 800ef8e:	f000 fa17 	bl	800f3c0 <GUI_UC_GetCharSize>
 800ef92:	4404      	add	r4, r0
 800ef94:	e7e5      	b.n	800ef62 <_GetCursorPosChar+0xe>
	...

0800ef98 <GUI__GetCursorPosX>:
 800ef98:	b510      	push	{r4, lr}
 800ef9a:	4b03      	ldr	r3, [pc, #12]	; (800efa8 <GUI__GetCursorPosX+0x10>)
 800ef9c:	460c      	mov	r4, r1
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	4611      	mov	r1, r2
 800efa2:	4622      	mov	r2, r4
 800efa4:	4798      	blx	r3
 800efa6:	bd10      	pop	{r4, pc}
 800efa8:	200002f0 	.word	0x200002f0

0800efac <GUI__GetCursorPosChar>:
 800efac:	b510      	push	{r4, lr}
 800efae:	4b03      	ldr	r3, [pc, #12]	; (800efbc <GUI__GetCursorPosChar+0x10>)
 800efb0:	460c      	mov	r4, r1
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	4611      	mov	r1, r2
 800efb6:	4622      	mov	r2, r4
 800efb8:	4798      	blx	r3
 800efba:	bd10      	pop	{r4, pc}
 800efbc:	200002e8 	.word	0x200002e8

0800efc0 <GUI__GetCursorCharacter>:
 800efc0:	b510      	push	{r4, lr}
 800efc2:	4c02      	ldr	r4, [pc, #8]	; (800efcc <GUI__GetCursorCharacter+0xc>)
 800efc4:	6824      	ldr	r4, [r4, #0]
 800efc6:	47a0      	blx	r4
 800efc8:	bd10      	pop	{r4, pc}
 800efca:	bf00      	nop
 800efcc:	200002ec 	.word	0x200002ec

0800efd0 <GUI__CalcTextRect>:
 800efd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efd4:	460c      	mov	r4, r1
 800efd6:	4615      	mov	r5, r2
 800efd8:	4698      	mov	r8, r3
 800efda:	2800      	cmp	r0, #0
 800efdc:	d03b      	beq.n	800f056 <GUI__CalcTextRect+0x86>
 800efde:	f000 fe3d 	bl	800fc5c <GUI_GetStringDistX>
 800efe2:	f008 0203 	and.w	r2, r8, #3
 800efe6:	2a01      	cmp	r2, #1
 800efe8:	4607      	mov	r7, r0
 800efea:	d00c      	beq.n	800f006 <GUI__CalcTextRect+0x36>
 800efec:	2a02      	cmp	r2, #2
 800efee:	f9b4 6000 	ldrsh.w	r6, [r4]
 800eff2:	d10c      	bne.n	800f00e <GUI__CalcTextRect+0x3e>
 800eff4:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800eff8:	1b9b      	subs	r3, r3, r6
 800effa:	3301      	adds	r3, #1
 800effc:	1a1b      	subs	r3, r3, r0
 800effe:	fb93 f2f2 	sdiv	r2, r3, r2
 800f002:	4416      	add	r6, r2
 800f004:	e003      	b.n	800f00e <GUI__CalcTextRect+0x3e>
 800f006:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
 800f00a:	1a36      	subs	r6, r6, r0
 800f00c:	3601      	adds	r6, #1
 800f00e:	f008 080c 	and.w	r8, r8, #12
 800f012:	f001 fbff 	bl	8010814 <GUI_GetFontDistY>
 800f016:	f1b8 0f04 	cmp.w	r8, #4
 800f01a:	d00e      	beq.n	800f03a <GUI__CalcTextRect+0x6a>
 800f01c:	f1b8 0f0c 	cmp.w	r8, #12
 800f020:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800f024:	d10d      	bne.n	800f042 <GUI__CalcTextRect+0x72>
 800f026:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800f02a:	1ad2      	subs	r2, r2, r3
 800f02c:	3201      	adds	r2, #1
 800f02e:	1a12      	subs	r2, r2, r0
 800f030:	2102      	movs	r1, #2
 800f032:	fb92 f2f1 	sdiv	r2, r2, r1
 800f036:	4413      	add	r3, r2
 800f038:	e003      	b.n	800f042 <GUI__CalcTextRect+0x72>
 800f03a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800f03e:	1a1b      	subs	r3, r3, r0
 800f040:	3301      	adds	r3, #1
 800f042:	3f01      	subs	r7, #1
 800f044:	3801      	subs	r0, #1
 800f046:	802e      	strh	r6, [r5, #0]
 800f048:	806b      	strh	r3, [r5, #2]
 800f04a:	443e      	add	r6, r7
 800f04c:	4403      	add	r3, r0
 800f04e:	80ae      	strh	r6, [r5, #4]
 800f050:	80eb      	strh	r3, [r5, #6]
 800f052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f056:	680b      	ldr	r3, [r1, #0]
 800f058:	6013      	str	r3, [r2, #0]
 800f05a:	684b      	ldr	r3, [r1, #4]
 800f05c:	6053      	str	r3, [r2, #4]
 800f05e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f062 <GUI__MixColors>:
 800f062:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
 800f066:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800f06a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f06c:	d027      	beq.n	800f0be <GUI__MixColors+0x5c>
 800f06e:	43d3      	mvns	r3, r2
 800f070:	b2db      	uxtb	r3, r3
 800f072:	b2cd      	uxtb	r5, r1
 800f074:	b2c6      	uxtb	r6, r0
 800f076:	435d      	muls	r5, r3
 800f078:	fb02 5506 	mla	r5, r2, r6, r5
 800f07c:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 800f080:	f400 447f 	and.w	r4, r0, #65280	; 0xff00
 800f084:	435e      	muls	r6, r3
 800f086:	fb02 6604 	mla	r6, r2, r4, r6
 800f08a:	f401 047f 	and.w	r4, r1, #16711680	; 0xff0000
 800f08e:	f400 077f 	and.w	r7, r0, #16711680	; 0xff0000
 800f092:	435c      	muls	r4, r3
 800f094:	0e09      	lsrs	r1, r1, #24
 800f096:	0e00      	lsrs	r0, r0, #24
 800f098:	fb02 4407 	mla	r4, r2, r7, r4
 800f09c:	434b      	muls	r3, r1
 800f09e:	0a36      	lsrs	r6, r6, #8
 800f0a0:	fb02 3200 	mla	r2, r2, r0, r3
 800f0a4:	0a24      	lsrs	r4, r4, #8
 800f0a6:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800f0aa:	f406 407f 	and.w	r0, r6, #65280	; 0xff00
 800f0ae:	4318      	orrs	r0, r3
 800f0b0:	0412      	lsls	r2, r2, #16
 800f0b2:	f404 037f 	and.w	r3, r4, #16711680	; 0xff0000
 800f0b6:	4318      	orrs	r0, r3
 800f0b8:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800f0bc:	4310      	orrs	r0, r2
 800f0be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f0c0 <_OnExit>:
 800f0c0:	b570      	push	{r4, r5, r6, lr}
 800f0c2:	4c0a      	ldr	r4, [pc, #40]	; (800f0ec <_OnExit+0x2c>)
 800f0c4:	4d0a      	ldr	r5, [pc, #40]	; (800f0f0 <_OnExit+0x30>)
 800f0c6:	6820      	ldr	r0, [r4, #0]
 800f0c8:	4e0a      	ldr	r6, [pc, #40]	; (800f0f4 <_OnExit+0x34>)
 800f0ca:	f001 fca5 	bl	8010a18 <GUI_ALLOC_FreeFixedBlock>
 800f0ce:	6828      	ldr	r0, [r5, #0]
 800f0d0:	f001 fca2 	bl	8010a18 <GUI_ALLOC_FreeFixedBlock>
 800f0d4:	6830      	ldr	r0, [r6, #0]
 800f0d6:	f001 fc9f 	bl	8010a18 <GUI_ALLOC_FreeFixedBlock>
 800f0da:	4a07      	ldr	r2, [pc, #28]	; (800f0f8 <_OnExit+0x38>)
 800f0dc:	2300      	movs	r3, #0
 800f0de:	6013      	str	r3, [r2, #0]
 800f0e0:	4a06      	ldr	r2, [pc, #24]	; (800f0fc <_OnExit+0x3c>)
 800f0e2:	6033      	str	r3, [r6, #0]
 800f0e4:	602b      	str	r3, [r5, #0]
 800f0e6:	6023      	str	r3, [r4, #0]
 800f0e8:	6013      	str	r3, [r2, #0]
 800f0ea:	bd70      	pop	{r4, r5, r6, pc}
 800f0ec:	2000161c 	.word	0x2000161c
 800f0f0:	20001618 	.word	0x20001618
 800f0f4:	20001620 	.word	0x20001620
 800f0f8:	20001624 	.word	0x20001624
 800f0fc:	20001634 	.word	0x20001634

0800f100 <GUI__GetAlphaBuffer>:
 800f100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f104:	461c      	mov	r4, r3
 800f106:	4b28      	ldr	r3, [pc, #160]	; (800f1a8 <GUI__GetAlphaBuffer+0xa8>)
 800f108:	4617      	mov	r7, r2
 800f10a:	681a      	ldr	r2, [r3, #0]
 800f10c:	4606      	mov	r6, r0
 800f10e:	4688      	mov	r8, r1
 800f110:	b932      	cbnz	r2, 800f120 <GUI__GetAlphaBuffer+0x20>
 800f112:	2201      	movs	r2, #1
 800f114:	4825      	ldr	r0, [pc, #148]	; (800f1ac <GUI__GetAlphaBuffer+0xac>)
 800f116:	601a      	str	r2, [r3, #0]
 800f118:	4b25      	ldr	r3, [pc, #148]	; (800f1b0 <GUI__GetAlphaBuffer+0xb0>)
 800f11a:	6003      	str	r3, [r0, #0]
 800f11c:	f001 f88e 	bl	801023c <GUI__RegisterExit>
 800f120:	4d24      	ldr	r5, [pc, #144]	; (800f1b4 <GUI__GetAlphaBuffer+0xb4>)
 800f122:	682b      	ldr	r3, [r5, #0]
 800f124:	b933      	cbnz	r3, 800f134 <GUI__GetAlphaBuffer+0x34>
 800f126:	4b24      	ldr	r3, [pc, #144]	; (800f1b8 <GUI__GetAlphaBuffer+0xb8>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	602b      	str	r3, [r5, #0]
 800f12c:	b913      	cbnz	r3, 800f134 <GUI__GetAlphaBuffer+0x34>
 800f12e:	f7ff f9d7 	bl	800e4e0 <LCD_GetVXSizeMax>
 800f132:	6028      	str	r0, [r5, #0]
 800f134:	b10c      	cbz	r4, 800f13a <GUI__GetAlphaBuffer+0x3a>
 800f136:	682b      	ldr	r3, [r5, #0]
 800f138:	6023      	str	r3, [r4, #0]
 800f13a:	b196      	cbz	r6, 800f162 <GUI__GetAlphaBuffer+0x62>
 800f13c:	4b1f      	ldr	r3, [pc, #124]	; (800f1bc <GUI__GetAlphaBuffer+0xbc>)
 800f13e:	681a      	ldr	r2, [r3, #0]
 800f140:	4699      	mov	r9, r3
 800f142:	2400      	movs	r4, #0
 800f144:	b94a      	cbnz	r2, 800f15a <GUI__GetAlphaBuffer+0x5a>
 800f146:	6828      	ldr	r0, [r5, #0]
 800f148:	0080      	lsls	r0, r0, #2
 800f14a:	f001 fdd1 	bl	8010cf0 <GUI_ALLOC_GetFixedBlock>
 800f14e:	f1d0 0401 	rsbs	r4, r0, #1
 800f152:	f8c9 0000 	str.w	r0, [r9]
 800f156:	bf38      	it	cc
 800f158:	2400      	movcc	r4, #0
 800f15a:	f8d9 3000 	ldr.w	r3, [r9]
 800f15e:	6033      	str	r3, [r6, #0]
 800f160:	e000      	b.n	800f164 <GUI__GetAlphaBuffer+0x64>
 800f162:	4634      	mov	r4, r6
 800f164:	f1b8 0f00 	cmp.w	r8, #0
 800f168:	d00d      	beq.n	800f186 <GUI__GetAlphaBuffer+0x86>
 800f16a:	4e15      	ldr	r6, [pc, #84]	; (800f1c0 <GUI__GetAlphaBuffer+0xc0>)
 800f16c:	6833      	ldr	r3, [r6, #0]
 800f16e:	b93b      	cbnz	r3, 800f180 <GUI__GetAlphaBuffer+0x80>
 800f170:	6828      	ldr	r0, [r5, #0]
 800f172:	0080      	lsls	r0, r0, #2
 800f174:	f001 fdbc 	bl	8010cf0 <GUI_ALLOC_GetFixedBlock>
 800f178:	2800      	cmp	r0, #0
 800f17a:	6030      	str	r0, [r6, #0]
 800f17c:	bf08      	it	eq
 800f17e:	2401      	moveq	r4, #1
 800f180:	6833      	ldr	r3, [r6, #0]
 800f182:	f8c8 3000 	str.w	r3, [r8]
 800f186:	b167      	cbz	r7, 800f1a2 <GUI__GetAlphaBuffer+0xa2>
 800f188:	4e0e      	ldr	r6, [pc, #56]	; (800f1c4 <GUI__GetAlphaBuffer+0xc4>)
 800f18a:	6833      	ldr	r3, [r6, #0]
 800f18c:	b93b      	cbnz	r3, 800f19e <GUI__GetAlphaBuffer+0x9e>
 800f18e:	6828      	ldr	r0, [r5, #0]
 800f190:	0080      	lsls	r0, r0, #2
 800f192:	f001 fdad 	bl	8010cf0 <GUI_ALLOC_GetFixedBlock>
 800f196:	2800      	cmp	r0, #0
 800f198:	6030      	str	r0, [r6, #0]
 800f19a:	bf08      	it	eq
 800f19c:	2401      	moveq	r4, #1
 800f19e:	6833      	ldr	r3, [r6, #0]
 800f1a0:	603b      	str	r3, [r7, #0]
 800f1a2:	4620      	mov	r0, r4
 800f1a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1a8:	20001634 	.word	0x20001634
 800f1ac:	2000162c 	.word	0x2000162c
 800f1b0:	0800f0c1 	.word	0x0800f0c1
 800f1b4:	20001624 	.word	0x20001624
 800f1b8:	20021c14 	.word	0x20021c14
 800f1bc:	2000161c 	.word	0x2000161c
 800f1c0:	20001618 	.word	0x20001618
 800f1c4:	20001620 	.word	0x20001620

0800f1c8 <GUI__DoAlphaBlending>:
 800f1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1cc:	b093      	sub	sp, #76	; 0x4c
 800f1ce:	2400      	movs	r4, #0
 800f1d0:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800f1d2:	900b      	str	r0, [sp, #44]	; 0x2c
 800f1d4:	910c      	str	r1, [sp, #48]	; 0x30
 800f1d6:	4690      	mov	r8, r2
 800f1d8:	461f      	mov	r7, r3
 800f1da:	6034      	str	r4, [r6, #0]
 800f1dc:	a80f      	add	r0, sp, #60	; 0x3c
 800f1de:	a910      	add	r1, sp, #64	; 0x40
 800f1e0:	4622      	mov	r2, r4
 800f1e2:	ab11      	add	r3, sp, #68	; 0x44
 800f1e4:	f7ff ff8c 	bl	800f100 <GUI__GetAlphaBuffer>
 800f1e8:	4605      	mov	r5, r0
 800f1ea:	2800      	cmp	r0, #0
 800f1ec:	f040 80c3 	bne.w	800f376 <GUI__DoAlphaBlending+0x1ae>
 800f1f0:	4c63      	ldr	r4, [pc, #396]	; (800f380 <GUI__DoAlphaBlending+0x1b8>)
 800f1f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f1f4:	6823      	ldr	r3, [r4, #0]
 800f1f6:	7c58      	ldrb	r0, [r3, #17]
 800f1f8:	4b62      	ldr	r3, [pc, #392]	; (800f384 <GUI__DoAlphaBlending+0x1bc>)
 800f1fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f1fe:	9307      	str	r3, [sp, #28]
 800f200:	4297      	cmp	r7, r2
 800f202:	bfa8      	it	ge
 800f204:	4617      	movge	r7, r2
 800f206:	691a      	ldr	r2, [r3, #16]
 800f208:	920d      	str	r2, [sp, #52]	; 0x34
 800f20a:	970a      	str	r7, [sp, #40]	; 0x28
 800f20c:	f7ff f93a 	bl	800e484 <GUI_GetBitsPerPixelEx>
 800f210:	6823      	ldr	r3, [r4, #0]
 800f212:	9008      	str	r0, [sp, #32]
 800f214:	7c58      	ldrb	r0, [r3, #17]
 800f216:	f7ff f953 	bl	800e4c0 <GUI_GetpfIndex2ColorEx>
 800f21a:	4b5b      	ldr	r3, [pc, #364]	; (800f388 <GUI__DoAlphaBlending+0x1c0>)
 800f21c:	9004      	str	r0, [sp, #16]
 800f21e:	4298      	cmp	r0, r3
 800f220:	d005      	beq.n	800f22e <GUI__DoAlphaBlending+0x66>
 800f222:	4b5a      	ldr	r3, [pc, #360]	; (800f38c <GUI__DoAlphaBlending+0x1c4>)
 800f224:	1ac3      	subs	r3, r0, r3
 800f226:	bf18      	it	ne
 800f228:	2301      	movne	r3, #1
 800f22a:	9306      	str	r3, [sp, #24]
 800f22c:	e000      	b.n	800f230 <GUI__DoAlphaBlending+0x68>
 800f22e:	9506      	str	r5, [sp, #24]
 800f230:	2500      	movs	r5, #0
 800f232:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f234:	46ab      	mov	fp, r5
 800f236:	4643      	mov	r3, r8
 800f238:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f23a:	f853 0b04 	ldr.w	r0, [r3], #4
 800f23e:	9305      	str	r3, [sp, #20]
 800f240:	4790      	blx	r2
 800f242:	0e03      	lsrs	r3, r0, #24
 800f244:	4681      	mov	r9, r0
 800f246:	9309      	str	r3, [sp, #36]	; 0x24
 800f248:	f000 8085 	beq.w	800f356 <GUI__DoAlphaBlending+0x18e>
 800f24c:	f1bb 0f00 	cmp.w	fp, #0
 800f250:	d13f      	bne.n	800f2d2 <GUI__DoAlphaBlending+0x10a>
 800f252:	4b4b      	ldr	r3, [pc, #300]	; (800f380 <GUI__DoAlphaBlending+0x1b8>)
 800f254:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f25a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f25e:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800f262:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f264:	442f      	add	r7, r5
 800f266:	42bb      	cmp	r3, r7
 800f268:	bfc8      	it	gt
 800f26a:	ebc7 0b03 	rsbgt	fp, r7, r3
 800f26e:	eb0b 0a05 	add.w	sl, fp, r5
 800f272:	bfc8      	it	gt
 800f274:	461f      	movgt	r7, r3
 800f276:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f278:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800f27c:	4453      	add	r3, sl
 800f27e:	4494      	add	ip, r2
 800f280:	9300      	str	r3, [sp, #0]
 800f282:	9b07      	ldr	r3, [sp, #28]
 800f284:	9301      	str	r3, [sp, #4]
 800f286:	f10c 32ff 	add.w	r2, ip, #4294967295
 800f28a:	4638      	mov	r0, r7
 800f28c:	460b      	mov	r3, r1
 800f28e:	f8cd c00c 	str.w	ip, [sp, #12]
 800f292:	f006 feaf 	bl	8015ff4 <GUI_ReadRectEx>
 800f296:	9a08      	ldr	r2, [sp, #32]
 800f298:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f29a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800f29e:	2a17      	cmp	r2, #23
 800f2a0:	dc06      	bgt.n	800f2b0 <GUI__DoAlphaBlending+0xe8>
 800f2a2:	4450      	add	r0, sl
 800f2a4:	ebcb 0104 	rsb	r1, fp, r4
 800f2a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f2aa:	f007 f99d 	bl	80165e8 <GUI__ExpandPixelIndicesEx>
 800f2ae:	e001      	b.n	800f2b4 <GUI__DoAlphaBlending+0xec>
 800f2b0:	9b06      	ldr	r3, [sp, #24]
 800f2b2:	b913      	cbnz	r3, 800f2ba <GUI__DoAlphaBlending+0xf2>
 800f2b4:	f04f 0b01 	mov.w	fp, #1
 800f2b8:	e00b      	b.n	800f2d2 <GUI__DoAlphaBlending+0x10a>
 800f2ba:	ebc7 070c 	rsb	r7, r7, ip
 800f2be:	4482      	add	sl, r0
 800f2c0:	f8da 0000 	ldr.w	r0, [sl]
 800f2c4:	9a04      	ldr	r2, [sp, #16]
 800f2c6:	4790      	blx	r2
 800f2c8:	3f01      	subs	r7, #1
 800f2ca:	f84a 0b04 	str.w	r0, [sl], #4
 800f2ce:	d1f7      	bne.n	800f2c0 <GUI__DoAlphaBlending+0xf8>
 800f2d0:	e7f0      	b.n	800f2b4 <GUI__DoAlphaBlending+0xec>
 800f2d2:	4b2f      	ldr	r3, [pc, #188]	; (800f390 <GUI__DoAlphaBlending+0x1c8>)
 800f2d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f2d6:	f8d3 c000 	ldr.w	ip, [r3]
 800f2da:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800f2dc:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800f2e0:	f1bc 0f00 	cmp.w	ip, #0
 800f2e4:	d024      	beq.n	800f330 <GUI__DoAlphaBlending+0x168>
 800f2e6:	eb07 020a 	add.w	r2, r7, sl
 800f2ea:	4451      	add	r1, sl
 800f2ec:	9210      	str	r2, [sp, #64]	; 0x40
 800f2ee:	4623      	mov	r3, r4
 800f2f0:	910f      	str	r1, [sp, #60]	; 0x3c
 800f2f2:	4640      	mov	r0, r8
 800f2f4:	47e0      	blx	ip
 800f2f6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f2f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	f858 1003 	ldr.w	r1, [r8, r3]
 800f300:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
 800f304:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800f308:	58e8      	ldr	r0, [r5, r3]
 800f30a:	d101      	bne.n	800f310 <GUI__DoAlphaBlending+0x148>
 800f30c:	50d0      	str	r0, [r2, r3]
 800f30e:	e005      	b.n	800f31c <GUI__DoAlphaBlending+0x154>
 800f310:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 800f314:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800f318:	bf08      	it	eq
 800f31a:	50d1      	streq	r1, [r2, r3]
 800f31c:	3c01      	subs	r4, #1
 800f31e:	f103 0304 	add.w	r3, r3, #4
 800f322:	d1eb      	bne.n	800f2fc <GUI__DoAlphaBlending+0x134>
 800f324:	6833      	ldr	r3, [r6, #0]
 800f326:	9710      	str	r7, [sp, #64]	; 0x40
 800f328:	f043 0301 	orr.w	r3, r3, #1
 800f32c:	6033      	str	r3, [r6, #0]
 800f32e:	e020      	b.n	800f372 <GUI__DoAlphaBlending+0x1aa>
 800f330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f332:	2bff      	cmp	r3, #255	; 0xff
 800f334:	d104      	bne.n	800f340 <GUI__DoAlphaBlending+0x178>
 800f336:	f851 300a 	ldr.w	r3, [r1, sl]
 800f33a:	f847 300a 	str.w	r3, [r7, sl]
 800f33e:	e011      	b.n	800f364 <GUI__DoAlphaBlending+0x19c>
 800f340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f342:	f851 100a 	ldr.w	r1, [r1, sl]
 800f346:	43da      	mvns	r2, r3
 800f348:	4648      	mov	r0, r9
 800f34a:	b2d2      	uxtb	r2, r2
 800f34c:	f7ff fe89 	bl	800f062 <GUI__MixColors>
 800f350:	f847 000a 	str.w	r0, [r7, sl]
 800f354:	e002      	b.n	800f35c <GUI__DoAlphaBlending+0x194>
 800f356:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f358:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800f35c:	6833      	ldr	r3, [r6, #0]
 800f35e:	f043 0301 	orr.w	r3, r3, #1
 800f362:	6033      	str	r3, [r6, #0]
 800f364:	3c01      	subs	r4, #1
 800f366:	f105 0501 	add.w	r5, r5, #1
 800f36a:	d002      	beq.n	800f372 <GUI__DoAlphaBlending+0x1aa>
 800f36c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f370:	e761      	b.n	800f236 <GUI__DoAlphaBlending+0x6e>
 800f372:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f374:	e000      	b.n	800f378 <GUI__DoAlphaBlending+0x1b0>
 800f376:	4620      	mov	r0, r4
 800f378:	b013      	add	sp, #76	; 0x4c
 800f37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f37e:	bf00      	nop
 800f380:	20000308 	.word	0x20000308
 800f384:	20021c0c 	.word	0x20021c0c
 800f388:	08010f89 	.word	0x08010f89
 800f38c:	08010f87 	.word	0x08010f87
 800f390:	20001628 	.word	0x20001628

0800f394 <GUI__AllocAlphaBuffer>:
 800f394:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f396:	b108      	cbz	r0, 800f39c <GUI__AllocAlphaBuffer+0x8>
 800f398:	aa03      	add	r2, sp, #12
 800f39a:	e000      	b.n	800f39e <GUI__AllocAlphaBuffer+0xa>
 800f39c:	4602      	mov	r2, r0
 800f39e:	a801      	add	r0, sp, #4
 800f3a0:	a902      	add	r1, sp, #8
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	f7ff feac 	bl	800f100 <GUI__GetAlphaBuffer>
 800f3a8:	b005      	add	sp, #20
 800f3aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f3b0 <GUI_SignalEvent>:
 800f3b0:	b508      	push	{r3, lr}
 800f3b2:	4b02      	ldr	r3, [pc, #8]	; (800f3bc <GUI_SignalEvent+0xc>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	b103      	cbz	r3, 800f3ba <GUI_SignalEvent+0xa>
 800f3b8:	4798      	blx	r3
 800f3ba:	bd08      	pop	{r3, pc}
 800f3bc:	20001638 	.word	0x20001638

0800f3c0 <GUI_UC_GetCharSize>:
 800f3c0:	b508      	push	{r3, lr}
 800f3c2:	4b02      	ldr	r3, [pc, #8]	; (800f3cc <GUI_UC_GetCharSize+0xc>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	685b      	ldr	r3, [r3, #4]
 800f3c8:	4798      	blx	r3
 800f3ca:	bd08      	pop	{r3, pc}
 800f3cc:	20021c04 	.word	0x20021c04

0800f3d0 <GUI_UC_GetCharCode>:
 800f3d0:	b508      	push	{r3, lr}
 800f3d2:	4b02      	ldr	r3, [pc, #8]	; (800f3dc <GUI_UC_GetCharCode+0xc>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	4798      	blx	r3
 800f3da:	bd08      	pop	{r3, pc}
 800f3dc:	20021c04 	.word	0x20021c04

0800f3e0 <GUI_UC_Encode>:
 800f3e0:	b508      	push	{r3, lr}
 800f3e2:	4b02      	ldr	r3, [pc, #8]	; (800f3ec <GUI_UC_Encode+0xc>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	68db      	ldr	r3, [r3, #12]
 800f3e8:	4798      	blx	r3
 800f3ea:	bd08      	pop	{r3, pc}
 800f3ec:	20021c04 	.word	0x20021c04

0800f3f0 <GUI_UC__CalcSizeOfChar>:
 800f3f0:	b508      	push	{r3, lr}
 800f3f2:	4b02      	ldr	r3, [pc, #8]	; (800f3fc <GUI_UC__CalcSizeOfChar+0xc>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	689b      	ldr	r3, [r3, #8]
 800f3f8:	4798      	blx	r3
 800f3fa:	bd08      	pop	{r3, pc}
 800f3fc:	20021c04 	.word	0x20021c04

0800f400 <GUI_UC__GetCharCodeInc>:
 800f400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f402:	4e08      	ldr	r6, [pc, #32]	; (800f424 <GUI_UC__GetCharCodeInc+0x24>)
 800f404:	6804      	ldr	r4, [r0, #0]
 800f406:	6833      	ldr	r3, [r6, #0]
 800f408:	4605      	mov	r5, r0
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	4620      	mov	r0, r4
 800f40e:	4798      	blx	r3
 800f410:	6833      	ldr	r3, [r6, #0]
 800f412:	4607      	mov	r7, r0
 800f414:	685b      	ldr	r3, [r3, #4]
 800f416:	4620      	mov	r0, r4
 800f418:	4798      	blx	r3
 800f41a:	4420      	add	r0, r4
 800f41c:	6028      	str	r0, [r5, #0]
 800f41e:	4638      	mov	r0, r7
 800f420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f422:	bf00      	nop
 800f424:	20021c04 	.word	0x20021c04

0800f428 <GUI_UC__NumChars2NumBytes>:
 800f428:	b570      	push	{r4, r5, r6, lr}
 800f42a:	4604      	mov	r4, r0
 800f42c:	460e      	mov	r6, r1
 800f42e:	2500      	movs	r5, #0
 800f430:	b146      	cbz	r6, 800f444 <GUI_UC__NumChars2NumBytes+0x1c>
 800f432:	4b05      	ldr	r3, [pc, #20]	; (800f448 <GUI_UC__NumChars2NumBytes+0x20>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	4620      	mov	r0, r4
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	4798      	blx	r3
 800f43c:	3e01      	subs	r6, #1
 800f43e:	4404      	add	r4, r0
 800f440:	4405      	add	r5, r0
 800f442:	e7f5      	b.n	800f430 <GUI_UC__NumChars2NumBytes+0x8>
 800f444:	4628      	mov	r0, r5
 800f446:	bd70      	pop	{r4, r5, r6, pc}
 800f448:	20021c04 	.word	0x20021c04

0800f44c <GUI_UC__NumBytes2NumChars>:
 800f44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f44e:	2400      	movs	r4, #0
 800f450:	4606      	mov	r6, r0
 800f452:	460f      	mov	r7, r1
 800f454:	4625      	mov	r5, r4
 800f456:	42a7      	cmp	r7, r4
 800f458:	dd07      	ble.n	800f46a <GUI_UC__NumBytes2NumChars+0x1e>
 800f45a:	4b05      	ldr	r3, [pc, #20]	; (800f470 <GUI_UC__NumBytes2NumChars+0x24>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	1930      	adds	r0, r6, r4
 800f460:	685b      	ldr	r3, [r3, #4]
 800f462:	4798      	blx	r3
 800f464:	3501      	adds	r5, #1
 800f466:	4404      	add	r4, r0
 800f468:	e7f5      	b.n	800f456 <GUI_UC__NumBytes2NumChars+0xa>
 800f46a:	4628      	mov	r0, r5
 800f46c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f46e:	bf00      	nop
 800f470:	20021c04 	.word	0x20021c04

0800f474 <_OnExit>:
 800f474:	4a03      	ldr	r2, [pc, #12]	; (800f484 <_OnExit+0x10>)
 800f476:	2300      	movs	r3, #0
 800f478:	6013      	str	r3, [r2, #0]
 800f47a:	4a03      	ldr	r2, [pc, #12]	; (800f488 <_OnExit+0x14>)
 800f47c:	6013      	str	r3, [r2, #0]
 800f47e:	4a03      	ldr	r2, [pc, #12]	; (800f48c <_OnExit+0x18>)
 800f480:	6013      	str	r3, [r2, #0]
 800f482:	4770      	bx	lr
 800f484:	2000163c 	.word	0x2000163c
 800f488:	20001640 	.word	0x20001640
 800f48c:	2000164c 	.word	0x2000164c

0800f490 <GUI_TIMER_Exec>:
 800f490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f494:	4b19      	ldr	r3, [pc, #100]	; (800f4fc <GUI_TIMER_Exec+0x6c>)
 800f496:	681f      	ldr	r7, [r3, #0]
 800f498:	b085      	sub	sp, #20
 800f49a:	2500      	movs	r5, #0
 800f49c:	4698      	mov	r8, r3
 800f49e:	f8d8 3000 	ldr.w	r3, [r8]
 800f4a2:	4c16      	ldr	r4, [pc, #88]	; (800f4fc <GUI_TIMER_Exec+0x6c>)
 800f4a4:	b333      	cbz	r3, 800f4f4 <GUI_TIMER_Exec+0x64>
 800f4a6:	f000 f991 	bl	800f7cc <GUI_GetTime>
 800f4aa:	4606      	mov	r6, r0
 800f4ac:	6820      	ldr	r0, [r4, #0]
 800f4ae:	f001 fac7 	bl	8010a40 <GUI_ALLOC_LockH>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	a804      	add	r0, sp, #16
 800f4b6:	6959      	ldr	r1, [r3, #20]
 800f4b8:	f840 3d10 	str.w	r3, [r0, #-16]!
 800f4bc:	1b89      	subs	r1, r1, r6
 800f4be:	2900      	cmp	r1, #0
 800f4c0:	dc13      	bgt.n	800f4ea <GUI_TIMER_Exec+0x5a>
 800f4c2:	6821      	ldr	r1, [r4, #0]
 800f4c4:	9103      	str	r1, [sp, #12]
 800f4c6:	9601      	str	r6, [sp, #4]
 800f4c8:	6919      	ldr	r1, [r3, #16]
 800f4ca:	685e      	ldr	r6, [r3, #4]
 800f4cc:	9102      	str	r1, [sp, #8]
 800f4ce:	4668      	mov	r0, sp
 800f4d0:	6026      	str	r6, [r4, #0]
 800f4d2:	f8d3 9000 	ldr.w	r9, [r3]
 800f4d6:	f001 fac1 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800f4da:	a801      	add	r0, sp, #4
 800f4dc:	47c8      	blx	r9
 800f4de:	b14e      	cbz	r6, 800f4f4 <GUI_TIMER_Exec+0x64>
 800f4e0:	6823      	ldr	r3, [r4, #0]
 800f4e2:	42bb      	cmp	r3, r7
 800f4e4:	d005      	beq.n	800f4f2 <GUI_TIMER_Exec+0x62>
 800f4e6:	2501      	movs	r5, #1
 800f4e8:	e7d9      	b.n	800f49e <GUI_TIMER_Exec+0xe>
 800f4ea:	4668      	mov	r0, sp
 800f4ec:	f001 fab6 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800f4f0:	e000      	b.n	800f4f4 <GUI_TIMER_Exec+0x64>
 800f4f2:	2500      	movs	r5, #0
 800f4f4:	4628      	mov	r0, r5
 800f4f6:	b005      	add	sp, #20
 800f4f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f4fc:	20001640 	.word	0x20001640

0800f500 <_Link>:
 800f500:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f502:	4c25      	ldr	r4, [pc, #148]	; (800f598 <_Link+0x98>)
 800f504:	b085      	sub	sp, #20
 800f506:	4605      	mov	r5, r0
 800f508:	f001 fa9a 	bl	8010a40 <GUI_ALLOC_LockH>
 800f50c:	6823      	ldr	r3, [r4, #0]
 800f50e:	9001      	str	r0, [sp, #4]
 800f510:	b913      	cbnz	r3, 800f518 <_Link+0x18>
 800f512:	6025      	str	r5, [r4, #0]
 800f514:	6043      	str	r3, [r0, #4]
 800f516:	e039      	b.n	800f58c <_Link+0x8c>
 800f518:	4618      	mov	r0, r3
 800f51a:	f001 fa91 	bl	8010a40 <GUI_ALLOC_LockH>
 800f51e:	ab04      	add	r3, sp, #16
 800f520:	6946      	ldr	r6, [r0, #20]
 800f522:	f843 0d10 	str.w	r0, [r3, #-16]!
 800f526:	4668      	mov	r0, sp
 800f528:	f001 fa98 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800f52c:	9b01      	ldr	r3, [sp, #4]
 800f52e:	695a      	ldr	r2, [r3, #20]
 800f530:	1b92      	subs	r2, r2, r6
 800f532:	2a00      	cmp	r2, #0
 800f534:	dc03      	bgt.n	800f53e <_Link+0x3e>
 800f536:	6822      	ldr	r2, [r4, #0]
 800f538:	605a      	str	r2, [r3, #4]
 800f53a:	6025      	str	r5, [r4, #0]
 800f53c:	e026      	b.n	800f58c <_Link+0x8c>
 800f53e:	6826      	ldr	r6, [r4, #0]
 800f540:	4630      	mov	r0, r6
 800f542:	f001 fa7d 	bl	8010a40 <GUI_ALLOC_LockH>
 800f546:	ac04      	add	r4, sp, #16
 800f548:	6846      	ldr	r6, [r0, #4]
 800f54a:	f844 0d08 	str.w	r0, [r4, #-8]!
 800f54e:	b1be      	cbz	r6, 800f580 <_Link+0x80>
 800f550:	4630      	mov	r0, r6
 800f552:	f001 fa75 	bl	8010a40 <GUI_ALLOC_LockH>
 800f556:	ab04      	add	r3, sp, #16
 800f558:	6947      	ldr	r7, [r0, #20]
 800f55a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800f55e:	4618      	mov	r0, r3
 800f560:	f001 fa7c 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800f564:	9a01      	ldr	r2, [sp, #4]
 800f566:	6953      	ldr	r3, [r2, #20]
 800f568:	1bdb      	subs	r3, r3, r7
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	9b02      	ldr	r3, [sp, #8]
 800f56e:	dc02      	bgt.n	800f576 <_Link+0x76>
 800f570:	6056      	str	r6, [r2, #4]
 800f572:	605d      	str	r5, [r3, #4]
 800f574:	e007      	b.n	800f586 <_Link+0x86>
 800f576:	4620      	mov	r0, r4
 800f578:	685e      	ldr	r6, [r3, #4]
 800f57a:	f001 fa6f 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800f57e:	e7df      	b.n	800f540 <_Link+0x40>
 800f580:	9b01      	ldr	r3, [sp, #4]
 800f582:	605e      	str	r6, [r3, #4]
 800f584:	6045      	str	r5, [r0, #4]
 800f586:	4620      	mov	r0, r4
 800f588:	f001 fa68 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800f58c:	a801      	add	r0, sp, #4
 800f58e:	f001 fa65 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800f592:	b005      	add	sp, #20
 800f594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f596:	bf00      	nop
 800f598:	20001640 	.word	0x20001640

0800f59c <_Unlink>:
 800f59c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f59e:	4605      	mov	r5, r0
 800f5a0:	b1f0      	cbz	r0, 800f5e0 <_Unlink+0x44>
 800f5a2:	f001 fa4d 	bl	8010a40 <GUI_ALLOC_LockH>
 800f5a6:	4b0f      	ldr	r3, [pc, #60]	; (800f5e4 <_Unlink+0x48>)
 800f5a8:	9000      	str	r0, [sp, #0]
 800f5aa:	681c      	ldr	r4, [r3, #0]
 800f5ac:	42ac      	cmp	r4, r5
 800f5ae:	d104      	bne.n	800f5ba <_Unlink+0x1e>
 800f5b0:	6842      	ldr	r2, [r0, #4]
 800f5b2:	601a      	str	r2, [r3, #0]
 800f5b4:	e011      	b.n	800f5da <_Unlink+0x3e>
 800f5b6:	f001 fa51 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800f5ba:	b174      	cbz	r4, 800f5da <_Unlink+0x3e>
 800f5bc:	4620      	mov	r0, r4
 800f5be:	f001 fa3f 	bl	8010a40 <GUI_ALLOC_LockH>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	a802      	add	r0, sp, #8
 800f5c6:	685c      	ldr	r4, [r3, #4]
 800f5c8:	f840 3d04 	str.w	r3, [r0, #-4]!
 800f5cc:	42ac      	cmp	r4, r5
 800f5ce:	d1f2      	bne.n	800f5b6 <_Unlink+0x1a>
 800f5d0:	9a00      	ldr	r2, [sp, #0]
 800f5d2:	6852      	ldr	r2, [r2, #4]
 800f5d4:	605a      	str	r2, [r3, #4]
 800f5d6:	f001 fa41 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800f5da:	4668      	mov	r0, sp
 800f5dc:	f001 fa3e 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800f5e0:	b003      	add	sp, #12
 800f5e2:	bd30      	pop	{r4, r5, pc}
 800f5e4:	20001640 	.word	0x20001640

0800f5e8 <GUI_TIMER__GetFirstTimer>:
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f5ec:	6003      	str	r3, [r0, #0]
 800f5ee:	4b09      	ldr	r3, [pc, #36]	; (800f614 <GUI_TIMER__GetFirstTimer+0x2c>)
 800f5f0:	681c      	ldr	r4, [r3, #0]
 800f5f2:	4605      	mov	r5, r0
 800f5f4:	b154      	cbz	r4, 800f60c <GUI_TIMER__GetFirstTimer+0x24>
 800f5f6:	4620      	mov	r0, r4
 800f5f8:	f001 fa22 	bl	8010a40 <GUI_ALLOC_LockH>
 800f5fc:	ab02      	add	r3, sp, #8
 800f5fe:	6902      	ldr	r2, [r0, #16]
 800f600:	f843 0d04 	str.w	r0, [r3, #-4]!
 800f604:	602a      	str	r2, [r5, #0]
 800f606:	4618      	mov	r0, r3
 800f608:	f001 fa28 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800f60c:	4620      	mov	r0, r4
 800f60e:	b003      	add	sp, #12
 800f610:	bd30      	pop	{r4, r5, pc}
 800f612:	bf00      	nop
 800f614:	2000163c 	.word	0x2000163c

0800f618 <GUI_TIMER__GetNextTimerLin>:
 800f618:	2300      	movs	r3, #0
 800f61a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f61c:	600b      	str	r3, [r1, #0]
 800f61e:	460e      	mov	r6, r1
 800f620:	4604      	mov	r4, r0
 800f622:	b190      	cbz	r0, 800f64a <GUI_TIMER__GetNextTimerLin+0x32>
 800f624:	f001 fa0c 	bl	8010a40 <GUI_ALLOC_LockH>
 800f628:	ad02      	add	r5, sp, #8
 800f62a:	6884      	ldr	r4, [r0, #8]
 800f62c:	f845 0d04 	str.w	r0, [r5, #-4]!
 800f630:	b144      	cbz	r4, 800f644 <GUI_TIMER__GetNextTimerLin+0x2c>
 800f632:	4628      	mov	r0, r5
 800f634:	f001 fa12 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800f638:	4620      	mov	r0, r4
 800f63a:	f001 fa01 	bl	8010a40 <GUI_ALLOC_LockH>
 800f63e:	6903      	ldr	r3, [r0, #16]
 800f640:	9001      	str	r0, [sp, #4]
 800f642:	6033      	str	r3, [r6, #0]
 800f644:	4628      	mov	r0, r5
 800f646:	f001 fa09 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800f64a:	4620      	mov	r0, r4
 800f64c:	b002      	add	sp, #8
 800f64e:	bd70      	pop	{r4, r5, r6, pc}

0800f650 <GUI_TIMER_Create>:
 800f650:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f654:	4681      	mov	r9, r0
 800f656:	201c      	movs	r0, #28
 800f658:	460e      	mov	r6, r1
 800f65a:	4690      	mov	r8, r2
 800f65c:	461f      	mov	r7, r3
 800f65e:	f001 fc60 	bl	8010f22 <GUI_ALLOC_AllocZero>
 800f662:	4604      	mov	r4, r0
 800f664:	2800      	cmp	r0, #0
 800f666:	d031      	beq.n	800f6cc <GUI_TIMER_Create+0x7c>
 800f668:	4b1a      	ldr	r3, [pc, #104]	; (800f6d4 <GUI_TIMER_Create+0x84>)
 800f66a:	4a1b      	ldr	r2, [pc, #108]	; (800f6d8 <GUI_TIMER_Create+0x88>)
 800f66c:	601a      	str	r2, [r3, #0]
 800f66e:	f001 f9e7 	bl	8010a40 <GUI_ALLOC_LockH>
 800f672:	9000      	str	r0, [sp, #0]
 800f674:	b916      	cbnz	r6, 800f67c <GUI_TIMER_Create+0x2c>
 800f676:	f000 f8a9 	bl	800f7cc <GUI_GetTime>
 800f67a:	4606      	mov	r6, r0
 800f67c:	a802      	add	r0, sp, #8
 800f67e:	f850 5d08 	ldr.w	r5, [r0, #-8]!
 800f682:	4668      	mov	r0, sp
 800f684:	616e      	str	r6, [r5, #20]
 800f686:	f8c5 9000 	str.w	r9, [r5]
 800f68a:	f8c5 8010 	str.w	r8, [r5, #16]
 800f68e:	81af      	strh	r7, [r5, #12]
 800f690:	f001 f9e4 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800f694:	4620      	mov	r0, r4
 800f696:	f7ff ff33 	bl	800f500 <_Link>
 800f69a:	4b10      	ldr	r3, [pc, #64]	; (800f6dc <GUI_TIMER_Create+0x8c>)
 800f69c:	681a      	ldr	r2, [r3, #0]
 800f69e:	b932      	cbnz	r2, 800f6ae <GUI_TIMER_Create+0x5e>
 800f6a0:	2201      	movs	r2, #1
 800f6a2:	480f      	ldr	r0, [pc, #60]	; (800f6e0 <GUI_TIMER_Create+0x90>)
 800f6a4:	601a      	str	r2, [r3, #0]
 800f6a6:	4b0f      	ldr	r3, [pc, #60]	; (800f6e4 <GUI_TIMER_Create+0x94>)
 800f6a8:	6003      	str	r3, [r0, #0]
 800f6aa:	f000 fdc7 	bl	801023c <GUI__RegisterExit>
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	f001 f9c6 	bl	8010a40 <GUI_ALLOC_LockH>
 800f6b4:	4a0c      	ldr	r2, [pc, #48]	; (800f6e8 <GUI_TIMER_Create+0x98>)
 800f6b6:	9001      	str	r0, [sp, #4]
 800f6b8:	6813      	ldr	r3, [r2, #0]
 800f6ba:	b913      	cbnz	r3, 800f6c2 <GUI_TIMER_Create+0x72>
 800f6bc:	6014      	str	r4, [r2, #0]
 800f6be:	6083      	str	r3, [r0, #8]
 800f6c0:	e001      	b.n	800f6c6 <GUI_TIMER_Create+0x76>
 800f6c2:	6083      	str	r3, [r0, #8]
 800f6c4:	6014      	str	r4, [r2, #0]
 800f6c6:	a801      	add	r0, sp, #4
 800f6c8:	f001 f9c8 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800f6cc:	4620      	mov	r0, r4
 800f6ce:	b003      	add	sp, #12
 800f6d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6d4:	20021bf4 	.word	0x20021bf4
 800f6d8:	0800f491 	.word	0x0800f491
 800f6dc:	2000164c 	.word	0x2000164c
 800f6e0:	20001644 	.word	0x20001644
 800f6e4:	0800f475 	.word	0x0800f475
 800f6e8:	2000163c 	.word	0x2000163c

0800f6ec <GUI_TIMER_Delete>:
 800f6ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f6ee:	4604      	mov	r4, r0
 800f6f0:	b358      	cbz	r0, 800f74a <GUI_TIMER_Delete+0x5e>
 800f6f2:	4d17      	ldr	r5, [pc, #92]	; (800f750 <GUI_TIMER_Delete+0x64>)
 800f6f4:	682e      	ldr	r6, [r5, #0]
 800f6f6:	4286      	cmp	r6, r0
 800f6f8:	d10b      	bne.n	800f712 <GUI_TIMER_Delete+0x26>
 800f6fa:	f001 f9a1 	bl	8010a40 <GUI_ALLOC_LockH>
 800f6fe:	ab02      	add	r3, sp, #8
 800f700:	6882      	ldr	r2, [r0, #8]
 800f702:	f843 0d04 	str.w	r0, [r3, #-4]!
 800f706:	602a      	str	r2, [r5, #0]
 800f708:	4618      	mov	r0, r3
 800f70a:	e016      	b.n	800f73a <GUI_TIMER_Delete+0x4e>
 800f70c:	4668      	mov	r0, sp
 800f70e:	f001 f9a5 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800f712:	4630      	mov	r0, r6
 800f714:	f001 f994 	bl	8010a40 <GUI_ALLOC_LockH>
 800f718:	6886      	ldr	r6, [r0, #8]
 800f71a:	ad02      	add	r5, sp, #8
 800f71c:	42a6      	cmp	r6, r4
 800f71e:	f845 0d08 	str.w	r0, [r5, #-8]!
 800f722:	d1f3      	bne.n	800f70c <GUI_TIMER_Delete+0x20>
 800f724:	4620      	mov	r0, r4
 800f726:	f001 f98b 	bl	8010a40 <GUI_ALLOC_LockH>
 800f72a:	9b00      	ldr	r3, [sp, #0]
 800f72c:	6882      	ldr	r2, [r0, #8]
 800f72e:	9001      	str	r0, [sp, #4]
 800f730:	609a      	str	r2, [r3, #8]
 800f732:	a801      	add	r0, sp, #4
 800f734:	f001 f992 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800f738:	4668      	mov	r0, sp
 800f73a:	f001 f98f 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800f73e:	4620      	mov	r0, r4
 800f740:	f7ff ff2c 	bl	800f59c <_Unlink>
 800f744:	4620      	mov	r0, r4
 800f746:	f001 f9b5 	bl	8010ab4 <GUI_ALLOC_Free>
 800f74a:	b002      	add	sp, #8
 800f74c:	bd70      	pop	{r4, r5, r6, pc}
 800f74e:	bf00      	nop
 800f750:	2000163c 	.word	0x2000163c

0800f754 <GUI_TIMER_SetPeriod>:
 800f754:	b513      	push	{r0, r1, r4, lr}
 800f756:	460c      	mov	r4, r1
 800f758:	b140      	cbz	r0, 800f76c <GUI_TIMER_SetPeriod+0x18>
 800f75a:	f001 f971 	bl	8010a40 <GUI_ALLOC_LockH>
 800f75e:	ab02      	add	r3, sp, #8
 800f760:	6184      	str	r4, [r0, #24]
 800f762:	f843 0d04 	str.w	r0, [r3, #-4]!
 800f766:	4618      	mov	r0, r3
 800f768:	f001 f978 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800f76c:	b002      	add	sp, #8
 800f76e:	bd10      	pop	{r4, pc}

0800f770 <GUI_TIMER_Restart>:
 800f770:	b513      	push	{r0, r1, r4, lr}
 800f772:	4604      	mov	r4, r0
 800f774:	b198      	cbz	r0, 800f79e <GUI_TIMER_Restart+0x2e>
 800f776:	f001 f963 	bl	8010a40 <GUI_ALLOC_LockH>
 800f77a:	9001      	str	r0, [sp, #4]
 800f77c:	f000 f826 	bl	800f7cc <GUI_GetTime>
 800f780:	ab02      	add	r3, sp, #8
 800f782:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f786:	6991      	ldr	r1, [r2, #24]
 800f788:	4408      	add	r0, r1
 800f78a:	6150      	str	r0, [r2, #20]
 800f78c:	4618      	mov	r0, r3
 800f78e:	f001 f965 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800f792:	4620      	mov	r0, r4
 800f794:	f7ff ff02 	bl	800f59c <_Unlink>
 800f798:	4620      	mov	r0, r4
 800f79a:	f7ff feb1 	bl	800f500 <_Link>
 800f79e:	b002      	add	sp, #8
 800f7a0:	bd10      	pop	{r4, pc}

0800f7a2 <GUI_TIMER_GetFlag>:
 800f7a2:	b513      	push	{r0, r1, r4, lr}
 800f7a4:	460c      	mov	r4, r1
 800f7a6:	b168      	cbz	r0, 800f7c4 <GUI_TIMER_GetFlag+0x22>
 800f7a8:	f001 f94a 	bl	8010a40 <GUI_ALLOC_LockH>
 800f7ac:	ab02      	add	r3, sp, #8
 800f7ae:	8982      	ldrh	r2, [r0, #12]
 800f7b0:	f843 0d04 	str.w	r0, [r3, #-4]!
 800f7b4:	4214      	tst	r4, r2
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	bf0c      	ite	eq
 800f7ba:	2400      	moveq	r4, #0
 800f7bc:	2401      	movne	r4, #1
 800f7be:	f001 f94d 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800f7c2:	e000      	b.n	800f7c6 <GUI_TIMER_GetFlag+0x24>
 800f7c4:	2401      	movs	r4, #1
 800f7c6:	4620      	mov	r0, r4
 800f7c8:	b002      	add	sp, #8
 800f7ca:	bd10      	pop	{r4, pc}

0800f7cc <GUI_GetTime>:
 800f7cc:	f7f7 bb52 	b.w	8006e74 <GUI_X_GetTime>

0800f7d0 <GUI_TOUCH_StoreStateEx>:
 800f7d0:	b538      	push	{r3, r4, r5, lr}
 800f7d2:	4d08      	ldr	r5, [pc, #32]	; (800f7f4 <GUI_TOUCH_StoreStateEx+0x24>)
 800f7d4:	220c      	movs	r2, #12
 800f7d6:	4629      	mov	r1, r5
 800f7d8:	4604      	mov	r4, r0
 800f7da:	f009 fa11 	bl	8018c00 <memcmp>
 800f7de:	b140      	cbz	r0, 800f7f2 <GUI_TOUCH_StoreStateEx+0x22>
 800f7e0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800f7e4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800f7e8:	4620      	mov	r0, r4
 800f7ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7ee:	f000 b90f 	b.w	800fa10 <GUI_PID_StoreState>
 800f7f2:	bd38      	pop	{r3, r4, r5, pc}
 800f7f4:	20001650 	.word	0x20001650

0800f7f8 <GUI_SetTextMode>:
 800f7f8:	4b03      	ldr	r3, [pc, #12]	; (800f808 <GUI_SetTextMode+0x10>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 800f800:	8558      	strh	r0, [r3, #42]	; 0x2a
 800f802:	4610      	mov	r0, r2
 800f804:	4770      	bx	lr
 800f806:	bf00      	nop
 800f808:	20000308 	.word	0x20000308

0800f80c <GUI_SetFont>:
 800f80c:	4b03      	ldr	r3, [pc, #12]	; (800f81c <GUI_SetFont+0x10>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	69d9      	ldr	r1, [r3, #28]
 800f812:	b100      	cbz	r0, 800f816 <GUI_SetFont+0xa>
 800f814:	61d8      	str	r0, [r3, #28]
 800f816:	4608      	mov	r0, r1
 800f818:	4770      	bx	lr
 800f81a:	bf00      	nop
 800f81c:	20000308 	.word	0x20000308

0800f820 <GUI_SetDrawMode>:
 800f820:	f7fe beca 	b.w	800e5b8 <LCD_SetDrawMode>

0800f824 <GL_SetDefault>:
 800f824:	b508      	push	{r3, lr}
 800f826:	2000      	movs	r0, #0
 800f828:	f000 f81c 	bl	800f864 <GUI_SetBkColor>
 800f82c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800f830:	f000 f81a 	bl	800f868 <GUI_SetColor>
 800f834:	2001      	movs	r0, #1
 800f836:	f000 f8b9 	bl	800f9ac <GUI_SetPenSize>
 800f83a:	2000      	movs	r0, #0
 800f83c:	f007 fca8 	bl	8017190 <GUI_SetTextAlign>
 800f840:	2000      	movs	r0, #0
 800f842:	f7ff ffd9 	bl	800f7f8 <GUI_SetTextMode>
 800f846:	2000      	movs	r0, #0
 800f848:	f7ff ffea 	bl	800f820 <GUI_SetDrawMode>
 800f84c:	4b04      	ldr	r3, [pc, #16]	; (800f860 <GL_SetDefault+0x3c>)
 800f84e:	6818      	ldr	r0, [r3, #0]
 800f850:	f7ff ffdc 	bl	800f80c <GUI_SetFont>
 800f854:	2000      	movs	r0, #0
 800f856:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f85a:	f007 bcbd 	b.w	80171d8 <GUI_SetLineStyle>
 800f85e:	bf00      	nop
 800f860:	2000030c 	.word	0x2000030c

0800f864 <GUI_SetBkColor>:
 800f864:	f7ff b9f2 	b.w	800ec4c <LCD_SetBkColor>

0800f868 <GUI_SetColor>:
 800f868:	f7ff b9f8 	b.w	800ec5c <LCD_SetColor>

0800f86c <GUI__AlphaSuppressMixing>:
 800f86c:	4b07      	ldr	r3, [pc, #28]	; (800f88c <GUI__AlphaSuppressMixing+0x20>)
 800f86e:	b510      	push	{r4, lr}
 800f870:	681c      	ldr	r4, [r3, #0]
 800f872:	b120      	cbz	r0, 800f87e <GUI__AlphaSuppressMixing+0x12>
 800f874:	2201      	movs	r2, #1
 800f876:	601a      	str	r2, [r3, #0]
 800f878:	f04f 30ff 	mov.w	r0, #4294967295
 800f87c:	e002      	b.n	800f884 <GUI__AlphaSuppressMixing+0x18>
 800f87e:	6018      	str	r0, [r3, #0]
 800f880:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800f884:	f006 fc4a 	bl	801611c <LCD_AA_SetAndMask>
 800f888:	4620      	mov	r0, r4
 800f88a:	bd10      	pop	{r4, pc}
 800f88c:	2000165c 	.word	0x2000165c

0800f890 <GUI_GetCursorLayer>:
 800f890:	2801      	cmp	r0, #1
 800f892:	bf9a      	itte	ls
 800f894:	4b02      	ldrls	r3, [pc, #8]	; (800f8a0 <GUI_GetCursorLayer+0x10>)
 800f896:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800f89a:	2000      	movhi	r0, #0
 800f89c:	4770      	bx	lr
 800f89e:	bf00      	nop
 800f8a0:	20001660 	.word	0x20001660

0800f8a4 <GUI_GetLayerPosEx>:
 800f8a4:	b538      	push	{r3, r4, r5, lr}
 800f8a6:	460d      	mov	r5, r1
 800f8a8:	4614      	mov	r4, r2
 800f8aa:	f7fe fd67 	bl	800e37c <LCD_GetPosEx>
 800f8ae:	b110      	cbz	r0, 800f8b6 <GUI_GetLayerPosEx+0x12>
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	602b      	str	r3, [r5, #0]
 800f8b4:	6023      	str	r3, [r4, #0]
 800f8b6:	bd38      	pop	{r3, r4, r5, pc}

0800f8b8 <GUI_SelectLayer>:
 800f8b8:	b538      	push	{r3, r4, r5, lr}
 800f8ba:	4b06      	ldr	r3, [pc, #24]	; (800f8d4 <GUI_SelectLayer+0x1c>)
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	2801      	cmp	r0, #1
 800f8c0:	4604      	mov	r4, r0
 800f8c2:	7c5d      	ldrb	r5, [r3, #17]
 800f8c4:	d802      	bhi.n	800f8cc <GUI_SelectLayer+0x14>
 800f8c6:	7458      	strb	r0, [r3, #17]
 800f8c8:	f000 f80a 	bl	800f8e0 <GUI_SelectLCD>
 800f8cc:	4b02      	ldr	r3, [pc, #8]	; (800f8d8 <GUI_SelectLayer+0x20>)
 800f8ce:	4628      	mov	r0, r5
 800f8d0:	601c      	str	r4, [r3, #0]
 800f8d2:	bd38      	pop	{r3, r4, r5, pc}
 800f8d4:	20000308 	.word	0x20000308
 800f8d8:	20021b98 	.word	0x20021b98

0800f8dc <GUI_SetLayerPosEx>:
 800f8dc:	f7fe bd1e 	b.w	800e31c <LCD_SetPosEx>

0800f8e0 <GUI_SelectLCD>:
 800f8e0:	b508      	push	{r3, lr}
 800f8e2:	f005 fff9 	bl	80158d8 <LCD_SelectLCD>
 800f8e6:	f7fe fca9 	bl	800e23c <LCD_UpdateColorIndices>
 800f8ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f8ee:	f7fc be19 	b.w	800c524 <WM_Activate>
	...

0800f8f4 <GUI_SaveContext_W>:
 800f8f4:	b508      	push	{r3, lr}
 800f8f6:	4b03      	ldr	r3, [pc, #12]	; (800f904 <GUI_SaveContext_W+0x10>)
 800f8f8:	2270      	movs	r2, #112	; 0x70
 800f8fa:	6819      	ldr	r1, [r3, #0]
 800f8fc:	f009 f98f 	bl	8018c1e <memcpy>
 800f900:	bd08      	pop	{r3, pc}
 800f902:	bf00      	nop
 800f904:	20000308 	.word	0x20000308

0800f908 <GUI_RestoreContext>:
 800f908:	b508      	push	{r3, lr}
 800f90a:	4b03      	ldr	r3, [pc, #12]	; (800f918 <GUI_RestoreContext+0x10>)
 800f90c:	4601      	mov	r1, r0
 800f90e:	2270      	movs	r2, #112	; 0x70
 800f910:	6818      	ldr	r0, [r3, #0]
 800f912:	f009 f984 	bl	8018c1e <memcpy>
 800f916:	bd08      	pop	{r3, pc}
 800f918:	20000308 	.word	0x20000308

0800f91c <GUI_RectsIntersect>:
 800f91c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800f920:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800f924:	429a      	cmp	r2, r3
 800f926:	dc14      	bgt.n	800f952 <GUI_RectsIntersect+0x36>
 800f928:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800f92c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800f930:	429a      	cmp	r2, r3
 800f932:	dc0e      	bgt.n	800f952 <GUI_RectsIntersect+0x36>
 800f934:	f9b0 2000 	ldrsh.w	r2, [r0]
 800f938:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800f93c:	429a      	cmp	r2, r3
 800f93e:	dc08      	bgt.n	800f952 <GUI_RectsIntersect+0x36>
 800f940:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800f944:	f9b1 2000 	ldrsh.w	r2, [r1]
 800f948:	429a      	cmp	r2, r3
 800f94a:	bfcc      	ite	gt
 800f94c:	2000      	movgt	r0, #0
 800f94e:	2001      	movle	r0, #1
 800f950:	4770      	bx	lr
 800f952:	2000      	movs	r0, #0
 800f954:	4770      	bx	lr

0800f956 <GUI_ALLOC_Realloc>:
 800f956:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f958:	4604      	mov	r4, r0
 800f95a:	4608      	mov	r0, r1
 800f95c:	460e      	mov	r6, r1
 800f95e:	f001 fac7 	bl	8010ef0 <GUI_ALLOC_AllocNoInit>
 800f962:	4605      	mov	r5, r0
 800f964:	b1f8      	cbz	r0, 800f9a6 <GUI_ALLOC_Realloc+0x50>
 800f966:	b1f4      	cbz	r4, 800f9a6 <GUI_ALLOC_Realloc+0x50>
 800f968:	4620      	mov	r0, r4
 800f96a:	f001 f897 	bl	8010a9c <GUI_ALLOC_GetSize>
 800f96e:	42b0      	cmp	r0, r6
 800f970:	bfb4      	ite	lt
 800f972:	4607      	movlt	r7, r0
 800f974:	4637      	movge	r7, r6
 800f976:	4628      	mov	r0, r5
 800f978:	f001 f862 	bl	8010a40 <GUI_ALLOC_LockH>
 800f97c:	9000      	str	r0, [sp, #0]
 800f97e:	4620      	mov	r0, r4
 800f980:	f001 f85e 	bl	8010a40 <GUI_ALLOC_LockH>
 800f984:	ae02      	add	r6, sp, #8
 800f986:	4601      	mov	r1, r0
 800f988:	463a      	mov	r2, r7
 800f98a:	9001      	str	r0, [sp, #4]
 800f98c:	f856 0d08 	ldr.w	r0, [r6, #-8]!
 800f990:	f009 f945 	bl	8018c1e <memcpy>
 800f994:	4668      	mov	r0, sp
 800f996:	f001 f861 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800f99a:	a801      	add	r0, sp, #4
 800f99c:	f001 f85e 	bl	8010a5c <GUI_ALLOC_UnlockH>
 800f9a0:	4620      	mov	r0, r4
 800f9a2:	f001 f887 	bl	8010ab4 <GUI_ALLOC_Free>
 800f9a6:	4628      	mov	r0, r5
 800f9a8:	b003      	add	sp, #12
 800f9aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f9ac <GUI_SetPenSize>:
 800f9ac:	4b02      	ldr	r3, [pc, #8]	; (800f9b8 <GUI_SetPenSize+0xc>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	7e1a      	ldrb	r2, [r3, #24]
 800f9b2:	7618      	strb	r0, [r3, #24]
 800f9b4:	4610      	mov	r0, r2
 800f9b6:	4770      	bx	lr
 800f9b8:	20000308 	.word	0x20000308

0800f9bc <GUI_PID_GetState>:
 800f9bc:	4a11      	ldr	r2, [pc, #68]	; (800fa04 <GUI_PID_GetState+0x48>)
 800f9be:	4912      	ldr	r1, [pc, #72]	; (800fa08 <GUI_PID_GetState+0x4c>)
 800f9c0:	6813      	ldr	r3, [r2, #0]
 800f9c2:	6809      	ldr	r1, [r1, #0]
 800f9c4:	428b      	cmp	r3, r1
 800f9c6:	b570      	push	{r4, r5, r6, lr}
 800f9c8:	4604      	mov	r4, r0
 800f9ca:	4616      	mov	r6, r2
 800f9cc:	4d0f      	ldr	r5, [pc, #60]	; (800fa0c <GUI_PID_GetState+0x50>)
 800f9ce:	d109      	bne.n	800f9e4 <GUI_PID_GetState+0x28>
 800f9d0:	42ab      	cmp	r3, r5
 800f9d2:	bf06      	itte	eq
 800f9d4:	333c      	addeq	r3, #60	; 0x3c
 800f9d6:	e893 0007 	ldmiaeq.w	r3, {r0, r1, r2}
 800f9da:	e913 0007 	ldmdbne	r3, {r0, r1, r2}
 800f9de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f9e2:	e00a      	b.n	800f9fa <GUI_PID_GetState+0x3e>
 800f9e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f9e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f9ec:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 800f9f0:	4293      	cmp	r3, r2
 800f9f2:	bf18      	it	ne
 800f9f4:	f103 050c 	addne.w	r5, r3, #12
 800f9f8:	6035      	str	r5, [r6, #0]
 800f9fa:	7a20      	ldrb	r0, [r4, #8]
 800f9fc:	3000      	adds	r0, #0
 800f9fe:	bf18      	it	ne
 800fa00:	2001      	movne	r0, #1
 800fa02:	bd70      	pop	{r4, r5, r6, pc}
 800fa04:	200002fc 	.word	0x200002fc
 800fa08:	200002f8 	.word	0x200002f8
 800fa0c:	2000166c 	.word	0x2000166c

0800fa10 <GUI_PID_StoreState>:
 800fa10:	4a21      	ldr	r2, [pc, #132]	; (800fa98 <GUI_PID_StoreState+0x88>)
 800fa12:	4922      	ldr	r1, [pc, #136]	; (800fa9c <GUI_PID_StoreState+0x8c>)
 800fa14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa18:	6011      	str	r1, [r2, #0]
 800fa1a:	4f21      	ldr	r7, [pc, #132]	; (800faa0 <GUI_PID_StoreState+0x90>)
 800fa1c:	4921      	ldr	r1, [pc, #132]	; (800faa4 <GUI_PID_StoreState+0x94>)
 800fa1e:	683a      	ldr	r2, [r7, #0]
 800fa20:	680c      	ldr	r4, [r1, #0]
 800fa22:	4603      	mov	r3, r0
 800fa24:	4820      	ldr	r0, [pc, #128]	; (800faa8 <GUI_PID_StoreState+0x98>)
 800fa26:	4294      	cmp	r4, r2
 800fa28:	468c      	mov	ip, r1
 800fa2a:	f100 063c 	add.w	r6, r0, #60	; 0x3c
 800fa2e:	d017      	beq.n	800fa60 <GUI_PID_StoreState+0x50>
 800fa30:	4282      	cmp	r2, r0
 800fa32:	bf14      	ite	ne
 800fa34:	f1a2 010c 	subne.w	r1, r2, #12
 800fa38:	4631      	moveq	r1, r6
 800fa3a:	7a1d      	ldrb	r5, [r3, #8]
 800fa3c:	f891 8008 	ldrb.w	r8, [r1, #8]
 800fa40:	45a8      	cmp	r8, r5
 800fa42:	d10d      	bne.n	800fa60 <GUI_PID_StoreState+0x50>
 800fa44:	428c      	cmp	r4, r1
 800fa46:	d00b      	beq.n	800fa60 <GUI_PID_StoreState+0x50>
 800fa48:	4281      	cmp	r1, r0
 800fa4a:	bf14      	ite	ne
 800fa4c:	390c      	subne	r1, #12
 800fa4e:	4917      	ldreq	r1, [pc, #92]	; (800faac <GUI_PID_StoreState+0x9c>)
 800fa50:	7a09      	ldrb	r1, [r1, #8]
 800fa52:	42a9      	cmp	r1, r5
 800fa54:	d104      	bne.n	800fa60 <GUI_PID_StoreState+0x50>
 800fa56:	4282      	cmp	r2, r0
 800fa58:	bf14      	ite	ne
 800fa5a:	3a0c      	subne	r2, #12
 800fa5c:	4a13      	ldreq	r2, [pc, #76]	; (800faac <GUI_PID_StoreState+0x9c>)
 800fa5e:	603a      	str	r2, [r7, #0]
 800fa60:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fa64:	683d      	ldr	r5, [r7, #0]
 800fa66:	42b5      	cmp	r5, r6
 800fa68:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800fa6c:	bf0c      	ite	eq
 800fa6e:	4d0e      	ldreq	r5, [pc, #56]	; (800faa8 <GUI_PID_StoreState+0x98>)
 800fa70:	350c      	addne	r5, #12
 800fa72:	42ac      	cmp	r4, r5
 800fa74:	603d      	str	r5, [r7, #0]
 800fa76:	d105      	bne.n	800fa84 <GUI_PID_StoreState+0x74>
 800fa78:	42b4      	cmp	r4, r6
 800fa7a:	bf14      	ite	ne
 800fa7c:	340c      	addne	r4, #12
 800fa7e:	4c0a      	ldreq	r4, [pc, #40]	; (800faa8 <GUI_PID_StoreState+0x98>)
 800fa80:	f8cc 4000 	str.w	r4, [ip]
 800fa84:	4a0a      	ldr	r2, [pc, #40]	; (800fab0 <GUI_PID_StoreState+0xa0>)
 800fa86:	6812      	ldr	r2, [r2, #0]
 800fa88:	b10a      	cbz	r2, 800fa8e <GUI_PID_StoreState+0x7e>
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	4790      	blx	r2
 800fa8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa92:	f7ff bc8d 	b.w	800f3b0 <GUI_SignalEvent>
 800fa96:	bf00      	nop
 800fa98:	20021c18 	.word	0x20021c18
 800fa9c:	08014621 	.word	0x08014621
 800faa0:	200002f8 	.word	0x200002f8
 800faa4:	200002fc 	.word	0x200002fc
 800faa8:	2000166c 	.word	0x2000166c
 800faac:	200016a8 	.word	0x200016a8
 800fab0:	20001668 	.word	0x20001668

0800fab4 <GUI_PID_IsEmpty>:
 800fab4:	4b03      	ldr	r3, [pc, #12]	; (800fac4 <GUI_PID_IsEmpty+0x10>)
 800fab6:	6818      	ldr	r0, [r3, #0]
 800fab8:	4b03      	ldr	r3, [pc, #12]	; (800fac8 <GUI_PID_IsEmpty+0x14>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	1ac3      	subs	r3, r0, r3
 800fabe:	4258      	negs	r0, r3
 800fac0:	4158      	adcs	r0, r3
 800fac2:	4770      	bx	lr
 800fac4:	200002fc 	.word	0x200002fc
 800fac8:	200002f8 	.word	0x200002f8

0800facc <GUI_StoreKey>:
 800facc:	4b02      	ldr	r3, [pc, #8]	; (800fad8 <GUI_StoreKey+0xc>)
 800face:	681a      	ldr	r2, [r3, #0]
 800fad0:	b902      	cbnz	r2, 800fad4 <GUI_StoreKey+0x8>
 800fad2:	6018      	str	r0, [r3, #0]
 800fad4:	f7ff bc6c 	b.w	800f3b0 <GUI_SignalEvent>
 800fad8:	200016b4 	.word	0x200016b4

0800fadc <GUI_PollKeyMsg>:
 800fadc:	4a0a      	ldr	r2, [pc, #40]	; (800fb08 <GUI_PollKeyMsg+0x2c>)
 800fade:	490b      	ldr	r1, [pc, #44]	; (800fb0c <GUI_PollKeyMsg+0x30>)
 800fae0:	6813      	ldr	r3, [r2, #0]
 800fae2:	6809      	ldr	r1, [r1, #0]
 800fae4:	428b      	cmp	r3, r1
 800fae6:	b510      	push	{r4, lr}
 800fae8:	d00b      	beq.n	800fb02 <GUI_PollKeyMsg+0x26>
 800faea:	4c09      	ldr	r4, [pc, #36]	; (800fb10 <GUI_PollKeyMsg+0x34>)
 800faec:	42a3      	cmp	r3, r4
 800faee:	e893 0003 	ldmia.w	r3, {r0, r1}
 800faf2:	bf14      	ite	ne
 800faf4:	3308      	addne	r3, #8
 800faf6:	3b50      	subeq	r3, #80	; 0x50
 800faf8:	6013      	str	r3, [r2, #0]
 800fafa:	f004 ff9f 	bl	8014a3c <WM_OnKey>
 800fafe:	2001      	movs	r0, #1
 800fb00:	bd10      	pop	{r4, pc}
 800fb02:	2000      	movs	r0, #0
 800fb04:	bd10      	pop	{r4, pc}
 800fb06:	bf00      	nop
 800fb08:	20000304 	.word	0x20000304
 800fb0c:	20000300 	.word	0x20000300
 800fb10:	20001708 	.word	0x20001708

0800fb14 <GUI_MoveRect>:
 800fb14:	b168      	cbz	r0, 800fb32 <GUI_MoveRect+0x1e>
 800fb16:	8803      	ldrh	r3, [r0, #0]
 800fb18:	b289      	uxth	r1, r1
 800fb1a:	440b      	add	r3, r1
 800fb1c:	8003      	strh	r3, [r0, #0]
 800fb1e:	8883      	ldrh	r3, [r0, #4]
 800fb20:	4419      	add	r1, r3
 800fb22:	8843      	ldrh	r3, [r0, #2]
 800fb24:	8081      	strh	r1, [r0, #4]
 800fb26:	b292      	uxth	r2, r2
 800fb28:	4413      	add	r3, r2
 800fb2a:	8043      	strh	r3, [r0, #2]
 800fb2c:	88c3      	ldrh	r3, [r0, #6]
 800fb2e:	441a      	add	r2, r3
 800fb30:	80c2      	strh	r2, [r0, #6]
 800fb32:	4770      	bx	lr

0800fb34 <GUI_MergeRect>:
 800fb34:	b510      	push	{r4, lr}
 800fb36:	b338      	cbz	r0, 800fb88 <GUI_MergeRect+0x54>
 800fb38:	b309      	cbz	r1, 800fb7e <GUI_MergeRect+0x4a>
 800fb3a:	b30a      	cbz	r2, 800fb80 <GUI_MergeRect+0x4c>
 800fb3c:	f9b1 4000 	ldrsh.w	r4, [r1]
 800fb40:	f9b2 3000 	ldrsh.w	r3, [r2]
 800fb44:	429c      	cmp	r4, r3
 800fb46:	bfb8      	it	lt
 800fb48:	4623      	movlt	r3, r4
 800fb4a:	8003      	strh	r3, [r0, #0]
 800fb4c:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800fb50:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800fb54:	429c      	cmp	r4, r3
 800fb56:	bfb8      	it	lt
 800fb58:	4623      	movlt	r3, r4
 800fb5a:	8043      	strh	r3, [r0, #2]
 800fb5c:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800fb60:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800fb64:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800fb68:	429c      	cmp	r4, r3
 800fb6a:	bfa8      	it	ge
 800fb6c:	4623      	movge	r3, r4
 800fb6e:	8083      	strh	r3, [r0, #4]
 800fb70:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800fb74:	4299      	cmp	r1, r3
 800fb76:	bfa8      	it	ge
 800fb78:	460b      	movge	r3, r1
 800fb7a:	80c3      	strh	r3, [r0, #6]
 800fb7c:	bd10      	pop	{r4, pc}
 800fb7e:	4611      	mov	r1, r2
 800fb80:	680b      	ldr	r3, [r1, #0]
 800fb82:	6003      	str	r3, [r0, #0]
 800fb84:	684b      	ldr	r3, [r1, #4]
 800fb86:	6043      	str	r3, [r0, #4]
 800fb88:	bd10      	pop	{r4, pc}
	...

0800fb8c <GUI_MULTIBUF_ConfirmEx>:
 800fb8c:	4b08      	ldr	r3, [pc, #32]	; (800fbb0 <GUI_MULTIBUF_ConfirmEx+0x24>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	bf18      	it	ne
 800fb94:	2000      	movne	r0, #0
 800fb96:	4b07      	ldr	r3, [pc, #28]	; (800fbb4 <GUI_MULTIBUF_ConfirmEx+0x28>)
 800fb98:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800fb9c:	2a00      	cmp	r2, #0
 800fb9e:	db06      	blt.n	800fbae <GUI_MULTIBUF_ConfirmEx+0x22>
 800fba0:	4a05      	ldr	r2, [pc, #20]	; (800fbb8 <GUI_MULTIBUF_ConfirmEx+0x2c>)
 800fba2:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 800fba6:	f04f 32ff 	mov.w	r2, #4294967295
 800fbaa:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 800fbae:	4770      	bx	lr
 800fbb0:	20001720 	.word	0x20001720
 800fbb4:	20001718 	.word	0x20001718
 800fbb8:	20001710 	.word	0x20001710

0800fbbc <GUI_MULTIBUF_ConfigEx>:
 800fbbc:	4b05      	ldr	r3, [pc, #20]	; (800fbd4 <GUI_MULTIBUF_ConfigEx+0x18>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	bf18      	it	ne
 800fbc4:	2000      	movne	r0, #0
 800fbc6:	4b04      	ldr	r3, [pc, #16]	; (800fbd8 <GUI_MULTIBUF_ConfigEx+0x1c>)
 800fbc8:	2901      	cmp	r1, #1
 800fbca:	bfb8      	it	lt
 800fbcc:	2101      	movlt	r1, #1
 800fbce:	5419      	strb	r1, [r3, r0]
 800fbd0:	4770      	bx	lr
 800fbd2:	bf00      	nop
 800fbd4:	20001720 	.word	0x20001720
 800fbd8:	20021be0 	.word	0x20021be0

0800fbdc <GUI_InvertRect>:
 800fbdc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800fbe0:	4607      	mov	r7, r0
 800fbe2:	2001      	movs	r0, #1
 800fbe4:	469a      	mov	sl, r3
 800fbe6:	460e      	mov	r6, r1
 800fbe8:	4691      	mov	r9, r2
 800fbea:	f7ff fe19 	bl	800f820 <GUI_SetDrawMode>
 800fbee:	4b12      	ldr	r3, [pc, #72]	; (800fc38 <GUI_InvertRect+0x5c>)
 800fbf0:	681c      	ldr	r4, [r3, #0]
 800fbf2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800fbf4:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800fbf6:	442f      	add	r7, r5
 800fbf8:	4426      	add	r6, r4
 800fbfa:	4680      	mov	r8, r0
 800fbfc:	444d      	add	r5, r9
 800fbfe:	4454      	add	r4, sl
 800fc00:	4668      	mov	r0, sp
 800fc02:	f8ad 7000 	strh.w	r7, [sp]
 800fc06:	f8ad 5004 	strh.w	r5, [sp, #4]
 800fc0a:	f8ad 6002 	strh.w	r6, [sp, #2]
 800fc0e:	f8ad 4006 	strh.w	r4, [sp, #6]
 800fc12:	f7fc faa5 	bl	800c160 <WM__InitIVRSearch>
 800fc16:	b928      	cbnz	r0, 800fc24 <GUI_InvertRect+0x48>
 800fc18:	4640      	mov	r0, r8
 800fc1a:	f7ff fe01 	bl	800f820 <GUI_SetDrawMode>
 800fc1e:	b002      	add	sp, #8
 800fc20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc24:	4638      	mov	r0, r7
 800fc26:	4631      	mov	r1, r6
 800fc28:	462a      	mov	r2, r5
 800fc2a:	4623      	mov	r3, r4
 800fc2c:	f7fe fd46 	bl	800e6bc <LCD_FillRect>
 800fc30:	f7fc f9d4 	bl	800bfdc <WM__GetNextIVR>
 800fc34:	e7ef      	b.n	800fc16 <GUI_InvertRect+0x3a>
 800fc36:	bf00      	nop
 800fc38:	20000308 	.word	0x20000308

0800fc3c <GUI_GotoXY>:
 800fc3c:	4b02      	ldr	r3, [pc, #8]	; (800fc48 <GUI_GotoXY+0xc>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	8458      	strh	r0, [r3, #34]	; 0x22
 800fc42:	8499      	strh	r1, [r3, #36]	; 0x24
 800fc44:	2000      	movs	r0, #0
 800fc46:	4770      	bx	lr
 800fc48:	20000308 	.word	0x20000308

0800fc4c <GUI_GetYSizeOfFont>:
 800fc4c:	7e02      	ldrb	r2, [r0, #24]
 800fc4e:	7ec0      	ldrb	r0, [r0, #27]
 800fc50:	4350      	muls	r0, r2
 800fc52:	4770      	bx	lr

0800fc54 <GUI_GetYDistOfFont>:
 800fc54:	7e42      	ldrb	r2, [r0, #25]
 800fc56:	7ec0      	ldrb	r0, [r0, #27]
 800fc58:	4350      	muls	r0, r2
 800fc5a:	4770      	bx	lr

0800fc5c <GUI_GetStringDistX>:
 800fc5c:	b510      	push	{r4, lr}
 800fc5e:	4604      	mov	r4, r0
 800fc60:	f7ff f944 	bl	800eeec <GUI__GetNumChars>
 800fc64:	4601      	mov	r1, r0
 800fc66:	4620      	mov	r0, r4
 800fc68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc6c:	f000 bd36 	b.w	80106dc <GUI__GetLineDistX>

0800fc70 <GUI_GetOrg>:
 800fc70:	4b04      	ldr	r3, [pc, #16]	; (800fc84 <GUI_GetOrg+0x14>)
 800fc72:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc76:	6003      	str	r3, [r0, #0]
 800fc78:	4b03      	ldr	r3, [pc, #12]	; (800fc88 <GUI_GetOrg+0x18>)
 800fc7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc7e:	600b      	str	r3, [r1, #0]
 800fc80:	4770      	bx	lr
 800fc82:	bf00      	nop
 800fc84:	20021bf8 	.word	0x20021bf8
 800fc88:	20021bec 	.word	0x20021bec

0800fc8c <GUI_GetDrawMode>:
 800fc8c:	4b01      	ldr	r3, [pc, #4]	; (800fc94 <GUI_GetDrawMode+0x8>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	7c18      	ldrb	r0, [r3, #16]
 800fc92:	4770      	bx	lr
 800fc94:	20000308 	.word	0x20000308

0800fc98 <GUI_FillRectEx>:
 800fc98:	4603      	mov	r3, r0
 800fc9a:	f9b0 0000 	ldrsh.w	r0, [r0]
 800fc9e:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 800fca2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800fca6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800fcaa:	f000 b801 	b.w	800fcb0 <GUI_FillRect>
	...

0800fcb0 <GUI_FillRect>:
 800fcb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fcb2:	4c0f      	ldr	r4, [pc, #60]	; (800fcf0 <GUI_FillRect+0x40>)
 800fcb4:	6824      	ldr	r4, [r4, #0]
 800fcb6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800fcb8:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800fcba:	1947      	adds	r7, r0, r5
 800fcbc:	190e      	adds	r6, r1, r4
 800fcbe:	4415      	add	r5, r2
 800fcc0:	441c      	add	r4, r3
 800fcc2:	4668      	mov	r0, sp
 800fcc4:	f8ad 7000 	strh.w	r7, [sp]
 800fcc8:	f8ad 5004 	strh.w	r5, [sp, #4]
 800fccc:	f8ad 6002 	strh.w	r6, [sp, #2]
 800fcd0:	f8ad 4006 	strh.w	r4, [sp, #6]
 800fcd4:	f7fc fa44 	bl	800c160 <WM__InitIVRSearch>
 800fcd8:	b140      	cbz	r0, 800fcec <GUI_FillRect+0x3c>
 800fcda:	4638      	mov	r0, r7
 800fcdc:	4631      	mov	r1, r6
 800fcde:	462a      	mov	r2, r5
 800fce0:	4623      	mov	r3, r4
 800fce2:	f7fe fceb 	bl	800e6bc <LCD_FillRect>
 800fce6:	f7fc f979 	bl	800bfdc <WM__GetNextIVR>
 800fcea:	e7f5      	b.n	800fcd8 <GUI_FillRect+0x28>
 800fcec:	b003      	add	sp, #12
 800fcee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcf0:	20000308 	.word	0x20000308

0800fcf4 <GUI_Exec1>:
 800fcf4:	4b0a      	ldr	r3, [pc, #40]	; (800fd20 <GUI_Exec1+0x2c>)
 800fcf6:	b510      	push	{r4, lr}
 800fcf8:	681c      	ldr	r4, [r3, #0]
 800fcfa:	b11c      	cbz	r4, 800fd04 <GUI_Exec1+0x10>
 800fcfc:	47a0      	blx	r4
 800fcfe:	1c04      	adds	r4, r0, #0
 800fd00:	bf18      	it	ne
 800fd02:	2401      	movne	r4, #1
 800fd04:	f7fc fb60 	bl	800c3c8 <WM_Exec>
 800fd08:	4b06      	ldr	r3, [pc, #24]	; (800fd24 <GUI_Exec1+0x30>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	2800      	cmp	r0, #0
 800fd0e:	bf18      	it	ne
 800fd10:	2401      	movne	r4, #1
 800fd12:	b11b      	cbz	r3, 800fd1c <GUI_Exec1+0x28>
 800fd14:	4798      	blx	r3
 800fd16:	2800      	cmp	r0, #0
 800fd18:	bf18      	it	ne
 800fd1a:	2401      	movne	r4, #1
 800fd1c:	4620      	mov	r0, r4
 800fd1e:	bd10      	pop	{r4, pc}
 800fd20:	20021bf4 	.word	0x20021bf4
 800fd24:	20021c08 	.word	0x20021c08

0800fd28 <GUI_Exec>:
 800fd28:	b510      	push	{r4, lr}
 800fd2a:	2400      	movs	r4, #0
 800fd2c:	f7ff ffe2 	bl	800fcf4 <GUI_Exec1>
 800fd30:	b108      	cbz	r0, 800fd36 <GUI_Exec+0xe>
 800fd32:	2401      	movs	r4, #1
 800fd34:	e7fa      	b.n	800fd2c <GUI_Exec+0x4>
 800fd36:	4620      	mov	r0, r4
 800fd38:	bd10      	pop	{r4, pc}
	...

0800fd3c <GUI_DrawVLine>:
 800fd3c:	4b0f      	ldr	r3, [pc, #60]	; (800fd7c <GUI_DrawVLine+0x40>)
 800fd3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 800fd44:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 800fd46:	4406      	add	r6, r0
 800fd48:	190d      	adds	r5, r1, r4
 800fd4a:	b2b3      	uxth	r3, r6
 800fd4c:	4414      	add	r4, r2
 800fd4e:	4668      	mov	r0, sp
 800fd50:	f8ad 3000 	strh.w	r3, [sp]
 800fd54:	f8ad 3004 	strh.w	r3, [sp, #4]
 800fd58:	f8ad 5002 	strh.w	r5, [sp, #2]
 800fd5c:	f8ad 4006 	strh.w	r4, [sp, #6]
 800fd60:	f7fc f9fe 	bl	800c160 <WM__InitIVRSearch>
 800fd64:	b138      	cbz	r0, 800fd76 <GUI_DrawVLine+0x3a>
 800fd66:	4630      	mov	r0, r6
 800fd68:	4629      	mov	r1, r5
 800fd6a:	4622      	mov	r2, r4
 800fd6c:	f7fe fc80 	bl	800e670 <LCD_DrawVLine>
 800fd70:	f7fc f934 	bl	800bfdc <WM__GetNextIVR>
 800fd74:	e7f6      	b.n	800fd64 <GUI_DrawVLine+0x28>
 800fd76:	b002      	add	sp, #8
 800fd78:	bd70      	pop	{r4, r5, r6, pc}
 800fd7a:	bf00      	nop
 800fd7c:	20000308 	.word	0x20000308

0800fd80 <GUI_DrawHLine>:
 800fd80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd82:	4f10      	ldr	r7, [pc, #64]	; (800fdc4 <GUI_DrawHLine+0x44>)
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800fd88:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fd8a:	4405      	add	r5, r0
 800fd8c:	190e      	adds	r6, r1, r4
 800fd8e:	b2ab      	uxth	r3, r5
 800fd90:	4414      	add	r4, r2
 800fd92:	4668      	mov	r0, sp
 800fd94:	f8ad 6000 	strh.w	r6, [sp]
 800fd98:	f8ad 4004 	strh.w	r4, [sp, #4]
 800fd9c:	f8ad 3002 	strh.w	r3, [sp, #2]
 800fda0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fda4:	f7fc f9dc 	bl	800c160 <WM__InitIVRSearch>
 800fda8:	b148      	cbz	r0, 800fdbe <GUI_DrawHLine+0x3e>
 800fdaa:	683b      	ldr	r3, [r7, #0]
 800fdac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fdae:	4630      	mov	r0, r6
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	4629      	mov	r1, r5
 800fdb4:	4622      	mov	r2, r4
 800fdb6:	4798      	blx	r3
 800fdb8:	f7fc f910 	bl	800bfdc <WM__GetNextIVR>
 800fdbc:	e7f4      	b.n	800fda8 <GUI_DrawHLine+0x28>
 800fdbe:	b003      	add	sp, #12
 800fdc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdc2:	bf00      	nop
 800fdc4:	20000308 	.word	0x20000308

0800fdc8 <GUI_DrawFocusRect>:
 800fdc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fdca:	4603      	mov	r3, r0
 800fdcc:	460a      	mov	r2, r1
 800fdce:	4668      	mov	r0, sp
 800fdd0:	4619      	mov	r1, r3
 800fdd2:	f7fe ffb9 	bl	800ed48 <GUI__ReduceRect>
 800fdd6:	4b23      	ldr	r3, [pc, #140]	; (800fe64 <GUI_DrawFocusRect+0x9c>)
 800fdd8:	f8bd 1000 	ldrh.w	r1, [sp]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800fde2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fde6:	4411      	add	r1, r2
 800fde8:	f8ad 1000 	strh.w	r1, [sp]
 800fdec:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800fdf0:	4419      	add	r1, r3
 800fdf2:	f8ad 1002 	strh.w	r1, [sp, #2]
 800fdf6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800fdfa:	440a      	add	r2, r1
 800fdfc:	f8ad 2004 	strh.w	r2, [sp, #4]
 800fe00:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fe04:	4668      	mov	r0, sp
 800fe06:	4413      	add	r3, r2
 800fe08:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fe0c:	f7fc f9a8 	bl	800c160 <WM__InitIVRSearch>
 800fe10:	b328      	cbz	r0, 800fe5e <GUI_DrawFocusRect+0x96>
 800fe12:	f9bd 5000 	ldrsh.w	r5, [sp]
 800fe16:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800fe1a:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 800fe1e:	429d      	cmp	r5, r3
 800fe20:	dc09      	bgt.n	800fe36 <GUI_DrawFocusRect+0x6e>
 800fe22:	4628      	mov	r0, r5
 800fe24:	f7fe fbd0 	bl	800e5c8 <LCD_DrawPixel>
 800fe28:	4628      	mov	r0, r5
 800fe2a:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 800fe2e:	f7fe fbcb 	bl	800e5c8 <LCD_DrawPixel>
 800fe32:	3502      	adds	r5, #2
 800fe34:	e7ef      	b.n	800fe16 <GUI_DrawFocusRect+0x4e>
 800fe36:	460c      	mov	r4, r1
 800fe38:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800fe3c:	429c      	cmp	r4, r3
 800fe3e:	dc0b      	bgt.n	800fe58 <GUI_DrawFocusRect+0x90>
 800fe40:	4621      	mov	r1, r4
 800fe42:	f9bd 0000 	ldrsh.w	r0, [sp]
 800fe46:	f7fe fbbf 	bl	800e5c8 <LCD_DrawPixel>
 800fe4a:	4621      	mov	r1, r4
 800fe4c:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 800fe50:	f7fe fbba 	bl	800e5c8 <LCD_DrawPixel>
 800fe54:	3402      	adds	r4, #2
 800fe56:	e7ef      	b.n	800fe38 <GUI_DrawFocusRect+0x70>
 800fe58:	f7fc f8c0 	bl	800bfdc <WM__GetNextIVR>
 800fe5c:	e7d8      	b.n	800fe10 <GUI_DrawFocusRect+0x48>
 800fe5e:	b003      	add	sp, #12
 800fe60:	bd30      	pop	{r4, r5, pc}
 800fe62:	bf00      	nop
 800fe64:	20000308 	.word	0x20000308

0800fe68 <GUI_WrapGetNumLines>:
 800fe68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe6a:	4605      	mov	r5, r0
 800fe6c:	460e      	mov	r6, r1
 800fe6e:	4617      	mov	r7, r2
 800fe70:	2400      	movs	r4, #0
 800fe72:	4628      	mov	r0, r5
 800fe74:	4631      	mov	r1, r6
 800fe76:	463a      	mov	r2, r7
 800fe78:	f006 fbac 	bl	80165d4 <GUI__WrapGetNumBytesToNextLine>
 800fe7c:	b110      	cbz	r0, 800fe84 <GUI_WrapGetNumLines+0x1c>
 800fe7e:	4405      	add	r5, r0
 800fe80:	3401      	adds	r4, #1
 800fe82:	e7f6      	b.n	800fe72 <GUI_WrapGetNumLines+0xa>
 800fe84:	4620      	mov	r0, r4
 800fe86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fe88 <GUI_DispStringInRectWrap>:
 800fe88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe8c:	b089      	sub	sp, #36	; 0x24
 800fe8e:	460c      	mov	r4, r1
 800fe90:	9202      	str	r2, [sp, #8]
 800fe92:	9303      	str	r3, [sp, #12]
 800fe94:	4605      	mov	r5, r0
 800fe96:	2800      	cmp	r0, #0
 800fe98:	f000 8091 	beq.w	800ffbe <GUI_DispStringInRectWrap+0x136>
 800fe9c:	f8b1 a000 	ldrh.w	sl, [r1]
 800fea0:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 800fea4:	884e      	ldrh	r6, [r1, #2]
 800fea6:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 800feaa:	fa0f f289 	sxth.w	r2, r9
 800feae:	fa0f f38a 	sxth.w	r3, sl
 800feb2:	1ad3      	subs	r3, r2, r3
 800feb4:	3301      	adds	r3, #1
 800feb6:	9301      	str	r3, [sp, #4]
 800feb8:	f000 fcac 	bl	8010814 <GUI_GetFontDistY>
 800febc:	9902      	ldr	r1, [sp, #8]
 800febe:	f011 070c 	ands.w	r7, r1, #12
 800fec2:	4680      	mov	r8, r0
 800fec4:	d01b      	beq.n	800fefe <GUI_DispStringInRectWrap+0x76>
 800fec6:	4628      	mov	r0, r5
 800fec8:	9901      	ldr	r1, [sp, #4]
 800feca:	9a03      	ldr	r2, [sp, #12]
 800fecc:	f7ff ffcc 	bl	800fe68 <GUI_WrapGetNumLines>
 800fed0:	2f08      	cmp	r7, #8
 800fed2:	d003      	beq.n	800fedc <GUI_DispStringInRectWrap+0x54>
 800fed4:	2f0c      	cmp	r7, #12
 800fed6:	d006      	beq.n	800fee6 <GUI_DispStringInRectWrap+0x5e>
 800fed8:	2f04      	cmp	r7, #4
 800feda:	d110      	bne.n	800fefe <GUI_DispStringInRectWrap+0x76>
 800fedc:	f10b 0601 	add.w	r6, fp, #1
 800fee0:	fb00 6618 	mls	r6, r0, r8, r6
 800fee4:	e00a      	b.n	800fefc <GUI_DispStringInRectWrap+0x74>
 800fee6:	b232      	sxth	r2, r6
 800fee8:	fa0f f38b 	sxth.w	r3, fp
 800feec:	1a9b      	subs	r3, r3, r2
 800feee:	3301      	adds	r3, #1
 800fef0:	fb08 3010 	mls	r0, r8, r0, r3
 800fef4:	2302      	movs	r3, #2
 800fef6:	fb90 f0f3 	sdiv	r0, r0, r3
 800fefa:	4406      	add	r6, r0
 800fefc:	b2b6      	uxth	r6, r6
 800fefe:	4620      	mov	r0, r4
 800ff00:	f7fa fca6 	bl	800a850 <WM_SetUserClipRect>
 800ff04:	4607      	mov	r7, r0
 800ff06:	b178      	cbz	r0, 800ff28 <GUI_DispStringInRectWrap+0xa0>
 800ff08:	a804      	add	r0, sp, #16
 800ff0a:	4621      	mov	r1, r4
 800ff0c:	463a      	mov	r2, r7
 800ff0e:	f8ad a010 	strh.w	sl, [sp, #16]
 800ff12:	f8ad 6012 	strh.w	r6, [sp, #18]
 800ff16:	f8ad 9014 	strh.w	r9, [sp, #20]
 800ff1a:	f8ad b016 	strh.w	fp, [sp, #22]
 800ff1e:	f7fe ff95 	bl	800ee4c <GUI__IntersectRects>
 800ff22:	a804      	add	r0, sp, #16
 800ff24:	f7fa fc94 	bl	800a850 <WM_SetUserClipRect>
 800ff28:	9901      	ldr	r1, [sp, #4]
 800ff2a:	9a03      	ldr	r2, [sp, #12]
 800ff2c:	4628      	mov	r0, r5
 800ff2e:	f006 fb1f 	bl	8016570 <GUI__WrapGetNumCharsDisp>
 800ff32:	eb06 0b08 	add.w	fp, r6, r8
 800ff36:	4602      	mov	r2, r0
 800ff38:	fa1f fb8b 	uxth.w	fp, fp
 800ff3c:	f10b 33ff 	add.w	r3, fp, #4294967295
 800ff40:	4611      	mov	r1, r2
 800ff42:	4628      	mov	r0, r5
 800ff44:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ff48:	9200      	str	r2, [sp, #0]
 800ff4a:	f8ad a018 	strh.w	sl, [sp, #24]
 800ff4e:	f8ad 601a 	strh.w	r6, [sp, #26]
 800ff52:	f8ad 901c 	strh.w	r9, [sp, #28]
 800ff56:	f000 fbc1 	bl	80106dc <GUI__GetLineDistX>
 800ff5a:	9902      	ldr	r1, [sp, #8]
 800ff5c:	9a00      	ldr	r2, [sp, #0]
 800ff5e:	f001 0303 	and.w	r3, r1, #3
 800ff62:	2b01      	cmp	r3, #1
 800ff64:	d013      	beq.n	800ff8e <GUI_DispStringInRectWrap+0x106>
 800ff66:	2b02      	cmp	r3, #2
 800ff68:	d004      	beq.n	800ff74 <GUI_DispStringInRectWrap+0xec>
 800ff6a:	b9ab      	cbnz	r3, 800ff98 <GUI_DispStringInRectWrap+0x110>
 800ff6c:	8823      	ldrh	r3, [r4, #0]
 800ff6e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ff72:	e011      	b.n	800ff98 <GUI_DispStringInRectWrap+0x110>
 800ff74:	8821      	ldrh	r1, [r4, #0]
 800ff76:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 800ff7a:	b20e      	sxth	r6, r1
 800ff7c:	ebc6 060e 	rsb	r6, r6, lr
 800ff80:	1a30      	subs	r0, r6, r0
 800ff82:	fb90 f3f3 	sdiv	r3, r0, r3
 800ff86:	4419      	add	r1, r3
 800ff88:	f8ad 1018 	strh.w	r1, [sp, #24]
 800ff8c:	e004      	b.n	800ff98 <GUI_DispStringInRectWrap+0x110>
 800ff8e:	88a3      	ldrh	r3, [r4, #4]
 800ff90:	3301      	adds	r3, #1
 800ff92:	1a18      	subs	r0, r3, r0
 800ff94:	f8ad 0018 	strh.w	r0, [sp, #24]
 800ff98:	4628      	mov	r0, r5
 800ff9a:	4611      	mov	r1, r2
 800ff9c:	aa06      	add	r2, sp, #24
 800ff9e:	f000 fbcd 	bl	801073c <GUI__DispLine>
 800ffa2:	4628      	mov	r0, r5
 800ffa4:	9901      	ldr	r1, [sp, #4]
 800ffa6:	9a03      	ldr	r2, [sp, #12]
 800ffa8:	f006 fb14 	bl	80165d4 <GUI__WrapGetNumBytesToNextLine>
 800ffac:	4405      	add	r5, r0
 800ffae:	fa1f f68b 	uxth.w	r6, fp
 800ffb2:	782b      	ldrb	r3, [r5, #0]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d1b7      	bne.n	800ff28 <GUI_DispStringInRectWrap+0xa0>
 800ffb8:	4638      	mov	r0, r7
 800ffba:	f7fa fc49 	bl	800a850 <WM_SetUserClipRect>
 800ffbe:	b009      	add	sp, #36	; 0x24
 800ffc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ffc4 <_UnlinkDevice>:
 800ffc4:	4b09      	ldr	r3, [pc, #36]	; (800ffec <_UnlinkDevice+0x28>)
 800ffc6:	6982      	ldr	r2, [r0, #24]
 800ffc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ffcc:	4281      	cmp	r1, r0
 800ffce:	bf04      	itt	eq
 800ffd0:	6801      	ldreq	r1, [r0, #0]
 800ffd2:	f843 1022 	streq.w	r1, [r3, r2, lsl #2]
 800ffd6:	6843      	ldr	r3, [r0, #4]
 800ffd8:	b10b      	cbz	r3, 800ffde <_UnlinkDevice+0x1a>
 800ffda:	6802      	ldr	r2, [r0, #0]
 800ffdc:	601a      	str	r2, [r3, #0]
 800ffde:	6802      	ldr	r2, [r0, #0]
 800ffe0:	b102      	cbz	r2, 800ffe4 <_UnlinkDevice+0x20>
 800ffe2:	6053      	str	r3, [r2, #4]
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	6003      	str	r3, [r0, #0]
 800ffe8:	6043      	str	r3, [r0, #4]
 800ffea:	4770      	bx	lr
 800ffec:	20021c0c 	.word	0x20021c0c

0800fff0 <GUI_DEVICE__GetpDriver>:
 800fff0:	2801      	cmp	r0, #1
 800fff2:	dc09      	bgt.n	8010008 <GUI_DEVICE__GetpDriver+0x18>
 800fff4:	4b05      	ldr	r3, [pc, #20]	; (801000c <GUI_DEVICE__GetpDriver+0x1c>)
 800fff6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800fffa:	b120      	cbz	r0, 8010006 <GUI_DEVICE__GetpDriver+0x16>
 800fffc:	68c3      	ldr	r3, [r0, #12]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	b11b      	cbz	r3, 801000a <GUI_DEVICE__GetpDriver+0x1a>
 8010002:	6800      	ldr	r0, [r0, #0]
 8010004:	e7f9      	b.n	800fffa <GUI_DEVICE__GetpDriver+0xa>
 8010006:	4770      	bx	lr
 8010008:	2000      	movs	r0, #0
 801000a:	4770      	bx	lr
 801000c:	20021c0c 	.word	0x20021c0c

08010010 <GUI_DEVICE_Delete>:
 8010010:	f000 bd02 	b.w	8010a18 <GUI_ALLOC_FreeFixedBlock>

08010014 <GUI_DEVICE_Create>:
 8010014:	2b01      	cmp	r3, #1
 8010016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010018:	4606      	mov	r6, r0
 801001a:	460d      	mov	r5, r1
 801001c:	4617      	mov	r7, r2
 801001e:	461c      	mov	r4, r3
 8010020:	dd01      	ble.n	8010026 <GUI_DEVICE_Create+0x12>
 8010022:	2000      	movs	r0, #0
 8010024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010026:	201c      	movs	r0, #28
 8010028:	f000 fe62 	bl	8010cf0 <GUI_ALLOC_GetFixedBlock>
 801002c:	2800      	cmp	r0, #0
 801002e:	d0f8      	beq.n	8010022 <GUI_DEVICE_Create+0xe>
 8010030:	b10d      	cbz	r5, 8010036 <GUI_DEVICE_Create+0x22>
 8010032:	6105      	str	r5, [r0, #16]
 8010034:	e009      	b.n	801004a <GUI_DEVICE_Create+0x36>
 8010036:	4b09      	ldr	r3, [pc, #36]	; (801005c <GUI_DEVICE_Create+0x48>)
 8010038:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 801003c:	b129      	cbz	r1, 801004a <GUI_DEVICE_Create+0x36>
 801003e:	680b      	ldr	r3, [r1, #0]
 8010040:	b10b      	cbz	r3, 8010046 <GUI_DEVICE_Create+0x32>
 8010042:	4619      	mov	r1, r3
 8010044:	e7fb      	b.n	801003e <GUI_DEVICE_Create+0x2a>
 8010046:	690b      	ldr	r3, [r1, #16]
 8010048:	6103      	str	r3, [r0, #16]
 801004a:	2300      	movs	r3, #0
 801004c:	6083      	str	r3, [r0, #8]
 801004e:	6184      	str	r4, [r0, #24]
 8010050:	8287      	strh	r7, [r0, #20]
 8010052:	60c6      	str	r6, [r0, #12]
 8010054:	6003      	str	r3, [r0, #0]
 8010056:	6043      	str	r3, [r0, #4]
 8010058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801005a:	bf00      	nop
 801005c:	20021c0c 	.word	0x20021c0c

08010060 <GUI_DEVICE_Unlink>:
 8010060:	f7ff bfb0 	b.w	800ffc4 <_UnlinkDevice>

08010064 <GUI_DEVICE_Link>:
 8010064:	b570      	push	{r4, r5, r6, lr}
 8010066:	b338      	cbz	r0, 80100b8 <GUI_DEVICE_Link+0x54>
 8010068:	6982      	ldr	r2, [r0, #24]
 801006a:	2a01      	cmp	r2, #1
 801006c:	dc24      	bgt.n	80100b8 <GUI_DEVICE_Link+0x54>
 801006e:	4919      	ldr	r1, [pc, #100]	; (80100d4 <GUI_DEVICE_Link+0x70>)
 8010070:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8010074:	460d      	mov	r5, r1
 8010076:	b913      	cbnz	r3, 801007e <GUI_DEVICE_Link+0x1a>
 8010078:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 801007c:	e01a      	b.n	80100b4 <GUI_DEVICE_Link+0x50>
 801007e:	6859      	ldr	r1, [r3, #4]
 8010080:	b109      	cbz	r1, 8010086 <GUI_DEVICE_Link+0x22>
 8010082:	460b      	mov	r3, r1
 8010084:	e7fb      	b.n	801007e <GUI_DEVICE_Link+0x1a>
 8010086:	68c1      	ldr	r1, [r0, #12]
 8010088:	680e      	ldr	r6, [r1, #0]
 801008a:	68d9      	ldr	r1, [r3, #12]
 801008c:	680c      	ldr	r4, [r1, #0]
 801008e:	42b4      	cmp	r4, r6
 8010090:	dd03      	ble.n	801009a <GUI_DEVICE_Link+0x36>
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d1f8      	bne.n	801008a <GUI_DEVICE_Link+0x26>
 8010098:	e00e      	b.n	80100b8 <GUI_DEVICE_Link+0x54>
 801009a:	d102      	bne.n	80100a2 <GUI_DEVICE_Link+0x3e>
 801009c:	8a81      	ldrh	r1, [r0, #20]
 801009e:	2901      	cmp	r1, #1
 80100a0:	d011      	beq.n	80100c6 <GUI_DEVICE_Link+0x62>
 80100a2:	6859      	ldr	r1, [r3, #4]
 80100a4:	b199      	cbz	r1, 80100ce <GUI_DEVICE_Link+0x6a>
 80100a6:	6008      	str	r0, [r1, #0]
 80100a8:	6041      	str	r1, [r0, #4]
 80100aa:	6058      	str	r0, [r3, #4]
 80100ac:	4298      	cmp	r0, r3
 80100ae:	bf08      	it	eq
 80100b0:	2300      	moveq	r3, #0
 80100b2:	6003      	str	r3, [r0, #0]
 80100b4:	2000      	movs	r0, #0
 80100b6:	bd70      	pop	{r4, r5, r6, pc}
 80100b8:	2001      	movs	r0, #1
 80100ba:	bd70      	pop	{r4, r5, r6, pc}
 80100bc:	68cb      	ldr	r3, [r1, #12]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	42a3      	cmp	r3, r4
 80100c2:	460b      	mov	r3, r1
 80100c4:	dbed      	blt.n	80100a2 <GUI_DEVICE_Link+0x3e>
 80100c6:	6819      	ldr	r1, [r3, #0]
 80100c8:	2900      	cmp	r1, #0
 80100ca:	d1f7      	bne.n	80100bc <GUI_DEVICE_Link+0x58>
 80100cc:	e7e9      	b.n	80100a2 <GUI_DEVICE_Link+0x3e>
 80100ce:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 80100d2:	e7ea      	b.n	80100aa <GUI_DEVICE_Link+0x46>
 80100d4:	20021c0c 	.word	0x20021c0c

080100d8 <GUI_DEVICE_CreateAndLink>:
 80100d8:	b538      	push	{r3, r4, r5, lr}
 80100da:	461d      	mov	r5, r3
 80100dc:	f7ff ff9a 	bl	8010014 <GUI_DEVICE_Create>
 80100e0:	4604      	mov	r4, r0
 80100e2:	b148      	cbz	r0, 80100f8 <GUI_DEVICE_CreateAndLink+0x20>
 80100e4:	f7ff ffbe 	bl	8010064 <GUI_DEVICE_Link>
 80100e8:	68e3      	ldr	r3, [r4, #12]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	b923      	cbnz	r3, 80100f8 <GUI_DEVICE_CreateAndLink+0x20>
 80100ee:	4b03      	ldr	r3, [pc, #12]	; (80100fc <GUI_DEVICE_CreateAndLink+0x24>)
 80100f0:	3516      	adds	r5, #22
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 80100f8:	4620      	mov	r0, r4
 80100fa:	bd38      	pop	{r3, r4, r5, pc}
 80100fc:	20000308 	.word	0x20000308

08010100 <_OnExit>:
 8010100:	b510      	push	{r4, lr}
 8010102:	4b07      	ldr	r3, [pc, #28]	; (8010120 <_OnExit+0x20>)
 8010104:	4807      	ldr	r0, [pc, #28]	; (8010124 <_OnExit+0x24>)
 8010106:	2400      	movs	r4, #0
 8010108:	4621      	mov	r1, r4
 801010a:	2270      	movs	r2, #112	; 0x70
 801010c:	601c      	str	r4, [r3, #0]
 801010e:	f7fe fdb6 	bl	800ec7e <GUI__memset>
 8010112:	4621      	mov	r1, r4
 8010114:	4804      	ldr	r0, [pc, #16]	; (8010128 <_OnExit+0x28>)
 8010116:	2208      	movs	r2, #8
 8010118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801011c:	f7fe bdaf 	b.w	800ec7e <GUI__memset>
 8010120:	200017a0 	.word	0x200017a0
 8010124:	20001728 	.word	0x20001728
 8010128:	20021c0c 	.word	0x20021c0c

0801012c <_InitContext>:
 801012c:	b538      	push	{r3, r4, r5, lr}
 801012e:	4d19      	ldr	r5, [pc, #100]	; (8010194 <_InitContext+0x68>)
 8010130:	682b      	ldr	r3, [r5, #0]
 8010132:	1d1a      	adds	r2, r3, #4
 8010134:	63da      	str	r2, [r3, #60]	; 0x3c
 8010136:	f103 0208 	add.w	r2, r3, #8
 801013a:	639b      	str	r3, [r3, #56]	; 0x38
 801013c:	641b      	str	r3, [r3, #64]	; 0x40
 801013e:	6142      	str	r2, [r0, #20]
 8010140:	7c5a      	ldrb	r2, [r3, #17]
 8010142:	4b15      	ldr	r3, [pc, #84]	; (8010198 <_InitContext+0x6c>)
 8010144:	4604      	mov	r4, r0
 8010146:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801014a:	68c3      	ldr	r3, [r0, #12]
 801014c:	f104 0108 	add.w	r1, r4, #8
 8010150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010152:	4798      	blx	r3
 8010154:	4b11      	ldr	r3, [pc, #68]	; (801019c <_InitContext+0x70>)
 8010156:	6663      	str	r3, [r4, #100]	; 0x64
 8010158:	4b11      	ldr	r3, [pc, #68]	; (80101a0 <_InitContext+0x74>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	61e3      	str	r3, [r4, #28]
 801015e:	682b      	ldr	r3, [r5, #0]
 8010160:	3308      	adds	r3, #8
 8010162:	6163      	str	r3, [r4, #20]
 8010164:	2301      	movs	r3, #1
 8010166:	7623      	strb	r3, [r4, #24]
 8010168:	f7fb f80a 	bl	800b180 <WM_GetDesktopWindow>
 801016c:	2303      	movs	r3, #3
 801016e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8010172:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8010176:	6323      	str	r3, [r4, #48]	; 0x30
 8010178:	6363      	str	r3, [r4, #52]	; 0x34
 801017a:	64a0      	str	r0, [r4, #72]	; 0x48
 801017c:	2000      	movs	r0, #0
 801017e:	f7fe fd65 	bl	800ec4c <LCD_SetBkColor>
 8010182:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8010186:	f7fe fd69 	bl	800ec5c <LCD_SetColor>
 801018a:	4b06      	ldr	r3, [pc, #24]	; (80101a4 <_InitContext+0x78>)
 801018c:	4a06      	ldr	r2, [pc, #24]	; (80101a8 <_InitContext+0x7c>)
 801018e:	601a      	str	r2, [r3, #0]
 8010190:	bd38      	pop	{r3, r4, r5, pc}
 8010192:	bf00      	nop
 8010194:	20000308 	.word	0x20000308
 8010198:	20021c0c 	.word	0x20021c0c
 801019c:	08020b08 	.word	0x08020b08
 80101a0:	2000030c 	.word	0x2000030c
 80101a4:	20021c04 	.word	0x20021c04
 80101a8:	08023140 	.word	0x08023140

080101ac <GUI_SetDefaultFont>:
 80101ac:	4b01      	ldr	r3, [pc, #4]	; (80101b4 <GUI_SetDefaultFont+0x8>)
 80101ae:	6018      	str	r0, [r3, #0]
 80101b0:	4770      	bx	lr
 80101b2:	bf00      	nop
 80101b4:	2000030c 	.word	0x2000030c

080101b8 <GUI_ClearRect>:
 80101b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80101bc:	4607      	mov	r7, r0
 80101be:	2004      	movs	r0, #4
 80101c0:	469a      	mov	sl, r3
 80101c2:	460e      	mov	r6, r1
 80101c4:	4691      	mov	r9, r2
 80101c6:	f7fe f9f7 	bl	800e5b8 <LCD_SetDrawMode>
 80101ca:	4b13      	ldr	r3, [pc, #76]	; (8010218 <GUI_ClearRect+0x60>)
 80101cc:	681c      	ldr	r4, [r3, #0]
 80101ce:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80101d0:	6d24      	ldr	r4, [r4, #80]	; 0x50
 80101d2:	442f      	add	r7, r5
 80101d4:	4426      	add	r6, r4
 80101d6:	4680      	mov	r8, r0
 80101d8:	444d      	add	r5, r9
 80101da:	4454      	add	r4, sl
 80101dc:	4668      	mov	r0, sp
 80101de:	f8ad 7000 	strh.w	r7, [sp]
 80101e2:	f8ad 5004 	strh.w	r5, [sp, #4]
 80101e6:	f8ad 6002 	strh.w	r6, [sp, #2]
 80101ea:	f8ad 4006 	strh.w	r4, [sp, #6]
 80101ee:	f7fb ffb7 	bl	800c160 <WM__InitIVRSearch>
 80101f2:	b928      	cbnz	r0, 8010200 <GUI_ClearRect+0x48>
 80101f4:	4640      	mov	r0, r8
 80101f6:	f7fe f9df 	bl	800e5b8 <LCD_SetDrawMode>
 80101fa:	b002      	add	sp, #8
 80101fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010200:	4638      	mov	r0, r7
 8010202:	4631      	mov	r1, r6
 8010204:	462a      	mov	r2, r5
 8010206:	4623      	mov	r3, r4
 8010208:	f7fe fa58 	bl	800e6bc <LCD_FillRect>
 801020c:	f7fb fee6 	bl	800bfdc <WM__GetNextIVR>
 8010210:	2800      	cmp	r0, #0
 8010212:	d1f5      	bne.n	8010200 <GUI_ClearRect+0x48>
 8010214:	e7ee      	b.n	80101f4 <GUI_ClearRect+0x3c>
 8010216:	bf00      	nop
 8010218:	20000308 	.word	0x20000308

0801021c <GUI_Clear>:
 801021c:	b510      	push	{r4, lr}
 801021e:	2000      	movs	r0, #0
 8010220:	4601      	mov	r1, r0
 8010222:	f7ff fd0b 	bl	800fc3c <GUI_GotoXY>
 8010226:	4804      	ldr	r0, [pc, #16]	; (8010238 <GUI_Clear+0x1c>)
 8010228:	f643 72ff 	movw	r2, #16383	; 0x3fff
 801022c:	4601      	mov	r1, r0
 801022e:	4613      	mov	r3, r2
 8010230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010234:	f7ff bfc0 	b.w	80101b8 <GUI_ClearRect>
 8010238:	ffffc001 	.word	0xffffc001

0801023c <GUI__RegisterExit>:
 801023c:	b480      	push	{r7}
 801023e:	b083      	sub	sp, #12
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	4b05      	ldr	r3, [pc, #20]	; (801025c <GUI__RegisterExit+0x20>)
 8010246:	681a      	ldr	r2, [r3, #0]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	605a      	str	r2, [r3, #4]
 801024c:	4b03      	ldr	r3, [pc, #12]	; (801025c <GUI__RegisterExit+0x20>)
 801024e:	687a      	ldr	r2, [r7, #4]
 8010250:	601a      	str	r2, [r3, #0]
 8010252:	370c      	adds	r7, #12
 8010254:	46bd      	mov	sp, r7
 8010256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025a:	4770      	bx	lr
 801025c:	20001724 	.word	0x20001724

08010260 <GUI__Config>:
 8010260:	b508      	push	{r3, lr}
 8010262:	4b08      	ldr	r3, [pc, #32]	; (8010284 <GUI__Config+0x24>)
 8010264:	681a      	ldr	r2, [r3, #0]
 8010266:	b962      	cbnz	r2, 8010282 <GUI__Config+0x22>
 8010268:	2201      	movs	r2, #1
 801026a:	601a      	str	r2, [r3, #0]
 801026c:	f7f6 fabe 	bl	80067ec <GUI_X_Config>
 8010270:	f7f6 fc98 	bl	8006ba4 <LCD_X_Config>
 8010274:	4804      	ldr	r0, [pc, #16]	; (8010288 <GUI__Config+0x28>)
 8010276:	4b05      	ldr	r3, [pc, #20]	; (801028c <GUI__Config+0x2c>)
 8010278:	6003      	str	r3, [r0, #0]
 801027a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801027e:	f7ff bfdd 	b.w	801023c <GUI__RegisterExit>
 8010282:	bd08      	pop	{r3, pc}
 8010284:	200017a0 	.word	0x200017a0
 8010288:	20001798 	.word	0x20001798
 801028c:	08010101 	.word	0x08010101

08010290 <GUI_Init>:
 8010290:	b580      	push	{r7, lr}
 8010292:	b082      	sub	sp, #8
 8010294:	af00      	add	r7, sp, #0
 8010296:	4b15      	ldr	r3, [pc, #84]	; (80102ec <GUI_Init+0x5c>)
 8010298:	4a14      	ldr	r2, [pc, #80]	; (80102ec <GUI_Init+0x5c>)
 801029a:	6812      	ldr	r2, [r2, #0]
 801029c:	f022 0201 	bic.w	r2, r2, #1
 80102a0:	601a      	str	r2, [r3, #0]
 80102a2:	4b13      	ldr	r3, [pc, #76]	; (80102f0 <GUI_Init+0x60>)
 80102a4:	2201      	movs	r2, #1
 80102a6:	601a      	str	r2, [r3, #0]
 80102a8:	4b12      	ldr	r3, [pc, #72]	; (80102f4 <GUI_Init+0x64>)
 80102aa:	4a13      	ldr	r2, [pc, #76]	; (80102f8 <GUI_Init+0x68>)
 80102ac:	601a      	str	r2, [r3, #0]
 80102ae:	4b11      	ldr	r3, [pc, #68]	; (80102f4 <GUI_Init+0x64>)
 80102b0:	681a      	ldr	r2, [r3, #0]
 80102b2:	4b12      	ldr	r3, [pc, #72]	; (80102fc <GUI_Init+0x6c>)
 80102b4:	429a      	cmp	r2, r3
 80102b6:	d000      	beq.n	80102ba <GUI_Init+0x2a>
 80102b8:	e7fe      	b.n	80102b8 <GUI_Init+0x28>
 80102ba:	f7ff ffd1 	bl	8010260 <GUI__Config>
 80102be:	4b10      	ldr	r3, [pc, #64]	; (8010300 <GUI_Init+0x70>)
 80102c0:	222e      	movs	r2, #46	; 0x2e
 80102c2:	701a      	strb	r2, [r3, #0]
 80102c4:	f7f6 fddc 	bl	8006e80 <GUI_X_Init>
 80102c8:	480e      	ldr	r0, [pc, #56]	; (8010304 <GUI_Init+0x74>)
 80102ca:	f7ff ff2f 	bl	801012c <_InitContext>
 80102ce:	f7fe fc1b 	bl	800eb08 <emWin_LCD_Init>
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	2000      	movs	r0, #0
 80102d6:	2100      	movs	r1, #0
 80102d8:	f006 ff64 	bl	80171a4 <GUI_SetOrg>
 80102dc:	f7fc f98c 	bl	800c5f8 <WM_Init>
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	4618      	mov	r0, r3
 80102e4:	3708      	adds	r7, #8
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}
 80102ea:	bf00      	nop
 80102ec:	e0002000 	.word	0xe0002000
 80102f0:	40023008 	.word	0x40023008
 80102f4:	40023000 	.word	0x40023000
 80102f8:	f407a5c2 	.word	0xf407a5c2
 80102fc:	b5e8b5cd 	.word	0xb5e8b5cd
 8010300:	20021be2 	.word	0x20021be2
 8010304:	20001728 	.word	0x20001728

08010308 <GUIPROP__FindChar>:
 8010308:	b138      	cbz	r0, 801031a <GUIPROP__FindChar+0x12>
 801030a:	8803      	ldrh	r3, [r0, #0]
 801030c:	428b      	cmp	r3, r1
 801030e:	d802      	bhi.n	8010316 <GUIPROP__FindChar+0xe>
 8010310:	8843      	ldrh	r3, [r0, #2]
 8010312:	428b      	cmp	r3, r1
 8010314:	d201      	bcs.n	801031a <GUIPROP__FindChar+0x12>
 8010316:	6880      	ldr	r0, [r0, #8]
 8010318:	e7f6      	b.n	8010308 <GUIPROP__FindChar>
 801031a:	4770      	bx	lr

0801031c <GUIPROP_DispChar>:
 801031c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010320:	4c38      	ldr	r4, [pc, #224]	; (8010404 <GUIPROP_DispChar+0xe8>)
 8010322:	6823      	ldr	r3, [r4, #0]
 8010324:	f9b3 902a 	ldrsh.w	r9, [r3, #42]	; 0x2a
 8010328:	69db      	ldr	r3, [r3, #28]
 801032a:	4605      	mov	r5, r0
 801032c:	b089      	sub	sp, #36	; 0x24
 801032e:	69d8      	ldr	r0, [r3, #28]
 8010330:	4629      	mov	r1, r5
 8010332:	f7ff ffe9 	bl	8010308 <GUIPROP__FindChar>
 8010336:	2800      	cmp	r0, #0
 8010338:	d061      	beq.n	80103fe <GUIPROP_DispChar+0xe2>
 801033a:	f8b0 8000 	ldrh.w	r8, [r0]
 801033e:	6847      	ldr	r7, [r0, #4]
 8010340:	ebc8 0805 	rsb	r8, r8, r5
 8010344:	eb07 06c8 	add.w	r6, r7, r8, lsl #3
 8010348:	4648      	mov	r0, r9
 801034a:	f896 b002 	ldrb.w	fp, [r6, #2]
 801034e:	f7fe f933 	bl	800e5b8 <LCD_SetDrawMode>
 8010352:	6825      	ldr	r5, [r4, #0]
 8010354:	f817 2038 	ldrb.w	r2, [r7, r8, lsl #3]
 8010358:	f8d5 e01c 	ldr.w	lr, [r5, #28]
 801035c:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
 8010360:	f89e c01a 	ldrb.w	ip, [lr, #26]
 8010364:	f89e 3018 	ldrb.w	r3, [lr, #24]
 8010368:	9306      	str	r3, [sp, #24]
 801036a:	4682      	mov	sl, r0
 801036c:	f9b5 0022 	ldrsh.w	r0, [r5, #34]	; 0x22
 8010370:	f8cd c000 	str.w	ip, [sp]
 8010374:	f89e e01b 	ldrb.w	lr, [lr, #27]
 8010378:	f8cd e004 	str.w	lr, [sp, #4]
 801037c:	f04f 0e01 	mov.w	lr, #1
 8010380:	f8cd b00c 	str.w	fp, [sp, #12]
 8010384:	f8cd e008 	str.w	lr, [sp, #8]
 8010388:	6873      	ldr	r3, [r6, #4]
 801038a:	9304      	str	r3, [sp, #16]
 801038c:	6bad      	ldr	r5, [r5, #56]	; 0x38
 801038e:	9b06      	ldr	r3, [sp, #24]
 8010390:	9505      	str	r5, [sp, #20]
 8010392:	f7fe fa9f 	bl	800e8d4 <LCD_DrawBitmap>
 8010396:	6823      	ldr	r3, [r4, #0]
 8010398:	69da      	ldr	r2, [r3, #28]
 801039a:	f892 b019 	ldrb.w	fp, [r2, #25]
 801039e:	7e11      	ldrb	r1, [r2, #24]
 80103a0:	458b      	cmp	fp, r1
 80103a2:	d920      	bls.n	80103e6 <GUIPROP_DispChar+0xca>
 80103a4:	f1b9 0f02 	cmp.w	r9, #2
 80103a8:	7ed5      	ldrb	r5, [r2, #27]
 80103aa:	d01c      	beq.n	80103e6 <GUIPROP_DispChar+0xca>
 80103ac:	9107      	str	r1, [sp, #28]
 80103ae:	f006 ff36 	bl	801721e <GUI_GetColor>
 80103b2:	4681      	mov	r9, r0
 80103b4:	f006 ff2c 	bl	8017210 <GUI_GetBkColor>
 80103b8:	f7ff fa56 	bl	800f868 <GUI_SetColor>
 80103bc:	6824      	ldr	r4, [r4, #0]
 80103be:	f817 7038 	ldrb.w	r7, [r7, r8, lsl #3]
 80103c2:	69e2      	ldr	r2, [r4, #28]
 80103c4:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 80103c8:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80103cc:	7ed2      	ldrb	r2, [r2, #27]
 80103ce:	9907      	ldr	r1, [sp, #28]
 80103d0:	fb07 0202 	mla	r2, r7, r2, r0
 80103d4:	fb01 3105 	mla	r1, r1, r5, r3
 80103d8:	fb0b 3305 	mla	r3, fp, r5, r3
 80103dc:	f7fe f96e 	bl	800e6bc <LCD_FillRect>
 80103e0:	4648      	mov	r0, r9
 80103e2:	f7ff fa41 	bl	800f868 <GUI_SetColor>
 80103e6:	4650      	mov	r0, sl
 80103e8:	f7fe f8e6 	bl	800e5b8 <LCD_SetDrawMode>
 80103ec:	4b05      	ldr	r3, [pc, #20]	; (8010404 <GUIPROP_DispChar+0xe8>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	69da      	ldr	r2, [r3, #28]
 80103f2:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80103f4:	7e90      	ldrb	r0, [r2, #26]
 80103f6:	7872      	ldrb	r2, [r6, #1]
 80103f8:	fb00 1202 	mla	r2, r0, r2, r1
 80103fc:	845a      	strh	r2, [r3, #34]	; 0x22
 80103fe:	b009      	add	sp, #36	; 0x24
 8010400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010404:	20000308 	.word	0x20000308

08010408 <GUIPROP_GetCharDistX>:
 8010408:	4b0d      	ldr	r3, [pc, #52]	; (8010440 <GUIPROP_GetCharDistX+0x38>)
 801040a:	b570      	push	{r4, r5, r6, lr}
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	69dd      	ldr	r5, [r3, #28]
 8010410:	4606      	mov	r6, r0
 8010412:	460c      	mov	r4, r1
 8010414:	69e8      	ldr	r0, [r5, #28]
 8010416:	4631      	mov	r1, r6
 8010418:	f7ff ff76 	bl	8010308 <GUIPROP__FindChar>
 801041c:	b170      	cbz	r0, 801043c <GUIPROP_GetCharDistX+0x34>
 801041e:	8803      	ldrh	r3, [r0, #0]
 8010420:	6842      	ldr	r2, [r0, #4]
 8010422:	1af6      	subs	r6, r6, r3
 8010424:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 8010428:	7858      	ldrb	r0, [r3, #1]
 801042a:	7eab      	ldrb	r3, [r5, #26]
 801042c:	fb10 f003 	smulbb	r0, r0, r3
 8010430:	b124      	cbz	r4, 801043c <GUIPROP_GetCharDistX+0x34>
 8010432:	f812 2036 	ldrb.w	r2, [r2, r6, lsl #3]
 8010436:	fb12 f303 	smulbb	r3, r2, r3
 801043a:	6023      	str	r3, [r4, #0]
 801043c:	bd70      	pop	{r4, r5, r6, pc}
 801043e:	bf00      	nop
 8010440:	20000308 	.word	0x20000308

08010444 <GUIPROP_GetFontInfo>:
 8010444:	2301      	movs	r3, #1
 8010446:	800b      	strh	r3, [r1, #0]
 8010448:	4770      	bx	lr

0801044a <GUIPROP_IsInFont>:
 801044a:	b508      	push	{r3, lr}
 801044c:	69c0      	ldr	r0, [r0, #28]
 801044e:	f7ff ff5b 	bl	8010308 <GUIPROP__FindChar>
 8010452:	3000      	adds	r0, #0
 8010454:	bf18      	it	ne
 8010456:	2001      	movne	r0, #1
 8010458:	bd08      	pop	{r3, pc}
	...

0801045c <GUIMONO_DispChar>:
 801045c:	4b52      	ldr	r3, [pc, #328]	; (80105a8 <GUIMONO_DispChar+0x14c>)
 801045e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	69d9      	ldr	r1, [r3, #28]
 8010466:	8c5f      	ldrh	r7, [r3, #34]	; 0x22
 8010468:	69cc      	ldr	r4, [r1, #28]
 801046a:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
 801046c:	89a2      	ldrh	r2, [r4, #12]
 801046e:	4290      	cmp	r0, r2
 8010470:	b08b      	sub	sp, #44	; 0x2c
 8010472:	d308      	bcc.n	8010486 <GUIMONO_DispChar+0x2a>
 8010474:	89e6      	ldrh	r6, [r4, #14]
 8010476:	4286      	cmp	r6, r0
 8010478:	d305      	bcc.n	8010486 <GUIMONO_DispChar+0x2a>
 801047a:	f8d4 9000 	ldr.w	r9, [r4]
 801047e:	1a82      	subs	r2, r0, r2
 8010480:	f04f 3bff 	mov.w	fp, #4294967295
 8010484:	e015      	b.n	80104b2 <GUIMONO_DispChar+0x56>
 8010486:	68a2      	ldr	r2, [r4, #8]
 8010488:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801048c:	2a00      	cmp	r2, #0
 801048e:	f000 8081 	beq.w	8010594 <GUIMONO_DispChar+0x138>
 8010492:	8816      	ldrh	r6, [r2, #0]
 8010494:	42b0      	cmp	r0, r6
 8010496:	d37d      	bcc.n	8010594 <GUIMONO_DispChar+0x138>
 8010498:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 801049c:	4584      	cmp	ip, r0
 801049e:	d379      	bcc.n	8010594 <GUIMONO_DispChar+0x138>
 80104a0:	6852      	ldr	r2, [r2, #4]
 80104a2:	1b80      	subs	r0, r0, r6
 80104a4:	b280      	uxth	r0, r0
 80104a6:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 80104aa:	f932 2020 	ldrsh.w	r2, [r2, r0, lsl #2]
 80104ae:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 80104b2:	1c50      	adds	r0, r2, #1
 80104b4:	d06e      	beq.n	8010594 <GUIMONO_DispChar+0x138>
 80104b6:	f891 8018 	ldrb.w	r8, [r1, #24]
 80104ba:	7ca1      	ldrb	r1, [r4, #18]
 80104bc:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 80104c0:	7c26      	ldrb	r6, [r4, #16]
 80104c2:	9206      	str	r2, [sp, #24]
 80104c4:	fb18 f101 	smulbb	r1, r8, r1
 80104c8:	9107      	str	r1, [sp, #28]
 80104ca:	fa0f f18a 	sxth.w	r1, sl
 80104ce:	4608      	mov	r0, r1
 80104d0:	9108      	str	r1, [sp, #32]
 80104d2:	f7fe f871 	bl	800e5b8 <LCD_SetDrawMode>
 80104d6:	4934      	ldr	r1, [pc, #208]	; (80105a8 <GUIMONO_DispChar+0x14c>)
 80104d8:	9009      	str	r0, [sp, #36]	; 0x24
 80104da:	680b      	ldr	r3, [r1, #0]
 80104dc:	9a06      	ldr	r2, [sp, #24]
 80104de:	69d9      	ldr	r1, [r3, #28]
 80104e0:	7e88      	ldrb	r0, [r1, #26]
 80104e2:	9000      	str	r0, [sp, #0]
 80104e4:	7ec9      	ldrb	r1, [r1, #27]
 80104e6:	9101      	str	r1, [sp, #4]
 80104e8:	2101      	movs	r1, #1
 80104ea:	9102      	str	r1, [sp, #8]
 80104ec:	7ca1      	ldrb	r1, [r4, #18]
 80104ee:	9103      	str	r1, [sp, #12]
 80104f0:	9907      	ldr	r1, [sp, #28]
 80104f2:	fb01 9202 	mla	r2, r1, r2, r9
 80104f6:	9204      	str	r2, [sp, #16]
 80104f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104fa:	9305      	str	r3, [sp, #20]
 80104fc:	b23f      	sxth	r7, r7
 80104fe:	b22d      	sxth	r5, r5
 8010500:	4638      	mov	r0, r7
 8010502:	4629      	mov	r1, r5
 8010504:	4632      	mov	r2, r6
 8010506:	4643      	mov	r3, r8
 8010508:	f7fe f9e4 	bl	800e8d4 <LCD_DrawBitmap>
 801050c:	f1bb 3fff 	cmp.w	fp, #4294967295
 8010510:	d01b      	beq.n	801054a <GUIMONO_DispChar+0xee>
 8010512:	f04a 0002 	orr.w	r0, sl, #2
 8010516:	b200      	sxth	r0, r0
 8010518:	f7fe f84e 	bl	800e5b8 <LCD_SetDrawMode>
 801051c:	4a22      	ldr	r2, [pc, #136]	; (80105a8 <GUIMONO_DispChar+0x14c>)
 801051e:	6813      	ldr	r3, [r2, #0]
 8010520:	69da      	ldr	r2, [r3, #28]
 8010522:	7e91      	ldrb	r1, [r2, #26]
 8010524:	9100      	str	r1, [sp, #0]
 8010526:	7ed2      	ldrb	r2, [r2, #27]
 8010528:	9201      	str	r2, [sp, #4]
 801052a:	2101      	movs	r1, #1
 801052c:	9102      	str	r1, [sp, #8]
 801052e:	9907      	ldr	r1, [sp, #28]
 8010530:	7ca2      	ldrb	r2, [r4, #18]
 8010532:	9203      	str	r2, [sp, #12]
 8010534:	fb01 920b 	mla	r2, r1, fp, r9
 8010538:	9204      	str	r2, [sp, #16]
 801053a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801053c:	9305      	str	r3, [sp, #20]
 801053e:	4638      	mov	r0, r7
 8010540:	4629      	mov	r1, r5
 8010542:	4632      	mov	r2, r6
 8010544:	4643      	mov	r3, r8
 8010546:	f7fe f9c5 	bl	800e8d4 <LCD_DrawBitmap>
 801054a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80105a8 <GUIMONO_DispChar+0x14c>
 801054e:	f8d8 3000 	ldr.w	r3, [r8]
 8010552:	69db      	ldr	r3, [r3, #28]
 8010554:	7e5a      	ldrb	r2, [r3, #25]
 8010556:	7e1b      	ldrb	r3, [r3, #24]
 8010558:	429a      	cmp	r2, r3
 801055a:	d917      	bls.n	801058c <GUIMONO_DispChar+0x130>
 801055c:	9a08      	ldr	r2, [sp, #32]
 801055e:	2a02      	cmp	r2, #2
 8010560:	d014      	beq.n	801058c <GUIMONO_DispChar+0x130>
 8010562:	f08a 0004 	eor.w	r0, sl, #4
 8010566:	b200      	sxth	r0, r0
 8010568:	f7fe f826 	bl	800e5b8 <LCD_SetDrawMode>
 801056c:	f8d8 3000 	ldr.w	r3, [r8]
 8010570:	69db      	ldr	r3, [r3, #28]
 8010572:	f893 e018 	ldrb.w	lr, [r3, #24]
 8010576:	7ed9      	ldrb	r1, [r3, #27]
 8010578:	7e9a      	ldrb	r2, [r3, #26]
 801057a:	7e5b      	ldrb	r3, [r3, #25]
 801057c:	4638      	mov	r0, r7
 801057e:	fb0e 5101 	mla	r1, lr, r1, r5
 8010582:	fb06 7202 	mla	r2, r6, r2, r7
 8010586:	442b      	add	r3, r5
 8010588:	f7fe f898 	bl	800e6bc <LCD_FillRect>
 801058c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801058e:	b2d8      	uxtb	r0, r3
 8010590:	f7fe f812 	bl	800e5b8 <LCD_SetDrawMode>
 8010594:	4b04      	ldr	r3, [pc, #16]	; (80105a8 <GUIMONO_DispChar+0x14c>)
 8010596:	7c61      	ldrb	r1, [r4, #17]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801059c:	440a      	add	r2, r1
 801059e:	845a      	strh	r2, [r3, #34]	; 0x22
 80105a0:	b00b      	add	sp, #44	; 0x2c
 80105a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105a6:	bf00      	nop
 80105a8:	20000308 	.word	0x20000308

080105ac <GUIMONO_GetCharDistX>:
 80105ac:	4b04      	ldr	r3, [pc, #16]	; (80105c0 <GUIMONO_GetCharDistX+0x14>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	69db      	ldr	r3, [r3, #28]
 80105b2:	69db      	ldr	r3, [r3, #28]
 80105b4:	b109      	cbz	r1, 80105ba <GUIMONO_GetCharDistX+0xe>
 80105b6:	7c1a      	ldrb	r2, [r3, #16]
 80105b8:	600a      	str	r2, [r1, #0]
 80105ba:	7c58      	ldrb	r0, [r3, #17]
 80105bc:	4770      	bx	lr
 80105be:	bf00      	nop
 80105c0:	20000308 	.word	0x20000308

080105c4 <GUIMONO_GetFontInfo>:
 80105c4:	2302      	movs	r3, #2
 80105c6:	800b      	strh	r3, [r1, #0]
 80105c8:	4770      	bx	lr

080105ca <GUIMONO_IsInFont>:
 80105ca:	69c3      	ldr	r3, [r0, #28]
 80105cc:	899a      	ldrh	r2, [r3, #12]
 80105ce:	428a      	cmp	r2, r1
 80105d0:	d802      	bhi.n	80105d8 <GUIMONO_IsInFont+0xe>
 80105d2:	89da      	ldrh	r2, [r3, #14]
 80105d4:	428a      	cmp	r2, r1
 80105d6:	d20f      	bcs.n	80105f8 <GUIMONO_IsInFont+0x2e>
 80105d8:	6898      	ldr	r0, [r3, #8]
 80105da:	b180      	cbz	r0, 80105fe <GUIMONO_IsInFont+0x34>
 80105dc:	8803      	ldrh	r3, [r0, #0]
 80105de:	4299      	cmp	r1, r3
 80105e0:	d30c      	bcc.n	80105fc <GUIMONO_IsInFont+0x32>
 80105e2:	8842      	ldrh	r2, [r0, #2]
 80105e4:	428a      	cmp	r2, r1
 80105e6:	d309      	bcc.n	80105fc <GUIMONO_IsInFont+0x32>
 80105e8:	1ac9      	subs	r1, r1, r3
 80105ea:	6842      	ldr	r2, [r0, #4]
 80105ec:	f832 0021 	ldrh.w	r0, [r2, r1, lsl #2]
 80105f0:	43c0      	mvns	r0, r0
 80105f2:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 80105f6:	4770      	bx	lr
 80105f8:	2001      	movs	r0, #1
 80105fa:	4770      	bx	lr
 80105fc:	2000      	movs	r0, #0
 80105fe:	4770      	bx	lr

08010600 <_Log2VisBuffered>:
 8010600:	4770      	bx	lr
	...

08010604 <_DispLine>:
 8010604:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010606:	4615      	mov	r5, r2
 8010608:	ab02      	add	r3, sp, #8
 801060a:	4a1a      	ldr	r2, [pc, #104]	; (8010674 <_DispLine+0x70>)
 801060c:	f843 1d08 	str.w	r1, [r3, #-8]!
 8010610:	9001      	str	r0, [sp, #4]
 8010612:	6812      	ldr	r2, [r2, #0]
 8010614:	4c18      	ldr	r4, [pc, #96]	; (8010678 <_DispLine+0x74>)
 8010616:	4669      	mov	r1, sp
 8010618:	4790      	blx	r2
 801061a:	6823      	ldr	r3, [r4, #0]
 801061c:	9001      	str	r0, [sp, #4]
 801061e:	6958      	ldr	r0, [r3, #20]
 8010620:	b958      	cbnz	r0, 801063a <_DispLine+0x36>
 8010622:	2001      	movs	r0, #1
 8010624:	f7fe fc0a 	bl	800ee3c <GUI__ManageCache>
 8010628:	6823      	ldr	r3, [r4, #0]
 801062a:	69db      	ldr	r3, [r3, #28]
 801062c:	695b      	ldr	r3, [r3, #20]
 801062e:	b1bb      	cbz	r3, 8010660 <_DispLine+0x5c>
 8010630:	689b      	ldr	r3, [r3, #8]
 8010632:	9801      	ldr	r0, [sp, #4]
 8010634:	9900      	ldr	r1, [sp, #0]
 8010636:	4798      	blx	r3
 8010638:	e017      	b.n	801066a <_DispLine+0x66>
 801063a:	4629      	mov	r1, r5
 801063c:	f7ff f96e 	bl	800f91c <GUI_RectsIntersect>
 8010640:	2800      	cmp	r0, #0
 8010642:	d1ee      	bne.n	8010622 <_DispLine+0x1e>
 8010644:	e014      	b.n	8010670 <_DispLine+0x6c>
 8010646:	a801      	add	r0, sp, #4
 8010648:	f7fe feda 	bl	800f400 <GUI_UC__GetCharCodeInc>
 801064c:	6823      	ldr	r3, [r4, #0]
 801064e:	69db      	ldr	r3, [r3, #28]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	4605      	mov	r5, r0
 8010654:	4798      	blx	r3
 8010656:	4b09      	ldr	r3, [pc, #36]	; (801067c <_DispLine+0x78>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	b10b      	cbz	r3, 8010660 <_DispLine+0x5c>
 801065c:	4628      	mov	r0, r5
 801065e:	4798      	blx	r3
 8010660:	9b00      	ldr	r3, [sp, #0]
 8010662:	3b01      	subs	r3, #1
 8010664:	2b00      	cmp	r3, #0
 8010666:	9300      	str	r3, [sp, #0]
 8010668:	daed      	bge.n	8010646 <_DispLine+0x42>
 801066a:	2000      	movs	r0, #0
 801066c:	f7fe fbe6 	bl	800ee3c <GUI__ManageCache>
 8010670:	b003      	add	sp, #12
 8010672:	bd30      	pop	{r4, r5, pc}
 8010674:	20000310 	.word	0x20000310
 8010678:	20000308 	.word	0x20000308
 801067c:	20021bfc 	.word	0x20021bfc

08010680 <GUI__GetLineNumChars>:
 8010680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010682:	460d      	mov	r5, r1
 8010684:	9001      	str	r0, [sp, #4]
 8010686:	4604      	mov	r4, r0
 8010688:	b198      	cbz	r0, 80106b2 <GUI__GetLineNumChars+0x32>
 801068a:	4b0b      	ldr	r3, [pc, #44]	; (80106b8 <GUI__GetLineNumChars+0x38>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	69db      	ldr	r3, [r3, #28]
 8010690:	695b      	ldr	r3, [r3, #20]
 8010692:	b10b      	cbz	r3, 8010698 <GUI__GetLineNumChars+0x18>
 8010694:	685b      	ldr	r3, [r3, #4]
 8010696:	b90b      	cbnz	r3, 801069c <GUI__GetLineNumChars+0x1c>
 8010698:	2400      	movs	r4, #0
 801069a:	e008      	b.n	80106ae <GUI__GetLineNumChars+0x2e>
 801069c:	4798      	blx	r3
 801069e:	e009      	b.n	80106b4 <GUI__GetLineNumChars+0x34>
 80106a0:	a801      	add	r0, sp, #4
 80106a2:	f7fe fead 	bl	800f400 <GUI_UC__GetCharCodeInc>
 80106a6:	b120      	cbz	r0, 80106b2 <GUI__GetLineNumChars+0x32>
 80106a8:	280a      	cmp	r0, #10
 80106aa:	d002      	beq.n	80106b2 <GUI__GetLineNumChars+0x32>
 80106ac:	3401      	adds	r4, #1
 80106ae:	42ac      	cmp	r4, r5
 80106b0:	dbf6      	blt.n	80106a0 <GUI__GetLineNumChars+0x20>
 80106b2:	4620      	mov	r0, r4
 80106b4:	b003      	add	sp, #12
 80106b6:	bd30      	pop	{r4, r5, pc}
 80106b8:	20000308 	.word	0x20000308

080106bc <GUI__GetOverlap>:
 80106bc:	b513      	push	{r0, r1, r4, lr}
 80106be:	a902      	add	r1, sp, #8
 80106c0:	2400      	movs	r4, #0
 80106c2:	f841 4d04 	str.w	r4, [r1, #-4]!
 80106c6:	f000 f8b7 	bl	8010838 <GUI_GetCharDistXEx>
 80106ca:	9b01      	ldr	r3, [sp, #4]
 80106cc:	4283      	cmp	r3, r0
 80106ce:	bfcc      	ite	gt
 80106d0:	ebc0 0003 	rsbgt	r0, r0, r3
 80106d4:	4620      	movle	r0, r4
 80106d6:	b002      	add	sp, #8
 80106d8:	bd10      	pop	{r4, pc}
	...

080106dc <GUI__GetLineDistX>:
 80106dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80106de:	4a15      	ldr	r2, [pc, #84]	; (8010734 <GUI__GetLineDistX+0x58>)
 80106e0:	9001      	str	r0, [sp, #4]
 80106e2:	ab02      	add	r3, sp, #8
 80106e4:	6812      	ldr	r2, [r2, #0]
 80106e6:	f843 1d08 	str.w	r1, [r3, #-8]!
 80106ea:	4669      	mov	r1, sp
 80106ec:	4790      	blx	r2
 80106ee:	9001      	str	r0, [sp, #4]
 80106f0:	b1f0      	cbz	r0, 8010730 <GUI__GetLineDistX+0x54>
 80106f2:	4b11      	ldr	r3, [pc, #68]	; (8010738 <GUI__GetLineDistX+0x5c>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	69db      	ldr	r3, [r3, #28]
 80106f8:	695b      	ldr	r3, [r3, #20]
 80106fa:	b10b      	cbz	r3, 8010700 <GUI__GetLineDistX+0x24>
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	b913      	cbnz	r3, 8010706 <GUI__GetLineDistX+0x2a>
 8010700:	2500      	movs	r5, #0
 8010702:	462c      	mov	r4, r5
 8010704:	e002      	b.n	801070c <GUI__GetLineDistX+0x30>
 8010706:	9900      	ldr	r1, [sp, #0]
 8010708:	4798      	blx	r3
 801070a:	e011      	b.n	8010730 <GUI__GetLineDistX+0x54>
 801070c:	9b00      	ldr	r3, [sp, #0]
 801070e:	3b01      	subs	r3, #1
 8010710:	2b00      	cmp	r3, #0
 8010712:	9300      	str	r3, [sp, #0]
 8010714:	db07      	blt.n	8010726 <GUI__GetLineDistX+0x4a>
 8010716:	a801      	add	r0, sp, #4
 8010718:	f7fe fe72 	bl	800f400 <GUI_UC__GetCharCodeInc>
 801071c:	4605      	mov	r5, r0
 801071e:	f000 f881 	bl	8010824 <GUI_GetCharDistX>
 8010722:	4404      	add	r4, r0
 8010724:	e7f2      	b.n	801070c <GUI__GetLineDistX+0x30>
 8010726:	4628      	mov	r0, r5
 8010728:	f7ff ffc8 	bl	80106bc <GUI__GetOverlap>
 801072c:	4420      	add	r0, r4
 801072e:	e7ff      	b.n	8010730 <GUI__GetLineDistX+0x54>
 8010730:	b003      	add	sp, #12
 8010732:	bd30      	pop	{r4, r5, pc}
 8010734:	20000310 	.word	0x20000310
 8010738:	20000308 	.word	0x20000308

0801073c <GUI__DispLine>:
 801073c:	4b27      	ldr	r3, [pc, #156]	; (80107dc <GUI__DispLine+0xa0>)
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010742:	4605      	mov	r5, r0
 8010744:	460c      	mov	r4, r1
 8010746:	b163      	cbz	r3, 8010762 <GUI__DispLine+0x26>
 8010748:	2000      	movs	r0, #0
 801074a:	f7fb fd09 	bl	800c160 <WM__InitIVRSearch>
 801074e:	2800      	cmp	r0, #0
 8010750:	d041      	beq.n	80107d6 <GUI__DispLine+0x9a>
 8010752:	4628      	mov	r0, r5
 8010754:	4621      	mov	r1, r4
 8010756:	466a      	mov	r2, sp
 8010758:	f7ff ff54 	bl	8010604 <_DispLine>
 801075c:	f7fb fc3e 	bl	800bfdc <WM__GetNextIVR>
 8010760:	e7f5      	b.n	801074e <GUI__DispLine+0x12>
 8010762:	6810      	ldr	r0, [r2, #0]
 8010764:	6851      	ldr	r1, [r2, #4]
 8010766:	4e1e      	ldr	r6, [pc, #120]	; (80107e0 <GUI__DispLine+0xa4>)
 8010768:	466b      	mov	r3, sp
 801076a:	c303      	stmia	r3!, {r0, r1}
 801076c:	6833      	ldr	r3, [r6, #0]
 801076e:	f8bd 1000 	ldrh.w	r1, [sp]
 8010772:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8010776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801077a:	4411      	add	r1, r2
 801077c:	f8ad 1000 	strh.w	r1, [sp]
 8010780:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8010784:	4419      	add	r1, r3
 8010786:	f8ad 1002 	strh.w	r1, [sp, #2]
 801078a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801078e:	440a      	add	r2, r1
 8010790:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010794:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010798:	4668      	mov	r0, sp
 801079a:	4413      	add	r3, r2
 801079c:	f8ad 3006 	strh.w	r3, [sp, #6]
 80107a0:	f7fb fcde 	bl	800c160 <WM__InitIVRSearch>
 80107a4:	6833      	ldr	r3, [r6, #0]
 80107a6:	b940      	cbnz	r0, 80107ba <GUI__DispLine+0x7e>
 80107a8:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80107aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80107ac:	1a8a      	subs	r2, r1, r2
 80107ae:	845a      	strh	r2, [r3, #34]	; 0x22
 80107b0:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 80107b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80107b4:	1a8a      	subs	r2, r1, r2
 80107b6:	849a      	strh	r2, [r3, #36]	; 0x24
 80107b8:	e00d      	b.n	80107d6 <GUI__DispLine+0x9a>
 80107ba:	f8bd 2000 	ldrh.w	r2, [sp]
 80107be:	845a      	strh	r2, [r3, #34]	; 0x22
 80107c0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80107c4:	849a      	strh	r2, [r3, #36]	; 0x24
 80107c6:	4628      	mov	r0, r5
 80107c8:	4621      	mov	r1, r4
 80107ca:	466a      	mov	r2, sp
 80107cc:	f7ff ff1a 	bl	8010604 <_DispLine>
 80107d0:	f7fb fc04 	bl	800bfdc <WM__GetNextIVR>
 80107d4:	e7e6      	b.n	80107a4 <GUI__DispLine+0x68>
 80107d6:	b002      	add	sp, #8
 80107d8:	bd70      	pop	{r4, r5, r6, pc}
 80107da:	bf00      	nop
 80107dc:	20021be4 	.word	0x20021be4
 80107e0:	20000308 	.word	0x20000308

080107e4 <GUI_GetYAdjust>:
 80107e4:	4b0a      	ldr	r3, [pc, #40]	; (8010810 <GUI_GetYAdjust+0x2c>)
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80107ea:	f002 020c 	and.w	r2, r2, #12
 80107ee:	2a08      	cmp	r2, #8
 80107f0:	d007      	beq.n	8010802 <GUI_GetYAdjust+0x1e>
 80107f2:	2a0c      	cmp	r2, #12
 80107f4:	d005      	beq.n	8010802 <GUI_GetYAdjust+0x1e>
 80107f6:	2a04      	cmp	r2, #4
 80107f8:	d107      	bne.n	801080a <GUI_GetYAdjust+0x26>
 80107fa:	69db      	ldr	r3, [r3, #28]
 80107fc:	7e18      	ldrb	r0, [r3, #24]
 80107fe:	3801      	subs	r0, #1
 8010800:	4770      	bx	lr
 8010802:	69db      	ldr	r3, [r3, #28]
 8010804:	7e18      	ldrb	r0, [r3, #24]
 8010806:	0840      	lsrs	r0, r0, #1
 8010808:	4770      	bx	lr
 801080a:	2000      	movs	r0, #0
 801080c:	4770      	bx	lr
 801080e:	bf00      	nop
 8010810:	20000308 	.word	0x20000308

08010814 <GUI_GetFontDistY>:
 8010814:	4b02      	ldr	r3, [pc, #8]	; (8010820 <GUI_GetFontDistY+0xc>)
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	69db      	ldr	r3, [r3, #28]
 801081a:	7e58      	ldrb	r0, [r3, #25]
 801081c:	4770      	bx	lr
 801081e:	bf00      	nop
 8010820:	20000308 	.word	0x20000308

08010824 <GUI_GetCharDistX>:
 8010824:	b508      	push	{r3, lr}
 8010826:	4b03      	ldr	r3, [pc, #12]	; (8010834 <GUI_GetCharDistX+0x10>)
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	69db      	ldr	r3, [r3, #28]
 801082c:	2100      	movs	r1, #0
 801082e:	685b      	ldr	r3, [r3, #4]
 8010830:	4798      	blx	r3
 8010832:	bd08      	pop	{r3, pc}
 8010834:	20000308 	.word	0x20000308

08010838 <GUI_GetCharDistXEx>:
 8010838:	b508      	push	{r3, lr}
 801083a:	4b03      	ldr	r3, [pc, #12]	; (8010848 <GUI_GetCharDistXEx+0x10>)
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	69db      	ldr	r3, [r3, #28]
 8010840:	685b      	ldr	r3, [r3, #4]
 8010842:	4798      	blx	r3
 8010844:	bd08      	pop	{r3, pc}
 8010846:	bf00      	nop
 8010848:	20000308 	.word	0x20000308

0801084c <_PushFreeBlock>:
 801084c:	4b07      	ldr	r3, [pc, #28]	; (801086c <_PushFreeBlock+0x20>)
 801084e:	685a      	ldr	r2, [r3, #4]
 8010850:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010852:	3201      	adds	r2, #1
 8010854:	b510      	push	{r4, lr}
 8010856:	605a      	str	r2, [r3, #4]
 8010858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801085a:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
 801085e:	6061      	str	r1, [r4, #4]
 8010860:	2100      	movs	r1, #0
 8010862:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 8010866:	6258      	str	r0, [r3, #36]	; 0x24
 8010868:	bd10      	pop	{r4, pc}
 801086a:	bf00      	nop
 801086c:	20021c1c 	.word	0x20021c1c

08010870 <_OnExit>:
 8010870:	b538      	push	{r3, r4, r5, lr}
 8010872:	4d0b      	ldr	r5, [pc, #44]	; (80108a0 <_OnExit+0x30>)
 8010874:	2400      	movs	r4, #0
 8010876:	f105 0040 	add.w	r0, r5, #64	; 0x40
 801087a:	4621      	mov	r1, r4
 801087c:	2280      	movs	r2, #128	; 0x80
 801087e:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
 8010882:	f7fe f9fc 	bl	800ec7e <GUI__memset>
 8010886:	4628      	mov	r0, r5
 8010888:	4621      	mov	r1, r4
 801088a:	22c0      	movs	r2, #192	; 0xc0
 801088c:	f7fe f9f7 	bl	800ec7e <GUI__memset>
 8010890:	4621      	mov	r1, r4
 8010892:	4804      	ldr	r0, [pc, #16]	; (80108a4 <_OnExit+0x34>)
 8010894:	220c      	movs	r2, #12
 8010896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801089a:	f7fe b9f0 	b.w	800ec7e <GUI__memset>
 801089e:	bf00      	nop
 80108a0:	20021c1c 	.word	0x20021c1c
 80108a4:	200017a4 	.word	0x200017a4

080108a8 <_RemoveFreeBlock>:
 80108a8:	b510      	push	{r4, lr}
 80108aa:	6842      	ldr	r2, [r0, #4]
 80108ac:	230f      	movs	r3, #15
 80108ae:	490b      	ldr	r1, [pc, #44]	; (80108dc <_RemoveFreeBlock+0x34>)
 80108b0:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 80108b4:	6c24      	ldr	r4, [r4, #64]	; 0x40
 80108b6:	42a2      	cmp	r2, r4
 80108b8:	d202      	bcs.n	80108c0 <_RemoveFreeBlock+0x18>
 80108ba:	f113 33ff 	adds.w	r3, r3, #4294967295
 80108be:	d2f6      	bcs.n	80108ae <_RemoveFreeBlock+0x6>
 80108c0:	680c      	ldr	r4, [r1, #0]
 80108c2:	1aa2      	subs	r2, r4, r2
 80108c4:	600a      	str	r2, [r1, #0]
 80108c6:	6882      	ldr	r2, [r0, #8]
 80108c8:	68c0      	ldr	r0, [r0, #12]
 80108ca:	b102      	cbz	r2, 80108ce <_RemoveFreeBlock+0x26>
 80108cc:	6050      	str	r0, [r2, #4]
 80108ce:	b108      	cbz	r0, 80108d4 <_RemoveFreeBlock+0x2c>
 80108d0:	6002      	str	r2, [r0, #0]
 80108d2:	bd10      	pop	{r4, pc}
 80108d4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80108d8:	645a      	str	r2, [r3, #68]	; 0x44
 80108da:	bd10      	pop	{r4, pc}
 80108dc:	20021c1c 	.word	0x20021c1c

080108e0 <_AddFreeMemory>:
 80108e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108e2:	4e25      	ldr	r6, [pc, #148]	; (8010978 <_AddFreeMemory+0x98>)
 80108e4:	68f3      	ldr	r3, [r6, #12]
 80108e6:	1e5a      	subs	r2, r3, #1
 80108e8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80108ea:	4605      	mov	r5, r0
 80108ec:	4413      	add	r3, r2
 80108ee:	1808      	adds	r0, r1, r0
 80108f0:	4298      	cmp	r0, r3
 80108f2:	460c      	mov	r4, r1
 80108f4:	d805      	bhi.n	8010902 <_AddFreeMemory+0x22>
 80108f6:	594b      	ldr	r3, [r1, r5]
 80108f8:	b91b      	cbnz	r3, 8010902 <_AddFreeMemory+0x22>
 80108fa:	6843      	ldr	r3, [r0, #4]
 80108fc:	441d      	add	r5, r3
 80108fe:	f7ff ffd3 	bl	80108a8 <_RemoveFreeBlock>
 8010902:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8010904:	429c      	cmp	r4, r3
 8010906:	d90a      	bls.n	801091e <_AddFreeMemory+0x3e>
 8010908:	f854 7c04 	ldr.w	r7, [r4, #-4]
 801090c:	1be7      	subs	r7, r4, r7
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	b92b      	cbnz	r3, 801091e <_AddFreeMemory+0x3e>
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	4638      	mov	r0, r7
 8010916:	441d      	add	r5, r3
 8010918:	f7ff ffc6 	bl	80108a8 <_RemoveFreeBlock>
 801091c:	463c      	mov	r4, r7
 801091e:	230f      	movs	r3, #15
 8010920:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8010924:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8010926:	4295      	cmp	r5, r2
 8010928:	d202      	bcs.n	8010930 <_AddFreeMemory+0x50>
 801092a:	f113 33ff 	adds.w	r3, r3, #4294967295
 801092e:	d2f7      	bcs.n	8010920 <_AddFreeMemory+0x40>
 8010930:	3308      	adds	r3, #8
 8010932:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8010936:	1961      	adds	r1, r4, r5
 8010938:	6852      	ldr	r2, [r2, #4]
 801093a:	60a2      	str	r2, [r4, #8]
 801093c:	2000      	movs	r0, #0
 801093e:	e884 0021 	stmia.w	r4, {r0, r5}
 8010942:	6124      	str	r4, [r4, #16]
 8010944:	f841 5c04 	str.w	r5, [r1, #-4]
 8010948:	f104 0108 	add.w	r1, r4, #8
 801094c:	b102      	cbz	r2, 8010950 <_AddFreeMemory+0x70>
 801094e:	6051      	str	r1, [r2, #4]
 8010950:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8010954:	60e0      	str	r0, [r4, #12]
 8010956:	6059      	str	r1, [r3, #4]
 8010958:	6833      	ldr	r3, [r6, #0]
 801095a:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
 801095e:	4a06      	ldr	r2, [pc, #24]	; (8010978 <_AddFreeMemory+0x98>)
 8010960:	442b      	add	r3, r5
 8010962:	6033      	str	r3, [r6, #0]
 8010964:	b929      	cbnz	r1, 8010972 <_AddFreeMemory+0x92>
 8010966:	68d1      	ldr	r1, [r2, #12]
 8010968:	1acb      	subs	r3, r1, r3
 801096a:	6891      	ldr	r1, [r2, #8]
 801096c:	4299      	cmp	r1, r3
 801096e:	bf38      	it	cc
 8010970:	6093      	strcc	r3, [r2, #8]
 8010972:	4628      	mov	r0, r5
 8010974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010976:	bf00      	nop
 8010978:	20021c1c 	.word	0x20021c1c

0801097c <_RemoveHoles>:
 801097c:	4b25      	ldr	r3, [pc, #148]	; (8010a14 <_RemoveHoles+0x98>)
 801097e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010982:	68da      	ldr	r2, [r3, #12]
 8010984:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8010986:	3a01      	subs	r2, #1
 8010988:	4682      	mov	sl, r0
 801098a:	eb02 0904 	add.w	r9, r2, r4
 801098e:	469b      	mov	fp, r3
 8010990:	e894 0028 	ldmia.w	r4, {r3, r5}
 8010994:	2b00      	cmp	r3, #0
 8010996:	d133      	bne.n	8010a00 <_RemoveHoles+0x84>
 8010998:	eb04 0805 	add.w	r8, r4, r5
 801099c:	45c8      	cmp	r8, r9
 801099e:	d22f      	bcs.n	8010a00 <_RemoveHoles+0x84>
 80109a0:	f854 c005 	ldr.w	ip, [r4, r5]
 80109a4:	f8d8 6004 	ldr.w	r6, [r8, #4]
 80109a8:	f1bc 0f00 	cmp.w	ip, #0
 80109ac:	d028      	beq.n	8010a00 <_RemoveHoles+0x84>
 80109ae:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 80109b2:	4f18      	ldr	r7, [pc, #96]	; (8010a14 <_RemoveHoles+0x98>)
 80109b4:	f813 303c 	ldrb.w	r3, [r3, ip, lsl #3]
 80109b8:	2b01      	cmp	r3, #1
 80109ba:	d121      	bne.n	8010a00 <_RemoveHoles+0x84>
 80109bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109be:	4620      	mov	r0, r4
 80109c0:	e88d 1008 	stmia.w	sp, {r3, ip}
 80109c4:	f7ff ff70 	bl	80108a8 <_RemoveFreeBlock>
 80109c8:	f8d8 1000 	ldr.w	r1, [r8]
 80109cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80109ce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80109d2:	4620      	mov	r0, r4
 80109d4:	6054      	str	r4, [r2, #4]
 80109d6:	4641      	mov	r1, r8
 80109d8:	4632      	mov	r2, r6
 80109da:	f008 f92b 	bl	8018c34 <memmove>
 80109de:	e89d 1008 	ldmia.w	sp, {r3, ip}
 80109e2:	459c      	cmp	ip, r3
 80109e4:	d102      	bne.n	80109ec <_RemoveHoles+0x70>
 80109e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109e8:	1b5b      	subs	r3, r3, r5
 80109ea:	637b      	str	r3, [r7, #52]	; 0x34
 80109ec:	4628      	mov	r0, r5
 80109ee:	19a1      	adds	r1, r4, r6
 80109f0:	f7ff ff76 	bl	80108e0 <_AddFreeMemory>
 80109f4:	f1ba 0f00 	cmp.w	sl, #0
 80109f8:	d001      	beq.n	80109fe <_RemoveHoles+0x82>
 80109fa:	4582      	cmp	sl, r0
 80109fc:	d905      	bls.n	8010a0a <_RemoveHoles+0x8e>
 80109fe:	4635      	mov	r5, r6
 8010a00:	442c      	add	r4, r5
 8010a02:	454c      	cmp	r4, r9
 8010a04:	d3c4      	bcc.n	8010990 <_RemoveHoles+0x14>
 8010a06:	2001      	movs	r0, #1
 8010a08:	e000      	b.n	8010a0c <_RemoveHoles+0x90>
 8010a0a:	2000      	movs	r0, #0
 8010a0c:	b003      	add	sp, #12
 8010a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a12:	bf00      	nop
 8010a14:	20021c1c 	.word	0x20021c1c

08010a18 <GUI_ALLOC_FreeFixedBlock>:
 8010a18:	b128      	cbz	r0, 8010a26 <GUI_ALLOC_FreeFixedBlock+0xe>
 8010a1a:	4a03      	ldr	r2, [pc, #12]	; (8010a28 <GUI_ALLOC_FreeFixedBlock+0x10>)
 8010a1c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8010a1e:	6003      	str	r3, [r0, #0]
 8010a20:	b103      	cbz	r3, 8010a24 <GUI_ALLOC_FreeFixedBlock+0xc>
 8010a22:	6058      	str	r0, [r3, #4]
 8010a24:	63d0      	str	r0, [r2, #60]	; 0x3c
 8010a26:	4770      	bx	lr
 8010a28:	20021c1c 	.word	0x20021c1c

08010a2c <GUI_ALLOC_h2p>:
 8010a2c:	b128      	cbz	r0, 8010a3a <GUI_ALLOC_h2p+0xe>
 8010a2e:	4b03      	ldr	r3, [pc, #12]	; (8010a3c <GUI_ALLOC_h2p+0x10>)
 8010a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a32:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8010a36:	6840      	ldr	r0, [r0, #4]
 8010a38:	3008      	adds	r0, #8
 8010a3a:	4770      	bx	lr
 8010a3c:	20021c1c 	.word	0x20021c1c

08010a40 <GUI_ALLOC_LockH>:
 8010a40:	4b05      	ldr	r3, [pc, #20]	; (8010a58 <GUI_ALLOC_LockH+0x18>)
 8010a42:	69d9      	ldr	r1, [r3, #28]
 8010a44:	3101      	adds	r1, #1
 8010a46:	61d9      	str	r1, [r3, #28]
 8010a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a4a:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 8010a4e:	3101      	adds	r1, #1
 8010a50:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 8010a54:	f7ff bfea 	b.w	8010a2c <GUI_ALLOC_h2p>
 8010a58:	20021c1c 	.word	0x20021c1c

08010a5c <GUI_ALLOC_UnlockH>:
 8010a5c:	b530      	push	{r4, r5, lr}
 8010a5e:	6802      	ldr	r2, [r0, #0]
 8010a60:	4b09      	ldr	r3, [pc, #36]	; (8010a88 <GUI_ALLOC_UnlockH+0x2c>)
 8010a62:	f852 1c08 	ldr.w	r1, [r2, #-8]
 8010a66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010a68:	f812 4031 	ldrb.w	r4, [r2, r1, lsl #3]
 8010a6c:	2c01      	cmp	r4, #1
 8010a6e:	d903      	bls.n	8010a78 <GUI_ALLOC_UnlockH+0x1c>
 8010a70:	69dd      	ldr	r5, [r3, #28]
 8010a72:	b10d      	cbz	r5, 8010a78 <GUI_ALLOC_UnlockH+0x1c>
 8010a74:	3d01      	subs	r5, #1
 8010a76:	61dd      	str	r5, [r3, #28]
 8010a78:	3c01      	subs	r4, #1
 8010a7a:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
 8010a7e:	2300      	movs	r3, #0
 8010a80:	6003      	str	r3, [r0, #0]
 8010a82:	4618      	mov	r0, r3
 8010a84:	bd30      	pop	{r4, r5, pc}
 8010a86:	bf00      	nop
 8010a88:	20021c1c 	.word	0x20021c1c

08010a8c <GUI_ALLOC_AssignMemory>:
 8010a8c:	4b02      	ldr	r3, [pc, #8]	; (8010a98 <GUI_ALLOC_AssignMemory+0xc>)
 8010a8e:	f021 0103 	bic.w	r1, r1, #3
 8010a92:	6018      	str	r0, [r3, #0]
 8010a94:	6059      	str	r1, [r3, #4]
 8010a96:	4770      	bx	lr
 8010a98:	200017a4 	.word	0x200017a4

08010a9c <GUI_ALLOC_GetSize>:
 8010a9c:	b130      	cbz	r0, 8010aac <GUI_ALLOC_GetSize+0x10>
 8010a9e:	4b04      	ldr	r3, [pc, #16]	; (8010ab0 <GUI_ALLOC_GetSize+0x14>)
 8010aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010aa2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8010aa6:	6843      	ldr	r3, [r0, #4]
 8010aa8:	6858      	ldr	r0, [r3, #4]
 8010aaa:	380c      	subs	r0, #12
 8010aac:	4770      	bx	lr
 8010aae:	bf00      	nop
 8010ab0:	20021c1c 	.word	0x20021c1c

08010ab4 <GUI_ALLOC_Free>:
 8010ab4:	b510      	push	{r4, lr}
 8010ab6:	4604      	mov	r4, r0
 8010ab8:	b180      	cbz	r0, 8010adc <GUI_ALLOC_Free+0x28>
 8010aba:	4b09      	ldr	r3, [pc, #36]	; (8010ae0 <GUI_ALLOC_Free+0x2c>)
 8010abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010abe:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 8010ac2:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8010ac6:	2b01      	cmp	r3, #1
 8010ac8:	d108      	bne.n	8010adc <GUI_ALLOC_Free+0x28>
 8010aca:	6851      	ldr	r1, [r2, #4]
 8010acc:	6848      	ldr	r0, [r1, #4]
 8010ace:	f7ff ff07 	bl	80108e0 <_AddFreeMemory>
 8010ad2:	4620      	mov	r0, r4
 8010ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ad8:	f7ff beb8 	b.w	801084c <_PushFreeBlock>
 8010adc:	bd10      	pop	{r4, pc}
 8010ade:	bf00      	nop
 8010ae0:	20021c1c 	.word	0x20021c1c

08010ae4 <_EnlargeBlocks>:
 8010ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ae8:	4c22      	ldr	r4, [pc, #136]	; (8010b74 <_EnlargeBlocks+0x90>)
 8010aea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010aec:	b93b      	cbnz	r3, 8010afe <_EnlargeBlocks+0x1a>
 8010aee:	4b22      	ldr	r3, [pc, #136]	; (8010b78 <_EnlargeBlocks+0x94>)
 8010af0:	689d      	ldr	r5, [r3, #8]
 8010af2:	685b      	ldr	r3, [r3, #4]
 8010af4:	3508      	adds	r5, #8
 8010af6:	fbb3 f5f5 	udiv	r5, r3, r5
 8010afa:	3502      	adds	r5, #2
 8010afc:	e003      	b.n	8010b06 <_EnlargeBlocks+0x22>
 8010afe:	6923      	ldr	r3, [r4, #16]
 8010b00:	1d1d      	adds	r5, r3, #4
 8010b02:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 8010b06:	00e8      	lsls	r0, r5, #3
 8010b08:	f000 f978 	bl	8010dfc <_Alloc>
 8010b0c:	4680      	mov	r8, r0
 8010b0e:	b360      	cbz	r0, 8010b6a <_EnlargeBlocks+0x86>
 8010b10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b12:	6922      	ldr	r2, [r4, #16]
 8010b14:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8010b16:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 8010b1a:	00d2      	lsls	r2, r2, #3
 8010b1c:	685e      	ldr	r6, [r3, #4]
 8010b1e:	3608      	adds	r6, #8
 8010b20:	4630      	mov	r0, r6
 8010b22:	f008 f87c 	bl	8018c1e <memcpy>
 8010b26:	6922      	ldr	r2, [r4, #16]
 8010b28:	6366      	str	r6, [r4, #52]	; 0x34
 8010b2a:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
 8010b2e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 8010b32:	3104      	adds	r1, #4
 8010b34:	4613      	mov	r3, r2
 8010b36:	1e68      	subs	r0, r5, #1
 8010b38:	4283      	cmp	r3, r0
 8010b3a:	f101 0108 	add.w	r1, r1, #8
 8010b3e:	d203      	bcs.n	8010b48 <_EnlargeBlocks+0x64>
 8010b40:	3301      	adds	r3, #1
 8010b42:	f841 3c08 	str.w	r3, [r1, #-8]
 8010b46:	e7f6      	b.n	8010b36 <_EnlargeBlocks+0x52>
 8010b48:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8010b4c:	2600      	movs	r6, #0
 8010b4e:	605e      	str	r6, [r3, #4]
 8010b50:	6863      	ldr	r3, [r4, #4]
 8010b52:	6262      	str	r2, [r4, #36]	; 0x24
 8010b54:	1a9b      	subs	r3, r3, r2
 8010b56:	442b      	add	r3, r5
 8010b58:	6063      	str	r3, [r4, #4]
 8010b5a:	6125      	str	r5, [r4, #16]
 8010b5c:	4638      	mov	r0, r7
 8010b5e:	b13f      	cbz	r7, 8010b70 <_EnlargeBlocks+0x8c>
 8010b60:	f7ff ffa8 	bl	8010ab4 <GUI_ALLOC_Free>
 8010b64:	4630      	mov	r0, r6
 8010b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b6a:	2001      	movs	r0, #1
 8010b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b74:	20021c1c 	.word	0x20021c1c
 8010b78:	200017a4 	.word	0x200017a4

08010b7c <_InitOnce>:
 8010b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b7e:	4e58      	ldr	r6, [pc, #352]	; (8010ce0 <_InitOnce+0x164>)
 8010b80:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8010b84:	2900      	cmp	r1, #0
 8010b86:	f040 80aa 	bne.w	8010cde <_InitOnce+0x162>
 8010b8a:	4d56      	ldr	r5, [pc, #344]	; (8010ce4 <_InitOnce+0x168>)
 8010b8c:	686a      	ldr	r2, [r5, #4]
 8010b8e:	2301      	movs	r3, #1
 8010b90:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 8010b94:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8010b98:	bf28      	it	cs
 8010b9a:	f44f 5220 	movcs.w	r2, #10240	; 0x2800
 8010b9e:	682b      	ldr	r3, [r5, #0]
 8010ba0:	0894      	lsrs	r4, r2, #2
 8010ba2:	2000      	movs	r0, #0
 8010ba4:	42a0      	cmp	r0, r4
 8010ba6:	d00c      	beq.n	8010bc2 <_InitOnce+0x46>
 8010ba8:	1847      	adds	r7, r0, r1
 8010baa:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8010bae:	fbb7 fefe 	udiv	lr, r7, lr
 8010bb2:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 8010bb6:	ebce 0707 	rsb	r7, lr, r7
 8010bba:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 8010bbe:	3001      	adds	r0, #1
 8010bc0:	e7f0      	b.n	8010ba4 <_InitOnce+0x28>
 8010bc2:	2000      	movs	r0, #0
 8010bc4:	42a0      	cmp	r0, r4
 8010bc6:	d016      	beq.n	8010bf6 <_InitOnce+0x7a>
 8010bc8:	1847      	adds	r7, r0, r1
 8010bca:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8010bce:	fbb7 fefe 	udiv	lr, r7, lr
 8010bd2:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 8010bd6:	ebce 0e07 	rsb	lr, lr, r7
 8010bda:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8010bde:	4577      	cmp	r7, lr
 8010be0:	d007      	beq.n	8010bf2 <_InitOnce+0x76>
 8010be2:	68aa      	ldr	r2, [r5, #8]
 8010be4:	4b3f      	ldr	r3, [pc, #252]	; (8010ce4 <_InitOnce+0x168>)
 8010be6:	2a00      	cmp	r2, #0
 8010be8:	d155      	bne.n	8010c96 <_InitOnce+0x11a>
 8010bea:	685a      	ldr	r2, [r3, #4]
 8010bec:	0892      	lsrs	r2, r2, #2
 8010bee:	609a      	str	r2, [r3, #8]
 8010bf0:	e051      	b.n	8010c96 <_InitOnce+0x11a>
 8010bf2:	3001      	adds	r0, #1
 8010bf4:	e7e6      	b.n	8010bc4 <_InitOnce+0x48>
 8010bf6:	3101      	adds	r1, #1
 8010bf8:	2902      	cmp	r1, #2
 8010bfa:	d1d2      	bne.n	8010ba2 <_InitOnce+0x26>
 8010bfc:	0854      	lsrs	r4, r2, #1
 8010bfe:	2100      	movs	r1, #0
 8010c00:	2000      	movs	r0, #0
 8010c02:	42a0      	cmp	r0, r4
 8010c04:	d00c      	beq.n	8010c20 <_InitOnce+0xa4>
 8010c06:	1847      	adds	r7, r0, r1
 8010c08:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8010c0c:	fbb7 fefe 	udiv	lr, r7, lr
 8010c10:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 8010c14:	ebce 0707 	rsb	r7, lr, r7
 8010c18:	f823 7010 	strh.w	r7, [r3, r0, lsl #1]
 8010c1c:	3001      	adds	r0, #1
 8010c1e:	e7f0      	b.n	8010c02 <_InitOnce+0x86>
 8010c20:	2000      	movs	r0, #0
 8010c22:	42a0      	cmp	r0, r4
 8010c24:	d00f      	beq.n	8010c46 <_InitOnce+0xca>
 8010c26:	1847      	adds	r7, r0, r1
 8010c28:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8010c2c:	fbb7 fefe 	udiv	lr, r7, lr
 8010c30:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 8010c34:	ebce 0707 	rsb	r7, lr, r7
 8010c38:	f833 c010 	ldrh.w	ip, [r3, r0, lsl #1]
 8010c3c:	b2bf      	uxth	r7, r7
 8010c3e:	45bc      	cmp	ip, r7
 8010c40:	d1cf      	bne.n	8010be2 <_InitOnce+0x66>
 8010c42:	3001      	adds	r0, #1
 8010c44:	e7ed      	b.n	8010c22 <_InitOnce+0xa6>
 8010c46:	3101      	adds	r1, #1
 8010c48:	2902      	cmp	r1, #2
 8010c4a:	d1d9      	bne.n	8010c00 <_InitOnce+0x84>
 8010c4c:	2100      	movs	r1, #0
 8010c4e:	2000      	movs	r0, #0
 8010c50:	4290      	cmp	r0, r2
 8010c52:	d007      	beq.n	8010c64 <_InitOnce+0xe8>
 8010c54:	1844      	adds	r4, r0, r1
 8010c56:	27ff      	movs	r7, #255	; 0xff
 8010c58:	fbb4 f7f7 	udiv	r7, r4, r7
 8010c5c:	443c      	add	r4, r7
 8010c5e:	541c      	strb	r4, [r3, r0]
 8010c60:	3001      	adds	r0, #1
 8010c62:	e7f5      	b.n	8010c50 <_InitOnce+0xd4>
 8010c64:	2000      	movs	r0, #0
 8010c66:	4290      	cmp	r0, r2
 8010c68:	d00b      	beq.n	8010c82 <_InitOnce+0x106>
 8010c6a:	1844      	adds	r4, r0, r1
 8010c6c:	27ff      	movs	r7, #255	; 0xff
 8010c6e:	fbb4 f7f7 	udiv	r7, r4, r7
 8010c72:	443c      	add	r4, r7
 8010c74:	5c1f      	ldrb	r7, [r3, r0]
 8010c76:	f004 04ff 	and.w	r4, r4, #255	; 0xff
 8010c7a:	42a7      	cmp	r7, r4
 8010c7c:	d1b1      	bne.n	8010be2 <_InitOnce+0x66>
 8010c7e:	3001      	adds	r0, #1
 8010c80:	e7f1      	b.n	8010c66 <_InitOnce+0xea>
 8010c82:	3101      	adds	r1, #1
 8010c84:	2902      	cmp	r1, #2
 8010c86:	d1e2      	bne.n	8010c4e <_InitOnce+0xd2>
 8010c88:	2100      	movs	r1, #0
 8010c8a:	4291      	cmp	r1, r2
 8010c8c:	d0a9      	beq.n	8010be2 <_InitOnce+0x66>
 8010c8e:	2000      	movs	r0, #0
 8010c90:	5458      	strb	r0, [r3, r1]
 8010c92:	3101      	adds	r1, #1
 8010c94:	e7f9      	b.n	8010c8a <_InitOnce+0x10e>
 8010c96:	4814      	ldr	r0, [pc, #80]	; (8010ce8 <_InitOnce+0x16c>)
 8010c98:	4b14      	ldr	r3, [pc, #80]	; (8010cec <_InitOnce+0x170>)
 8010c9a:	6003      	str	r3, [r0, #0]
 8010c9c:	f7ff face 	bl	801023c <GUI__RegisterExit>
 8010ca0:	235a      	movs	r3, #90	; 0x5a
 8010ca2:	6233      	str	r3, [r6, #32]
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	2110      	movs	r1, #16
 8010ca8:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8010cac:	4099      	lsls	r1, r3
 8010cae:	3301      	adds	r3, #1
 8010cb0:	2b10      	cmp	r3, #16
 8010cb2:	4c0b      	ldr	r4, [pc, #44]	; (8010ce0 <_InitOnce+0x164>)
 8010cb4:	6411      	str	r1, [r2, #64]	; 0x40
 8010cb6:	d1f6      	bne.n	8010ca6 <_InitOnce+0x12a>
 8010cb8:	6868      	ldr	r0, [r5, #4]
 8010cba:	6829      	ldr	r1, [r5, #0]
 8010cbc:	63a1      	str	r1, [r4, #56]	; 0x38
 8010cbe:	2302      	movs	r3, #2
 8010cc0:	6123      	str	r3, [r4, #16]
 8010cc2:	f1a0 0314 	sub.w	r3, r0, #20
 8010cc6:	440b      	add	r3, r1
 8010cc8:	2501      	movs	r5, #1
 8010cca:	6363      	str	r3, [r4, #52]	; 0x34
 8010ccc:	60e0      	str	r0, [r4, #12]
 8010cce:	605d      	str	r5, [r3, #4]
 8010cd0:	6265      	str	r5, [r4, #36]	; 0x24
 8010cd2:	6065      	str	r5, [r4, #4]
 8010cd4:	f7ff fe04 	bl	80108e0 <_AddFreeMemory>
 8010cd8:	f7ff ff04 	bl	8010ae4 <_EnlargeBlocks>
 8010cdc:	6325      	str	r5, [r4, #48]	; 0x30
 8010cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ce0:	20021c1c 	.word	0x20021c1c
 8010ce4:	200017a4 	.word	0x200017a4
 8010ce8:	200017b0 	.word	0x200017b0
 8010cec:	08010871 	.word	0x08010871

08010cf0 <GUI_ALLOC_GetFixedBlock>:
 8010cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cf4:	4605      	mov	r5, r0
 8010cf6:	4e26      	ldr	r6, [pc, #152]	; (8010d90 <GUI_ALLOC_GetFixedBlock+0xa0>)
 8010cf8:	3503      	adds	r5, #3
 8010cfa:	f7ff ff3f 	bl	8010b7c <_InitOnce>
 8010cfe:	f025 0503 	bic.w	r5, r5, #3
 8010d02:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8010d04:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8010d06:	3504      	adds	r5, #4
 8010d08:	429d      	cmp	r5, r3
 8010d0a:	bf38      	it	cc
 8010d0c:	461d      	movcc	r5, r3
 8010d0e:	4614      	mov	r4, r2
 8010d10:	b12c      	cbz	r4, 8010d1e <GUI_ALLOC_GetFixedBlock+0x2e>
 8010d12:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010d16:	42ab      	cmp	r3, r5
 8010d18:	d02c      	beq.n	8010d74 <GUI_ALLOC_GetFixedBlock+0x84>
 8010d1a:	6824      	ldr	r4, [r4, #0]
 8010d1c:	e7f8      	b.n	8010d10 <GUI_ALLOC_GetFixedBlock+0x20>
 8010d1e:	68f3      	ldr	r3, [r6, #12]
 8010d20:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8010d22:	eb02 0803 	add.w	r8, r2, r3
 8010d26:	f858 7c04 	ldr.w	r7, [r8, #-4]
 8010d2a:	ebc7 0708 	rsb	r7, r7, r8
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	b133      	cbz	r3, 8010d40 <GUI_ALLOC_GetFixedBlock+0x50>
 8010d32:	4620      	mov	r0, r4
 8010d34:	f7ff fe22 	bl	801097c <_RemoveHoles>
 8010d38:	f858 7c04 	ldr.w	r7, [r8, #-4]
 8010d3c:	ebc7 0708 	rsb	r7, r7, r8
 8010d40:	683b      	ldr	r3, [r7, #0]
 8010d42:	bb13      	cbnz	r3, 8010d8a <GUI_ALLOC_GetFixedBlock+0x9a>
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	42ab      	cmp	r3, r5
 8010d48:	db1f      	blt.n	8010d8a <GUI_ALLOC_GetFixedBlock+0x9a>
 8010d4a:	4638      	mov	r0, r7
 8010d4c:	1d1c      	adds	r4, r3, #4
 8010d4e:	f7ff fdab 	bl	80108a8 <_RemoveFreeBlock>
 8010d52:	68f3      	ldr	r3, [r6, #12]
 8010d54:	6878      	ldr	r0, [r7, #4]
 8010d56:	1b5b      	subs	r3, r3, r5
 8010d58:	60f3      	str	r3, [r6, #12]
 8010d5a:	6973      	ldr	r3, [r6, #20]
 8010d5c:	1b64      	subs	r4, r4, r5
 8010d5e:	442b      	add	r3, r5
 8010d60:	1b40      	subs	r0, r0, r5
 8010d62:	443c      	add	r4, r7
 8010d64:	6173      	str	r3, [r6, #20]
 8010d66:	d002      	beq.n	8010d6e <GUI_ALLOC_GetFixedBlock+0x7e>
 8010d68:	4639      	mov	r1, r7
 8010d6a:	f7ff fdb9 	bl	80108e0 <_AddFreeMemory>
 8010d6e:	f844 5c04 	str.w	r5, [r4, #-4]
 8010d72:	e00a      	b.n	8010d8a <GUI_ALLOC_GetFixedBlock+0x9a>
 8010d74:	6823      	ldr	r3, [r4, #0]
 8010d76:	b10b      	cbz	r3, 8010d7c <GUI_ALLOC_GetFixedBlock+0x8c>
 8010d78:	6861      	ldr	r1, [r4, #4]
 8010d7a:	6059      	str	r1, [r3, #4]
 8010d7c:	6861      	ldr	r1, [r4, #4]
 8010d7e:	b101      	cbz	r1, 8010d82 <GUI_ALLOC_GetFixedBlock+0x92>
 8010d80:	600b      	str	r3, [r1, #0]
 8010d82:	42a2      	cmp	r2, r4
 8010d84:	d101      	bne.n	8010d8a <GUI_ALLOC_GetFixedBlock+0x9a>
 8010d86:	6823      	ldr	r3, [r4, #0]
 8010d88:	63f3      	str	r3, [r6, #60]	; 0x3c
 8010d8a:	4620      	mov	r0, r4
 8010d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d90:	20021c1c 	.word	0x20021c1c

08010d94 <GUI_ALLOC_GetMaxSize>:
 8010d94:	b508      	push	{r3, lr}
 8010d96:	f7ff fef1 	bl	8010b7c <_InitOnce>
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	4b0b      	ldr	r3, [pc, #44]	; (8010dcc <GUI_ALLOC_GetMaxSize+0x38>)
 8010d9e:	4413      	add	r3, r2
 8010da0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010da4:	b113      	cbz	r3, 8010dac <GUI_ALLOC_GetMaxSize+0x18>
 8010da6:	689b      	ldr	r3, [r3, #8]
 8010da8:	2000      	movs	r0, #0
 8010daa:	e00b      	b.n	8010dc4 <GUI_ALLOC_GetMaxSize+0x30>
 8010dac:	3a08      	subs	r2, #8
 8010dae:	f112 0f80 	cmn.w	r2, #128	; 0x80
 8010db2:	d1f3      	bne.n	8010d9c <GUI_ALLOC_GetMaxSize+0x8>
 8010db4:	e7f8      	b.n	8010da8 <GUI_ALLOC_GetMaxSize+0x14>
 8010db6:	685a      	ldr	r2, [r3, #4]
 8010db8:	689b      	ldr	r3, [r3, #8]
 8010dba:	4290      	cmp	r0, r2
 8010dbc:	bf38      	it	cc
 8010dbe:	4610      	movcc	r0, r2
 8010dc0:	b113      	cbz	r3, 8010dc8 <GUI_ALLOC_GetMaxSize+0x34>
 8010dc2:	689b      	ldr	r3, [r3, #8]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d1f6      	bne.n	8010db6 <GUI_ALLOC_GetMaxSize+0x22>
 8010dc8:	380c      	subs	r0, #12
 8010dca:	bd08      	pop	{r3, pc}
 8010dcc:	20021c1c 	.word	0x20021c1c

08010dd0 <GUI_ALLOC_RequestSize>:
 8010dd0:	b508      	push	{r3, lr}
 8010dd2:	f7ff ffdf 	bl	8010d94 <GUI_ALLOC_GetMaxSize>
 8010dd6:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8010dda:	f04f 0364 	mov.w	r3, #100	; 0x64
 8010dde:	4a06      	ldr	r2, [pc, #24]	; (8010df8 <GUI_ALLOC_RequestSize+0x28>)
 8010de0:	d904      	bls.n	8010dec <GUI_ALLOC_RequestSize+0x1c>
 8010de2:	fb90 f0f3 	sdiv	r0, r0, r3
 8010de6:	6a13      	ldr	r3, [r2, #32]
 8010de8:	4358      	muls	r0, r3
 8010dea:	bd08      	pop	{r3, pc}
 8010dec:	6a12      	ldr	r2, [r2, #32]
 8010dee:	4350      	muls	r0, r2
 8010df0:	fbb0 f0f3 	udiv	r0, r0, r3
 8010df4:	bd08      	pop	{r3, pc}
 8010df6:	bf00      	nop
 8010df8:	20021c1c 	.word	0x20021c1c

08010dfc <_Alloc>:
 8010dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e00:	4d3a      	ldr	r5, [pc, #232]	; (8010eec <_Alloc+0xf0>)
 8010e02:	4604      	mov	r4, r0
 8010e04:	f7ff feba 	bl	8010b7c <_InitOnce>
 8010e08:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 8010e0a:	682b      	ldr	r3, [r5, #0]
 8010e0c:	42bc      	cmp	r4, r7
 8010e0e:	bf24      	itt	cs
 8010e10:	1ce7      	addcs	r7, r4, #3
 8010e12:	f027 0703 	biccs.w	r7, r7, #3
 8010e16:	370c      	adds	r7, #12
 8010e18:	429f      	cmp	r7, r3
 8010e1a:	4c34      	ldr	r4, [pc, #208]	; (8010eec <_Alloc+0xf0>)
 8010e1c:	d842      	bhi.n	8010ea4 <_Alloc+0xa8>
 8010e1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010e20:	6862      	ldr	r2, [r4, #4]
 8010e22:	429a      	cmp	r2, r3
 8010e24:	d90f      	bls.n	8010e46 <_Alloc+0x4a>
 8010e26:	686b      	ldr	r3, [r5, #4]
 8010e28:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8010e2a:	3b01      	subs	r3, #1
 8010e2c:	606b      	str	r3, [r5, #4]
 8010e2e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010e30:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8010e34:	eb03 0209 	add.w	r2, r3, r9
 8010e38:	6852      	ldr	r2, [r2, #4]
 8010e3a:	626a      	str	r2, [r5, #36]	; 0x24
 8010e3c:	2201      	movs	r2, #1
 8010e3e:	f803 2036 	strb.w	r2, [r3, r6, lsl #3]
 8010e42:	b956      	cbnz	r6, 8010e5a <_Alloc+0x5e>
 8010e44:	e02e      	b.n	8010ea4 <_Alloc+0xa8>
 8010e46:	3b01      	subs	r3, #1
 8010e48:	6323      	str	r3, [r4, #48]	; 0x30
 8010e4a:	f7ff fe4b 	bl	8010ae4 <_EnlargeBlocks>
 8010e4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010e50:	3301      	adds	r3, #1
 8010e52:	6323      	str	r3, [r4, #48]	; 0x30
 8010e54:	2800      	cmp	r0, #0
 8010e56:	d0e6      	beq.n	8010e26 <_Alloc+0x2a>
 8010e58:	e024      	b.n	8010ea4 <_Alloc+0xa8>
 8010e5a:	230f      	movs	r3, #15
 8010e5c:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8010e60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8010e62:	4297      	cmp	r7, r2
 8010e64:	d208      	bcs.n	8010e78 <_Alloc+0x7c>
 8010e66:	f113 33ff 	adds.w	r3, r3, #4294967295
 8010e6a:	d2f7      	bcs.n	8010e5c <_Alloc+0x60>
 8010e6c:	e004      	b.n	8010e78 <_Alloc+0x7c>
 8010e6e:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8010e72:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8010e74:	b91a      	cbnz	r2, 8010e7e <_Alloc+0x82>
 8010e76:	3301      	adds	r3, #1
 8010e78:	2b0f      	cmp	r3, #15
 8010e7a:	d9f8      	bls.n	8010e6e <_Alloc+0x72>
 8010e7c:	e00a      	b.n	8010e94 <_Alloc+0x98>
 8010e7e:	6894      	ldr	r4, [r2, #8]
 8010e80:	2c00      	cmp	r4, #0
 8010e82:	d0f8      	beq.n	8010e76 <_Alloc+0x7a>
 8010e84:	6862      	ldr	r2, [r4, #4]
 8010e86:	4297      	cmp	r7, r2
 8010e88:	d90f      	bls.n	8010eaa <_Alloc+0xae>
 8010e8a:	68a2      	ldr	r2, [r4, #8]
 8010e8c:	2a00      	cmp	r2, #0
 8010e8e:	d0f2      	beq.n	8010e76 <_Alloc+0x7a>
 8010e90:	6894      	ldr	r4, [r2, #8]
 8010e92:	e7f7      	b.n	8010e84 <_Alloc+0x88>
 8010e94:	4638      	mov	r0, r7
 8010e96:	f7ff fd71 	bl	801097c <_RemoveHoles>
 8010e9a:	2800      	cmp	r0, #0
 8010e9c:	d0dd      	beq.n	8010e5a <_Alloc+0x5e>
 8010e9e:	4630      	mov	r0, r6
 8010ea0:	f7ff fcd4 	bl	801084c <_PushFreeBlock>
 8010ea4:	2000      	movs	r0, #0
 8010ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010eaa:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8010eae:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8010eb0:	ebc7 0208 	rsb	r2, r7, r8
 8010eb4:	330c      	adds	r3, #12
 8010eb6:	4620      	mov	r0, r4
 8010eb8:	429a      	cmp	r2, r3
 8010eba:	bf38      	it	cc
 8010ebc:	4647      	movcc	r7, r8
 8010ebe:	f7ff fcf3 	bl	80108a8 <_RemoveFreeBlock>
 8010ec2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010ec4:	444b      	add	r3, r9
 8010ec6:	19e1      	adds	r1, r4, r7
 8010ec8:	605c      	str	r4, [r3, #4]
 8010eca:	45b8      	cmp	r8, r7
 8010ecc:	f04f 0300 	mov.w	r3, #0
 8010ed0:	e884 00c0 	stmia.w	r4, {r6, r7}
 8010ed4:	60a3      	str	r3, [r4, #8]
 8010ed6:	6124      	str	r4, [r4, #16]
 8010ed8:	f841 7c04 	str.w	r7, [r1, #-4]
 8010edc:	dd03      	ble.n	8010ee6 <_Alloc+0xea>
 8010ede:	ebc7 0008 	rsb	r0, r7, r8
 8010ee2:	f7ff fcfd 	bl	80108e0 <_AddFreeMemory>
 8010ee6:	4630      	mov	r0, r6
 8010ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010eec:	20021c1c 	.word	0x20021c1c

08010ef0 <GUI_ALLOC_AllocNoInit>:
 8010ef0:	b108      	cbz	r0, 8010ef6 <GUI_ALLOC_AllocNoInit+0x6>
 8010ef2:	f7ff bf83 	b.w	8010dfc <_Alloc>
 8010ef6:	4770      	bx	lr

08010ef8 <GUI_ALLOC_FreePtr>:
 8010ef8:	b510      	push	{r4, lr}
 8010efa:	4604      	mov	r4, r0
 8010efc:	6800      	ldr	r0, [r0, #0]
 8010efe:	f7ff fdd9 	bl	8010ab4 <GUI_ALLOC_Free>
 8010f02:	2300      	movs	r3, #0
 8010f04:	6023      	str	r3, [r4, #0]
 8010f06:	bd10      	pop	{r4, pc}

08010f08 <GUI_ALLOC_FreePtrArray>:
 8010f08:	b570      	push	{r4, r5, r6, lr}
 8010f0a:	4605      	mov	r5, r0
 8010f0c:	460e      	mov	r6, r1
 8010f0e:	2400      	movs	r4, #0
 8010f10:	42b4      	cmp	r4, r6
 8010f12:	da05      	bge.n	8010f20 <GUI_ALLOC_FreePtrArray+0x18>
 8010f14:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 8010f18:	f7ff ffee 	bl	8010ef8 <GUI_ALLOC_FreePtr>
 8010f1c:	3401      	adds	r4, #1
 8010f1e:	e7f7      	b.n	8010f10 <GUI_ALLOC_FreePtrArray+0x8>
 8010f20:	bd70      	pop	{r4, r5, r6, pc}

08010f22 <GUI_ALLOC_AllocZero>:
 8010f22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010f24:	4605      	mov	r5, r0
 8010f26:	f7ff ffe3 	bl	8010ef0 <GUI_ALLOC_AllocNoInit>
 8010f2a:	4606      	mov	r6, r0
 8010f2c:	b158      	cbz	r0, 8010f46 <GUI_ALLOC_AllocZero+0x24>
 8010f2e:	f7ff fd87 	bl	8010a40 <GUI_ALLOC_LockH>
 8010f32:	ac02      	add	r4, sp, #8
 8010f34:	2100      	movs	r1, #0
 8010f36:	f844 0d04 	str.w	r0, [r4, #-4]!
 8010f3a:	462a      	mov	r2, r5
 8010f3c:	f7fd fe9f 	bl	800ec7e <GUI__memset>
 8010f40:	4620      	mov	r0, r4
 8010f42:	f7ff fd8b 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8010f46:	4630      	mov	r0, r6
 8010f48:	b002      	add	sp, #8
 8010f4a:	bd70      	pop	{r4, r5, r6, pc}

08010f4c <GUI_ALLOC_AllocInit>:
 8010f4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010f4e:	4605      	mov	r5, r0
 8010f50:	460c      	mov	r4, r1
 8010f52:	b909      	cbnz	r1, 8010f58 <GUI_ALLOC_AllocInit+0xc>
 8010f54:	2000      	movs	r0, #0
 8010f56:	e014      	b.n	8010f82 <GUI_ALLOC_AllocInit+0x36>
 8010f58:	4608      	mov	r0, r1
 8010f5a:	f7ff ffc9 	bl	8010ef0 <GUI_ALLOC_AllocNoInit>
 8010f5e:	4606      	mov	r6, r0
 8010f60:	2800      	cmp	r0, #0
 8010f62:	d0f7      	beq.n	8010f54 <GUI_ALLOC_AllocInit+0x8>
 8010f64:	f7ff fd6c 	bl	8010a40 <GUI_ALLOC_LockH>
 8010f68:	4629      	mov	r1, r5
 8010f6a:	9001      	str	r0, [sp, #4]
 8010f6c:	4622      	mov	r2, r4
 8010f6e:	b115      	cbz	r5, 8010f76 <GUI_ALLOC_AllocInit+0x2a>
 8010f70:	f007 fe55 	bl	8018c1e <memcpy>
 8010f74:	e001      	b.n	8010f7a <GUI_ALLOC_AllocInit+0x2e>
 8010f76:	f7fd fe82 	bl	800ec7e <GUI__memset>
 8010f7a:	a801      	add	r0, sp, #4
 8010f7c:	f7ff fd6e 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8010f80:	4630      	mov	r0, r6
 8010f82:	b002      	add	sp, #8
 8010f84:	bd70      	pop	{r4, r5, r6, pc}

08010f86 <LCD_Index2Color_888>:
 8010f86:	4770      	bx	lr

08010f88 <LCD_Index2Color_8888>:
 8010f88:	4770      	bx	lr

08010f8a <_Color2Index_8888>:
 8010f8a:	4770      	bx	lr

08010f8c <_GetIndexMask_8888>:
 8010f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8010f90:	4770      	bx	lr

08010f92 <_Color2IndexBulk>:
 8010f92:	b510      	push	{r4, lr}
 8010f94:	f850 4b04 	ldr.w	r4, [r0], #4
 8010f98:	600c      	str	r4, [r1, #0]
 8010f9a:	3a01      	subs	r2, #1
 8010f9c:	4419      	add	r1, r3
 8010f9e:	d1f9      	bne.n	8010f94 <_Color2IndexBulk+0x2>
 8010fa0:	bd10      	pop	{r4, pc}

08010fa2 <_Index2ColorBulk>:
 8010fa2:	b510      	push	{r4, lr}
 8010fa4:	6804      	ldr	r4, [r0, #0]
 8010fa6:	f841 4b04 	str.w	r4, [r1], #4
 8010faa:	3a01      	subs	r2, #1
 8010fac:	4418      	add	r0, r3
 8010fae:	d1f9      	bne.n	8010fa4 <_Index2ColorBulk+0x2>
 8010fb0:	bd10      	pop	{r4, pc}

08010fb2 <_Color2Index_M8888I>:
 8010fb2:	43c3      	mvns	r3, r0
 8010fb4:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8010fb8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010fbc:	4313      	orrs	r3, r2
 8010fbe:	b2c2      	uxtb	r2, r0
 8010fc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010fc4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8010fc8:	4318      	orrs	r0, r3
 8010fca:	4770      	bx	lr

08010fcc <_Index2Color_M8888I>:
 8010fcc:	43c3      	mvns	r3, r0
 8010fce:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8010fd2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010fd6:	4313      	orrs	r3, r2
 8010fd8:	b2c2      	uxtb	r2, r0
 8010fda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010fde:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8010fe2:	4318      	orrs	r0, r3
 8010fe4:	4770      	bx	lr

08010fe6 <_GetIndexMask_M8888I>:
 8010fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8010fea:	4770      	bx	lr

08010fec <_Color2IndexBulk_M8888I>:
 8010fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fee:	4c0e      	ldr	r4, [pc, #56]	; (8011028 <_Color2IndexBulk_M8888I+0x3c>)
 8010ff0:	6824      	ldr	r4, [r4, #0]
 8010ff2:	4607      	mov	r7, r0
 8010ff4:	460e      	mov	r6, r1
 8010ff6:	4615      	mov	r5, r2
 8010ff8:	469c      	mov	ip, r3
 8010ffa:	b10c      	cbz	r4, 8011000 <_Color2IndexBulk_M8888I+0x14>
 8010ffc:	47a0      	blx	r4
 8010ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011000:	f857 4b04 	ldr.w	r4, [r7], #4
 8011004:	43e3      	mvns	r3, r4
 8011006:	f3c4 4207 	ubfx	r2, r4, #16, #8
 801100a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801100e:	4313      	orrs	r3, r2
 8011010:	b2e2      	uxtb	r2, r4
 8011012:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011016:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801101a:	431c      	orrs	r4, r3
 801101c:	3d01      	subs	r5, #1
 801101e:	6034      	str	r4, [r6, #0]
 8011020:	4466      	add	r6, ip
 8011022:	d1ed      	bne.n	8011000 <_Color2IndexBulk_M8888I+0x14>
 8011024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011026:	bf00      	nop
 8011028:	200017bc 	.word	0x200017bc

0801102c <_Index2ColorBulk_M8888I>:
 801102c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801102e:	4c0e      	ldr	r4, [pc, #56]	; (8011068 <_Index2ColorBulk_M8888I+0x3c>)
 8011030:	6824      	ldr	r4, [r4, #0]
 8011032:	4606      	mov	r6, r0
 8011034:	460f      	mov	r7, r1
 8011036:	4615      	mov	r5, r2
 8011038:	469c      	mov	ip, r3
 801103a:	b10c      	cbz	r4, 8011040 <_Index2ColorBulk_M8888I+0x14>
 801103c:	47a0      	blx	r4
 801103e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011040:	6834      	ldr	r4, [r6, #0]
 8011042:	43e3      	mvns	r3, r4
 8011044:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8011048:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801104c:	4313      	orrs	r3, r2
 801104e:	b2e2      	uxtb	r2, r4
 8011050:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011054:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8011058:	431c      	orrs	r4, r3
 801105a:	3d01      	subs	r5, #1
 801105c:	f847 4b04 	str.w	r4, [r7], #4
 8011060:	4466      	add	r6, ip
 8011062:	d1ed      	bne.n	8011040 <_Index2ColorBulk_M8888I+0x14>
 8011064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011066:	bf00      	nop
 8011068:	200017b8 	.word	0x200017b8

0801106c <WIDGET_SetEffect>:
 801106c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801106e:	2300      	movs	r3, #0
 8011070:	9302      	str	r3, [sp, #8]
 8011072:	9103      	str	r1, [sp, #12]
 8011074:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011078:	4669      	mov	r1, sp
 801107a:	9300      	str	r3, [sp, #0]
 801107c:	f7fa fdde 	bl	800bc3c <WM_SendMessage>
 8011080:	b005      	add	sp, #20
 8011082:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08011088 <WIDGET__FillStringInRect>:
 8011088:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801108c:	461e      	mov	r6, r3
 801108e:	4b3f      	ldr	r3, [pc, #252]	; (801118c <WIDGET__FillStringInRect+0x104>)
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	4690      	mov	r8, r2
 8011094:	695a      	ldr	r2, [r3, #20]
 8011096:	4607      	mov	r7, r0
 8011098:	460c      	mov	r4, r1
 801109a:	b90a      	cbnz	r2, 80110a0 <WIDGET__FillStringInRect+0x18>
 801109c:	bb1f      	cbnz	r7, 80110e6 <WIDGET__FillStringInRect+0x5e>
 801109e:	e06f      	b.n	8011180 <WIDGET__FillStringInRect+0xf8>
 80110a0:	6808      	ldr	r0, [r1, #0]
 80110a2:	6849      	ldr	r1, [r1, #4]
 80110a4:	466d      	mov	r5, sp
 80110a6:	c503      	stmia	r5!, {r0, r1}
 80110a8:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
 80110ac:	f8bd 0000 	ldrh.w	r0, [sp]
 80110b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80110b4:	4408      	add	r0, r1
 80110b6:	f8ad 0000 	strh.w	r0, [sp]
 80110ba:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80110be:	4418      	add	r0, r3
 80110c0:	f8ad 0002 	strh.w	r0, [sp, #2]
 80110c4:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80110c8:	4401      	add	r1, r0
 80110ca:	f8ad 1004 	strh.w	r1, [sp, #4]
 80110ce:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80110d2:	4610      	mov	r0, r2
 80110d4:	440b      	add	r3, r1
 80110d6:	4669      	mov	r1, sp
 80110d8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80110dc:	f7fe fc1e 	bl	800f91c <GUI_RectsIntersect>
 80110e0:	2800      	cmp	r0, #0
 80110e2:	d050      	beq.n	8011186 <WIDGET__FillStringInRect+0xfe>
 80110e4:	e7da      	b.n	801109c <WIDGET__FillStringInRect+0x14>
 80110e6:	783b      	ldrb	r3, [r7, #0]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d049      	beq.n	8011180 <WIDGET__FillStringInRect+0xf8>
 80110ec:	f006 f890 	bl	8017210 <GUI_GetBkColor>
 80110f0:	0e00      	lsrs	r0, r0, #24
 80110f2:	d003      	beq.n	80110fc <WIDGET__FillStringInRect+0x74>
 80110f4:	2002      	movs	r0, #2
 80110f6:	f7fe fb7f 	bl	800f7f8 <GUI_SetTextMode>
 80110fa:	e032      	b.n	8011162 <WIDGET__FillStringInRect+0xda>
 80110fc:	f7fe fb7c 	bl	800f7f8 <GUI_SetTextMode>
 8011100:	4641      	mov	r1, r8
 8011102:	4632      	mov	r2, r6
 8011104:	a802      	add	r0, sp, #8
 8011106:	f7fd fea1 	bl	800ee4c <GUI__IntersectRects>
 801110a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801110e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011112:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011116:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801111a:	3b01      	subs	r3, #1
 801111c:	f7ff f84c 	bl	80101b8 <GUI_ClearRect>
 8011120:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8011124:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011128:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 801112c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8011130:	3a01      	subs	r2, #1
 8011132:	f7ff f841 	bl	80101b8 <GUI_ClearRect>
 8011136:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 801113a:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 801113e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8011142:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8011146:	3001      	adds	r0, #1
 8011148:	f7ff f836 	bl	80101b8 <GUI_ClearRect>
 801114c:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 8011150:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011154:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8011158:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801115c:	3101      	adds	r1, #1
 801115e:	f7ff f82b 	bl	80101b8 <GUI_ClearRect>
 8011162:	4640      	mov	r0, r8
 8011164:	f7f9 fb74 	bl	800a850 <WM_SetUserClipRect>
 8011168:	f9b6 1000 	ldrsh.w	r1, [r6]
 801116c:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 8011170:	4604      	mov	r4, r0
 8011172:	4638      	mov	r0, r7
 8011174:	f006 faf4 	bl	8017760 <GUI_DispStringAt>
 8011178:	4620      	mov	r0, r4
 801117a:	f7f9 fb69 	bl	800a850 <WM_SetUserClipRect>
 801117e:	e002      	b.n	8011186 <WIDGET__FillStringInRect+0xfe>
 8011180:	4620      	mov	r0, r4
 8011182:	f006 fbad 	bl	80178e0 <GUI_ClearRectEx>
 8011186:	b004      	add	sp, #16
 8011188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801118c:	20000308 	.word	0x20000308

08011190 <_DrawDownRect>:
 8011190:	b510      	push	{r4, lr}
 8011192:	b09c      	sub	sp, #112	; 0x70
 8011194:	4604      	mov	r4, r0
 8011196:	4668      	mov	r0, sp
 8011198:	f7fe fbac 	bl	800f8f4 <GUI_SaveContext_W>
 801119c:	4b09      	ldr	r3, [pc, #36]	; (80111c4 <_DrawDownRect+0x34>)
 801119e:	6818      	ldr	r0, [r3, #0]
 80111a0:	f7fd fd5c 	bl	800ec5c <LCD_SetColor>
 80111a4:	f9b4 0000 	ldrsh.w	r0, [r4]
 80111a8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80111ac:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80111b0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80111b4:	f006 fba0 	bl	80178f8 <GUI_DrawRect>
 80111b8:	4668      	mov	r0, sp
 80111ba:	f7fe fba5 	bl	800f908 <GUI_RestoreContext>
 80111be:	b01c      	add	sp, #112	; 0x70
 80111c0:	bd10      	pop	{r4, pc}
 80111c2:	bf00      	nop
 80111c4:	200017c0 	.word	0x200017c0

080111c8 <_DrawUpRect>:
 80111c8:	b510      	push	{r4, lr}
 80111ca:	b09c      	sub	sp, #112	; 0x70
 80111cc:	4604      	mov	r4, r0
 80111ce:	4668      	mov	r0, sp
 80111d0:	f7fe fb90 	bl	800f8f4 <GUI_SaveContext_W>
 80111d4:	4b09      	ldr	r3, [pc, #36]	; (80111fc <_DrawUpRect+0x34>)
 80111d6:	6818      	ldr	r0, [r3, #0]
 80111d8:	f7fd fd40 	bl	800ec5c <LCD_SetColor>
 80111dc:	f9b4 0000 	ldrsh.w	r0, [r4]
 80111e0:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80111e4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80111e8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80111ec:	f006 fb84 	bl	80178f8 <GUI_DrawRect>
 80111f0:	4668      	mov	r0, sp
 80111f2:	f7fe fb89 	bl	800f908 <GUI_RestoreContext>
 80111f6:	b01c      	add	sp, #112	; 0x70
 80111f8:	bd10      	pop	{r4, pc}
 80111fa:	bf00      	nop
 80111fc:	200017c0 	.word	0x200017c0

08011200 <_DrawDown>:
 8011200:	b507      	push	{r0, r1, r2, lr}
 8011202:	4668      	mov	r0, sp
 8011204:	f7f9 ffea 	bl	800b1dc <WM_GetClientRect>
 8011208:	4668      	mov	r0, sp
 801120a:	f7ff ffc1 	bl	8011190 <_DrawDownRect>
 801120e:	b003      	add	sp, #12
 8011210:	f85d fb04 	ldr.w	pc, [sp], #4

08011214 <_DrawUp>:
 8011214:	b507      	push	{r0, r1, r2, lr}
 8011216:	4668      	mov	r0, sp
 8011218:	f7f9 ffe0 	bl	800b1dc <WM_GetClientRect>
 801121c:	4668      	mov	r0, sp
 801121e:	f7ff ffd3 	bl	80111c8 <_DrawUpRect>
 8011222:	b003      	add	sp, #12
 8011224:	f85d fb04 	ldr.w	pc, [sp], #4

08011228 <SCROLLBAR_GetValue>:
 8011228:	b513      	push	{r0, r1, r4, lr}
 801122a:	4604      	mov	r4, r0
 801122c:	b140      	cbz	r0, 8011240 <SCROLLBAR_GetValue+0x18>
 801122e:	f7ff fc07 	bl	8010a40 <GUI_ALLOC_LockH>
 8011232:	ab02      	add	r3, sp, #8
 8011234:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8011236:	f843 0d04 	str.w	r0, [r3, #-4]!
 801123a:	4618      	mov	r0, r3
 801123c:	f7ff fc0e 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8011240:	4620      	mov	r0, r4
 8011242:	b002      	add	sp, #8
 8011244:	bd10      	pop	{r4, pc}

08011246 <SCROLLBAR_Create>:
 8011246:	b530      	push	{r4, r5, lr}
 8011248:	9c05      	ldr	r4, [sp, #20]
 801124a:	9d04      	ldr	r5, [sp, #16]
 801124c:	9404      	str	r4, [sp, #16]
 801124e:	9c06      	ldr	r4, [sp, #24]
 8011250:	9405      	str	r4, [sp, #20]
 8011252:	9506      	str	r5, [sp, #24]
 8011254:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011258:	f000 b8c4 	b.w	80113e4 <SCROLLBAR_CreateEx>

0801125c <SCROLLBAR_CreateAttached>:
 801125c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801125e:	f001 0308 	and.w	r3, r1, #8
 8011262:	2b00      	cmp	r3, #0
 8011264:	f240 348a 	movw	r4, #906	; 0x38a
 8011268:	f240 528a 	movw	r2, #1418	; 0x58a
 801126c:	bf08      	it	eq
 801126e:	4622      	moveq	r2, r4
 8011270:	bf0c      	ite	eq
 8011272:	23ff      	moveq	r3, #255	; 0xff
 8011274:	23fe      	movne	r3, #254	; 0xfe
 8011276:	e88d 0005 	stmia.w	sp, {r0, r2}
 801127a:	2000      	movs	r0, #0
 801127c:	9102      	str	r1, [sp, #8]
 801127e:	9303      	str	r3, [sp, #12]
 8011280:	4602      	mov	r2, r0
 8011282:	4603      	mov	r3, r0
 8011284:	4601      	mov	r1, r0
 8011286:	f000 f8ad 	bl	80113e4 <SCROLLBAR_CreateEx>
 801128a:	2106      	movs	r1, #6
 801128c:	4604      	mov	r4, r0
 801128e:	f7f9 fd7a 	bl	800ad86 <WM_NotifyParent>
 8011292:	4620      	mov	r0, r4
 8011294:	b004      	add	sp, #16
 8011296:	bd10      	pop	{r4, pc}

08011298 <_DeleteTimer>:
 8011298:	b507      	push	{r0, r1, r2, lr}
 801129a:	f7ff fbd1 	bl	8010a40 <GUI_ALLOC_LockH>
 801129e:	9001      	str	r0, [sp, #4]
 80112a0:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80112a2:	f7f9 fa2e 	bl	800a702 <WM_DeleteTimer>
 80112a6:	a802      	add	r0, sp, #8
 80112a8:	2200      	movs	r2, #0
 80112aa:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 80112ae:	665a      	str	r2, [r3, #100]	; 0x64
 80112b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80112b2:	f7ff fbd3 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80112b6:	b003      	add	sp, #12
 80112b8:	f85d fb04 	ldr.w	pc, [sp], #4

080112bc <SCROLLBAR__Rect2VRect>:
 80112bc:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80112be:	071b      	lsls	r3, r3, #28
 80112c0:	b510      	push	{r4, lr}
 80112c2:	d512      	bpl.n	80112ea <SCROLLBAR__Rect2VRect+0x2e>
 80112c4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80112c8:	f9b0 3000 	ldrsh.w	r3, [r0]
 80112cc:	8808      	ldrh	r0, [r1, #0]
 80112ce:	884c      	ldrh	r4, [r1, #2]
 80112d0:	800c      	strh	r4, [r1, #0]
 80112d2:	1ad3      	subs	r3, r2, r3
 80112d4:	888a      	ldrh	r2, [r1, #4]
 80112d6:	88cc      	ldrh	r4, [r1, #6]
 80112d8:	808c      	strh	r4, [r1, #4]
 80112da:	3301      	adds	r3, #1
 80112dc:	b29b      	uxth	r3, r3
 80112de:	43c0      	mvns	r0, r0
 80112e0:	43d2      	mvns	r2, r2
 80112e2:	4418      	add	r0, r3
 80112e4:	4413      	add	r3, r2
 80112e6:	80c8      	strh	r0, [r1, #6]
 80112e8:	804b      	strh	r3, [r1, #2]
 80112ea:	bd10      	pop	{r4, pc}

080112ec <SCROLLBAR__InvalidatePartner>:
 80112ec:	b510      	push	{r4, lr}
 80112ee:	4604      	mov	r4, r0
 80112f0:	f003 fbf4 	bl	8014adc <WM_GetScrollPartner>
 80112f4:	f7fa fcf9 	bl	800bcea <WM_InvalidateWindow>
 80112f8:	4620      	mov	r0, r4
 80112fa:	f7f9 fed2 	bl	800b0a2 <WM_GetParent>
 80112fe:	2125      	movs	r1, #37	; 0x25
 8011300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011304:	f7f9 bc54 	b.w	800abb0 <WM_SendMessageNoPara>

08011308 <SCROLLBAR_CreateUser>:
 8011308:	b5f0      	push	{r4, r5, r6, r7, lr}
 801130a:	b089      	sub	sp, #36	; 0x24
 801130c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801130e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8011310:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8011312:	b9fa      	cbnz	r2, 8011354 <SCROLLBAR_CreateUser+0x4c>
 8011314:	b9f3      	cbnz	r3, 8011354 <SCROLLBAR_CreateUser+0x4c>
 8011316:	4630      	mov	r0, r6
 8011318:	a906      	add	r1, sp, #24
 801131a:	f003 fc47 	bl	8014bac <WM_GetInsideRectEx>
 801131e:	f014 0f08 	tst.w	r4, #8
 8011322:	4b2c      	ldr	r3, [pc, #176]	; (80113d4 <SCROLLBAR_CreateUser+0xcc>)
 8011324:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 8011328:	f9bd e01e 	ldrsh.w	lr, [sp, #30]
 801132c:	d009      	beq.n	8011342 <SCROLLBAR_CreateUser+0x3a>
 801132e:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 8011332:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011336:	1c78      	adds	r0, r7, #1
 8011338:	ebc1 030e 	rsb	r3, r1, lr
 801133c:	1a80      	subs	r0, r0, r2
 801133e:	3301      	adds	r3, #1
 8011340:	e008      	b.n	8011354 <SCROLLBAR_CreateUser+0x4c>
 8011342:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8011346:	f9b3 3000 	ldrsh.w	r3, [r3]
 801134a:	f10e 0101 	add.w	r1, lr, #1
 801134e:	1a3a      	subs	r2, r7, r0
 8011350:	1ac9      	subs	r1, r1, r3
 8011352:	3201      	adds	r2, #1
 8011354:	9600      	str	r6, [sp, #0]
 8011356:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8011358:	9601      	str	r6, [sp, #4]
 801135a:	4e1f      	ldr	r6, [pc, #124]	; (80113d8 <SCROLLBAR_CreateUser+0xd0>)
 801135c:	9602      	str	r6, [sp, #8]
 801135e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8011360:	363c      	adds	r6, #60	; 0x3c
 8011362:	9603      	str	r6, [sp, #12]
 8011364:	f7fa fd02 	bl	800bd6c <WM_CreateWindowAsChild>
 8011368:	4606      	mov	r6, r0
 801136a:	2800      	cmp	r0, #0
 801136c:	d02f      	beq.n	80113ce <SCROLLBAR_CreateUser+0xc6>
 801136e:	f7ff fb67 	bl	8010a40 <GUI_ALLOC_LockH>
 8011372:	f004 0208 	and.w	r2, r4, #8
 8011376:	06e3      	lsls	r3, r4, #27
 8011378:	bf48      	it	mi
 801137a:	f042 0210 	orrmi.w	r2, r2, #16
 801137e:	f1a5 03fe 	sub.w	r3, r5, #254	; 0xfe
 8011382:	bf48      	it	mi
 8011384:	b292      	uxthmi	r2, r2
 8011386:	2b01      	cmp	r3, #1
 8011388:	bf88      	it	hi
 801138a:	f042 0210 	orrhi.w	r2, r2, #16
 801138e:	4629      	mov	r1, r5
 8011390:	9005      	str	r0, [sp, #20]
 8011392:	f7f5 fef9 	bl	8007188 <WIDGET__Init>
 8011396:	4b11      	ldr	r3, [pc, #68]	; (80113dc <SCROLLBAR_CreateUser+0xd4>)
 8011398:	af08      	add	r7, sp, #32
 801139a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801139c:	f857 4d0c 	ldr.w	r4, [r7, #-12]!
 80113a0:	f104 0534 	add.w	r5, r4, #52	; 0x34
 80113a4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80113a8:	2364      	movs	r3, #100	; 0x64
 80113aa:	64e3      	str	r3, [r4, #76]	; 0x4c
 80113ac:	4d0c      	ldr	r5, [pc, #48]	; (80113e0 <SCROLLBAR_CreateUser+0xd8>)
 80113ae:	230a      	movs	r3, #10
 80113b0:	6563      	str	r3, [r4, #84]	; 0x54
 80113b2:	2300      	movs	r3, #0
 80113b4:	6523      	str	r3, [r4, #80]	; 0x50
 80113b6:	682b      	ldr	r3, [r5, #0]
 80113b8:	6463      	str	r3, [r4, #68]	; 0x44
 80113ba:	4638      	mov	r0, r7
 80113bc:	f7ff fb4e 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80113c0:	682b      	ldr	r3, [r5, #0]
 80113c2:	4630      	mov	r0, r6
 80113c4:	685b      	ldr	r3, [r3, #4]
 80113c6:	4798      	blx	r3
 80113c8:	4630      	mov	r0, r6
 80113ca:	f7ff ff8f 	bl	80112ec <SCROLLBAR__InvalidatePartner>
 80113ce:	4630      	mov	r0, r6
 80113d0:	b009      	add	sp, #36	; 0x24
 80113d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113d4:	20000328 	.word	0x20000328
 80113d8:	08011487 	.word	0x08011487
 80113dc:	20000314 	.word	0x20000314
 80113e0:	20000324 	.word	0x20000324

080113e4 <SCROLLBAR_CreateEx>:
 80113e4:	b510      	push	{r4, lr}
 80113e6:	b086      	sub	sp, #24
 80113e8:	9c08      	ldr	r4, [sp, #32]
 80113ea:	9400      	str	r4, [sp, #0]
 80113ec:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80113ee:	9401      	str	r4, [sp, #4]
 80113f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80113f2:	9402      	str	r4, [sp, #8]
 80113f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80113f6:	9403      	str	r4, [sp, #12]
 80113f8:	2400      	movs	r4, #0
 80113fa:	9404      	str	r4, [sp, #16]
 80113fc:	f7ff ff84 	bl	8011308 <SCROLLBAR_CreateUser>
 8011400:	b006      	add	sp, #24
 8011402:	bd10      	pop	{r4, pc}

08011404 <SCROLLBAR_SetValue>:
 8011404:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011406:	460c      	mov	r4, r1
 8011408:	4605      	mov	r5, r0
 801140a:	b300      	cbz	r0, 801144e <SCROLLBAR_SetValue+0x4a>
 801140c:	f7ff fb18 	bl	8010a40 <GUI_ALLOC_LockH>
 8011410:	2c00      	cmp	r4, #0
 8011412:	9001      	str	r0, [sp, #4]
 8011414:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8011416:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8011418:	db05      	blt.n	8011426 <SCROLLBAR_SetValue+0x22>
 801141a:	1a8a      	subs	r2, r1, r2
 801141c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8011420:	4294      	cmp	r4, r2
 8011422:	dc02      	bgt.n	801142a <SCROLLBAR_SetValue+0x26>
 8011424:	e000      	b.n	8011428 <SCROLLBAR_SetValue+0x24>
 8011426:	2400      	movs	r4, #0
 8011428:	4622      	mov	r2, r4
 801142a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 801142c:	4291      	cmp	r1, r2
 801142e:	d00b      	beq.n	8011448 <SCROLLBAR_SetValue+0x44>
 8011430:	6502      	str	r2, [r0, #80]	; 0x50
 8011432:	4628      	mov	r0, r5
 8011434:	f7fa fc59 	bl	800bcea <WM_InvalidateWindow>
 8011438:	a801      	add	r0, sp, #4
 801143a:	f7ff fb0f 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801143e:	4628      	mov	r0, r5
 8011440:	2105      	movs	r1, #5
 8011442:	f7f9 fca0 	bl	800ad86 <WM_NotifyParent>
 8011446:	e002      	b.n	801144e <SCROLLBAR_SetValue+0x4a>
 8011448:	a801      	add	r0, sp, #4
 801144a:	f7ff fb07 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801144e:	b003      	add	sp, #12
 8011450:	bd30      	pop	{r4, r5, pc}

08011452 <SCROLLBAR_AddValue>:
 8011452:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011454:	460d      	mov	r5, r1
 8011456:	4606      	mov	r6, r0
 8011458:	b160      	cbz	r0, 8011474 <SCROLLBAR_AddValue+0x22>
 801145a:	f7ff faf1 	bl	8010a40 <GUI_ALLOC_LockH>
 801145e:	4602      	mov	r2, r0
 8011460:	a802      	add	r0, sp, #8
 8011462:	6d14      	ldr	r4, [r2, #80]	; 0x50
 8011464:	f840 2d04 	str.w	r2, [r0, #-4]!
 8011468:	f7ff faf8 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801146c:	4630      	mov	r0, r6
 801146e:	1961      	adds	r1, r4, r5
 8011470:	f7ff ffc8 	bl	8011404 <SCROLLBAR_SetValue>
 8011474:	b002      	add	sp, #8
 8011476:	bd70      	pop	{r4, r5, r6, pc}

08011478 <SCROLLBAR_Dec>:
 8011478:	f04f 31ff 	mov.w	r1, #4294967295
 801147c:	f7ff bfe9 	b.w	8011452 <SCROLLBAR_AddValue>

08011480 <SCROLLBAR_Inc>:
 8011480:	2101      	movs	r1, #1
 8011482:	f7ff bfe6 	b.w	8011452 <SCROLLBAR_AddValue>

08011486 <SCROLLBAR_Callback>:
 8011486:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801148a:	6844      	ldr	r4, [r0, #4]
 801148c:	4680      	mov	r8, r0
 801148e:	b08f      	sub	sp, #60	; 0x3c
 8011490:	4620      	mov	r0, r4
 8011492:	4641      	mov	r1, r8
 8011494:	f7f5 fe80 	bl	8007198 <WIDGET_HandleActive>
 8011498:	2800      	cmp	r0, #0
 801149a:	f000 81c0 	beq.w	801181e <SCROLLBAR_Callback+0x398>
 801149e:	f8d8 3000 	ldr.w	r3, [r8]
 80114a2:	2b23      	cmp	r3, #35	; 0x23
 80114a4:	f000 8182 	beq.w	80117ac <SCROLLBAR_Callback+0x326>
 80114a8:	dc0b      	bgt.n	80114c2 <SCROLLBAR_Callback+0x3c>
 80114aa:	2b0e      	cmp	r3, #14
 80114ac:	f000 812a 	beq.w	8011704 <SCROLLBAR_Callback+0x27e>
 80114b0:	2b0f      	cmp	r3, #15
 80114b2:	d012      	beq.n	80114da <SCROLLBAR_Callback+0x54>
 80114b4:	2b0b      	cmp	r3, #11
 80114b6:	f040 81af 	bne.w	8011818 <SCROLLBAR_Callback+0x392>
 80114ba:	4620      	mov	r0, r4
 80114bc:	f7ff ff16 	bl	80112ec <SCROLLBAR__InvalidatePartner>
 80114c0:	e1aa      	b.n	8011818 <SCROLLBAR_Callback+0x392>
 80114c2:	f240 1213 	movw	r2, #275	; 0x113
 80114c6:	4293      	cmp	r3, r2
 80114c8:	f000 817f 	beq.w	80117ca <SCROLLBAR_Callback+0x344>
 80114cc:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80114d0:	d012      	beq.n	80114f8 <SCROLLBAR_Callback+0x72>
 80114d2:	2b24      	cmp	r3, #36	; 0x24
 80114d4:	f040 81a0 	bne.w	8011818 <SCROLLBAR_Callback+0x392>
 80114d8:	e143      	b.n	8011762 <SCROLLBAR_Callback+0x2dc>
 80114da:	4620      	mov	r0, r4
 80114dc:	f7ff fab0 	bl	8010a40 <GUI_ALLOC_LockH>
 80114e0:	9005      	str	r0, [sp, #20]
 80114e2:	2800      	cmp	r0, #0
 80114e4:	f000 819b 	beq.w	801181e <SCROLLBAR_Callback+0x398>
 80114e8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80114ea:	a805      	add	r0, sp, #20
 80114ec:	681d      	ldr	r5, [r3, #0]
 80114ee:	f7ff fab5 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80114f2:	4620      	mov	r0, r4
 80114f4:	47a8      	blx	r5
 80114f6:	e192      	b.n	801181e <SCROLLBAR_Callback+0x398>
 80114f8:	f8d8 700c 	ldr.w	r7, [r8, #12]
 80114fc:	2f00      	cmp	r7, #0
 80114fe:	f000 818b 	beq.w	8011818 <SCROLLBAR_Callback+0x392>
 8011502:	7a3b      	ldrb	r3, [r7, #8]
 8011504:	4620      	mov	r0, r4
 8011506:	2b00      	cmp	r3, #0
 8011508:	f000 80d6 	beq.w	80116b8 <SCROLLBAR_Callback+0x232>
 801150c:	f7ff fa98 	bl	8010a40 <GUI_ALLOC_LockH>
 8011510:	a905      	add	r1, sp, #20
 8011512:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8011514:	9003      	str	r0, [sp, #12]
 8011516:	6d06      	ldr	r6, [r0, #80]	; 0x50
 8011518:	4620      	mov	r0, r4
 801151a:	4798      	blx	r3
 801151c:	9b03      	ldr	r3, [sp, #12]
 801151e:	f8b3 a032 	ldrh.w	sl, [r3, #50]	; 0x32
 8011522:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8011524:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011526:	f01a 0f08 	tst.w	sl, #8
 801152a:	ebc5 0902 	rsb	r9, r5, r2
 801152e:	d003      	beq.n	8011538 <SCROLLBAR_Callback+0xb2>
 8011530:	e897 0006 	ldmia.w	r7, {r1, r2}
 8011534:	603a      	str	r2, [r7, #0]
 8011536:	6079      	str	r1, [r7, #4]
 8011538:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801153a:	683f      	ldr	r7, [r7, #0]
 801153c:	2a03      	cmp	r2, #3
 801153e:	d114      	bne.n	801156a <SCROLLBAR_Callback+0xe4>
 8011540:	4620      	mov	r0, r4
 8011542:	f7ff fea9 	bl	8011298 <_DeleteTimer>
 8011546:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011548:	990c      	ldr	r1, [sp, #48]	; 0x30
 801154a:	2002      	movs	r0, #2
 801154c:	fb93 f3f0 	sdiv	r3, r3, r0
 8011550:	1aff      	subs	r7, r7, r3
 8011552:	9b06      	ldr	r3, [sp, #24]
 8011554:	1afb      	subs	r3, r7, r3
 8011556:	1e58      	subs	r0, r3, #1
 8011558:	fb00 f009 	mul.w	r0, r0, r9
 801155c:	f005 fc70 	bl	8016e40 <GUI__DivideRound32>
 8011560:	9b03      	ldr	r3, [sp, #12]
 8011562:	4606      	mov	r6, r0
 8011564:	6618      	str	r0, [r3, #96]	; 0x60
 8011566:	a803      	add	r0, sp, #12
 8011568:	e07e      	b.n	8011668 <SCROLLBAR_Callback+0x1e2>
 801156a:	9806      	ldr	r0, [sp, #24]
 801156c:	4287      	cmp	r7, r0
 801156e:	dc0b      	bgt.n	8011588 <SCROLLBAR_Callback+0x102>
 8011570:	2a02      	cmp	r2, #2
 8011572:	d039      	beq.n	80115e8 <SCROLLBAR_Callback+0x162>
 8011574:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011576:	b113      	cbz	r3, 801157e <SCROLLBAR_Callback+0xf8>
 8011578:	4620      	mov	r0, r4
 801157a:	f7ff fe8d 	bl	8011298 <_DeleteTimer>
 801157e:	9b03      	ldr	r3, [sp, #12]
 8011580:	2202      	movs	r2, #2
 8011582:	3e01      	subs	r6, #1
 8011584:	659a      	str	r2, [r3, #88]	; 0x58
 8011586:	e02f      	b.n	80115e8 <SCROLLBAR_Callback+0x162>
 8011588:	9907      	ldr	r1, [sp, #28]
 801158a:	428f      	cmp	r7, r1
 801158c:	da02      	bge.n	8011594 <SCROLLBAR_Callback+0x10e>
 801158e:	1b76      	subs	r6, r6, r5
 8011590:	426d      	negs	r5, r5
 8011592:	e02f      	b.n	80115f4 <SCROLLBAR_Callback+0x16e>
 8011594:	9908      	ldr	r1, [sp, #32]
 8011596:	428f      	cmp	r7, r1
 8011598:	dc12      	bgt.n	80115c0 <SCROLLBAR_Callback+0x13a>
 801159a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801159c:	2900      	cmp	r1, #0
 801159e:	dd0b      	ble.n	80115b8 <SCROLLBAR_Callback+0x132>
 80115a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80115a2:	2202      	movs	r2, #2
 80115a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80115a8:	1aff      	subs	r7, r7, r3
 80115aa:	1a3f      	subs	r7, r7, r0
 80115ac:	3f01      	subs	r7, #1
 80115ae:	fb07 f009 	mul.w	r0, r7, r9
 80115b2:	f005 fc45 	bl	8016e40 <GUI__DivideRound32>
 80115b6:	4606      	mov	r6, r0
 80115b8:	9b03      	ldr	r3, [sp, #12]
 80115ba:	2203      	movs	r2, #3
 80115bc:	659a      	str	r2, [r3, #88]	; 0x58
 80115be:	e016      	b.n	80115ee <SCROLLBAR_Callback+0x168>
 80115c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80115c2:	428f      	cmp	r7, r1
 80115c4:	da01      	bge.n	80115ca <SCROLLBAR_Callback+0x144>
 80115c6:	442e      	add	r6, r5
 80115c8:	e014      	b.n	80115f4 <SCROLLBAR_Callback+0x16e>
 80115ca:	990a      	ldr	r1, [sp, #40]	; 0x28
 80115cc:	428f      	cmp	r7, r1
 80115ce:	dc0e      	bgt.n	80115ee <SCROLLBAR_Callback+0x168>
 80115d0:	2a01      	cmp	r2, #1
 80115d2:	d00e      	beq.n	80115f2 <SCROLLBAR_Callback+0x16c>
 80115d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80115d6:	b113      	cbz	r3, 80115de <SCROLLBAR_Callback+0x158>
 80115d8:	4620      	mov	r0, r4
 80115da:	f7ff fe5d 	bl	8011298 <_DeleteTimer>
 80115de:	9b03      	ldr	r3, [sp, #12]
 80115e0:	2501      	movs	r5, #1
 80115e2:	3601      	adds	r6, #1
 80115e4:	659d      	str	r5, [r3, #88]	; 0x58
 80115e6:	e005      	b.n	80115f4 <SCROLLBAR_Callback+0x16e>
 80115e8:	f04f 35ff 	mov.w	r5, #4294967295
 80115ec:	e002      	b.n	80115f4 <SCROLLBAR_Callback+0x16e>
 80115ee:	2500      	movs	r5, #0
 80115f0:	e000      	b.n	80115f4 <SCROLLBAR_Callback+0x16e>
 80115f2:	4615      	mov	r5, r2
 80115f4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80115f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80115fa:	f8db 305c 	ldr.w	r3, [fp, #92]	; 0x5c
 80115fe:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 8011602:	9a06      	ldr	r2, [sp, #24]
 8011604:	b171      	cbz	r1, 8011624 <SCROLLBAR_Callback+0x19e>
 8011606:	2002      	movs	r0, #2
 8011608:	fb9e f0f0 	sdiv	r0, lr, r0
 801160c:	1a38      	subs	r0, r7, r0
 801160e:	1a80      	subs	r0, r0, r2
 8011610:	3801      	subs	r0, #1
 8011612:	fb00 f009 	mul.w	r0, r0, r9
 8011616:	9301      	str	r3, [sp, #4]
 8011618:	f005 fc12 	bl	8016e40 <GUI__DivideRound32>
 801161c:	9b01      	ldr	r3, [sp, #4]
 801161e:	f8cb 0060 	str.w	r0, [fp, #96]	; 0x60
 8011622:	e009      	b.n	8011638 <SCROLLBAR_Callback+0x1b2>
 8011624:	f8db 2058 	ldr.w	r2, [fp, #88]	; 0x58
 8011628:	2a01      	cmp	r2, #1
 801162a:	bf04      	itt	eq
 801162c:	f8db 104c 	ldreq.w	r1, [fp, #76]	; 0x4c
 8011630:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8011634:	f8cb 1060 	str.w	r1, [fp, #96]	; 0x60
 8011638:	a803      	add	r0, sp, #12
 801163a:	9301      	str	r3, [sp, #4]
 801163c:	f7ff fa0e 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8011640:	9b01      	ldr	r3, [sp, #4]
 8011642:	b1a5      	cbz	r5, 801166e <SCROLLBAR_Callback+0x1e8>
 8011644:	b9bb      	cbnz	r3, 8011676 <SCROLLBAR_Callback+0x1f0>
 8011646:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801164a:	f240 41d2 	movw	r1, #1234	; 0x4d2
 801164e:	4620      	mov	r0, r4
 8011650:	f7f9 f890 	bl	800a774 <WM_CreateTimer>
 8011654:	4607      	mov	r7, r0
 8011656:	4620      	mov	r0, r4
 8011658:	f7ff f9f2 	bl	8010a40 <GUI_ALLOC_LockH>
 801165c:	4602      	mov	r2, r0
 801165e:	a80e      	add	r0, sp, #56	; 0x38
 8011660:	f840 2d28 	str.w	r2, [r0, #-40]!
 8011664:	6657      	str	r7, [r2, #100]	; 0x64
 8011666:	65d5      	str	r5, [r2, #92]	; 0x5c
 8011668:	f7ff f9f8 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801166c:	e003      	b.n	8011676 <SCROLLBAR_Callback+0x1f0>
 801166e:	b113      	cbz	r3, 8011676 <SCROLLBAR_Callback+0x1f0>
 8011670:	4620      	mov	r0, r4
 8011672:	f7ff fe11 	bl	8011298 <_DeleteTimer>
 8011676:	4620      	mov	r0, r4
 8011678:	2101      	movs	r1, #1
 801167a:	f7f9 fa7d 	bl	800ab78 <WM_SetCapture>
 801167e:	4620      	mov	r0, r4
 8011680:	4631      	mov	r1, r6
 8011682:	f7ff febf 	bl	8011404 <SCROLLBAR_SetValue>
 8011686:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801168a:	f040 80c5 	bne.w	8011818 <SCROLLBAR_Callback+0x392>
 801168e:	4620      	mov	r0, r4
 8011690:	f7ff f9d6 	bl	8010a40 <GUI_ALLOC_LockH>
 8011694:	ab0e      	add	r3, sp, #56	; 0x38
 8011696:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8011698:	f843 0d28 	str.w	r0, [r3, #-40]!
 801169c:	4618      	mov	r0, r3
 801169e:	f7ff f9dd 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80116a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80116a6:	4620      	mov	r0, r4
 80116a8:	f7f5 fd42 	bl	8007130 <WIDGET_OrState>
 80116ac:	07a9      	lsls	r1, r5, #30
 80116ae:	f140 80b3 	bpl.w	8011818 <SCROLLBAR_Callback+0x392>
 80116b2:	4620      	mov	r0, r4
 80116b4:	2101      	movs	r1, #1
 80116b6:	e074      	b.n	80117a2 <SCROLLBAR_Callback+0x31c>
 80116b8:	f7ff f9c2 	bl	8010a40 <GUI_ALLOC_LockH>
 80116bc:	8e45      	ldrh	r5, [r0, #50]	; 0x32
 80116be:	9003      	str	r0, [sp, #12]
 80116c0:	a803      	add	r0, sp, #12
 80116c2:	f7ff f9cb 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80116c6:	05ea      	lsls	r2, r5, #23
 80116c8:	f140 80a6 	bpl.w	8011818 <SCROLLBAR_Callback+0x392>
 80116cc:	4620      	mov	r0, r4
 80116ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80116d2:	f7f5 fd43 	bl	800715c <WIDGET_AndState>
 80116d6:	4620      	mov	r0, r4
 80116d8:	f7ff f9b2 	bl	8010a40 <GUI_ALLOC_LockH>
 80116dc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80116de:	9005      	str	r0, [sp, #20]
 80116e0:	b113      	cbz	r3, 80116e8 <SCROLLBAR_Callback+0x262>
 80116e2:	4620      	mov	r0, r4
 80116e4:	f7ff fdd8 	bl	8011298 <_DeleteTimer>
 80116e8:	a80e      	add	r0, sp, #56	; 0x38
 80116ea:	2200      	movs	r2, #0
 80116ec:	f850 3d24 	ldr.w	r3, [r0, #-36]!
 80116f0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80116f2:	659a      	str	r2, [r3, #88]	; 0x58
 80116f4:	f7ff f9b2 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80116f8:	07ab      	lsls	r3, r5, #30
 80116fa:	f140 808d 	bpl.w	8011818 <SCROLLBAR_Callback+0x392>
 80116fe:	4620      	mov	r0, r4
 8011700:	2102      	movs	r1, #2
 8011702:	e04e      	b.n	80117a2 <SCROLLBAR_Callback+0x31c>
 8011704:	4620      	mov	r0, r4
 8011706:	f7ff f99b 	bl	8010a40 <GUI_ALLOC_LockH>
 801170a:	ab0e      	add	r3, sp, #56	; 0x38
 801170c:	6d45      	ldr	r5, [r0, #84]	; 0x54
 801170e:	f843 0d24 	str.w	r0, [r3, #-36]!
 8011712:	4618      	mov	r0, r3
 8011714:	f7ff f9a2 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8011718:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801171c:	6813      	ldr	r3, [r2, #0]
 801171e:	6852      	ldr	r2, [r2, #4]
 8011720:	2a00      	cmp	r2, #0
 8011722:	dd79      	ble.n	8011818 <SCROLLBAR_Callback+0x392>
 8011724:	3b10      	subs	r3, #16
 8011726:	2b12      	cmp	r3, #18
 8011728:	d876      	bhi.n	8011818 <SCROLLBAR_Callback+0x392>
 801172a:	e8df f003 	tbb	[pc, r3]
 801172e:	1616      	.short	0x1616
 8011730:	75751212 	.word	0x75751212
 8011734:	75757575 	.word	0x75757575
 8011738:	75757575 	.word	0x75757575
 801173c:	0a757575 	.word	0x0a757575
 8011740:	0d          	.byte	0x0d
 8011741:	00          	.byte	0x00
 8011742:	4620      	mov	r0, r4
 8011744:	4629      	mov	r1, r5
 8011746:	e001      	b.n	801174c <SCROLLBAR_Callback+0x2c6>
 8011748:	4620      	mov	r0, r4
 801174a:	4269      	negs	r1, r5
 801174c:	f7ff fe81 	bl	8011452 <SCROLLBAR_AddValue>
 8011750:	e062      	b.n	8011818 <SCROLLBAR_Callback+0x392>
 8011752:	4620      	mov	r0, r4
 8011754:	f7ff fe94 	bl	8011480 <SCROLLBAR_Inc>
 8011758:	e05e      	b.n	8011818 <SCROLLBAR_Callback+0x392>
 801175a:	4620      	mov	r0, r4
 801175c:	f7ff fe8c 	bl	8011478 <SCROLLBAR_Dec>
 8011760:	e05a      	b.n	8011818 <SCROLLBAR_Callback+0x392>
 8011762:	4620      	mov	r0, r4
 8011764:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8011768:	f7ff f96a 	bl	8010a40 <GUI_ALLOC_LockH>
 801176c:	ad0e      	add	r5, sp, #56	; 0x38
 801176e:	4603      	mov	r3, r0
 8011770:	f845 0d24 	str.w	r0, [r5, #-36]!
 8011774:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011776:	6830      	ldr	r0, [r6, #0]
 8011778:	68b1      	ldr	r1, [r6, #8]
 801177a:	4290      	cmp	r0, r2
 801177c:	6872      	ldr	r2, [r6, #4]
 801177e:	d105      	bne.n	801178c <SCROLLBAR_Callback+0x306>
 8011780:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 8011782:	428e      	cmp	r6, r1
 8011784:	d102      	bne.n	801178c <SCROLLBAR_Callback+0x306>
 8011786:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 8011788:	4296      	cmp	r6, r2
 801178a:	d00d      	beq.n	80117a8 <SCROLLBAR_Callback+0x322>
 801178c:	64d8      	str	r0, [r3, #76]	; 0x4c
 801178e:	6559      	str	r1, [r3, #84]	; 0x54
 8011790:	651a      	str	r2, [r3, #80]	; 0x50
 8011792:	4620      	mov	r0, r4
 8011794:	f7fa faa9 	bl	800bcea <WM_InvalidateWindow>
 8011798:	4628      	mov	r0, r5
 801179a:	f7ff f95f 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801179e:	4620      	mov	r0, r4
 80117a0:	2105      	movs	r1, #5
 80117a2:	f7f9 faf0 	bl	800ad86 <WM_NotifyParent>
 80117a6:	e037      	b.n	8011818 <SCROLLBAR_Callback+0x392>
 80117a8:	4628      	mov	r0, r5
 80117aa:	e033      	b.n	8011814 <SCROLLBAR_Callback+0x38e>
 80117ac:	4620      	mov	r0, r4
 80117ae:	f7ff f947 	bl	8010a40 <GUI_ALLOC_LockH>
 80117b2:	9005      	str	r0, [sp, #20]
 80117b4:	2800      	cmp	r0, #0
 80117b6:	d02f      	beq.n	8011818 <SCROLLBAR_Callback+0x392>
 80117b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80117bc:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80117be:	601a      	str	r2, [r3, #0]
 80117c0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80117c2:	609a      	str	r2, [r3, #8]
 80117c4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80117c6:	605a      	str	r2, [r3, #4]
 80117c8:	e023      	b.n	8011812 <SCROLLBAR_Callback+0x38c>
 80117ca:	4620      	mov	r0, r4
 80117cc:	f7ff f938 	bl	8010a40 <GUI_ALLOC_LockH>
 80117d0:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80117d2:	9005      	str	r0, [sp, #20]
 80117d4:	b111      	cbz	r1, 80117dc <SCROLLBAR_Callback+0x356>
 80117d6:	4620      	mov	r0, r4
 80117d8:	f7ff fe3b 	bl	8011452 <SCROLLBAR_AddValue>
 80117dc:	9b05      	ldr	r3, [sp, #20]
 80117de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80117e0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80117e2:	2a00      	cmp	r2, #0
 80117e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80117e6:	dd05      	ble.n	80117f4 <SCROLLBAR_Callback+0x36e>
 80117e8:	4291      	cmp	r1, r2
 80117ea:	bfb4      	ite	lt
 80117ec:	2100      	movlt	r1, #0
 80117ee:	2101      	movge	r1, #1
 80117f0:	dd06      	ble.n	8011800 <SCROLLBAR_Callback+0x37a>
 80117f2:	e004      	b.n	80117fe <SCROLLBAR_Callback+0x378>
 80117f4:	4291      	cmp	r1, r2
 80117f6:	bfcc      	ite	gt
 80117f8:	2100      	movgt	r1, #0
 80117fa:	2101      	movle	r1, #1
 80117fc:	da00      	bge.n	8011800 <SCROLLBAR_Callback+0x37a>
 80117fe:	651a      	str	r2, [r3, #80]	; 0x50
 8011800:	b119      	cbz	r1, 801180a <SCROLLBAR_Callback+0x384>
 8011802:	4620      	mov	r0, r4
 8011804:	f7ff fd48 	bl	8011298 <_DeleteTimer>
 8011808:	e003      	b.n	8011812 <SCROLLBAR_Callback+0x38c>
 801180a:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801180c:	2132      	movs	r1, #50	; 0x32
 801180e:	f7f8 ffe1 	bl	800a7d4 <WM_RestartTimer>
 8011812:	a805      	add	r0, sp, #20
 8011814:	f7ff f922 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8011818:	4640      	mov	r0, r8
 801181a:	f7fa fe95 	bl	800c548 <WM_DefaultProc>
 801181e:	b00f      	add	sp, #60	; 0x3c
 8011820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011824 <SCROLLBAR_SetNumItems>:
 8011824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011826:	460c      	mov	r4, r1
 8011828:	4605      	mov	r5, r0
 801182a:	b160      	cbz	r0, 8011846 <SCROLLBAR_SetNumItems+0x22>
 801182c:	f7ff f908 	bl	8010a40 <GUI_ALLOC_LockH>
 8011830:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8011832:	9001      	str	r0, [sp, #4]
 8011834:	42a2      	cmp	r2, r4
 8011836:	d003      	beq.n	8011840 <SCROLLBAR_SetNumItems+0x1c>
 8011838:	64c4      	str	r4, [r0, #76]	; 0x4c
 801183a:	4628      	mov	r0, r5
 801183c:	f7fa fa55 	bl	800bcea <WM_InvalidateWindow>
 8011840:	a801      	add	r0, sp, #4
 8011842:	f7ff f90b 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8011846:	b003      	add	sp, #12
 8011848:	bd30      	pop	{r4, r5, pc}

0801184a <SCROLLBAR_SetPageSize>:
 801184a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801184c:	460c      	mov	r4, r1
 801184e:	4605      	mov	r5, r0
 8011850:	b160      	cbz	r0, 801186c <SCROLLBAR_SetPageSize+0x22>
 8011852:	f7ff f8f5 	bl	8010a40 <GUI_ALLOC_LockH>
 8011856:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8011858:	9001      	str	r0, [sp, #4]
 801185a:	42a2      	cmp	r2, r4
 801185c:	d003      	beq.n	8011866 <SCROLLBAR_SetPageSize+0x1c>
 801185e:	6544      	str	r4, [r0, #84]	; 0x54
 8011860:	4628      	mov	r0, r5
 8011862:	f7fa fa42 	bl	800bcea <WM_InvalidateWindow>
 8011866:	a801      	add	r0, sp, #4
 8011868:	f7ff f8f8 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801186c:	b003      	add	sp, #12
 801186e:	bd30      	pop	{r4, r5, pc}

08011870 <RADIO_DrawSkinFlex>:
 8011870:	b530      	push	{r4, r5, lr}
 8011872:	4604      	mov	r4, r0
 8011874:	b089      	sub	sp, #36	; 0x24
 8011876:	6800      	ldr	r0, [r0, #0]
 8011878:	f7ff f8e2 	bl	8010a40 <GUI_ALLOC_LockH>
 801187c:	aa08      	add	r2, sp, #32
 801187e:	f9b0 5060 	ldrsh.w	r5, [r0, #96]	; 0x60
 8011882:	f842 0d10 	str.w	r0, [r2, #-16]!
 8011886:	4610      	mov	r0, r2
 8011888:	f7ff f8e8 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801188c:	68a2      	ldr	r2, [r4, #8]
 801188e:	4b28      	ldr	r3, [pc, #160]	; (8011930 <RADIO_DrawSkinFlex+0xc0>)
 8011890:	4928      	ldr	r1, [pc, #160]	; (8011934 <RADIO_DrawSkinFlex+0xc4>)
 8011892:	42aa      	cmp	r2, r5
 8011894:	bf18      	it	ne
 8011896:	460b      	movne	r3, r1
 8011898:	6862      	ldr	r2, [r4, #4]
 801189a:	2a0a      	cmp	r2, #10
 801189c:	d028      	beq.n	80118f0 <RADIO_DrawSkinFlex+0x80>
 801189e:	dc0e      	bgt.n	80118be <RADIO_DrawSkinFlex+0x4e>
 80118a0:	2a07      	cmp	r2, #7
 80118a2:	d142      	bne.n	801192a <RADIO_DrawSkinFlex+0xba>
 80118a4:	685a      	ldr	r2, [r3, #4]
 80118a6:	9200      	str	r2, [sp, #0]
 80118a8:	689a      	ldr	r2, [r3, #8]
 80118aa:	9201      	str	r2, [sp, #4]
 80118ac:	68da      	ldr	r2, [r3, #12]
 80118ae:	9202      	str	r2, [sp, #8]
 80118b0:	691a      	ldr	r2, [r3, #16]
 80118b2:	6920      	ldr	r0, [r4, #16]
 80118b4:	6961      	ldr	r1, [r4, #20]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	f005 f95c 	bl	8016b74 <GUI__FillTrippleArc>
 80118bc:	e035      	b.n	801192a <RADIO_DrawSkinFlex+0xba>
 80118be:	2a12      	cmp	r2, #18
 80118c0:	d003      	beq.n	80118ca <RADIO_DrawSkinFlex+0x5a>
 80118c2:	2a19      	cmp	r2, #25
 80118c4:	d131      	bne.n	801192a <RADIO_DrawSkinFlex+0xba>
 80118c6:	6918      	ldr	r0, [r3, #16]
 80118c8:	e030      	b.n	801192c <RADIO_DrawSkinFlex+0xbc>
 80118ca:	6820      	ldr	r0, [r4, #0]
 80118cc:	f7ff f8b8 	bl	8010a40 <GUI_ALLOC_LockH>
 80118d0:	ab08      	add	r3, sp, #32
 80118d2:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80118d4:	f843 0d08 	str.w	r0, [r3, #-8]!
 80118d8:	4618      	mov	r0, r3
 80118da:	f7ff f8bf 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80118de:	4628      	mov	r0, r5
 80118e0:	f7fd f9bc 	bl	800ec5c <LCD_SetColor>
 80118e4:	6a20      	ldr	r0, [r4, #32]
 80118e6:	6921      	ldr	r1, [r4, #16]
 80118e8:	6962      	ldr	r2, [r4, #20]
 80118ea:	f005 ff39 	bl	8017760 <GUI_DispStringAt>
 80118ee:	e01c      	b.n	801192a <RADIO_DrawSkinFlex+0xba>
 80118f0:	6820      	ldr	r0, [r4, #0]
 80118f2:	f7ff f8a5 	bl	8010a40 <GUI_ALLOC_LockH>
 80118f6:	ab08      	add	r3, sp, #32
 80118f8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80118fa:	f843 0d0c 	str.w	r0, [r3, #-12]!
 80118fe:	4618      	mov	r0, r3
 8011900:	f7ff f8ac 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8011904:	6923      	ldr	r3, [r4, #16]
 8011906:	f8ad 3018 	strh.w	r3, [sp, #24]
 801190a:	6963      	ldr	r3, [r4, #20]
 801190c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011910:	69a3      	ldr	r3, [r4, #24]
 8011912:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011916:	4628      	mov	r0, r5
 8011918:	69e3      	ldr	r3, [r4, #28]
 801191a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801191e:	f7fd f99d 	bl	800ec5c <LCD_SetColor>
 8011922:	a806      	add	r0, sp, #24
 8011924:	2100      	movs	r1, #0
 8011926:	f7fe fa4f 	bl	800fdc8 <GUI_DrawFocusRect>
 801192a:	2000      	movs	r0, #0
 801192c:	b009      	add	sp, #36	; 0x24
 801192e:	bd30      	pop	{r4, r5, pc}
 8011930:	20000340 	.word	0x20000340
 8011934:	2000032c 	.word	0x2000032c

08011938 <_Create>:
 8011938:	b530      	push	{r4, r5, lr}
 801193a:	b08b      	sub	sp, #44	; 0x2c
 801193c:	4605      	mov	r5, r0
 801193e:	f7ff f87f 	bl	8010a40 <GUI_ALLOC_LockH>
 8011942:	ab0a      	add	r3, sp, #40	; 0x28
 8011944:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8011946:	f843 0d28 	str.w	r0, [r3, #-40]!
 801194a:	4668      	mov	r0, sp
 801194c:	6894      	ldr	r4, [r2, #8]
 801194e:	f7ff f885 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8011952:	a80a      	add	r0, sp, #40	; 0x28
 8011954:	2300      	movs	r3, #0
 8011956:	9302      	str	r3, [sp, #8]
 8011958:	f840 5d24 	str.w	r5, [r0, #-36]!
 801195c:	6863      	ldr	r3, [r4, #4]
 801195e:	4798      	blx	r3
 8011960:	b00b      	add	sp, #44	; 0x2c
 8011962:	bd30      	pop	{r4, r5, pc}

08011964 <_Paint>:
 8011964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011968:	b099      	sub	sp, #100	; 0x64
 801196a:	4607      	mov	r7, r0
 801196c:	f7ff f868 	bl	8010a40 <GUI_ALLOC_LockH>
 8011970:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8011972:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 8011976:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801197a:	9009      	str	r0, [sp, #36]	; 0x24
 801197c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 801197e:	6d46      	ldr	r6, [r0, #84]	; 0x54
 8011980:	f8b0 5062 	ldrh.w	r5, [r0, #98]	; 0x62
 8011984:	f8d0 8040 	ldr.w	r8, [r0, #64]	; 0x40
 8011988:	9202      	str	r2, [sp, #8]
 801198a:	4638      	mov	r0, r7
 801198c:	9305      	str	r3, [sp, #20]
 801198e:	f7f5 fe5c 	bl	800764a <RADIO__GetButtonSize>
 8011992:	1d04      	adds	r4, r0, #4
 8011994:	a818      	add	r0, sp, #96	; 0x60
 8011996:	f850 3d3c 	ldr.w	r3, [r0, #-60]!
 801199a:	f9b3 2060 	ldrsh.w	r2, [r3, #96]	; 0x60
 801199e:	9206      	str	r2, [sp, #24]
 80119a0:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80119a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119a6:	9207      	str	r2, [sp, #28]
 80119a8:	f003 0301 	and.w	r3, r3, #1
 80119ac:	9303      	str	r3, [sp, #12]
 80119ae:	f7ff f855 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80119b2:	a80d      	add	r0, sp, #52	; 0x34
 80119b4:	f7f9 fc12 	bl	800b1dc <WM_GetClientRect>
 80119b8:	f8d9 3000 	ldr.w	r3, [r9]
 80119bc:	4638      	mov	r0, r7
 80119be:	4798      	blx	r3
 80119c0:	2307      	movs	r3, #7
 80119c2:	9310      	str	r3, [sp, #64]	; 0x40
 80119c4:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80119c8:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 80119cc:	970f      	str	r7, [sp, #60]	; 0x3c
 80119ce:	3202      	adds	r2, #2
 80119d0:	3302      	adds	r3, #2
 80119d2:	9213      	str	r2, [sp, #76]	; 0x4c
 80119d4:	9314      	str	r3, [sp, #80]	; 0x50
 80119d6:	4402      	add	r2, r0
 80119d8:	4403      	add	r3, r0
 80119da:	3a01      	subs	r2, #1
 80119dc:	3b01      	subs	r3, #1
 80119de:	4681      	mov	r9, r0
 80119e0:	9215      	str	r2, [sp, #84]	; 0x54
 80119e2:	9316      	str	r3, [sp, #88]	; 0x58
 80119e4:	2700      	movs	r7, #0
 80119e6:	9b02      	ldr	r3, [sp, #8]
 80119e8:	429f      	cmp	r7, r3
 80119ea:	da0a      	bge.n	8011a02 <_Paint+0x9e>
 80119ec:	9711      	str	r7, [sp, #68]	; 0x44
 80119ee:	a80f      	add	r0, sp, #60	; 0x3c
 80119f0:	47b0      	blx	r6
 80119f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80119f4:	442b      	add	r3, r5
 80119f6:	9314      	str	r3, [sp, #80]	; 0x50
 80119f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80119fa:	442b      	add	r3, r5
 80119fc:	9316      	str	r3, [sp, #88]	; 0x58
 80119fe:	3701      	adds	r7, #1
 8011a00:	e7f1      	b.n	80119e6 <_Paint+0x82>
 8011a02:	a90b      	add	r1, sp, #44	; 0x2c
 8011a04:	4640      	mov	r0, r8
 8011a06:	f005 fbef 	bl	80171e8 <GUI_GetFontInfo>
 8011a0a:	4640      	mov	r0, r8
 8011a0c:	f7fd fefe 	bl	800f80c <GUI_SetFont>
 8011a10:	2002      	movs	r0, #2
 8011a12:	f7fd fef1 	bl	800f7f8 <GUI_SetTextMode>
 8011a16:	f7fe fefd 	bl	8010814 <GUI_GetFontDistY>
 8011a1a:	2312      	movs	r3, #18
 8011a1c:	9310      	str	r3, [sp, #64]	; 0x40
 8011a1e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8011a22:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
 8011a26:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
 8011a2a:	3306      	adds	r3, #6
 8011a2c:	45a2      	cmp	sl, r4
 8011a2e:	444b      	add	r3, r9
 8011a30:	bfdc      	itt	le
 8011a32:	ebca 0404 	rsble	r4, sl, r4
 8011a36:	2102      	movle	r1, #2
 8011a38:	9313      	str	r3, [sp, #76]	; 0x4c
 8011a3a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8011a3e:	bfd4      	ite	le
 8011a40:	fb94 f4f1 	sdivle	r4, r4, r1
 8011a44:	2400      	movgt	r4, #0
 8011a46:	ebca 0c0c 	rsb	ip, sl, ip
 8011a4a:	fa5f fb8c 	uxtb.w	fp, ip
 8011a4e:	441c      	add	r4, r3
 8011a50:	ebcb 0404 	rsb	r4, fp, r4
 8011a54:	280c      	cmp	r0, #12
 8011a56:	9414      	str	r4, [sp, #80]	; 0x50
 8011a58:	bfd4      	ite	le
 8011a5a:	2202      	movle	r2, #2
 8011a5c:	2203      	movgt	r2, #3
 8011a5e:	2400      	movs	r4, #0
 8011a60:	9201      	str	r2, [sp, #4]
 8011a62:	4627      	mov	r7, r4
 8011a64:	9404      	str	r4, [sp, #16]
 8011a66:	46a1      	mov	r9, r4
 8011a68:	9400      	str	r4, [sp, #0]
 8011a6a:	46a0      	mov	r8, r4
 8011a6c:	9b02      	ldr	r3, [sp, #8]
 8011a6e:	4598      	cmp	r8, r3
 8011a70:	da3e      	bge.n	8011af0 <_Paint+0x18c>
 8011a72:	9805      	ldr	r0, [sp, #20]
 8011a74:	4641      	mov	r1, r8
 8011a76:	f7f6 fec6 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 8011a7a:	900a      	str	r0, [sp, #40]	; 0x28
 8011a7c:	2800      	cmp	r0, #0
 8011a7e:	d02e      	beq.n	8011ade <_Paint+0x17a>
 8011a80:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 8011a84:	f7fe f8ea 	bl	800fc5c <GUI_GetStringDistX>
 8011a88:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011a8a:	4408      	add	r0, r1
 8011a8c:	1e81      	subs	r1, r0, #2
 8011a8e:	9115      	str	r1, [sp, #84]	; 0x54
 8011a90:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011a92:	9117      	str	r1, [sp, #92]	; 0x5c
 8011a94:	a80f      	add	r0, sp, #60	; 0x3c
 8011a96:	47b0      	blx	r6
 8011a98:	a80a      	add	r0, sp, #40	; 0x28
 8011a9a:	f7fe ffdf 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8011a9e:	9b03      	ldr	r3, [sp, #12]
 8011aa0:	b1eb      	cbz	r3, 8011ade <_Paint+0x17a>
 8011aa2:	9a06      	ldr	r2, [sp, #24]
 8011aa4:	4542      	cmp	r2, r8
 8011aa6:	d001      	beq.n	8011aac <_Paint+0x148>
 8011aa8:	9b07      	ldr	r3, [sp, #28]
 8011aaa:	b1c3      	cbz	r3, 8011ade <_Paint+0x17a>
 8011aac:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8011aae:	9a01      	ldr	r2, [sp, #4]
 8011ab0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8011ab2:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8011ab4:	eb04 010b 	add.w	r1, r4, fp
 8011ab8:	4291      	cmp	r1, r2
 8011aba:	bfb8      	it	lt
 8011abc:	b2e1      	uxtblt	r1, r4
 8011abe:	b2a3      	uxth	r3, r4
 8011ac0:	4454      	add	r4, sl
 8011ac2:	bfa8      	it	ge
 8011ac4:	9901      	ldrge	r1, [sp, #4]
 8011ac6:	9304      	str	r3, [sp, #16]
 8011ac8:	3c01      	subs	r4, #1
 8011aca:	445c      	add	r4, fp
 8011acc:	1a40      	subs	r0, r0, r1
 8011ace:	440f      	add	r7, r1
 8011ad0:	440c      	add	r4, r1
 8011ad2:	2201      	movs	r2, #1
 8011ad4:	fa1f f980 	uxth.w	r9, r0
 8011ad8:	b2bf      	uxth	r7, r7
 8011ada:	b2a4      	uxth	r4, r4
 8011adc:	9200      	str	r2, [sp, #0]
 8011ade:	9914      	ldr	r1, [sp, #80]	; 0x50
 8011ae0:	4429      	add	r1, r5
 8011ae2:	9114      	str	r1, [sp, #80]	; 0x50
 8011ae4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011ae6:	4429      	add	r1, r5
 8011ae8:	9116      	str	r1, [sp, #88]	; 0x58
 8011aea:	f108 0801 	add.w	r8, r8, #1
 8011aee:	e7bd      	b.n	8011a6c <_Paint+0x108>
 8011af0:	9b00      	ldr	r3, [sp, #0]
 8011af2:	9a03      	ldr	r2, [sp, #12]
 8011af4:	4213      	tst	r3, r2
 8011af6:	d00d      	beq.n	8011b14 <_Paint+0x1b0>
 8011af8:	230a      	movs	r3, #10
 8011afa:	9a04      	ldr	r2, [sp, #16]
 8011afc:	9310      	str	r3, [sp, #64]	; 0x40
 8011afe:	fa0f f389 	sxth.w	r3, r9
 8011b02:	9313      	str	r3, [sp, #76]	; 0x4c
 8011b04:	b23f      	sxth	r7, r7
 8011b06:	b213      	sxth	r3, r2
 8011b08:	b224      	sxth	r4, r4
 8011b0a:	9314      	str	r3, [sp, #80]	; 0x50
 8011b0c:	9715      	str	r7, [sp, #84]	; 0x54
 8011b0e:	9416      	str	r4, [sp, #88]	; 0x58
 8011b10:	a80f      	add	r0, sp, #60	; 0x3c
 8011b12:	47b0      	blx	r6
 8011b14:	b019      	add	sp, #100	; 0x64
 8011b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08011b1c <MULTIPAGE_DrawSkinFlex>:
 8011b1c:	b570      	push	{r4, r5, r6, lr}
 8011b1e:	6843      	ldr	r3, [r0, #4]
 8011b20:	b086      	sub	sp, #24
 8011b22:	4604      	mov	r4, r0
 8011b24:	b993      	cbnz	r3, 8011b4c <MULTIPAGE_DrawSkinFlex+0x30>
 8011b26:	6800      	ldr	r0, [r0, #0]
 8011b28:	f7fe ff8a 	bl	8010a40 <GUI_ALLOC_LockH>
 8011b2c:	4a93      	ldr	r2, [pc, #588]	; (8011d7c <MULTIPAGE_DrawSkinFlex+0x260>)
 8011b2e:	4603      	mov	r3, r0
 8011b30:	6812      	ldr	r2, [r2, #0]
 8011b32:	655a      	str	r2, [r3, #84]	; 0x54
 8011b34:	a806      	add	r0, sp, #24
 8011b36:	2202      	movs	r2, #2
 8011b38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8011b3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8011b40:	4a8f      	ldr	r2, [pc, #572]	; (8011d80 <MULTIPAGE_DrawSkinFlex+0x264>)
 8011b42:	f840 3d0c 	str.w	r3, [r0, #-12]!
 8011b46:	675a      	str	r2, [r3, #116]	; 0x74
 8011b48:	f7fe ff88 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8011b4c:	6a26      	ldr	r6, [r4, #32]
 8011b4e:	2e00      	cmp	r6, #0
 8011b50:	f000 8110 	beq.w	8011d74 <MULTIPAGE_DrawSkinFlex+0x258>
 8011b54:	68a2      	ldr	r2, [r4, #8]
 8011b56:	68b1      	ldr	r1, [r6, #8]
 8011b58:	428a      	cmp	r2, r1
 8011b5a:	d007      	beq.n	8011b6c <MULTIPAGE_DrawSkinFlex+0x50>
 8011b5c:	7bf3      	ldrb	r3, [r6, #15]
 8011b5e:	4d89      	ldr	r5, [pc, #548]	; (8011d84 <MULTIPAGE_DrawSkinFlex+0x268>)
 8011b60:	f013 0f01 	tst.w	r3, #1
 8011b64:	4b88      	ldr	r3, [pc, #544]	; (8011d88 <MULTIPAGE_DrawSkinFlex+0x26c>)
 8011b66:	bf18      	it	ne
 8011b68:	461d      	movne	r5, r3
 8011b6a:	e000      	b.n	8011b6e <MULTIPAGE_DrawSkinFlex+0x52>
 8011b6c:	4d83      	ldr	r5, [pc, #524]	; (8011d7c <MULTIPAGE_DrawSkinFlex+0x260>)
 8011b6e:	6863      	ldr	r3, [r4, #4]
 8011b70:	2b06      	cmp	r3, #6
 8011b72:	f000 80f7 	beq.w	8011d64 <MULTIPAGE_DrawSkinFlex+0x248>
 8011b76:	dc02      	bgt.n	8011b7e <MULTIPAGE_DrawSkinFlex+0x62>
 8011b78:	2b05      	cmp	r3, #5
 8011b7a:	d075      	beq.n	8011c68 <MULTIPAGE_DrawSkinFlex+0x14c>
 8011b7c:	e0fa      	b.n	8011d74 <MULTIPAGE_DrawSkinFlex+0x258>
 8011b7e:	2b0b      	cmp	r3, #11
 8011b80:	d037      	beq.n	8011bf2 <MULTIPAGE_DrawSkinFlex+0xd6>
 8011b82:	2b12      	cmp	r3, #18
 8011b84:	f040 80f6 	bne.w	8011d74 <MULTIPAGE_DrawSkinFlex+0x258>
 8011b88:	6820      	ldr	r0, [r4, #0]
 8011b8a:	f7f6 fce5 	bl	8008558 <MULTIPAGE_GetFont>
 8011b8e:	f7fd fe3d 	bl	800f80c <GUI_SetFont>
 8011b92:	69a8      	ldr	r0, [r5, #24]
 8011b94:	f7fd fe68 	bl	800f868 <GUI_SetColor>
 8011b98:	2002      	movs	r0, #2
 8011b9a:	f7fd fe2d 	bl	800f7f8 <GUI_SetTextMode>
 8011b9e:	6820      	ldr	r0, [r4, #0]
 8011ba0:	f7fe ff4e 	bl	8010a40 <GUI_ALLOC_LockH>
 8011ba4:	68a1      	ldr	r1, [r4, #8]
 8011ba6:	9003      	str	r0, [sp, #12]
 8011ba8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8011baa:	f7f6 fe2c 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 8011bae:	6923      	ldr	r3, [r4, #16]
 8011bb0:	f8ad 3010 	strh.w	r3, [sp, #16]
 8011bb4:	6963      	ldr	r3, [r4, #20]
 8011bb6:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011bba:	69a3      	ldr	r3, [r4, #24]
 8011bbc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011bc0:	69e3      	ldr	r3, [r4, #28]
 8011bc2:	9002      	str	r0, [sp, #8]
 8011bc4:	f100 0418 	add.w	r4, r0, #24
 8011bc8:	4620      	mov	r0, r4
 8011bca:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011bce:	f7ee fb0f 	bl	80001f0 <strlen>
 8011bd2:	6832      	ldr	r2, [r6, #0]
 8011bd4:	9200      	str	r2, [sp, #0]
 8011bd6:	9a03      	ldr	r2, [sp, #12]
 8011bd8:	4603      	mov	r3, r0
 8011bda:	a904      	add	r1, sp, #16
 8011bdc:	4620      	mov	r0, r4
 8011bde:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8011be0:	f005 fc9c 	bl	801751c <GUI_DispStringInRectEx>
 8011be4:	a802      	add	r0, sp, #8
 8011be6:	f7fe ff39 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8011bea:	a803      	add	r0, sp, #12
 8011bec:	f7fe ff36 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8011bf0:	e0c0      	b.n	8011d74 <MULTIPAGE_DrawSkinFlex+0x258>
 8011bf2:	3201      	adds	r2, #1
 8011bf4:	d113      	bne.n	8011c1e <MULTIPAGE_DrawSkinFlex+0x102>
 8011bf6:	4d61      	ldr	r5, [pc, #388]	; (8011d7c <MULTIPAGE_DrawSkinFlex+0x260>)
 8011bf8:	6968      	ldr	r0, [r5, #20]
 8011bfa:	f7fd fe35 	bl	800f868 <GUI_SetColor>
 8011bfe:	f104 0010 	add.w	r0, r4, #16
 8011c02:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8011c04:	f005 fe78 	bl	80178f8 <GUI_DrawRect>
 8011c08:	6828      	ldr	r0, [r5, #0]
 8011c0a:	f7fd fe2d 	bl	800f868 <GUI_SetColor>
 8011c0e:	f104 0010 	add.w	r0, r4, #16
 8011c12:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8011c14:	3001      	adds	r0, #1
 8011c16:	3101      	adds	r1, #1
 8011c18:	3a01      	subs	r2, #1
 8011c1a:	3b01      	subs	r3, #1
 8011c1c:	e02c      	b.n	8011c78 <MULTIPAGE_DrawSkinFlex+0x15c>
 8011c1e:	6968      	ldr	r0, [r5, #20]
 8011c20:	f7fd fe22 	bl	800f868 <GUI_SetColor>
 8011c24:	7bb3      	ldrb	r3, [r6, #14]
 8011c26:	0718      	lsls	r0, r3, #28
 8011c28:	d504      	bpl.n	8011c34 <MULTIPAGE_DrawSkinFlex+0x118>
 8011c2a:	69e0      	ldr	r0, [r4, #28]
 8011c2c:	6921      	ldr	r1, [r4, #16]
 8011c2e:	69a2      	ldr	r2, [r4, #24]
 8011c30:	f7fe f8a6 	bl	800fd80 <GUI_DrawHLine>
 8011c34:	7bb3      	ldrb	r3, [r6, #14]
 8011c36:	0759      	lsls	r1, r3, #29
 8011c38:	d504      	bpl.n	8011c44 <MULTIPAGE_DrawSkinFlex+0x128>
 8011c3a:	6960      	ldr	r0, [r4, #20]
 8011c3c:	6921      	ldr	r1, [r4, #16]
 8011c3e:	69a2      	ldr	r2, [r4, #24]
 8011c40:	f7fe f89e 	bl	800fd80 <GUI_DrawHLine>
 8011c44:	7bb3      	ldrb	r3, [r6, #14]
 8011c46:	07da      	lsls	r2, r3, #31
 8011c48:	d504      	bpl.n	8011c54 <MULTIPAGE_DrawSkinFlex+0x138>
 8011c4a:	6920      	ldr	r0, [r4, #16]
 8011c4c:	6961      	ldr	r1, [r4, #20]
 8011c4e:	69e2      	ldr	r2, [r4, #28]
 8011c50:	f7fe f874 	bl	800fd3c <GUI_DrawVLine>
 8011c54:	7bb3      	ldrb	r3, [r6, #14]
 8011c56:	079b      	lsls	r3, r3, #30
 8011c58:	f140 808c 	bpl.w	8011d74 <MULTIPAGE_DrawSkinFlex+0x258>
 8011c5c:	69a0      	ldr	r0, [r4, #24]
 8011c5e:	6961      	ldr	r1, [r4, #20]
 8011c60:	69e2      	ldr	r2, [r4, #28]
 8011c62:	f7fe f86b 	bl	800fd3c <GUI_DrawVLine>
 8011c66:	e085      	b.n	8011d74 <MULTIPAGE_DrawSkinFlex+0x258>
 8011c68:	428a      	cmp	r2, r1
 8011c6a:	d108      	bne.n	8011c7e <MULTIPAGE_DrawSkinFlex+0x162>
 8011c6c:	6828      	ldr	r0, [r5, #0]
 8011c6e:	f7fd fdfb 	bl	800f868 <GUI_SetColor>
 8011c72:	f104 0010 	add.w	r0, r4, #16
 8011c76:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8011c78:	f7fe f81a 	bl	800fcb0 <GUI_FillRect>
 8011c7c:	e07a      	b.n	8011d74 <MULTIPAGE_DrawSkinFlex+0x258>
 8011c7e:	89b3      	ldrh	r3, [r6, #12]
 8011c80:	f013 0f08 	tst.w	r3, #8
 8011c84:	6873      	ldr	r3, [r6, #4]
 8011c86:	d036      	beq.n	8011cf6 <MULTIPAGE_DrawSkinFlex+0x1da>
 8011c88:	f013 0f04 	tst.w	r3, #4
 8011c8c:	69a2      	ldr	r2, [r4, #24]
 8011c8e:	6923      	ldr	r3, [r4, #16]
 8011c90:	f04f 0602 	mov.w	r6, #2
 8011c94:	ebc3 0102 	rsb	r1, r3, r2
 8011c98:	fb91 f1f6 	sdiv	r1, r1, r6
 8011c9c:	eb03 0001 	add.w	r0, r3, r1
 8011ca0:	d011      	beq.n	8011cc6 <MULTIPAGE_DrawSkinFlex+0x1aa>
 8011ca2:	68e9      	ldr	r1, [r5, #12]
 8011ca4:	9100      	str	r1, [sp, #0]
 8011ca6:	6929      	ldr	r1, [r5, #16]
 8011ca8:	9101      	str	r1, [sp, #4]
 8011caa:	3001      	adds	r0, #1
 8011cac:	69e3      	ldr	r3, [r4, #28]
 8011cae:	6961      	ldr	r1, [r4, #20]
 8011cb0:	f005 fc02 	bl	80174b8 <GUI_DrawGradientH>
 8011cb4:	6920      	ldr	r0, [r4, #16]
 8011cb6:	69a3      	ldr	r3, [r4, #24]
 8011cb8:	1a1b      	subs	r3, r3, r0
 8011cba:	fb93 f2f6 	sdiv	r2, r3, r6
 8011cbe:	686b      	ldr	r3, [r5, #4]
 8011cc0:	9300      	str	r3, [sp, #0]
 8011cc2:	68ab      	ldr	r3, [r5, #8]
 8011cc4:	e010      	b.n	8011ce8 <MULTIPAGE_DrawSkinFlex+0x1cc>
 8011cc6:	68a9      	ldr	r1, [r5, #8]
 8011cc8:	9100      	str	r1, [sp, #0]
 8011cca:	6869      	ldr	r1, [r5, #4]
 8011ccc:	9101      	str	r1, [sp, #4]
 8011cce:	3001      	adds	r0, #1
 8011cd0:	69e3      	ldr	r3, [r4, #28]
 8011cd2:	6961      	ldr	r1, [r4, #20]
 8011cd4:	f005 fbf0 	bl	80174b8 <GUI_DrawGradientH>
 8011cd8:	6920      	ldr	r0, [r4, #16]
 8011cda:	69a3      	ldr	r3, [r4, #24]
 8011cdc:	1a1b      	subs	r3, r3, r0
 8011cde:	fb93 f2f6 	sdiv	r2, r3, r6
 8011ce2:	692b      	ldr	r3, [r5, #16]
 8011ce4:	9300      	str	r3, [sp, #0]
 8011ce6:	68eb      	ldr	r3, [r5, #12]
 8011ce8:	9301      	str	r3, [sp, #4]
 8011cea:	6961      	ldr	r1, [r4, #20]
 8011cec:	69e3      	ldr	r3, [r4, #28]
 8011cee:	4402      	add	r2, r0
 8011cf0:	f005 fbe2 	bl	80174b8 <GUI_DrawGradientH>
 8011cf4:	e03e      	b.n	8011d74 <MULTIPAGE_DrawSkinFlex+0x258>
 8011cf6:	f013 0f04 	tst.w	r3, #4
 8011cfa:	6961      	ldr	r1, [r4, #20]
 8011cfc:	69e3      	ldr	r3, [r4, #28]
 8011cfe:	f04f 0602 	mov.w	r6, #2
 8011d02:	ebc1 0303 	rsb	r3, r1, r3
 8011d06:	fb93 f3f6 	sdiv	r3, r3, r6
 8011d0a:	d012      	beq.n	8011d32 <MULTIPAGE_DrawSkinFlex+0x216>
 8011d0c:	692a      	ldr	r2, [r5, #16]
 8011d0e:	9200      	str	r2, [sp, #0]
 8011d10:	68ea      	ldr	r2, [r5, #12]
 8011d12:	9201      	str	r2, [sp, #4]
 8011d14:	440b      	add	r3, r1
 8011d16:	6920      	ldr	r0, [r4, #16]
 8011d18:	69a2      	ldr	r2, [r4, #24]
 8011d1a:	f005 fb9b 	bl	8017454 <GUI_DrawGradientV>
 8011d1e:	6962      	ldr	r2, [r4, #20]
 8011d20:	69e3      	ldr	r3, [r4, #28]
 8011d22:	68a8      	ldr	r0, [r5, #8]
 8011d24:	9000      	str	r0, [sp, #0]
 8011d26:	1a99      	subs	r1, r3, r2
 8011d28:	fb91 f6f6 	sdiv	r6, r1, r6
 8011d2c:	1991      	adds	r1, r2, r6
 8011d2e:	6868      	ldr	r0, [r5, #4]
 8011d30:	e011      	b.n	8011d56 <MULTIPAGE_DrawSkinFlex+0x23a>
 8011d32:	686a      	ldr	r2, [r5, #4]
 8011d34:	9200      	str	r2, [sp, #0]
 8011d36:	68aa      	ldr	r2, [r5, #8]
 8011d38:	9201      	str	r2, [sp, #4]
 8011d3a:	440b      	add	r3, r1
 8011d3c:	6920      	ldr	r0, [r4, #16]
 8011d3e:	69a2      	ldr	r2, [r4, #24]
 8011d40:	f005 fb88 	bl	8017454 <GUI_DrawGradientV>
 8011d44:	6962      	ldr	r2, [r4, #20]
 8011d46:	69e3      	ldr	r3, [r4, #28]
 8011d48:	68e8      	ldr	r0, [r5, #12]
 8011d4a:	9000      	str	r0, [sp, #0]
 8011d4c:	1a99      	subs	r1, r3, r2
 8011d4e:	fb91 f6f6 	sdiv	r6, r1, r6
 8011d52:	6928      	ldr	r0, [r5, #16]
 8011d54:	1991      	adds	r1, r2, r6
 8011d56:	9001      	str	r0, [sp, #4]
 8011d58:	6920      	ldr	r0, [r4, #16]
 8011d5a:	69a2      	ldr	r2, [r4, #24]
 8011d5c:	3101      	adds	r1, #1
 8011d5e:	f005 fb79 	bl	8017454 <GUI_DrawGradientV>
 8011d62:	e007      	b.n	8011d74 <MULTIPAGE_DrawSkinFlex+0x258>
 8011d64:	6933      	ldr	r3, [r6, #16]
 8011d66:	b12b      	cbz	r3, 8011d74 <MULTIPAGE_DrawSkinFlex+0x258>
 8011d68:	6818      	ldr	r0, [r3, #0]
 8011d6a:	6821      	ldr	r1, [r4, #0]
 8011d6c:	6922      	ldr	r2, [r4, #16]
 8011d6e:	6963      	ldr	r3, [r4, #20]
 8011d70:	f7f6 fc05 	bl	800857e <GUI_DRAW__Draw>
 8011d74:	2000      	movs	r0, #0
 8011d76:	b006      	add	sp, #24
 8011d78:	bd70      	pop	{r4, r5, r6, pc}
 8011d7a:	bf00      	nop
 8011d7c:	20000360 	.word	0x20000360
 8011d80:	08012497 	.word	0x08012497
 8011d84:	20000398 	.word	0x20000398
 8011d88:	2000037c 	.word	0x2000037c

08011d8c <MULTIPAGE__DrawTextItemH>:
 8011d8c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8011d90:	4604      	mov	r4, r0
 8011d92:	4688      	mov	r8, r1
 8011d94:	6818      	ldr	r0, [r3, #0]
 8011d96:	6859      	ldr	r1, [r3, #4]
 8011d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d9a:	466d      	mov	r5, sp
 8011d9c:	c503      	stmia	r5!, {r0, r1}
 8011d9e:	4617      	mov	r7, r2
 8011da0:	f8bd 2000 	ldrh.w	r2, [sp]
 8011da4:	4413      	add	r3, r2
 8011da6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011da8:	b29b      	uxth	r3, r3
 8011daa:	f8ad 3000 	strh.w	r3, [sp]
 8011dae:	4413      	add	r3, r2
 8011db0:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011db4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011db6:	4668      	mov	r0, sp
 8011db8:	689b      	ldr	r3, [r3, #8]
 8011dba:	4798      	blx	r3
 8011dbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011dbe:	4668      	mov	r0, sp
 8011dc0:	4669      	mov	r1, sp
 8011dc2:	681a      	ldr	r2, [r3, #0]
 8011dc4:	f7fc ffc0 	bl	800ed48 <GUI__ReduceRect>
 8011dc8:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8011dcc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011dce:	ae02      	add	r6, sp, #8
 8011dd0:	42bb      	cmp	r3, r7
 8011dd2:	e886 0003 	stmia.w	r6, {r0, r1}
 8011dd6:	d144      	bne.n	8011e62 <MULTIPAGE__DrawTextItemH+0xd6>
 8011dd8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8011dda:	f013 0f04 	tst.w	r3, #4
 8011dde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	d01d      	beq.n	8011e20 <MULTIPAGE__DrawTextItemH+0x94>
 8011de4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011de8:	3a01      	subs	r2, #1
 8011dea:	1ad2      	subs	r2, r2, r3
 8011dec:	2b01      	cmp	r3, #1
 8011dee:	f8ad 2002 	strh.w	r2, [sp, #2]
 8011df2:	dd36      	ble.n	8011e62 <MULTIPAGE__DrawTextItemH+0xd6>
 8011df4:	4f2e      	ldr	r7, [pc, #184]	; (8011eb0 <MULTIPAGE__DrawTextItemH+0x124>)
 8011df6:	6838      	ldr	r0, [r7, #0]
 8011df8:	f7fc ff30 	bl	800ec5c <LCD_SetColor>
 8011dfc:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8011e00:	f9bd 0000 	ldrsh.w	r0, [sp]
 8011e04:	1c4a      	adds	r2, r1, #1
 8011e06:	3801      	subs	r0, #1
 8011e08:	f7fd ff98 	bl	800fd3c <GUI_DrawVLine>
 8011e0c:	6878      	ldr	r0, [r7, #4]
 8011e0e:	f7fc ff25 	bl	800ec5c <LCD_SetColor>
 8011e12:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8011e16:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8011e1a:	1c4a      	adds	r2, r1, #1
 8011e1c:	3001      	adds	r0, #1
 8011e1e:	e01e      	b.n	8011e5e <MULTIPAGE__DrawTextItemH+0xd2>
 8011e20:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011e24:	441a      	add	r2, r3
 8011e26:	3201      	adds	r2, #1
 8011e28:	2b01      	cmp	r3, #1
 8011e2a:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011e2e:	dd18      	ble.n	8011e62 <MULTIPAGE__DrawTextItemH+0xd6>
 8011e30:	4f1f      	ldr	r7, [pc, #124]	; (8011eb0 <MULTIPAGE__DrawTextItemH+0x124>)
 8011e32:	6838      	ldr	r0, [r7, #0]
 8011e34:	f7fc ff12 	bl	800ec5c <LCD_SetColor>
 8011e38:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8011e3c:	f9bd 0000 	ldrsh.w	r0, [sp]
 8011e40:	1e91      	subs	r1, r2, #2
 8011e42:	3801      	subs	r0, #1
 8011e44:	3a01      	subs	r2, #1
 8011e46:	f7fd ff79 	bl	800fd3c <GUI_DrawVLine>
 8011e4a:	6878      	ldr	r0, [r7, #4]
 8011e4c:	f7fc ff06 	bl	800ec5c <LCD_SetColor>
 8011e50:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8011e54:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8011e58:	1e91      	subs	r1, r2, #2
 8011e5a:	3001      	adds	r0, #1
 8011e5c:	3a01      	subs	r2, #1
 8011e5e:	f7fd ff6d 	bl	800fd3c <GUI_DrawVLine>
 8011e62:	2002      	movs	r0, #2
 8011e64:	f7fd fcc8 	bl	800f7f8 <GUI_SetTextMode>
 8011e68:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8011e6a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8011e6e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8011e70:	f7fc fef4 	bl	800ec5c <LCD_SetColor>
 8011e74:	4669      	mov	r1, sp
 8011e76:	4620      	mov	r0, r4
 8011e78:	f7f5 fa3f 	bl	80072fa <WIDGET__FillRectEx>
 8011e7c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8011e7e:	f7fc fee5 	bl	800ec4c <LCD_SetBkColor>
 8011e82:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011e84:	f7fc feea 	bl	800ec5c <LCD_SetColor>
 8011e88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011e8a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8011e8e:	881b      	ldrh	r3, [r3, #0]
 8011e90:	441a      	add	r2, r3
 8011e92:	f8ad 200c 	strh.w	r2, [sp, #12]
 8011e96:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8011e9a:	4640      	mov	r0, r8
 8011e9c:	1ad3      	subs	r3, r2, r3
 8011e9e:	4631      	mov	r1, r6
 8011ea0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8011ea2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011ea6:	f005 fc56 	bl	8017756 <GUI_DispStringInRect>
 8011eaa:	b004      	add	sp, #16
 8011eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011eb0:	20000218 	.word	0x20000218

08011eb4 <_IsBetween>:
 8011eb4:	4291      	cmp	r1, r2
 8011eb6:	dd06      	ble.n	8011ec6 <_IsBetween+0x12>
 8011eb8:	4288      	cmp	r0, r1
 8011eba:	dc0b      	bgt.n	8011ed4 <_IsBetween+0x20>
 8011ebc:	4290      	cmp	r0, r2
 8011ebe:	bfb4      	ite	lt
 8011ec0:	2000      	movlt	r0, #0
 8011ec2:	2001      	movge	r0, #1
 8011ec4:	4770      	bx	lr
 8011ec6:	4288      	cmp	r0, r1
 8011ec8:	db04      	blt.n	8011ed4 <_IsBetween+0x20>
 8011eca:	4290      	cmp	r0, r2
 8011ecc:	bfcc      	ite	gt
 8011ece:	2000      	movgt	r0, #0
 8011ed0:	2001      	movle	r0, #1
 8011ed2:	4770      	bx	lr
 8011ed4:	2000      	movs	r0, #0
 8011ed6:	4770      	bx	lr

08011ed8 <_Create>:
 8011ed8:	b530      	push	{r4, r5, lr}
 8011eda:	b08b      	sub	sp, #44	; 0x2c
 8011edc:	2100      	movs	r1, #0
 8011ede:	4604      	mov	r4, r0
 8011ee0:	2224      	movs	r2, #36	; 0x24
 8011ee2:	a801      	add	r0, sp, #4
 8011ee4:	f006 fec1 	bl	8018c6a <memset>
 8011ee8:	4620      	mov	r0, r4
 8011eea:	f7fe fda9 	bl	8010a40 <GUI_ALLOC_LockH>
 8011eee:	ab0a      	add	r3, sp, #40	; 0x28
 8011ef0:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8011ef2:	f843 0d28 	str.w	r0, [r3, #-40]!
 8011ef6:	6895      	ldr	r5, [r2, #8]
 8011ef8:	4668      	mov	r0, sp
 8011efa:	f7fe fdaf 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8011efe:	2300      	movs	r3, #0
 8011f00:	9302      	str	r3, [sp, #8]
 8011f02:	9401      	str	r4, [sp, #4]
 8011f04:	682b      	ldr	r3, [r5, #0]
 8011f06:	a801      	add	r0, sp, #4
 8011f08:	4798      	blx	r3
 8011f0a:	b00b      	add	sp, #44	; 0x2c
 8011f0c:	bd30      	pop	{r4, r5, pc}

08011f0e <MULTIPAGE_SKIN__GetPagePos>:
 8011f0e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011f12:	4689      	mov	r9, r1
 8011f14:	4607      	mov	r7, r0
 8011f16:	f7fe fd93 	bl	8010a40 <GUI_ALLOC_LockH>
 8011f1a:	ae02      	add	r6, sp, #8
 8011f1c:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
 8011f20:	f846 0d04 	str.w	r0, [r6, #-4]!
 8011f24:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8011f26:	f7f6 fb88 	bl	800863a <GUI_ARRAY_GetNumItems>
 8011f2a:	4680      	mov	r8, r0
 8011f2c:	4630      	mov	r0, r6
 8011f2e:	f7fe fd95 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8011f32:	2500      	movs	r5, #0
 8011f34:	454d      	cmp	r5, r9
 8011f36:	d006      	beq.n	8011f46 <MULTIPAGE_SKIN__GetPagePos+0x38>
 8011f38:	4629      	mov	r1, r5
 8011f3a:	4638      	mov	r0, r7
 8011f3c:	f7f5 fe62 	bl	8007c04 <MULTIPAGE__GetPageWidth>
 8011f40:	3501      	adds	r5, #1
 8011f42:	4404      	add	r4, r0
 8011f44:	e7f6      	b.n	8011f34 <MULTIPAGE_SKIN__GetPagePos+0x26>
 8011f46:	4545      	cmp	r5, r8
 8011f48:	d109      	bne.n	8011f5e <MULTIPAGE_SKIN__GetPagePos+0x50>
 8011f4a:	4638      	mov	r0, r7
 8011f4c:	f7fe fd78 	bl	8010a40 <GUI_ALLOC_LockH>
 8011f50:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8011f54:	9001      	str	r0, [sp, #4]
 8011f56:	4630      	mov	r0, r6
 8011f58:	441c      	add	r4, r3
 8011f5a:	f7fe fd7f 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8011f5e:	4620      	mov	r0, r4
 8011f60:	b003      	add	sp, #12
 8011f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08011f68 <_Paint>:
 8011f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f6c:	b0a9      	sub	sp, #164	; 0xa4
 8011f6e:	9006      	str	r0, [sp, #24]
 8011f70:	901f      	str	r0, [sp, #124]	; 0x7c
 8011f72:	f7fe fd65 	bl	8010a40 <GUI_ALLOC_LockH>
 8011f76:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8011f78:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8011f7a:	9209      	str	r2, [sp, #36]	; 0x24
 8011f7c:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8011f80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011f82:	930c      	str	r3, [sp, #48]	; 0x30
 8011f84:	9205      	str	r2, [sp, #20]
 8011f86:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8011f88:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8011f8a:	9017      	str	r0, [sp, #92]	; 0x5c
 8011f8c:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
 8011f8e:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8011f90:	8e45      	ldrh	r5, [r0, #50]	; 0x32
 8011f92:	f890 8080 	ldrb.w	r8, [r0, #128]	; 0x80
 8011f96:	f890 b081 	ldrb.w	fp, [r0, #129]	; 0x81
 8011f9a:	9302      	str	r3, [sp, #8]
 8011f9c:	9201      	str	r2, [sp, #4]
 8011f9e:	b90c      	cbnz	r4, 8011fa4 <_Paint+0x3c>
 8011fa0:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
 8011fa4:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
 8011fa8:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8011faa:	f7fd fc2f 	bl	800f80c <GUI_SetFont>
 8011fae:	f859 0d44 	ldr.w	r0, [r9, #-68]!
 8011fb2:	a918      	add	r1, sp, #96	; 0x60
 8011fb4:	f7f5 fdf3 	bl	8007b9e <MULTIPAGE__CalcBorderRect>
 8011fb8:	4648      	mov	r0, r9
 8011fba:	f7fe fd4f 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8011fbe:	f9bd 2060 	ldrsh.w	r2, [sp, #96]	; 0x60
 8011fc2:	9223      	str	r2, [sp, #140]	; 0x8c
 8011fc4:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
 8011fc8:	9224      	str	r2, [sp, #144]	; 0x90
 8011fca:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8011fce:	9225      	str	r2, [sp, #148]	; 0x94
 8011fd0:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
 8011fd4:	9226      	str	r2, [sp, #152]	; 0x98
 8011fd6:	ab1a      	add	r3, sp, #104	; 0x68
 8011fd8:	220b      	movs	r2, #11
 8011fda:	f04f 39ff 	mov.w	r9, #4294967295
 8011fde:	9327      	str	r3, [sp, #156]	; 0x9c
 8011fe0:	9220      	str	r2, [sp, #128]	; 0x80
 8011fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fe4:	971b      	str	r7, [sp, #108]	; 0x6c
 8011fe6:	961c      	str	r6, [sp, #112]	; 0x70
 8011fe8:	f8ad 5074 	strh.w	r5, [sp, #116]	; 0x74
 8011fec:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
 8011ff0:	a81f      	add	r0, sp, #124	; 0x7c
 8011ff2:	4798      	blx	r3
 8011ff4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011ff6:	f7f6 fb20 	bl	800863a <GUI_ARRAY_GetNumItems>
 8011ffa:	900d      	str	r0, [sp, #52]	; 0x34
 8011ffc:	2800      	cmp	r0, #0
 8011ffe:	f000 8230 	beq.w	8012462 <_Paint+0x4fa>
 8012002:	2100      	movs	r1, #0
 8012004:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012006:	f7f6 fbfe 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 801200a:	2100      	movs	r1, #0
 801200c:	9016      	str	r0, [sp, #88]	; 0x58
 801200e:	9806      	ldr	r0, [sp, #24]
 8012010:	f7f5 fdf8 	bl	8007c04 <MULTIPAGE__GetPageWidth>
 8012014:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012016:	9003      	str	r0, [sp, #12]
 8012018:	7912      	ldrb	r2, [r2, #4]
 801201a:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 801201e:	a816      	add	r0, sp, #88	; 0x58
 8012020:	f7fe fd1c 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012024:	f005 0508 	and.w	r5, r5, #8
 8012028:	9806      	ldr	r0, [sp, #24]
 801202a:	a918      	add	r1, sp, #96	; 0x60
 801202c:	f7f5 fe31 	bl	8007c92 <MULTIPAGE__GetTabBarRect>
 8012030:	b2ad      	uxth	r5, r5
 8012032:	a818      	add	r0, sp, #96	; 0x60
 8012034:	f7f8 fc0c 	bl	800a850 <WM_SetUserClipRect>
 8012038:	950b      	str	r5, [sp, #44]	; 0x2c
 801203a:	b1f5      	cbz	r5, 801207a <_Paint+0x112>
 801203c:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
 8012040:	9a03      	ldr	r2, [sp, #12]
 8012042:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 8012046:	9311      	str	r3, [sp, #68]	; 0x44
 8012048:	eb08 0501 	add.w	r5, r8, r1
 801204c:	b2ad      	uxth	r5, r5
 801204e:	fa1f fa85 	uxth.w	sl, r5
 8012052:	444d      	add	r5, r9
 8012054:	b209      	sxth	r1, r1
 8012056:	4415      	add	r5, r2
 8012058:	f017 0f04 	tst.w	r7, #4
 801205c:	9110      	str	r1, [sp, #64]	; 0x40
 801205e:	b2ad      	uxth	r5, r5
 8012060:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 8012064:	f8bd 0064 	ldrh.w	r0, [sp, #100]	; 0x64
 8012068:	d004      	beq.n	8012074 <_Paint+0x10c>
 801206a:	2201      	movs	r2, #1
 801206c:	9108      	str	r1, [sp, #32]
 801206e:	9004      	str	r0, [sp, #16]
 8012070:	9207      	str	r2, [sp, #28]
 8012072:	e022      	b.n	80120ba <_Paint+0x152>
 8012074:	9008      	str	r0, [sp, #32]
 8012076:	9104      	str	r1, [sp, #16]
 8012078:	e018      	b.n	80120ac <_Paint+0x144>
 801207a:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 801207e:	9b03      	ldr	r3, [sp, #12]
 8012080:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8012084:	9211      	str	r2, [sp, #68]	; 0x44
 8012086:	eb08 0501 	add.w	r5, r8, r1
 801208a:	b2ad      	uxth	r5, r5
 801208c:	fa1f fa85 	uxth.w	sl, r5
 8012090:	3d01      	subs	r5, #1
 8012092:	b209      	sxth	r1, r1
 8012094:	441d      	add	r5, r3
 8012096:	f017 0f04 	tst.w	r7, #4
 801209a:	9110      	str	r1, [sp, #64]	; 0x40
 801209c:	b2ad      	uxth	r5, r5
 801209e:	f8bd 0062 	ldrh.w	r0, [sp, #98]	; 0x62
 80120a2:	f8bd 1066 	ldrh.w	r1, [sp, #102]	; 0x66
 80120a6:	d004      	beq.n	80120b2 <_Paint+0x14a>
 80120a8:	9108      	str	r1, [sp, #32]
 80120aa:	9004      	str	r0, [sp, #16]
 80120ac:	f8cd 901c 	str.w	r9, [sp, #28]
 80120b0:	e003      	b.n	80120ba <_Paint+0x152>
 80120b2:	2301      	movs	r3, #1
 80120b4:	9008      	str	r0, [sp, #32]
 80120b6:	9104      	str	r1, [sp, #16]
 80120b8:	9307      	str	r3, [sp, #28]
 80120ba:	9a05      	ldr	r2, [sp, #20]
 80120bc:	b152      	cbz	r2, 80120d4 <_Paint+0x16c>
 80120be:	4611      	mov	r1, r2
 80120c0:	9806      	ldr	r0, [sp, #24]
 80120c2:	f7ff ff24 	bl	8011f0e <MULTIPAGE_SKIN__GetPagePos>
 80120c6:	b280      	uxth	r0, r0
 80120c8:	ebc0 020a 	rsb	r2, r0, sl
 80120cc:	1a2d      	subs	r5, r5, r0
 80120ce:	fa1f fa82 	uxth.w	sl, r2
 80120d2:	b2ad      	uxth	r5, r5
 80120d4:	9b07      	ldr	r3, [sp, #28]
 80120d6:	9a08      	ldr	r2, [sp, #32]
 80120d8:	fb03 2b0b 	mla	fp, r3, fp, r2
 80120dc:	9a01      	ldr	r2, [sp, #4]
 80120de:	2302      	movs	r3, #2
 80120e0:	fb92 f2f3 	sdiv	r2, r2, r3
 80120e4:	920e      	str	r2, [sp, #56]	; 0x38
 80120e6:	9a04      	ldr	r2, [sp, #16]
 80120e8:	b212      	sxth	r2, r2
 80120ea:	4611      	mov	r1, r2
 80120ec:	9201      	str	r2, [sp, #4]
 80120ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80120f0:	fb94 f4f3 	sdiv	r4, r4, r3
 80120f4:	4411      	add	r1, r2
 80120f6:	4622      	mov	r2, r4
 80120f8:	440a      	add	r2, r1
 80120fa:	9212      	str	r2, [sp, #72]	; 0x48
 80120fc:	9a02      	ldr	r2, [sp, #8]
 80120fe:	940f      	str	r4, [sp, #60]	; 0x3c
 8012100:	fb92 f3f3 	sdiv	r3, r2, r3
 8012104:	fa1f fb8b 	uxth.w	fp, fp
 8012108:	9302      	str	r3, [sp, #8]
 801210a:	425b      	negs	r3, r3
 801210c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8012110:	9313      	str	r3, [sp, #76]	; 0x4c
 8012112:	2400      	movs	r4, #0
 8012114:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012116:	429c      	cmp	r4, r3
 8012118:	f280 81a0 	bge.w	801245c <_Paint+0x4f4>
 801211c:	b1bc      	cbz	r4, 801214e <_Paint+0x1e6>
 801211e:	4621      	mov	r1, r4
 8012120:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012122:	f7f6 fb70 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 8012126:	4621      	mov	r1, r4
 8012128:	9016      	str	r0, [sp, #88]	; 0x58
 801212a:	9806      	ldr	r0, [sp, #24]
 801212c:	f7f5 fd6a 	bl	8007c04 <MULTIPAGE__GetPageWidth>
 8012130:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012132:	9003      	str	r0, [sp, #12]
 8012134:	791b      	ldrb	r3, [r3, #4]
 8012136:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 801213a:	b2ad      	uxth	r5, r5
 801213c:	a816      	add	r0, sp, #88	; 0x58
 801213e:	f7fe fc8d 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012142:	1c6a      	adds	r2, r5, #1
 8012144:	fa1f fa82 	uxth.w	sl, r2
 8012148:	9a03      	ldr	r2, [sp, #12]
 801214a:	4415      	add	r5, r2
 801214c:	b2ad      	uxth	r5, r5
 801214e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012150:	b22b      	sxth	r3, r5
 8012152:	4293      	cmp	r3, r2
 8012154:	f2c0 8180 	blt.w	8012458 <_Paint+0x4f0>
 8012158:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801215a:	fa0f f38a 	sxth.w	r3, sl
 801215e:	4293      	cmp	r3, r2
 8012160:	f300 817a 	bgt.w	8012458 <_Paint+0x4f0>
 8012164:	42b4      	cmp	r4, r6
 8012166:	9421      	str	r4, [sp, #132]	; 0x84
 8012168:	d114      	bne.n	8012194 <_Paint+0x22c>
 801216a:	b144      	cbz	r4, 801217e <_Paint+0x216>
 801216c:	9b05      	ldr	r3, [sp, #20]
 801216e:	429c      	cmp	r4, r3
 8012170:	d105      	bne.n	801217e <_Paint+0x216>
 8012172:	eb08 020a 	add.w	r2, r8, sl
 8012176:	4445      	add	r5, r8
 8012178:	fa1f fa82 	uxth.w	sl, r2
 801217c:	b2ad      	uxth	r5, r5
 801217e:	ebc8 090a 	rsb	r9, r8, sl
 8012182:	eb08 0105 	add.w	r1, r8, r5
 8012186:	fa1f f989 	uxth.w	r9, r9
 801218a:	b289      	uxth	r1, r1
 801218c:	9b04      	ldr	r3, [sp, #16]
 801218e:	f8dd b020 	ldr.w	fp, [sp, #32]
 8012192:	e036      	b.n	8012202 <_Paint+0x29a>
 8012194:	1c73      	adds	r3, r6, #1
 8012196:	9a04      	ldr	r2, [sp, #16]
 8012198:	9907      	ldr	r1, [sp, #28]
 801219a:	429c      	cmp	r4, r3
 801219c:	ebc1 0302 	rsb	r3, r1, r2
 80121a0:	d11f      	bne.n	80121e2 <_Paint+0x27a>
 80121a2:	07fa      	lsls	r2, r7, #31
 80121a4:	b29b      	uxth	r3, r3
 80121a6:	d514      	bpl.n	80121d2 <_Paint+0x26a>
 80121a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80121aa:	1e51      	subs	r1, r2, #1
 80121ac:	9a05      	ldr	r2, [sp, #20]
 80121ae:	428c      	cmp	r4, r1
 80121b0:	bf08      	it	eq
 80121b2:	ebc8 0105 	rsbeq	r1, r8, r5
 80121b6:	ebc2 0004 	rsb	r0, r2, r4
 80121ba:	bf0c      	ite	eq
 80121bc:	b289      	uxtheq	r1, r1
 80121be:	4629      	movne	r1, r5
 80121c0:	2800      	cmp	r0, #0
 80121c2:	dd1b      	ble.n	80121fc <_Paint+0x294>
 80121c4:	eb08 090a 	add.w	r9, r8, sl
 80121c8:	fa1f f989 	uxth.w	r9, r9
 80121cc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80121d0:	e017      	b.n	8012202 <_Paint+0x29a>
 80121d2:	eb08 090a 	add.w	r9, r8, sl
 80121d6:	fa1f f989 	uxth.w	r9, r9
 80121da:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80121de:	4629      	mov	r1, r5
 80121e0:	e00f      	b.n	8012202 <_Paint+0x29a>
 80121e2:	1e71      	subs	r1, r6, #1
 80121e4:	428c      	cmp	r4, r1
 80121e6:	d104      	bne.n	80121f2 <_Paint+0x28a>
 80121e8:	ebc8 0105 	rsb	r1, r8, r5
 80121ec:	b289      	uxth	r1, r1
 80121ee:	b29b      	uxth	r3, r3
 80121f0:	e004      	b.n	80121fc <_Paint+0x294>
 80121f2:	b29b      	uxth	r3, r3
 80121f4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80121f8:	4629      	mov	r1, r5
 80121fa:	e001      	b.n	8012200 <_Paint+0x298>
 80121fc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8012200:	46d1      	mov	r9, sl
 8012202:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012204:	200f      	movs	r0, #15
 8012206:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
 801220a:	b209      	sxth	r1, r1
 801220c:	fa0f f089 	sxth.w	r0, r9
 8012210:	b342      	cbz	r2, 8012264 <_Paint+0x2fc>
 8012212:	9126      	str	r1, [sp, #152]	; 0x98
 8012214:	1c71      	adds	r1, r6, #1
 8012216:	4a94      	ldr	r2, [pc, #592]	; (8012468 <_Paint+0x500>)
 8012218:	921a      	str	r2, [sp, #104]	; 0x68
 801221a:	428c      	cmp	r4, r1
 801221c:	9024      	str	r0, [sp, #144]	; 0x90
 801221e:	d104      	bne.n	801222a <_Paint+0x2c2>
 8012220:	9a05      	ldr	r2, [sp, #20]
 8012222:	4294      	cmp	r4, r2
 8012224:	d007      	beq.n	8012236 <_Paint+0x2ce>
 8012226:	210b      	movs	r1, #11
 8012228:	e003      	b.n	8012232 <_Paint+0x2ca>
 801222a:	1e71      	subs	r1, r6, #1
 801222c:	428c      	cmp	r4, r1
 801222e:	d102      	bne.n	8012236 <_Paint+0x2ce>
 8012230:	2107      	movs	r1, #7
 8012232:	f88d 1076 	strb.w	r1, [sp, #118]	; 0x76
 8012236:	f017 0f04 	tst.w	r7, #4
 801223a:	f89d 1076 	ldrb.w	r1, [sp, #118]	; 0x76
 801223e:	b21b      	sxth	r3, r3
 8012240:	d007      	beq.n	8012252 <_Paint+0x2ea>
 8012242:	f021 0102 	bic.w	r1, r1, #2
 8012246:	f88d 1076 	strb.w	r1, [sp, #118]	; 0x76
 801224a:	fa0f f18b 	sxth.w	r1, fp
 801224e:	9123      	str	r1, [sp, #140]	; 0x8c
 8012250:	e006      	b.n	8012260 <_Paint+0x2f8>
 8012252:	f021 0101 	bic.w	r1, r1, #1
 8012256:	9323      	str	r3, [sp, #140]	; 0x8c
 8012258:	f88d 1076 	strb.w	r1, [sp, #118]	; 0x76
 801225c:	fa0f f38b 	sxth.w	r3, fp
 8012260:	9325      	str	r3, [sp, #148]	; 0x94
 8012262:	e027      	b.n	80122b4 <_Paint+0x34c>
 8012264:	9125      	str	r1, [sp, #148]	; 0x94
 8012266:	1c71      	adds	r1, r6, #1
 8012268:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801226a:	921a      	str	r2, [sp, #104]	; 0x68
 801226c:	428c      	cmp	r4, r1
 801226e:	9023      	str	r0, [sp, #140]	; 0x8c
 8012270:	d104      	bne.n	801227c <_Paint+0x314>
 8012272:	9a05      	ldr	r2, [sp, #20]
 8012274:	4294      	cmp	r4, r2
 8012276:	d007      	beq.n	8012288 <_Paint+0x320>
 8012278:	210e      	movs	r1, #14
 801227a:	e003      	b.n	8012284 <_Paint+0x31c>
 801227c:	1e71      	subs	r1, r6, #1
 801227e:	428c      	cmp	r4, r1
 8012280:	d102      	bne.n	8012288 <_Paint+0x320>
 8012282:	210d      	movs	r1, #13
 8012284:	f88d 1076 	strb.w	r1, [sp, #118]	; 0x76
 8012288:	f017 0f04 	tst.w	r7, #4
 801228c:	f89d 1076 	ldrb.w	r1, [sp, #118]	; 0x76
 8012290:	b21b      	sxth	r3, r3
 8012292:	d007      	beq.n	80122a4 <_Paint+0x33c>
 8012294:	f021 0104 	bic.w	r1, r1, #4
 8012298:	9324      	str	r3, [sp, #144]	; 0x90
 801229a:	f88d 1076 	strb.w	r1, [sp, #118]	; 0x76
 801229e:	fa0f f38b 	sxth.w	r3, fp
 80122a2:	e006      	b.n	80122b2 <_Paint+0x34a>
 80122a4:	f021 0108 	bic.w	r1, r1, #8
 80122a8:	f88d 1076 	strb.w	r1, [sp, #118]	; 0x76
 80122ac:	fa0f f18b 	sxth.w	r1, fp
 80122b0:	9124      	str	r1, [sp, #144]	; 0x90
 80122b2:	9326      	str	r3, [sp, #152]	; 0x98
 80122b4:	230b      	movs	r3, #11
 80122b6:	9320      	str	r3, [sp, #128]	; 0x80
 80122b8:	a81f      	add	r0, sp, #124	; 0x7c
 80122ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122bc:	4798      	blx	r3
 80122be:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 80122c2:	07d8      	lsls	r0, r3, #31
 80122c4:	d502      	bpl.n	80122cc <_Paint+0x364>
 80122c6:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80122c8:	3101      	adds	r1, #1
 80122ca:	9123      	str	r1, [sp, #140]	; 0x8c
 80122cc:	0799      	lsls	r1, r3, #30
 80122ce:	d502      	bpl.n	80122d6 <_Paint+0x36e>
 80122d0:	9925      	ldr	r1, [sp, #148]	; 0x94
 80122d2:	3901      	subs	r1, #1
 80122d4:	9125      	str	r1, [sp, #148]	; 0x94
 80122d6:	075a      	lsls	r2, r3, #29
 80122d8:	d502      	bpl.n	80122e0 <_Paint+0x378>
 80122da:	9924      	ldr	r1, [sp, #144]	; 0x90
 80122dc:	3101      	adds	r1, #1
 80122de:	9124      	str	r1, [sp, #144]	; 0x90
 80122e0:	0718      	lsls	r0, r3, #28
 80122e2:	d502      	bpl.n	80122ea <_Paint+0x382>
 80122e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80122e6:	3b01      	subs	r3, #1
 80122e8:	9326      	str	r3, [sp, #152]	; 0x98
 80122ea:	2305      	movs	r3, #5
 80122ec:	9320      	str	r3, [sp, #128]	; 0x80
 80122ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80122f0:	a81f      	add	r0, sp, #124	; 0x7c
 80122f2:	4790      	blx	r2
 80122f4:	4621      	mov	r1, r4
 80122f6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80122f8:	f7f6 fa85 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 80122fc:	4621      	mov	r1, r4
 80122fe:	9016      	str	r0, [sp, #88]	; 0x58
 8012300:	9806      	ldr	r0, [sp, #24]
 8012302:	f7f6 f938 	bl	8008576 <MULTIPAGE_IsPageEnabled>
 8012306:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012308:	b908      	cbnz	r0, 801230e <_Paint+0x3a6>
 801230a:	6959      	ldr	r1, [r3, #20]
 801230c:	e002      	b.n	8012314 <_Paint+0x3ac>
 801230e:	42b4      	cmp	r4, r6
 8012310:	d103      	bne.n	801231a <_Paint+0x3b2>
 8012312:	68d9      	ldr	r1, [r3, #12]
 8012314:	b109      	cbz	r1, 801231a <_Paint+0x3b2>
 8012316:	460b      	mov	r3, r1
 8012318:	e000      	b.n	801231c <_Paint+0x3b4>
 801231a:	691b      	ldr	r3, [r3, #16]
 801231c:	a816      	add	r0, sp, #88	; 0x58
 801231e:	9315      	str	r3, [sp, #84]	; 0x54
 8012320:	f7fe fb9c 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012324:	9815      	ldr	r0, [sp, #84]	; 0x54
 8012326:	2800      	cmp	r0, #0
 8012328:	d063      	beq.n	80123f2 <_Paint+0x48a>
 801232a:	f7f6 f953 	bl	80085d4 <GUI_DRAW__GetYSize>
 801232e:	4601      	mov	r1, r0
 8012330:	9815      	ldr	r0, [sp, #84]	; 0x54
 8012332:	9100      	str	r1, [sp, #0]
 8012334:	f7f6 f93c 	bl	80085b0 <GUI_DRAW__GetXSize>
 8012338:	9900      	ldr	r1, [sp, #0]
 801233a:	2900      	cmp	r1, #0
 801233c:	d059      	beq.n	80123f2 <_Paint+0x48a>
 801233e:	2800      	cmp	r0, #0
 8012340:	d057      	beq.n	80123f2 <_Paint+0x48a>
 8012342:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012344:	2302      	movs	r3, #2
 8012346:	fa0f fe8a 	sxth.w	lr, sl
 801234a:	b322      	cbz	r2, 8012396 <_Paint+0x42e>
 801234c:	9a03      	ldr	r2, [sp, #12]
 801234e:	fb92 fcf3 	sdiv	ip, r2, r3
 8012352:	fb91 f1f3 	sdiv	r1, r1, r3
 8012356:	44e6      	add	lr, ip
 8012358:	ebc1 010e 	rsb	r1, r1, lr
 801235c:	9124      	str	r1, [sp, #144]	; 0x90
 801235e:	f017 0f04 	tst.w	r7, #4
 8012362:	b229      	sxth	r1, r5
 8012364:	9126      	str	r1, [sp, #152]	; 0x98
 8012366:	fb90 f3f3 	sdiv	r3, r0, r3
 801236a:	d009      	beq.n	8012380 <_Paint+0x418>
 801236c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801236e:	fa02 f08b 	sxtah	r0, r2, fp
 8012372:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012374:	4410      	add	r0, r2
 8012376:	1ac3      	subs	r3, r0, r3
 8012378:	9323      	str	r3, [sp, #140]	; 0x8c
 801237a:	9b01      	ldr	r3, [sp, #4]
 801237c:	9325      	str	r3, [sp, #148]	; 0x94
 801237e:	e02e      	b.n	80123de <_Paint+0x476>
 8012380:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012382:	fa0f f18b 	sxth.w	r1, fp
 8012386:	1ad3      	subs	r3, r2, r3
 8012388:	42b4      	cmp	r4, r6
 801238a:	9323      	str	r3, [sp, #140]	; 0x8c
 801238c:	9125      	str	r1, [sp, #148]	; 0x94
 801238e:	d126      	bne.n	80123de <_Paint+0x476>
 8012390:	3302      	adds	r3, #2
 8012392:	9323      	str	r3, [sp, #140]	; 0x8c
 8012394:	e023      	b.n	80123de <_Paint+0x476>
 8012396:	9a03      	ldr	r2, [sp, #12]
 8012398:	fb92 fcf3 	sdiv	ip, r2, r3
 801239c:	fb90 f0f3 	sdiv	r0, r0, r3
 80123a0:	44e6      	add	lr, ip
 80123a2:	ebc0 000e 	rsb	r0, r0, lr
 80123a6:	9023      	str	r0, [sp, #140]	; 0x8c
 80123a8:	f017 0f04 	tst.w	r7, #4
 80123ac:	b228      	sxth	r0, r5
 80123ae:	9025      	str	r0, [sp, #148]	; 0x94
 80123b0:	fb91 f3f3 	sdiv	r3, r1, r3
 80123b4:	d00a      	beq.n	80123cc <_Paint+0x464>
 80123b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80123b8:	fa0f f18b 	sxth.w	r1, fp
 80123bc:	1ad3      	subs	r3, r2, r3
 80123be:	42b4      	cmp	r4, r6
 80123c0:	9324      	str	r3, [sp, #144]	; 0x90
 80123c2:	9126      	str	r1, [sp, #152]	; 0x98
 80123c4:	d10b      	bne.n	80123de <_Paint+0x476>
 80123c6:	3302      	adds	r3, #2
 80123c8:	9324      	str	r3, [sp, #144]	; 0x90
 80123ca:	e008      	b.n	80123de <_Paint+0x476>
 80123cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80123ce:	fa02 f18b 	sxtah	r1, r2, fp
 80123d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80123d4:	4411      	add	r1, r2
 80123d6:	1acb      	subs	r3, r1, r3
 80123d8:	9324      	str	r3, [sp, #144]	; 0x90
 80123da:	9b01      	ldr	r3, [sp, #4]
 80123dc:	9326      	str	r3, [sp, #152]	; 0x98
 80123de:	ab15      	add	r3, sp, #84	; 0x54
 80123e0:	931e      	str	r3, [sp, #120]	; 0x78
 80123e2:	2306      	movs	r3, #6
 80123e4:	9320      	str	r3, [sp, #128]	; 0x80
 80123e6:	a81f      	add	r0, sp, #124	; 0x7c
 80123e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80123ea:	4790      	blx	r2
 80123ec:	2300      	movs	r3, #0
 80123ee:	931e      	str	r3, [sp, #120]	; 0x78
 80123f0:	9315      	str	r3, [sp, #84]	; 0x54
 80123f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80123f4:	fa0f f38b 	sxth.w	r3, fp
 80123f8:	b1a2      	cbz	r2, 8012424 <_Paint+0x4bc>
 80123fa:	9a02      	ldr	r2, [sp, #8]
 80123fc:	b91c      	cbnz	r4, 8012406 <_Paint+0x49e>
 80123fe:	b116      	cbz	r6, 8012406 <_Paint+0x49e>
 8012400:	fa02 f189 	sxtah	r1, r2, r9
 8012404:	e001      	b.n	801240a <_Paint+0x4a2>
 8012406:	fa02 f18a 	sxtah	r1, r2, sl
 801240a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801240c:	9124      	str	r1, [sp, #144]	; 0x90
 801240e:	fa02 f185 	sxtah	r1, r2, r5
 8012412:	9126      	str	r1, [sp, #152]	; 0x98
 8012414:	0779      	lsls	r1, r7, #29
 8012416:	bf4b      	itete	mi
 8012418:	9323      	strmi	r3, [sp, #140]	; 0x8c
 801241a:	9a01      	ldrpl	r2, [sp, #4]
 801241c:	9b01      	ldrmi	r3, [sp, #4]
 801241e:	9223      	strpl	r2, [sp, #140]	; 0x8c
 8012420:	9325      	str	r3, [sp, #148]	; 0x94
 8012422:	e014      	b.n	801244e <_Paint+0x4e6>
 8012424:	9a02      	ldr	r2, [sp, #8]
 8012426:	b91c      	cbnz	r4, 8012430 <_Paint+0x4c8>
 8012428:	b116      	cbz	r6, 8012430 <_Paint+0x4c8>
 801242a:	fa02 f189 	sxtah	r1, r2, r9
 801242e:	e001      	b.n	8012434 <_Paint+0x4cc>
 8012430:	fa02 f18a 	sxtah	r1, r2, sl
 8012434:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012436:	9123      	str	r1, [sp, #140]	; 0x8c
 8012438:	fa02 f185 	sxtah	r1, r2, r5
 801243c:	077a      	lsls	r2, r7, #29
 801243e:	bf4e      	itee	mi
 8012440:	9a01      	ldrmi	r2, [sp, #4]
 8012442:	9324      	strpl	r3, [sp, #144]	; 0x90
 8012444:	9b01      	ldrpl	r3, [sp, #4]
 8012446:	9125      	str	r1, [sp, #148]	; 0x94
 8012448:	bf48      	it	mi
 801244a:	9224      	strmi	r2, [sp, #144]	; 0x90
 801244c:	9326      	str	r3, [sp, #152]	; 0x98
 801244e:	2312      	movs	r3, #18
 8012450:	9320      	str	r3, [sp, #128]	; 0x80
 8012452:	a81f      	add	r0, sp, #124	; 0x7c
 8012454:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012456:	4790      	blx	r2
 8012458:	3401      	adds	r4, #1
 801245a:	e65b      	b.n	8012114 <_Paint+0x1ac>
 801245c:	2000      	movs	r0, #0
 801245e:	f7f8 f9f7 	bl	800a850 <WM_SetUserClipRect>
 8012462:	b029      	add	sp, #164	; 0xa4
 8012464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012468:	200005b0 	.word	0x200005b0

0801246c <MULTIPAGE_SKIN__GetTabBarWidth>:
 801246c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801246e:	4606      	mov	r6, r0
 8012470:	f7fe fae6 	bl	8010a40 <GUI_ALLOC_LockH>
 8012474:	ac02      	add	r4, sp, #8
 8012476:	f844 0d04 	str.w	r0, [r4, #-4]!
 801247a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801247c:	f7f6 f8dd 	bl	800863a <GUI_ARRAY_GetNumItems>
 8012480:	4605      	mov	r5, r0
 8012482:	4620      	mov	r0, r4
 8012484:	f7fe faea 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012488:	4630      	mov	r0, r6
 801248a:	4629      	mov	r1, r5
 801248c:	f7ff fd3f 	bl	8011f0e <MULTIPAGE_SKIN__GetPagePos>
 8012490:	3801      	subs	r0, #1
 8012492:	b002      	add	sp, #8
 8012494:	bd70      	pop	{r4, r5, r6, pc}

08012496 <MULTIPAGE_SKIN__GetTouchedPage>:
 8012496:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801249a:	b08b      	sub	sp, #44	; 0x2c
 801249c:	460f      	mov	r7, r1
 801249e:	4690      	mov	r8, r2
 80124a0:	4682      	mov	sl, r0
 80124a2:	f7fe facd 	bl	8010a40 <GUI_ALLOC_LockH>
 80124a6:	9007      	str	r0, [sp, #28]
 80124a8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80124aa:	f7f6 f8c6 	bl	800863a <GUI_ARRAY_GetNumItems>
 80124ae:	9005      	str	r0, [sp, #20]
 80124b0:	a80a      	add	r0, sp, #40	; 0x28
 80124b2:	fa1f f888 	uxth.w	r8, r8
 80124b6:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 80124ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80124bc:	f8b3 9032 	ldrh.w	r9, [r3, #50]	; 0x32
 80124c0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80124c2:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 80124c4:	f893 6080 	ldrb.w	r6, [r3, #128]	; 0x80
 80124c8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80124cc:	9202      	str	r2, [sp, #8]
 80124ce:	9303      	str	r3, [sp, #12]
 80124d0:	f7fe fac4 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80124d4:	4650      	mov	r0, sl
 80124d6:	a908      	add	r1, sp, #32
 80124d8:	f7f5 fbdb 	bl	8007c92 <MULTIPAGE__GetTabBarRect>
 80124dc:	f019 0f08 	tst.w	r9, #8
 80124e0:	b2b8      	uxth	r0, r7
 80124e2:	f004 0404 	and.w	r4, r4, #4
 80124e6:	d014      	beq.n	8012512 <MULTIPAGE_SKIN__GetTouchedPage+0x7c>
 80124e8:	af0a      	add	r7, sp, #40	; 0x28
 80124ea:	f8cd 8004 	str.w	r8, [sp, #4]
 80124ee:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80124f2:	f837 2d04 	ldrh.w	r2, [r7, #-4]!
 80124f6:	b12c      	cbz	r4, 8012504 <MULTIPAGE_SKIN__GetTouchedPage+0x6e>
 80124f8:	46b8      	mov	r8, r7
 80124fa:	4619      	mov	r1, r3
 80124fc:	af08      	add	r7, sp, #32
 80124fe:	f10d 0422 	add.w	r4, sp, #34	; 0x22
 8012502:	e01d      	b.n	8012540 <MULTIPAGE_SKIN__GetTouchedPage+0xaa>
 8012504:	4611      	mov	r1, r2
 8012506:	f10d 0820 	add.w	r8, sp, #32
 801250a:	461a      	mov	r2, r3
 801250c:	f10d 0422 	add.w	r4, sp, #34	; 0x22
 8012510:	e00c      	b.n	801252c <MULTIPAGE_SKIN__GetTouchedPage+0x96>
 8012512:	9001      	str	r0, [sp, #4]
 8012514:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8012518:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801251c:	4640      	mov	r0, r8
 801251e:	b144      	cbz	r4, 8012532 <MULTIPAGE_SKIN__GetTouchedPage+0x9c>
 8012520:	4619      	mov	r1, r3
 8012522:	f10d 0822 	add.w	r8, sp, #34	; 0x22
 8012526:	f10d 0726 	add.w	r7, sp, #38	; 0x26
 801252a:	ac08      	add	r4, sp, #32
 801252c:	f04f 3bff 	mov.w	fp, #4294967295
 8012530:	e008      	b.n	8012544 <MULTIPAGE_SKIN__GetTouchedPage+0xae>
 8012532:	4611      	mov	r1, r2
 8012534:	f10d 0826 	add.w	r8, sp, #38	; 0x26
 8012538:	461a      	mov	r2, r3
 801253a:	f10d 0722 	add.w	r7, sp, #34	; 0x22
 801253e:	ac08      	add	r4, sp, #32
 8012540:	f04f 0b01 	mov.w	fp, #1
 8012544:	b200      	sxth	r0, r0
 8012546:	b209      	sxth	r1, r1
 8012548:	b212      	sxth	r2, r2
 801254a:	9004      	str	r0, [sp, #16]
 801254c:	f7ff fcb2 	bl	8011eb4 <_IsBetween>
 8012550:	b910      	cbnz	r0, 8012558 <MULTIPAGE_SKIN__GetTouchedPage+0xc2>
 8012552:	f04f 30ff 	mov.w	r0, #4294967295
 8012556:	e053      	b.n	8012600 <MULTIPAGE_SKIN__GetTouchedPage+0x16a>
 8012558:	f9b4 c000 	ldrsh.w	ip, [r4]
 801255c:	b10d      	cbz	r5, 8012562 <MULTIPAGE_SKIN__GetTouchedPage+0xcc>
 801255e:	46e1      	mov	r9, ip
 8012560:	e001      	b.n	8012566 <MULTIPAGE_SKIN__GetTouchedPage+0xd0>
 8012562:	eb0c 0906 	add.w	r9, ip, r6
 8012566:	4650      	mov	r0, sl
 8012568:	4629      	mov	r1, r5
 801256a:	f7f5 fb4b 	bl	8007c04 <MULTIPAGE__GetPageWidth>
 801256e:	9b03      	ldr	r3, [sp, #12]
 8012570:	4448      	add	r0, r9
 8012572:	fb03 fb0b 	mul.w	fp, r3, fp
 8012576:	f8cd b00c 	str.w	fp, [sp, #12]
 801257a:	1e44      	subs	r4, r0, #1
 801257c:	46ab      	mov	fp, r5
 801257e:	9b05      	ldr	r3, [sp, #20]
 8012580:	459b      	cmp	fp, r3
 8012582:	dae6      	bge.n	8012552 <MULTIPAGE_SKIN__GetTouchedPage+0xbc>
 8012584:	45ab      	cmp	fp, r5
 8012586:	db37      	blt.n	80125f8 <MULTIPAGE_SKIN__GetTouchedPage+0x162>
 8012588:	9b02      	ldr	r3, [sp, #8]
 801258a:	459b      	cmp	fp, r3
 801258c:	d10b      	bne.n	80125a6 <MULTIPAGE_SKIN__GetTouchedPage+0x110>
 801258e:	9b01      	ldr	r3, [sp, #4]
 8012590:	ebc6 0c09 	rsb	ip, r6, r9
 8012594:	b218      	sxth	r0, r3
 8012596:	19a2      	adds	r2, r4, r6
 8012598:	4661      	mov	r1, ip
 801259a:	f1bb 0f00 	cmp.w	fp, #0
 801259e:	d120      	bne.n	80125e2 <MULTIPAGE_SKIN__GetTouchedPage+0x14c>
 80125a0:	4611      	mov	r1, r2
 80125a2:	4662      	mov	r2, ip
 80125a4:	e01d      	b.n	80125e2 <MULTIPAGE_SKIN__GetTouchedPage+0x14c>
 80125a6:	f9b7 1000 	ldrsh.w	r1, [r7]
 80125aa:	9b03      	ldr	r3, [sp, #12]
 80125ac:	9804      	ldr	r0, [sp, #16]
 80125ae:	f9b8 2000 	ldrsh.w	r2, [r8]
 80125b2:	4419      	add	r1, r3
 80125b4:	f7ff fc7e 	bl	8011eb4 <_IsBetween>
 80125b8:	b1b0      	cbz	r0, 80125e8 <MULTIPAGE_SKIN__GetTouchedPage+0x152>
 80125ba:	9b02      	ldr	r3, [sp, #8]
 80125bc:	1c5a      	adds	r2, r3, #1
 80125be:	9b01      	ldr	r3, [sp, #4]
 80125c0:	4593      	cmp	fp, r2
 80125c2:	b218      	sxth	r0, r3
 80125c4:	d104      	bne.n	80125d0 <MULTIPAGE_SKIN__GetTouchedPage+0x13a>
 80125c6:	45ab      	cmp	fp, r5
 80125c8:	dd02      	ble.n	80125d0 <MULTIPAGE_SKIN__GetTouchedPage+0x13a>
 80125ca:	eb09 0106 	add.w	r1, r9, r6
 80125ce:	e007      	b.n	80125e0 <MULTIPAGE_SKIN__GetTouchedPage+0x14a>
 80125d0:	9b02      	ldr	r3, [sp, #8]
 80125d2:	1e5a      	subs	r2, r3, #1
 80125d4:	4593      	cmp	fp, r2
 80125d6:	4649      	mov	r1, r9
 80125d8:	bf08      	it	eq
 80125da:	ebc6 0204 	rsbeq	r2, r6, r4
 80125de:	d000      	beq.n	80125e2 <MULTIPAGE_SKIN__GetTouchedPage+0x14c>
 80125e0:	4622      	mov	r2, r4
 80125e2:	f7ff fc67 	bl	8011eb4 <_IsBetween>
 80125e6:	b950      	cbnz	r0, 80125fe <MULTIPAGE_SKIN__GetTouchedPage+0x168>
 80125e8:	4650      	mov	r0, sl
 80125ea:	f10b 0101 	add.w	r1, fp, #1
 80125ee:	f7f5 fb09 	bl	8007c04 <MULTIPAGE__GetPageWidth>
 80125f2:	f104 0901 	add.w	r9, r4, #1
 80125f6:	4404      	add	r4, r0
 80125f8:	f10b 0b01 	add.w	fp, fp, #1
 80125fc:	e7bf      	b.n	801257e <MULTIPAGE_SKIN__GetTouchedPage+0xe8>
 80125fe:	4658      	mov	r0, fp
 8012600:	b00b      	add	sp, #44	; 0x2c
 8012602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012606 <LISTBOX_SetTextColor>:
 8012606:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012608:	460d      	mov	r5, r1
 801260a:	4614      	mov	r4, r2
 801260c:	4606      	mov	r6, r0
 801260e:	b180      	cbz	r0, 8012632 <LISTBOX_SetTextColor+0x2c>
 8012610:	2903      	cmp	r1, #3
 8012612:	d80e      	bhi.n	8012632 <LISTBOX_SetTextColor+0x2c>
 8012614:	f7fe fa14 	bl	8010a40 <GUI_ALLOC_LockH>
 8012618:	4602      	mov	r2, r0
 801261a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801261e:	a802      	add	r0, sp, #8
 8012620:	66ec      	str	r4, [r5, #108]	; 0x6c
 8012622:	f840 2d04 	str.w	r2, [r0, #-4]!
 8012626:	f7fe fa19 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801262a:	4630      	mov	r0, r6
 801262c:	f000 fca1 	bl	8012f72 <LISTBOX__InvalidateInsideArea>
 8012630:	e001      	b.n	8012636 <LISTBOX_SetTextColor+0x30>
 8012632:	f06f 4470 	mvn.w	r4, #4026531840	; 0xf0000000
 8012636:	4620      	mov	r0, r4
 8012638:	b002      	add	sp, #8
 801263a:	bd70      	pop	{r4, r5, r6, pc}

0801263c <LISTBOX_SetTextAlign>:
 801263c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801263e:	460d      	mov	r5, r1
 8012640:	4604      	mov	r4, r0
 8012642:	b160      	cbz	r0, 801265e <LISTBOX_SetTextAlign+0x22>
 8012644:	f7fe f9fc 	bl	8010a40 <GUI_ALLOC_LockH>
 8012648:	4602      	mov	r2, r0
 801264a:	a802      	add	r0, sp, #8
 801264c:	f8a2 5088 	strh.w	r5, [r2, #136]	; 0x88
 8012650:	f840 2d04 	str.w	r2, [r0, #-4]!
 8012654:	f7fe fa02 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012658:	4620      	mov	r0, r4
 801265a:	f7f9 fb46 	bl	800bcea <WM_InvalidateWindow>
 801265e:	b003      	add	sp, #12
 8012660:	bd30      	pop	{r4, r5, pc}

08012662 <LISTBOX_SetScrollbarWidth>:
 8012662:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012664:	460d      	mov	r5, r1
 8012666:	4604      	mov	r4, r0
 8012668:	b190      	cbz	r0, 8012690 <LISTBOX_SetScrollbarWidth+0x2e>
 801266a:	f7fe f9e9 	bl	8010a40 <GUI_ALLOC_LockH>
 801266e:	f890 2093 	ldrb.w	r2, [r0, #147]	; 0x93
 8012672:	9001      	str	r0, [sp, #4]
 8012674:	4295      	cmp	r5, r2
 8012676:	4601      	mov	r1, r0
 8012678:	d007      	beq.n	801268a <LISTBOX_SetScrollbarWidth+0x28>
 801267a:	f880 5093 	strb.w	r5, [r0, #147]	; 0x93
 801267e:	4620      	mov	r0, r4
 8012680:	f000 fcfb 	bl	801307a <LISTBOX__SetScrollbarWidth>
 8012684:	4620      	mov	r0, r4
 8012686:	f7f9 fb30 	bl	800bcea <WM_InvalidateWindow>
 801268a:	a801      	add	r0, sp, #4
 801268c:	f7fe f9e6 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012690:	b003      	add	sp, #12
 8012692:	bd30      	pop	{r4, r5, pc}

08012694 <LISTBOX_SetScrollbarColor>:
 8012694:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012696:	460d      	mov	r5, r1
 8012698:	4616      	mov	r6, r2
 801269a:	4604      	mov	r4, r0
 801269c:	b1a0      	cbz	r0, 80126c8 <LISTBOX_SetScrollbarColor+0x34>
 801269e:	f7fe f9cf 	bl	8010a40 <GUI_ALLOC_LockH>
 80126a2:	2d02      	cmp	r5, #2
 80126a4:	4601      	mov	r1, r0
 80126a6:	9001      	str	r0, [sp, #4]
 80126a8:	d80b      	bhi.n	80126c2 <LISTBOX_SetScrollbarColor+0x2e>
 80126aa:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80126ae:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80126b0:	42b2      	cmp	r2, r6
 80126b2:	d006      	beq.n	80126c2 <LISTBOX_SetScrollbarColor+0x2e>
 80126b4:	4620      	mov	r0, r4
 80126b6:	67ee      	str	r6, [r5, #124]	; 0x7c
 80126b8:	f000 fcfb 	bl	80130b2 <LISTBOX__SetScrollbarColor>
 80126bc:	4620      	mov	r0, r4
 80126be:	f7f9 fb14 	bl	800bcea <WM_InvalidateWindow>
 80126c2:	a801      	add	r0, sp, #4
 80126c4:	f7fe f9ca 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80126c8:	b002      	add	sp, #8
 80126ca:	bd70      	pop	{r4, r5, r6, pc}

080126cc <LISTBOX_SetOwner>:
 80126cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80126ce:	460c      	mov	r4, r1
 80126d0:	4605      	mov	r5, r0
 80126d2:	b160      	cbz	r0, 80126ee <LISTBOX_SetOwner+0x22>
 80126d4:	f7fe f9b4 	bl	8010a40 <GUI_ALLOC_LockH>
 80126d8:	4602      	mov	r2, r0
 80126da:	a802      	add	r0, sp, #8
 80126dc:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
 80126e0:	f840 2d04 	str.w	r2, [r0, #-4]!
 80126e4:	f7fe f9ba 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80126e8:	4628      	mov	r0, r5
 80126ea:	f000 fc42 	bl	8012f72 <LISTBOX__InvalidateInsideArea>
 80126ee:	b003      	add	sp, #12
 80126f0:	bd30      	pop	{r4, r5, pc}

080126f2 <LISTBOX_SetBkColor>:
 80126f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80126f4:	460c      	mov	r4, r1
 80126f6:	4615      	mov	r5, r2
 80126f8:	4606      	mov	r6, r0
 80126fa:	b178      	cbz	r0, 801271c <LISTBOX_SetBkColor+0x2a>
 80126fc:	2903      	cmp	r1, #3
 80126fe:	d80d      	bhi.n	801271c <LISTBOX_SetBkColor+0x2a>
 8012700:	f7fe f99e 	bl	8010a40 <GUI_ALLOC_LockH>
 8012704:	4601      	mov	r1, r0
 8012706:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801270a:	a802      	add	r0, sp, #8
 801270c:	65e5      	str	r5, [r4, #92]	; 0x5c
 801270e:	f840 1d04 	str.w	r1, [r0, #-4]!
 8012712:	f7fe f9a3 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012716:	4630      	mov	r0, r6
 8012718:	f000 fc2b 	bl	8012f72 <LISTBOX__InvalidateInsideArea>
 801271c:	b002      	add	sp, #8
 801271e:	bd70      	pop	{r4, r5, r6, pc}

08012720 <LISTBOX_SetAutoScrollV>:
 8012720:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012724:	4688      	mov	r8, r1
 8012726:	4606      	mov	r6, r0
 8012728:	b318      	cbz	r0, 8012772 <LISTBOX_SetAutoScrollV+0x52>
 801272a:	f7fe f989 	bl	8010a40 <GUI_ALLOC_LockH>
 801272e:	ac02      	add	r4, sp, #8
 8012730:	f890 7092 	ldrb.w	r7, [r0, #146]	; 0x92
 8012734:	f844 0d04 	str.w	r0, [r4, #-4]!
 8012738:	4620      	mov	r0, r4
 801273a:	f7fe f98f 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801273e:	f007 05fd 	and.w	r5, r7, #253	; 0xfd
 8012742:	f1b8 0f00 	cmp.w	r8, #0
 8012746:	d002      	beq.n	801274e <LISTBOX_SetAutoScrollV+0x2e>
 8012748:	f045 0502 	orr.w	r5, r5, #2
 801274c:	e003      	b.n	8012756 <LISTBOX_SetAutoScrollV+0x36>
 801274e:	4630      	mov	r0, r6
 8012750:	4641      	mov	r1, r8
 8012752:	f002 f958 	bl	8014a06 <WM_SetScrollbarV>
 8012756:	42af      	cmp	r7, r5
 8012758:	d00b      	beq.n	8012772 <LISTBOX_SetAutoScrollV+0x52>
 801275a:	4630      	mov	r0, r6
 801275c:	f7fe f970 	bl	8010a40 <GUI_ALLOC_LockH>
 8012760:	9001      	str	r0, [sp, #4]
 8012762:	f880 5092 	strb.w	r5, [r0, #146]	; 0x92
 8012766:	4620      	mov	r0, r4
 8012768:	f7fe f978 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801276c:	4630      	mov	r0, r6
 801276e:	f000 fcc3 	bl	80130f8 <LISTBOX_UpdateScrollers>
 8012772:	b002      	add	sp, #8
 8012774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012778 <LISTBOX_SetItemSpacing>:
 8012778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801277a:	460d      	mov	r5, r1
 801277c:	4604      	mov	r4, r0
 801277e:	b170      	cbz	r0, 801279e <LISTBOX_SetItemSpacing+0x26>
 8012780:	f7fe f95e 	bl	8010a40 <GUI_ALLOC_LockH>
 8012784:	4602      	mov	r2, r0
 8012786:	a802      	add	r0, sp, #8
 8012788:	f8a2 5094 	strh.w	r5, [r2, #148]	; 0x94
 801278c:	f840 2d04 	str.w	r2, [r0, #-4]!
 8012790:	f7fe f964 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012794:	4620      	mov	r0, r4
 8012796:	f04f 31ff 	mov.w	r1, #4294967295
 801279a:	f000 fd47 	bl	801322c <LISTBOX_InvalidateItem>
 801279e:	b003      	add	sp, #12
 80127a0:	bd30      	pop	{r4, r5, pc}

080127a2 <LISTBOX_SetItemDisabled>:
 80127a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80127a4:	460c      	mov	r4, r1
 80127a6:	4616      	mov	r6, r2
 80127a8:	4605      	mov	r5, r0
 80127aa:	b328      	cbz	r0, 80127f8 <LISTBOX_SetItemDisabled+0x56>
 80127ac:	f7fe f948 	bl	8010a40 <GUI_ALLOC_LockH>
 80127b0:	9000      	str	r0, [sp, #0]
 80127b2:	f000 f91b 	bl	80129ec <LISTBOX__GetNumItems>
 80127b6:	4284      	cmp	r4, r0
 80127b8:	d21b      	bcs.n	80127f2 <LISTBOX_SetItemDisabled+0x50>
 80127ba:	9b00      	ldr	r3, [sp, #0]
 80127bc:	4621      	mov	r1, r4
 80127be:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80127c0:	f7f6 f80e 	bl	80087e0 <GUI_ARRAY_GethItem>
 80127c4:	b1a8      	cbz	r0, 80127f2 <LISTBOX_SetItemDisabled+0x50>
 80127c6:	f7fe f93b 	bl	8010a40 <GUI_ALLOC_LockH>
 80127ca:	9001      	str	r0, [sp, #4]
 80127cc:	7a01      	ldrb	r1, [r0, #8]
 80127ce:	b126      	cbz	r6, 80127da <LISTBOX_SetItemDisabled+0x38>
 80127d0:	078a      	lsls	r2, r1, #30
 80127d2:	d40b      	bmi.n	80127ec <LISTBOX_SetItemDisabled+0x4a>
 80127d4:	f041 0102 	orr.w	r1, r1, #2
 80127d8:	e003      	b.n	80127e2 <LISTBOX_SetItemDisabled+0x40>
 80127da:	078b      	lsls	r3, r1, #30
 80127dc:	d506      	bpl.n	80127ec <LISTBOX_SetItemDisabled+0x4a>
 80127de:	f021 0102 	bic.w	r1, r1, #2
 80127e2:	7201      	strb	r1, [r0, #8]
 80127e4:	4628      	mov	r0, r5
 80127e6:	4621      	mov	r1, r4
 80127e8:	f000 fbce 	bl	8012f88 <LISTBOX__InvalidateItem>
 80127ec:	a801      	add	r0, sp, #4
 80127ee:	f7fe f935 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80127f2:	4668      	mov	r0, sp
 80127f4:	f7fe f932 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80127f8:	b002      	add	sp, #8
 80127fa:	bd70      	pop	{r4, r5, r6, pc}

080127fc <LISTBOX_SetFont>:
 80127fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80127fe:	460c      	mov	r4, r1
 8012800:	4605      	mov	r5, r0
 8012802:	b180      	cbz	r0, 8012826 <LISTBOX_SetFont+0x2a>
 8012804:	f7fe f91c 	bl	8010a40 <GUI_ALLOC_LockH>
 8012808:	4602      	mov	r2, r0
 801280a:	a802      	add	r0, sp, #8
 801280c:	2100      	movs	r1, #0
 801280e:	f8a2 1096 	strh.w	r1, [r2, #150]	; 0x96
 8012812:	f840 2d04 	str.w	r2, [r0, #-4]!
 8012816:	6554      	str	r4, [r2, #84]	; 0x54
 8012818:	f7fe f920 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801281c:	4628      	mov	r0, r5
 801281e:	f04f 31ff 	mov.w	r1, #4294967295
 8012822:	f000 fd03 	bl	801322c <LISTBOX_InvalidateItem>
 8012826:	b003      	add	sp, #12
 8012828:	bd30      	pop	{r4, r5, pc}

0801282a <LISTBOX_CreateAsChild>:
 801282a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801282c:	9100      	str	r1, [sp, #0]
 801282e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012830:	9101      	str	r1, [sp, #4]
 8012832:	2100      	movs	r1, #0
 8012834:	9102      	str	r1, [sp, #8]
 8012836:	9103      	str	r1, [sp, #12]
 8012838:	9004      	str	r0, [sp, #16]
 801283a:	4619      	mov	r1, r3
 801283c:	4610      	mov	r0, r2
 801283e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012840:	9a08      	ldr	r2, [sp, #32]
 8012842:	f000 fdef 	bl	8013424 <LISTBOX_CreateEx>
 8012846:	b007      	add	sp, #28
 8012848:	f85d fb04 	ldr.w	pc, [sp], #4

0801284c <LISTBOX_AddStringH>:
 801284c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012850:	b087      	sub	sp, #28
 8012852:	4604      	mov	r4, r0
 8012854:	4688      	mov	r8, r1
 8012856:	a803      	add	r0, sp, #12
 8012858:	2100      	movs	r1, #0
 801285a:	220c      	movs	r2, #12
 801285c:	f006 fa05 	bl	8018c6a <memset>
 8012860:	2c00      	cmp	r4, #0
 8012862:	d054      	beq.n	801290e <LISTBOX_AddStringH+0xc2>
 8012864:	f1b8 0f00 	cmp.w	r8, #0
 8012868:	d051      	beq.n	801290e <LISTBOX_AddStringH+0xc2>
 801286a:	4640      	mov	r0, r8
 801286c:	f7fe f8e8 	bl	8010a40 <GUI_ALLOC_LockH>
 8012870:	ae06      	add	r6, sp, #24
 8012872:	af06      	add	r7, sp, #24
 8012874:	f846 0d10 	str.w	r0, [r6, #-16]!
 8012878:	f7ed fcba 	bl	80001f0 <strlen>
 801287c:	4605      	mov	r5, r0
 801287e:	4630      	mov	r0, r6
 8012880:	f7fe f8ec 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012884:	4620      	mov	r0, r4
 8012886:	f7fe f8db 	bl	8010a40 <GUI_ALLOC_LockH>
 801288a:	f8d0 9034 	ldr.w	r9, [r0, #52]	; 0x34
 801288e:	f847 0d18 	str.w	r0, [r7, #-24]!
 8012892:	4668      	mov	r0, sp
 8012894:	f7fe f8e2 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012898:	4648      	mov	r0, r9
 801289a:	a903      	add	r1, sp, #12
 801289c:	f105 020c 	add.w	r2, r5, #12
 80128a0:	f7f5 feda 	bl	8008658 <GUI_ARRAY_AddItem>
 80128a4:	2800      	cmp	r0, #0
 80128a6:	d132      	bne.n	801290e <LISTBOX_AddStringH+0xc2>
 80128a8:	4648      	mov	r0, r9
 80128aa:	f7f5 fec6 	bl	800863a <GUI_ARRAY_GetNumItems>
 80128ae:	1e45      	subs	r5, r0, #1
 80128b0:	4629      	mov	r1, r5
 80128b2:	4648      	mov	r0, r9
 80128b4:	f7f5 ffa7 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 80128b8:	9001      	str	r0, [sp, #4]
 80128ba:	4640      	mov	r0, r8
 80128bc:	f7fe f8c0 	bl	8010a40 <GUI_ALLOC_LockH>
 80128c0:	f10d 0818 	add.w	r8, sp, #24
 80128c4:	4601      	mov	r1, r0
 80128c6:	9002      	str	r0, [sp, #8]
 80128c8:	f858 0d14 	ldr.w	r0, [r8, #-20]!
 80128cc:	f04f 33ff 	mov.w	r3, #4294967295
 80128d0:	6043      	str	r3, [r0, #4]
 80128d2:	3009      	adds	r0, #9
 80128d4:	f006 f9e0 	bl	8018c98 <strcpy>
 80128d8:	4640      	mov	r0, r8
 80128da:	f7fe f8bf 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80128de:	4630      	mov	r0, r6
 80128e0:	f7fe f8bc 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80128e4:	4620      	mov	r0, r4
 80128e6:	f7fe f8ab 	bl	8010a40 <GUI_ALLOC_LockH>
 80128ea:	4629      	mov	r1, r5
 80128ec:	9000      	str	r0, [sp, #0]
 80128ee:	f000 fb31 	bl	8012f54 <LISTBOX__InvalidateItemSize>
 80128f2:	4629      	mov	r1, r5
 80128f4:	9800      	ldr	r0, [sp, #0]
 80128f6:	f000 fc78 	bl	80131ea <LISTBOX__AddSize>
 80128fa:	4668      	mov	r0, sp
 80128fc:	f7fe f8ae 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012900:	4620      	mov	r0, r4
 8012902:	f000 fbf9 	bl	80130f8 <LISTBOX_UpdateScrollers>
 8012906:	4620      	mov	r0, r4
 8012908:	4629      	mov	r1, r5
 801290a:	f000 fb3d 	bl	8012f88 <LISTBOX__InvalidateItem>
 801290e:	b007      	add	sp, #28
 8012910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08012914 <_CallOwnerDraw>:
 8012914:	b510      	push	{r4, lr}
 8012916:	b08a      	sub	sp, #40	; 0x28
 8012918:	9102      	str	r1, [sp, #8]
 801291a:	9001      	str	r0, [sp, #4]
 801291c:	9203      	str	r2, [sp, #12]
 801291e:	f7fe f88f 	bl	8010a40 <GUI_ALLOC_LockH>
 8012922:	ab0a      	add	r3, sp, #40	; 0x28
 8012924:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8012926:	f843 0d28 	str.w	r0, [r3, #-40]!
 801292a:	4668      	mov	r0, sp
 801292c:	f7fe f896 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012930:	b114      	cbz	r4, 8012938 <_CallOwnerDraw+0x24>
 8012932:	a801      	add	r0, sp, #4
 8012934:	47a0      	blx	r4
 8012936:	e000      	b.n	801293a <_CallOwnerDraw+0x26>
 8012938:	4620      	mov	r0, r4
 801293a:	b00a      	add	sp, #40	; 0x28
 801293c:	bd10      	pop	{r4, pc}

0801293e <_GetItemSizeY>:
 801293e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012942:	460d      	mov	r5, r1
 8012944:	4607      	mov	r7, r0
 8012946:	f7fe f87b 	bl	8010a40 <GUI_ALLOC_LockH>
 801294a:	4602      	mov	r2, r0
 801294c:	a802      	add	r0, sp, #8
 801294e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8012950:	f840 2d08 	str.w	r2, [r0, #-8]!
 8012954:	4668      	mov	r0, sp
 8012956:	f8d2 8054 	ldr.w	r8, [r2, #84]	; 0x54
 801295a:	f7fe f87f 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801295e:	4630      	mov	r0, r6
 8012960:	4629      	mov	r1, r5
 8012962:	f7f5 ff50 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 8012966:	9001      	str	r0, [sp, #4]
 8012968:	b1e0      	cbz	r0, 80129a4 <_GetItemSizeY+0x66>
 801296a:	8844      	ldrh	r4, [r0, #2]
 801296c:	b9b4      	cbnz	r4, 801299c <_GetItemSizeY+0x5e>
 801296e:	4640      	mov	r0, r8
 8012970:	f7fc ff4c 	bl	800f80c <GUI_SetFont>
 8012974:	4680      	mov	r8, r0
 8012976:	a801      	add	r0, sp, #4
 8012978:	f7fe f870 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801297c:	4638      	mov	r0, r7
 801297e:	211b      	movs	r1, #27
 8012980:	462a      	mov	r2, r5
 8012982:	f7ff ffc7 	bl	8012914 <_CallOwnerDraw>
 8012986:	4604      	mov	r4, r0
 8012988:	4640      	mov	r0, r8
 801298a:	f7fc ff3f 	bl	800f80c <GUI_SetFont>
 801298e:	b144      	cbz	r4, 80129a2 <_GetItemSizeY+0x64>
 8012990:	4630      	mov	r0, r6
 8012992:	4629      	mov	r1, r5
 8012994:	f7f5 ff37 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 8012998:	9001      	str	r0, [sp, #4]
 801299a:	8044      	strh	r4, [r0, #2]
 801299c:	a801      	add	r0, sp, #4
 801299e:	f7fe f85d 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80129a2:	4620      	mov	r0, r4
 80129a4:	b002      	add	sp, #8
 80129a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080129aa <_NotifyOwner>:
 80129aa:	b570      	push	{r4, r5, r6, lr}
 80129ac:	b086      	sub	sp, #24
 80129ae:	4604      	mov	r4, r0
 80129b0:	2210      	movs	r2, #16
 80129b2:	460e      	mov	r6, r1
 80129b4:	a802      	add	r0, sp, #8
 80129b6:	2100      	movs	r1, #0
 80129b8:	f006 f957 	bl	8018c6a <memset>
 80129bc:	4620      	mov	r0, r4
 80129be:	f7fe f83f 	bl	8010a40 <GUI_ALLOC_LockH>
 80129c2:	f8d0 508c 	ldr.w	r5, [r0, #140]	; 0x8c
 80129c6:	9001      	str	r0, [sp, #4]
 80129c8:	b91d      	cbnz	r5, 80129d2 <_NotifyOwner+0x28>
 80129ca:	4620      	mov	r0, r4
 80129cc:	f7f8 fb69 	bl	800b0a2 <WM_GetParent>
 80129d0:	4605      	mov	r5, r0
 80129d2:	2326      	movs	r3, #38	; 0x26
 80129d4:	a801      	add	r0, sp, #4
 80129d6:	9302      	str	r3, [sp, #8]
 80129d8:	9605      	str	r6, [sp, #20]
 80129da:	9404      	str	r4, [sp, #16]
 80129dc:	f7fe f83e 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80129e0:	4628      	mov	r0, r5
 80129e2:	a902      	add	r1, sp, #8
 80129e4:	f7f7 fe1c 	bl	800a620 <WM__SendMessage>
 80129e8:	b006      	add	sp, #24
 80129ea:	bd70      	pop	{r4, r5, r6, pc}

080129ec <LISTBOX__GetNumItems>:
 80129ec:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80129ee:	f7f5 be24 	b.w	800863a <GUI_ARRAY_GetNumItems>

080129f2 <_GetNumVisItems>:
 80129f2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80129f6:	4607      	mov	r7, r0
 80129f8:	f7fe f822 	bl	8010a40 <GUI_ALLOC_LockH>
 80129fc:	ac04      	add	r4, sp, #16
 80129fe:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8012a02:	f7ff fff3 	bl	80129ec <LISTBOX__GetNumItems>
 8012a06:	4605      	mov	r5, r0
 8012a08:	4620      	mov	r0, r4
 8012a0a:	f7fe f827 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012a0e:	2d01      	cmp	r5, #1
 8012a10:	dd1b      	ble.n	8012a4a <_GetNumVisItems+0x58>
 8012a12:	4638      	mov	r0, r7
 8012a14:	a902      	add	r1, sp, #8
 8012a16:	f002 f875 	bl	8014b04 <WM_GetInsideRectExScrollbar>
 8012a1a:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8012a1e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8012a22:	ebc3 0808 	rsb	r8, r3, r8
 8012a26:	f108 0801 	add.w	r8, r8, #1
 8012a2a:	1e6c      	subs	r4, r5, #1
 8012a2c:	2600      	movs	r6, #0
 8012a2e:	4638      	mov	r0, r7
 8012a30:	4621      	mov	r1, r4
 8012a32:	f7ff ff84 	bl	801293e <_GetItemSizeY>
 8012a36:	4406      	add	r6, r0
 8012a38:	4546      	cmp	r6, r8
 8012a3a:	dc02      	bgt.n	8012a42 <_GetNumVisItems+0x50>
 8012a3c:	f114 34ff 	adds.w	r4, r4, #4294967295
 8012a40:	d2f5      	bcs.n	8012a2e <_GetNumVisItems+0x3c>
 8012a42:	1b2c      	subs	r4, r5, r4
 8012a44:	1e60      	subs	r0, r4, #1
 8012a46:	2800      	cmp	r0, #0
 8012a48:	dc00      	bgt.n	8012a4c <_GetNumVisItems+0x5a>
 8012a4a:	2001      	movs	r0, #1
 8012a4c:	b004      	add	sp, #16
 8012a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012a52 <_GetContentsSizeX>:
 8012a52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a56:	4682      	mov	sl, r0
 8012a58:	f7fd fff2 	bl	8010a40 <GUI_ALLOC_LockH>
 8012a5c:	9000      	str	r0, [sp, #0]
 8012a5e:	f8d0 9054 	ldr.w	r9, [r0, #84]	; 0x54
 8012a62:	f7ff ffc3 	bl	80129ec <LISTBOX__GetNumItems>
 8012a66:	4680      	mov	r8, r0
 8012a68:	a802      	add	r0, sp, #8
 8012a6a:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 8012a6e:	f8b3 5096 	ldrh.w	r5, [r3, #150]	; 0x96
 8012a72:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8012a74:	4668      	mov	r0, sp
 8012a76:	f7fd fff1 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012a7a:	bb4d      	cbnz	r5, 8012ad0 <_GetContentsSizeX+0x7e>
 8012a7c:	462c      	mov	r4, r5
 8012a7e:	4544      	cmp	r4, r8
 8012a80:	da26      	bge.n	8012ad0 <_GetContentsSizeX+0x7e>
 8012a82:	4638      	mov	r0, r7
 8012a84:	4621      	mov	r1, r4
 8012a86:	f7f5 febe 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 8012a8a:	9001      	str	r0, [sp, #4]
 8012a8c:	b1f0      	cbz	r0, 8012acc <_GetContentsSizeX+0x7a>
 8012a8e:	8806      	ldrh	r6, [r0, #0]
 8012a90:	b9b6      	cbnz	r6, 8012ac0 <_GetContentsSizeX+0x6e>
 8012a92:	4648      	mov	r0, r9
 8012a94:	f7fc feba 	bl	800f80c <GUI_SetFont>
 8012a98:	4683      	mov	fp, r0
 8012a9a:	a801      	add	r0, sp, #4
 8012a9c:	f7fd ffde 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012aa0:	4650      	mov	r0, sl
 8012aa2:	211a      	movs	r1, #26
 8012aa4:	4622      	mov	r2, r4
 8012aa6:	f7ff ff35 	bl	8012914 <_CallOwnerDraw>
 8012aaa:	4606      	mov	r6, r0
 8012aac:	4658      	mov	r0, fp
 8012aae:	f7fc fead 	bl	800f80c <GUI_SetFont>
 8012ab2:	b146      	cbz	r6, 8012ac6 <_GetContentsSizeX+0x74>
 8012ab4:	4638      	mov	r0, r7
 8012ab6:	4621      	mov	r1, r4
 8012ab8:	f7f5 fea5 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 8012abc:	9001      	str	r0, [sp, #4]
 8012abe:	8006      	strh	r6, [r0, #0]
 8012ac0:	a801      	add	r0, sp, #4
 8012ac2:	f7fd ffcb 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012ac6:	42b5      	cmp	r5, r6
 8012ac8:	bfb8      	it	lt
 8012aca:	4635      	movlt	r5, r6
 8012acc:	3401      	adds	r4, #1
 8012ace:	e7d6      	b.n	8012a7e <_GetContentsSizeX+0x2c>
 8012ad0:	4628      	mov	r0, r5
 8012ad2:	b003      	add	sp, #12
 8012ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012ad8 <_GetItemPosY>:
 8012ad8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8012adc:	460d      	mov	r5, r1
 8012ade:	4682      	mov	sl, r0
 8012ae0:	f7fd ffae 	bl	8010a40 <GUI_ALLOC_LockH>
 8012ae4:	9000      	str	r0, [sp, #0]
 8012ae6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8012ae8:	f7ff ff80 	bl	80129ec <LISTBOX__GetNumItems>
 8012aec:	4681      	mov	r9, r0
 8012aee:	a802      	add	r0, sp, #8
 8012af0:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 8012af4:	4668      	mov	r0, sp
 8012af6:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8012afa:	f7fd ffaf 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012afe:	454d      	cmp	r5, r9
 8012b00:	d24d      	bcs.n	8012b9e <_GetItemPosY+0xc6>
 8012b02:	42a5      	cmp	r5, r4
 8012b04:	db4b      	blt.n	8012b9e <_GetItemPosY+0xc6>
 8012b06:	4629      	mov	r1, r5
 8012b08:	4640      	mov	r0, r8
 8012b0a:	f7f5 fe7c 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 8012b0e:	af02      	add	r7, sp, #8
 8012b10:	6844      	ldr	r4, [r0, #4]
 8012b12:	f847 0d04 	str.w	r0, [r7, #-4]!
 8012b16:	4638      	mov	r0, r7
 8012b18:	f7fd ffa0 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012b1c:	2c00      	cmp	r4, #0
 8012b1e:	da41      	bge.n	8012ba4 <_GetItemPosY+0xcc>
 8012b20:	1e6e      	subs	r6, r5, #1
 8012b22:	2e00      	cmp	r6, #0
 8012b24:	db0c      	blt.n	8012b40 <_GetItemPosY+0x68>
 8012b26:	4631      	mov	r1, r6
 8012b28:	4640      	mov	r0, r8
 8012b2a:	f7f5 fe6c 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 8012b2e:	6844      	ldr	r4, [r0, #4]
 8012b30:	9001      	str	r0, [sp, #4]
 8012b32:	4638      	mov	r0, r7
 8012b34:	f7fd ff92 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012b38:	2c00      	cmp	r4, #0
 8012b3a:	da05      	bge.n	8012b48 <_GetItemPosY+0x70>
 8012b3c:	3e01      	subs	r6, #1
 8012b3e:	e7f0      	b.n	8012b22 <_GetItemPosY+0x4a>
 8012b40:	2c00      	cmp	r4, #0
 8012b42:	bfbc      	itt	lt
 8012b44:	2400      	movlt	r4, #0
 8012b46:	4626      	movlt	r6, r4
 8012b48:	b13d      	cbz	r5, 8012b5a <_GetItemPosY+0x82>
 8012b4a:	4631      	mov	r1, r6
 8012b4c:	4650      	mov	r0, sl
 8012b4e:	f7ff fef6 	bl	801293e <_GetItemSizeY>
 8012b52:	3601      	adds	r6, #1
 8012b54:	42ae      	cmp	r6, r5
 8012b56:	4404      	add	r4, r0
 8012b58:	d3f7      	bcc.n	8012b4a <_GetItemPosY+0x72>
 8012b5a:	4629      	mov	r1, r5
 8012b5c:	4640      	mov	r0, r8
 8012b5e:	f7f5 fe52 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 8012b62:	9001      	str	r0, [sp, #4]
 8012b64:	6044      	str	r4, [r0, #4]
 8012b66:	4638      	mov	r0, r7
 8012b68:	f7fd ff78 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012b6c:	f1a9 0302 	sub.w	r3, r9, #2
 8012b70:	429d      	cmp	r5, r3
 8012b72:	da17      	bge.n	8012ba4 <_GetItemPosY+0xcc>
 8012b74:	4629      	mov	r1, r5
 8012b76:	4650      	mov	r0, sl
 8012b78:	f7ff fee1 	bl	801293e <_GetItemSizeY>
 8012b7c:	1c6e      	adds	r6, r5, #1
 8012b7e:	4404      	add	r4, r0
 8012b80:	4631      	mov	r1, r6
 8012b82:	4640      	mov	r0, r8
 8012b84:	f7f5 fe3f 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 8012b88:	9001      	str	r0, [sp, #4]
 8012b8a:	6044      	str	r4, [r0, #4]
 8012b8c:	4638      	mov	r0, r7
 8012b8e:	f7fd ff65 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012b92:	f109 33ff 	add.w	r3, r9, #4294967295
 8012b96:	429e      	cmp	r6, r3
 8012b98:	d204      	bcs.n	8012ba4 <_GetItemPosY+0xcc>
 8012b9a:	4635      	mov	r5, r6
 8012b9c:	e7ea      	b.n	8012b74 <_GetItemPosY+0x9c>
 8012b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8012ba2:	e000      	b.n	8012ba6 <_GetItemPosY+0xce>
 8012ba4:	4620      	mov	r0, r4
 8012ba6:	b002      	add	sp, #8
 8012ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012bac <_UpdateScrollPos>:
 8012bac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012bb0:	b089      	sub	sp, #36	; 0x24
 8012bb2:	4605      	mov	r5, r0
 8012bb4:	f7fd ff44 	bl	8010a40 <GUI_ALLOC_LockH>
 8012bb8:	ac08      	add	r4, sp, #32
 8012bba:	f9b0 7090 	ldrsh.w	r7, [r0, #144]	; 0x90
 8012bbe:	9002      	str	r0, [sp, #8]
 8012bc0:	f7ff ff14 	bl	80129ec <LISTBOX__GetNumItems>
 8012bc4:	f854 3d18 	ldr.w	r3, [r4, #-24]!
 8012bc8:	4606      	mov	r6, r0
 8012bca:	4620      	mov	r0, r4
 8012bcc:	f8d3 8040 	ldr.w	r8, [r3, #64]	; 0x40
 8012bd0:	f7fd ff44 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012bd4:	42b7      	cmp	r7, r6
 8012bd6:	ae05      	add	r6, sp, #20
 8012bd8:	da21      	bge.n	8012c1e <_UpdateScrollPos+0x72>
 8012bda:	4547      	cmp	r7, r8
 8012bdc:	db1f      	blt.n	8012c1e <_UpdateScrollPos+0x72>
 8012bde:	4639      	mov	r1, r7
 8012be0:	4628      	mov	r0, r5
 8012be2:	f7ff ff79 	bl	8012ad8 <_GetItemPosY>
 8012be6:	4639      	mov	r1, r7
 8012be8:	4681      	mov	r9, r0
 8012bea:	4628      	mov	r0, r5
 8012bec:	f7ff fea7 	bl	801293e <_GetItemSizeY>
 8012bf0:	4641      	mov	r1, r8
 8012bf2:	eb09 0700 	add.w	r7, r9, r0
 8012bf6:	4628      	mov	r0, r5
 8012bf8:	f7ff ff6e 	bl	8012ad8 <_GetItemPosY>
 8012bfc:	4631      	mov	r1, r6
 8012bfe:	ebc0 0807 	rsb	r8, r0, r7
 8012c02:	4628      	mov	r0, r5
 8012c04:	f001 ff7e 	bl	8014b04 <WM_GetInsideRectExScrollbar>
 8012c08:	f9bd 701a 	ldrsh.w	r7, [sp, #26]
 8012c0c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8012c10:	1aff      	subs	r7, r7, r3
 8012c12:	3701      	adds	r7, #1
 8012c14:	45b8      	cmp	r8, r7
 8012c16:	bfd4      	ite	le
 8012c18:	2700      	movle	r7, #0
 8012c1a:	2701      	movgt	r7, #1
 8012c1c:	e000      	b.n	8012c20 <_UpdateScrollPos+0x74>
 8012c1e:	2700      	movs	r7, #0
 8012c20:	4628      	mov	r0, r5
 8012c22:	f7fd ff0d 	bl	8010a40 <GUI_ALLOC_LockH>
 8012c26:	f9b0 2090 	ldrsh.w	r2, [r0, #144]	; 0x90
 8012c2a:	9001      	str	r0, [sp, #4]
 8012c2c:	2a00      	cmp	r2, #0
 8012c2e:	f8d0 8040 	ldr.w	r8, [r0, #64]	; 0x40
 8012c32:	db09      	blt.n	8012c48 <_UpdateScrollPos+0x9c>
 8012c34:	b127      	cbz	r7, 8012c40 <_UpdateScrollPos+0x94>
 8012c36:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8012c38:	f1c1 0101 	rsb	r1, r1, #1
 8012c3c:	4411      	add	r1, r2
 8012c3e:	6401      	str	r1, [r0, #64]	; 0x40
 8012c40:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8012c42:	428a      	cmp	r2, r1
 8012c44:	bfb8      	it	lt
 8012c46:	6402      	strlt	r2, [r0, #64]	; 0x40
 8012c48:	303c      	adds	r0, #60	; 0x3c
 8012c4a:	f001 ffeb 	bl	8014c24 <WM_CheckScrollBounds>
 8012c4e:	9801      	ldr	r0, [sp, #4]
 8012c50:	3048      	adds	r0, #72	; 0x48
 8012c52:	f001 ffe7 	bl	8014c24 <WM_CheckScrollBounds>
 8012c56:	ab08      	add	r3, sp, #32
 8012c58:	f853 7d1c 	ldr.w	r7, [r3, #-28]!
 8012c5c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8012c60:	c907      	ldmia	r1, {r0, r1, r2}
 8012c62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012c66:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8012c6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8012c6c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8012c70:	4618      	mov	r0, r3
 8012c72:	f7fd fef3 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012c76:	4628      	mov	r0, r5
 8012c78:	4621      	mov	r1, r4
 8012c7a:	4632      	mov	r2, r6
 8012c7c:	f7f4 fb2a 	bl	80072d4 <WIDGET__SetScrollState>
 8012c80:	9803      	ldr	r0, [sp, #12]
 8012c82:	ebc8 0000 	rsb	r0, r8, r0
 8012c86:	b009      	add	sp, #36	; 0x24
 8012c88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08012c8c <_GetItemFromPos>:
 8012c8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c90:	4689      	mov	r9, r1
 8012c92:	4617      	mov	r7, r2
 8012c94:	4680      	mov	r8, r0
 8012c96:	f7fd fed3 	bl	8010a40 <GUI_ALLOC_LockH>
 8012c9a:	ac04      	add	r4, sp, #16
 8012c9c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8012c9e:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8012ca2:	f7ff fea3 	bl	80129ec <LISTBOX__GetNumItems>
 8012ca6:	4682      	mov	sl, r0
 8012ca8:	4620      	mov	r0, r4
 8012caa:	f7fd fed7 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012cae:	4640      	mov	r0, r8
 8012cb0:	a902      	add	r1, sp, #8
 8012cb2:	f001 ff27 	bl	8014b04 <WM_GetInsideRectExScrollbar>
 8012cb6:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8012cba:	4599      	cmp	r9, r3
 8012cbc:	db19      	blt.n	8012cf2 <_GetItemFromPos+0x66>
 8012cbe:	f9bd 600a 	ldrsh.w	r6, [sp, #10]
 8012cc2:	42b7      	cmp	r7, r6
 8012cc4:	db15      	blt.n	8012cf2 <_GetItemFromPos+0x66>
 8012cc6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8012cca:	4599      	cmp	r9, r3
 8012ccc:	dc11      	bgt.n	8012cf2 <_GetItemFromPos+0x66>
 8012cce:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8012cd2:	429f      	cmp	r7, r3
 8012cd4:	f04f 34ff 	mov.w	r4, #4294967295
 8012cd8:	dc0d      	bgt.n	8012cf6 <_GetItemFromPos+0x6a>
 8012cda:	4555      	cmp	r5, sl
 8012cdc:	da0b      	bge.n	8012cf6 <_GetItemFromPos+0x6a>
 8012cde:	4629      	mov	r1, r5
 8012ce0:	4640      	mov	r0, r8
 8012ce2:	f7ff fe2c 	bl	801293e <_GetItemSizeY>
 8012ce6:	42b7      	cmp	r7, r6
 8012ce8:	bfa8      	it	ge
 8012cea:	462c      	movge	r4, r5
 8012cec:	4406      	add	r6, r0
 8012cee:	3501      	adds	r5, #1
 8012cf0:	e7f3      	b.n	8012cda <_GetItemFromPos+0x4e>
 8012cf2:	f04f 34ff 	mov.w	r4, #4294967295
 8012cf6:	4620      	mov	r0, r4
 8012cf8:	b004      	add	sp, #16
 8012cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012cfe <LISTBOX__GetpStringLocked>:
 8012cfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012d00:	460c      	mov	r4, r1
 8012d02:	4616      	mov	r6, r2
 8012d04:	f7fd fe9c 	bl	8010a40 <GUI_ALLOC_LockH>
 8012d08:	ad02      	add	r5, sp, #8
 8012d0a:	4621      	mov	r1, r4
 8012d0c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8012d10:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8012d12:	f7f5 fd78 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 8012d16:	4604      	mov	r4, r0
 8012d18:	4628      	mov	r0, r5
 8012d1a:	f7fd fe9f 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012d1e:	b114      	cbz	r4, 8012d26 <LISTBOX__GetpStringLocked+0x28>
 8012d20:	f104 0009 	add.w	r0, r4, #9
 8012d24:	e000      	b.n	8012d28 <LISTBOX__GetpStringLocked+0x2a>
 8012d26:	4620      	mov	r0, r4
 8012d28:	6034      	str	r4, [r6, #0]
 8012d2a:	b002      	add	sp, #8
 8012d2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012d30 <LISTBOX_OwnerDraw>:
 8012d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d34:	6843      	ldr	r3, [r0, #4]
 8012d36:	2b1a      	cmp	r3, #26
 8012d38:	b088      	sub	sp, #32
 8012d3a:	4604      	mov	r4, r0
 8012d3c:	d005      	beq.n	8012d4a <LISTBOX_OwnerDraw+0x1a>
 8012d3e:	2b1b      	cmp	r3, #27
 8012d40:	d01f      	beq.n	8012d82 <LISTBOX_OwnerDraw+0x52>
 8012d42:	2b01      	cmp	r3, #1
 8012d44:	f040 8100 	bne.w	8012f48 <LISTBOX_OwnerDraw+0x218>
 8012d48:	e02d      	b.n	8012da6 <LISTBOX_OwnerDraw+0x76>
 8012d4a:	6800      	ldr	r0, [r0, #0]
 8012d4c:	f7fd fe78 	bl	8010a40 <GUI_ALLOC_LockH>
 8012d50:	ad08      	add	r5, sp, #32
 8012d52:	f845 0d10 	str.w	r0, [r5, #-16]!
 8012d56:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8012d58:	f7fc fd58 	bl	800f80c <GUI_SetFont>
 8012d5c:	4606      	mov	r6, r0
 8012d5e:	4628      	mov	r0, r5
 8012d60:	f7fd fe7c 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012d64:	68a1      	ldr	r1, [r4, #8]
 8012d66:	6820      	ldr	r0, [r4, #0]
 8012d68:	aa06      	add	r2, sp, #24
 8012d6a:	f7ff ffc8 	bl	8012cfe <LISTBOX__GetpStringLocked>
 8012d6e:	f7fc ff75 	bl	800fc5c <GUI_GetStringDistX>
 8012d72:	4604      	mov	r4, r0
 8012d74:	a806      	add	r0, sp, #24
 8012d76:	f7fd fe71 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012d7a:	4630      	mov	r0, r6
 8012d7c:	f7fc fd46 	bl	800f80c <GUI_SetFont>
 8012d80:	e00f      	b.n	8012da2 <LISTBOX_OwnerDraw+0x72>
 8012d82:	6800      	ldr	r0, [r0, #0]
 8012d84:	f7fd fe5c 	bl	8010a40 <GUI_ALLOC_LockH>
 8012d88:	9006      	str	r0, [sp, #24]
 8012d8a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8012d8c:	f7fc ff62 	bl	800fc54 <GUI_GetYDistOfFont>
 8012d90:	ab08      	add	r3, sp, #32
 8012d92:	f853 2d08 	ldr.w	r2, [r3, #-8]!
 8012d96:	f8b2 4094 	ldrh.w	r4, [r2, #148]	; 0x94
 8012d9a:	4404      	add	r4, r0
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f7fd fe5d 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012da2:	4620      	mov	r0, r4
 8012da4:	e0d1      	b.n	8012f4a <LISTBOX_OwnerDraw+0x21a>
 8012da6:	6887      	ldr	r7, [r0, #8]
 8012da8:	6800      	ldr	r0, [r0, #0]
 8012daa:	f7fd fe49 	bl	8010a40 <GUI_ALLOC_LockH>
 8012dae:	4639      	mov	r1, r7
 8012db0:	9000      	str	r0, [sp, #0]
 8012db2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8012db4:	f7f5 fd14 	bl	80087e0 <GUI_ARRAY_GethItem>
 8012db8:	f7fd fe42 	bl	8010a40 <GUI_ALLOC_LockH>
 8012dbc:	9001      	str	r0, [sp, #4]
 8012dbe:	a802      	add	r0, sp, #8
 8012dc0:	f001 ff00 	bl	8014bc4 <WM_GetInsideRect>
 8012dc4:	f7fd fd26 	bl	8010814 <GUI_GetFontDistY>
 8012dc8:	9a00      	ldr	r2, [sp, #0]
 8012dca:	9b01      	ldr	r3, [sp, #4]
 8012dcc:	f892 1092 	ldrb.w	r1, [r2, #146]	; 0x92
 8012dd0:	7a1b      	ldrb	r3, [r3, #8]
 8012dd2:	4606      	mov	r6, r0
 8012dd4:	0748      	lsls	r0, r1, #29
 8012dd6:	f3c3 0540 	ubfx	r5, r3, #1, #1
 8012dda:	d506      	bpl.n	8012dea <LISTBOX_OwnerDraw+0xba>
 8012ddc:	b98d      	cbnz	r5, 8012e02 <LISTBOX_OwnerDraw+0xd2>
 8012dde:	f013 0f01 	tst.w	r3, #1
 8012de2:	bf0c      	ite	eq
 8012de4:	2500      	moveq	r5, #0
 8012de6:	2502      	movne	r5, #2
 8012de8:	e00c      	b.n	8012e04 <LISTBOX_OwnerDraw+0xd4>
 8012dea:	b955      	cbnz	r5, 8012e02 <LISTBOX_OwnerDraw+0xd2>
 8012dec:	f9b2 3090 	ldrsh.w	r3, [r2, #144]	; 0x90
 8012df0:	429f      	cmp	r7, r3
 8012df2:	d107      	bne.n	8012e04 <LISTBOX_OwnerDraw+0xd4>
 8012df4:	8e53      	ldrh	r3, [r2, #50]	; 0x32
 8012df6:	f013 0f01 	tst.w	r3, #1
 8012dfa:	bf0c      	ite	eq
 8012dfc:	2501      	moveq	r5, #1
 8012dfe:	2502      	movne	r5, #2
 8012e00:	e000      	b.n	8012e04 <LISTBOX_OwnerDraw+0xd4>
 8012e02:	2503      	movs	r5, #3
 8012e04:	f105 0816 	add.w	r8, r5, #22
 8012e08:	eb02 0288 	add.w	r2, r2, r8, lsl #2
 8012e0c:	6850      	ldr	r0, [r2, #4]
 8012e0e:	f7fb ff1d 	bl	800ec4c <LCD_SetBkColor>
 8012e12:	9b00      	ldr	r3, [sp, #0]
 8012e14:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8012e18:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8012e1a:	f7fb ff1f 	bl	800ec5c <LCD_SetColor>
 8012e1e:	2002      	movs	r0, #2
 8012e20:	f7fc fcea 	bl	800f7f8 <GUI_SetTextMode>
 8012e24:	f7fd f9fa 	bl	801021c <GUI_Clear>
 8012e28:	6923      	ldr	r3, [r4, #16]
 8012e2a:	6961      	ldr	r1, [r4, #20]
 8012e2c:	9a01      	ldr	r2, [sp, #4]
 8012e2e:	f8ad 1012 	strh.w	r1, [sp, #18]
 8012e32:	3301      	adds	r3, #1
 8012e34:	b29b      	uxth	r3, r3
 8012e36:	f8ad 3010 	strh.w	r3, [sp, #16]
 8012e3a:	8850      	ldrh	r0, [r2, #2]
 8012e3c:	3801      	subs	r0, #1
 8012e3e:	4401      	add	r1, r0
 8012e40:	f8ad 1016 	strh.w	r1, [sp, #22]
 8012e44:	9900      	ldr	r1, [sp, #0]
 8012e46:	f8b1 1088 	ldrh.w	r1, [r1, #136]	; 0x88
 8012e4a:	0789      	lsls	r1, r1, #30
 8012e4c:	d010      	beq.n	8012e70 <LISTBOX_OwnerDraw+0x140>
 8012e4e:	a906      	add	r1, sp, #24
 8012e50:	6820      	ldr	r0, [r4, #0]
 8012e52:	f001 fe57 	bl	8014b04 <WM_GetInsideRectExScrollbar>
 8012e56:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8012e5a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8012e5e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8012e62:	4419      	add	r1, r3
 8012e64:	9b00      	ldr	r3, [sp, #0]
 8012e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e68:	1a89      	subs	r1, r1, r2
 8012e6a:	681a      	ldr	r2, [r3, #0]
 8012e6c:	1a8b      	subs	r3, r1, r2
 8012e6e:	e002      	b.n	8012e76 <LISTBOX_OwnerDraw+0x146>
 8012e70:	8812      	ldrh	r2, [r2, #0]
 8012e72:	3a01      	subs	r2, #1
 8012e74:	4413      	add	r3, r2
 8012e76:	a801      	add	r0, sp, #4
 8012e78:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012e7c:	f7fd fdee 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012e80:	4639      	mov	r1, r7
 8012e82:	aa01      	add	r2, sp, #4
 8012e84:	6820      	ldr	r0, [r4, #0]
 8012e86:	f7ff ff3a 	bl	8012cfe <LISTBOX__GetpStringLocked>
 8012e8a:	9b00      	ldr	r3, [sp, #0]
 8012e8c:	a904      	add	r1, sp, #16
 8012e8e:	f9b3 2088 	ldrsh.w	r2, [r3, #136]	; 0x88
 8012e92:	f004 fc60 	bl	8017756 <GUI_DispStringInRect>
 8012e96:	a801      	add	r0, sp, #4
 8012e98:	f7fd fde0 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012e9c:	9b00      	ldr	r3, [sp, #0]
 8012e9e:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8012ea2:	0752      	lsls	r2, r2, #29
 8012ea4:	d54d      	bpl.n	8012f42 <LISTBOX_OwnerDraw+0x212>
 8012ea6:	f9b3 2090 	ldrsh.w	r2, [r3, #144]	; 0x90
 8012eaa:	4297      	cmp	r7, r2
 8012eac:	d149      	bne.n	8012f42 <LISTBOX_OwnerDraw+0x212>
 8012eae:	6922      	ldr	r2, [r4, #16]
 8012eb0:	f8ad 2018 	strh.w	r2, [sp, #24]
 8012eb4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8012eb8:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012ebc:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 8012ec0:	f002 020c 	and.w	r2, r2, #12
 8012ec4:	2a04      	cmp	r2, #4
 8012ec6:	d020      	beq.n	8012f0a <LISTBOX_OwnerDraw+0x1da>
 8012ec8:	2a0c      	cmp	r2, #12
 8012eca:	d008      	beq.n	8012ede <LISTBOX_OwnerDraw+0x1ae>
 8012ecc:	bb62      	cbnz	r2, 8012f28 <LISTBOX_OwnerDraw+0x1f8>
 8012ece:	6962      	ldr	r2, [r4, #20]
 8012ed0:	f8ad 201a 	strh.w	r2, [sp, #26]
 8012ed4:	3a01      	subs	r2, #1
 8012ed6:	4416      	add	r6, r2
 8012ed8:	f8ad 601e 	strh.w	r6, [sp, #30]
 8012edc:	e024      	b.n	8012f28 <LISTBOX_OwnerDraw+0x1f8>
 8012ede:	4a1c      	ldr	r2, [pc, #112]	; (8012f50 <LISTBOX_OwnerDraw+0x220>)
 8012ee0:	6812      	ldr	r2, [r2, #0]
 8012ee2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8012ee4:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8012ee8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8012eec:	1a8a      	subs	r2, r1, r2
 8012eee:	1b92      	subs	r2, r2, r6
 8012ef0:	2102      	movs	r1, #2
 8012ef2:	fb92 f2f1 	sdiv	r2, r2, r1
 8012ef6:	6961      	ldr	r1, [r4, #20]
 8012ef8:	440a      	add	r2, r1
 8012efa:	b292      	uxth	r2, r2
 8012efc:	3e01      	subs	r6, #1
 8012efe:	f8ad 201a 	strh.w	r2, [sp, #26]
 8012f02:	4432      	add	r2, r6
 8012f04:	f8ad 201e 	strh.w	r2, [sp, #30]
 8012f08:	e00e      	b.n	8012f28 <LISTBOX_OwnerDraw+0x1f8>
 8012f0a:	4a11      	ldr	r2, [pc, #68]	; (8012f50 <LISTBOX_OwnerDraw+0x220>)
 8012f0c:	6960      	ldr	r0, [r4, #20]
 8012f0e:	6812      	ldr	r2, [r2, #0]
 8012f10:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8012f12:	88ca      	ldrh	r2, [r1, #6]
 8012f14:	8849      	ldrh	r1, [r1, #2]
 8012f16:	4402      	add	r2, r0
 8012f18:	1a52      	subs	r2, r2, r1
 8012f1a:	b292      	uxth	r2, r2
 8012f1c:	f8ad 201e 	strh.w	r2, [sp, #30]
 8012f20:	3201      	adds	r2, #1
 8012f22:	1b96      	subs	r6, r2, r6
 8012f24:	f8ad 601a 	strh.w	r6, [sp, #26]
 8012f28:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8012f2c:	6858      	ldr	r0, [r3, #4]
 8012f2e:	f1c0 10ff 	rsb	r0, r0, #16711935	; 0xff00ff
 8012f32:	f500 407f 	add.w	r0, r0, #65280	; 0xff00
 8012f36:	f7fb fe91 	bl	800ec5c <LCD_SetColor>
 8012f3a:	a806      	add	r0, sp, #24
 8012f3c:	2100      	movs	r1, #0
 8012f3e:	f7fc ff43 	bl	800fdc8 <GUI_DrawFocusRect>
 8012f42:	4668      	mov	r0, sp
 8012f44:	f7fd fd8a 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012f48:	2000      	movs	r0, #0
 8012f4a:	b008      	add	sp, #32
 8012f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f50:	20000308 	.word	0x20000308

08012f54 <LISTBOX__InvalidateItemSize>:
 8012f54:	b507      	push	{r0, r1, r2, lr}
 8012f56:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8012f58:	f7f5 fc55 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 8012f5c:	9001      	str	r0, [sp, #4]
 8012f5e:	b110      	cbz	r0, 8012f66 <LISTBOX__InvalidateItemSize+0x12>
 8012f60:	2300      	movs	r3, #0
 8012f62:	8003      	strh	r3, [r0, #0]
 8012f64:	8043      	strh	r3, [r0, #2]
 8012f66:	a801      	add	r0, sp, #4
 8012f68:	f7fd fd78 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012f6c:	b003      	add	sp, #12
 8012f6e:	f85d fb04 	ldr.w	pc, [sp], #4

08012f72 <LISTBOX__InvalidateInsideArea>:
 8012f72:	b513      	push	{r0, r1, r4, lr}
 8012f74:	4604      	mov	r4, r0
 8012f76:	4669      	mov	r1, sp
 8012f78:	f001 fdc4 	bl	8014b04 <WM_GetInsideRectExScrollbar>
 8012f7c:	4620      	mov	r0, r4
 8012f7e:	4669      	mov	r1, sp
 8012f80:	f7f8 fe77 	bl	800bc72 <WM_InvalidateRect>
 8012f84:	b002      	add	sp, #8
 8012f86:	bd10      	pop	{r4, pc}

08012f88 <LISTBOX__InvalidateItem>:
 8012f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f8a:	1e0d      	subs	r5, r1, #0
 8012f8c:	b085      	sub	sp, #20
 8012f8e:	4604      	mov	r4, r0
 8012f90:	db29      	blt.n	8012fe6 <LISTBOX__InvalidateItem+0x5e>
 8012f92:	f7ff fda1 	bl	8012ad8 <_GetItemPosY>
 8012f96:	1e06      	subs	r6, r0, #0
 8012f98:	db25      	blt.n	8012fe6 <LISTBOX__InvalidateItem+0x5e>
 8012f9a:	4620      	mov	r0, r4
 8012f9c:	f7fd fd50 	bl	8010a40 <GUI_ALLOC_LockH>
 8012fa0:	ab04      	add	r3, sp, #16
 8012fa2:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8012fa4:	f843 0d0c 	str.w	r0, [r3, #-12]!
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f7fd fd57 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8012fae:	4639      	mov	r1, r7
 8012fb0:	4620      	mov	r0, r4
 8012fb2:	f7ff fd91 	bl	8012ad8 <_GetItemPosY>
 8012fb6:	4629      	mov	r1, r5
 8012fb8:	1a36      	subs	r6, r6, r0
 8012fba:	4620      	mov	r0, r4
 8012fbc:	f7ff fcbf 	bl	801293e <_GetItemSizeY>
 8012fc0:	a902      	add	r1, sp, #8
 8012fc2:	4605      	mov	r5, r0
 8012fc4:	4620      	mov	r0, r4
 8012fc6:	f001 fd9d 	bl	8014b04 <WM_GetInsideRectExScrollbar>
 8012fca:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8012fce:	4433      	add	r3, r6
 8012fd0:	b29b      	uxth	r3, r3
 8012fd2:	3d01      	subs	r5, #1
 8012fd4:	f8ad 300a 	strh.w	r3, [sp, #10]
 8012fd8:	4620      	mov	r0, r4
 8012fda:	442b      	add	r3, r5
 8012fdc:	a902      	add	r1, sp, #8
 8012fde:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012fe2:	f7f8 fe46 	bl	800bc72 <WM_InvalidateRect>
 8012fe6:	b005      	add	sp, #20
 8012fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012fea <_ToggleMultiSel>:
 8012fea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012fec:	460c      	mov	r4, r1
 8012fee:	4605      	mov	r5, r0
 8012ff0:	f7fd fd26 	bl	8010a40 <GUI_ALLOC_LockH>
 8012ff4:	4602      	mov	r2, r0
 8012ff6:	a802      	add	r0, sp, #8
 8012ff8:	f892 7092 	ldrb.w	r7, [r2, #146]	; 0x92
 8012ffc:	f840 2d08 	str.w	r2, [r0, #-8]!
 8013000:	4668      	mov	r0, sp
 8013002:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8013004:	f7fd fd2a 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8013008:	077a      	lsls	r2, r7, #29
 801300a:	d51d      	bpl.n	8013048 <_ToggleMultiSel+0x5e>
 801300c:	4630      	mov	r0, r6
 801300e:	4621      	mov	r1, r4
 8013010:	f7f5 fbe6 	bl	80087e0 <GUI_ARRAY_GethItem>
 8013014:	b1c0      	cbz	r0, 8013048 <_ToggleMultiSel+0x5e>
 8013016:	f7fd fd13 	bl	8010a40 <GUI_ALLOC_LockH>
 801301a:	4602      	mov	r2, r0
 801301c:	a802      	add	r0, sp, #8
 801301e:	7a11      	ldrb	r1, [r2, #8]
 8013020:	f840 2d04 	str.w	r2, [r0, #-4]!
 8013024:	078b      	lsls	r3, r1, #30
 8013026:	d40d      	bmi.n	8013044 <_ToggleMultiSel+0x5a>
 8013028:	f081 0101 	eor.w	r1, r1, #1
 801302c:	7211      	strb	r1, [r2, #8]
 801302e:	f7fd fd15 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8013032:	4628      	mov	r0, r5
 8013034:	2104      	movs	r1, #4
 8013036:	f7ff fcb8 	bl	80129aa <_NotifyOwner>
 801303a:	4628      	mov	r0, r5
 801303c:	4621      	mov	r1, r4
 801303e:	f7ff ffa3 	bl	8012f88 <LISTBOX__InvalidateItem>
 8013042:	e001      	b.n	8013048 <_ToggleMultiSel+0x5e>
 8013044:	f7fd fd0a 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8013048:	b003      	add	sp, #12
 801304a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801304c <LISTBOX__InvalidateItemAndBelow>:
 801304c:	2900      	cmp	r1, #0
 801304e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013050:	4604      	mov	r4, r0
 8013052:	db10      	blt.n	8013076 <LISTBOX__InvalidateItemAndBelow+0x2a>
 8013054:	f7ff fd40 	bl	8012ad8 <_GetItemPosY>
 8013058:	1e05      	subs	r5, r0, #0
 801305a:	db0c      	blt.n	8013076 <LISTBOX__InvalidateItemAndBelow+0x2a>
 801305c:	4620      	mov	r0, r4
 801305e:	4669      	mov	r1, sp
 8013060:	f001 fd50 	bl	8014b04 <WM_GetInsideRectExScrollbar>
 8013064:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013068:	4620      	mov	r0, r4
 801306a:	441d      	add	r5, r3
 801306c:	4669      	mov	r1, sp
 801306e:	f8ad 5002 	strh.w	r5, [sp, #2]
 8013072:	f7f8 fdfe 	bl	800bc72 <WM_InvalidateRect>
 8013076:	b003      	add	sp, #12
 8013078:	bd30      	pop	{r4, r5, pc}

0801307a <LISTBOX__SetScrollbarWidth>:
 801307a:	b570      	push	{r4, r5, r6, lr}
 801307c:	f891 4093 	ldrb.w	r4, [r1, #147]	; 0x93
 8013080:	4605      	mov	r5, r0
 8013082:	b914      	cbnz	r4, 801308a <LISTBOX__SetScrollbarWidth+0x10>
 8013084:	f005 f846 	bl	8018114 <SCROLLBAR_GetDefaultWidth>
 8013088:	4604      	mov	r4, r0
 801308a:	4628      	mov	r0, r5
 801308c:	21ff      	movs	r1, #255	; 0xff
 801308e:	f7f8 f868 	bl	800b162 <WM_GetDialogItem>
 8013092:	21fe      	movs	r1, #254	; 0xfe
 8013094:	4606      	mov	r6, r0
 8013096:	4628      	mov	r0, r5
 8013098:	f7f8 f863 	bl	800b162 <WM_GetDialogItem>
 801309c:	4621      	mov	r1, r4
 801309e:	4605      	mov	r5, r0
 80130a0:	4630      	mov	r0, r6
 80130a2:	f005 f80c 	bl	80180be <SCROLLBAR_SetWidth>
 80130a6:	4628      	mov	r0, r5
 80130a8:	4621      	mov	r1, r4
 80130aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130ae:	f005 b806 	b.w	80180be <SCROLLBAR_SetWidth>

080130b2 <LISTBOX__SetScrollbarColor>:
 80130b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130b4:	460d      	mov	r5, r1
 80130b6:	21ff      	movs	r1, #255	; 0xff
 80130b8:	4604      	mov	r4, r0
 80130ba:	f7f8 f852 	bl	800b162 <WM_GetDialogItem>
 80130be:	21fe      	movs	r1, #254	; 0xfe
 80130c0:	4606      	mov	r6, r0
 80130c2:	4620      	mov	r0, r4
 80130c4:	f7f8 f84d 	bl	800b162 <WM_GetDialogItem>
 80130c8:	4607      	mov	r7, r0
 80130ca:	b906      	cbnz	r6, 80130ce <LISTBOX__SetScrollbarColor+0x1c>
 80130cc:	b198      	cbz	r0, 80130f6 <LISTBOX__SetScrollbarColor+0x44>
 80130ce:	2400      	movs	r4, #0
 80130d0:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80130d2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80130d6:	429a      	cmp	r2, r3
 80130d8:	d008      	beq.n	80130ec <LISTBOX__SetScrollbarColor+0x3a>
 80130da:	4621      	mov	r1, r4
 80130dc:	4630      	mov	r0, r6
 80130de:	f004 fffb 	bl	80180d8 <SCROLLBAR_SetColor>
 80130e2:	4638      	mov	r0, r7
 80130e4:	4621      	mov	r1, r4
 80130e6:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80130e8:	f004 fff6 	bl	80180d8 <SCROLLBAR_SetColor>
 80130ec:	3401      	adds	r4, #1
 80130ee:	2c03      	cmp	r4, #3
 80130f0:	f105 0504 	add.w	r5, r5, #4
 80130f4:	d1ec      	bne.n	80130d0 <LISTBOX__SetScrollbarColor+0x1e>
 80130f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080130f8 <LISTBOX_UpdateScrollers>:
 80130f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80130fa:	4604      	mov	r4, r0
 80130fc:	f7fd fca0 	bl	8010a40 <GUI_ALLOC_LockH>
 8013100:	ad04      	add	r5, sp, #16
 8013102:	f845 0d0c 	str.w	r0, [r5, #-12]!
 8013106:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
 801310a:	079a      	lsls	r2, r3, #30
 801310c:	d515      	bpl.n	801313a <LISTBOX_UpdateScrollers+0x42>
 801310e:	4620      	mov	r0, r4
 8013110:	f7ff fc6f 	bl	80129f2 <_GetNumVisItems>
 8013114:	4606      	mov	r6, r0
 8013116:	9801      	ldr	r0, [sp, #4]
 8013118:	f7ff fc68 	bl	80129ec <LISTBOX__GetNumItems>
 801311c:	4286      	cmp	r6, r0
 801311e:	bf2c      	ite	cs
 8013120:	2600      	movcs	r6, #0
 8013122:	2601      	movcc	r6, #1
 8013124:	4628      	mov	r0, r5
 8013126:	f7fd fc99 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801312a:	4631      	mov	r1, r6
 801312c:	4620      	mov	r0, r4
 801312e:	f001 fc6a 	bl	8014a06 <WM_SetScrollbarV>
 8013132:	4620      	mov	r0, r4
 8013134:	f7fd fc84 	bl	8010a40 <GUI_ALLOC_LockH>
 8013138:	9001      	str	r0, [sp, #4]
 801313a:	9b01      	ldr	r3, [sp, #4]
 801313c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8013140:	07db      	lsls	r3, r3, #31
 8013142:	d51c      	bpl.n	801317e <LISTBOX_UpdateScrollers+0x86>
 8013144:	4620      	mov	r0, r4
 8013146:	f7ff fc84 	bl	8012a52 <_GetContentsSizeX>
 801314a:	a902      	add	r1, sp, #8
 801314c:	4606      	mov	r6, r0
 801314e:	4620      	mov	r0, r4
 8013150:	f001 fcd8 	bl	8014b04 <WM_GetInsideRectExScrollbar>
 8013154:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8013158:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801315c:	1ad3      	subs	r3, r2, r3
 801315e:	3301      	adds	r3, #1
 8013160:	429e      	cmp	r6, r3
 8013162:	bfd4      	ite	le
 8013164:	2600      	movle	r6, #0
 8013166:	2601      	movgt	r6, #1
 8013168:	4628      	mov	r0, r5
 801316a:	f7fd fc77 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801316e:	4631      	mov	r1, r6
 8013170:	4620      	mov	r0, r4
 8013172:	f001 fc46 	bl	8014a02 <WM_SetScrollbarH>
 8013176:	4620      	mov	r0, r4
 8013178:	f7fd fc62 	bl	8010a40 <GUI_ALLOC_LockH>
 801317c:	9001      	str	r0, [sp, #4]
 801317e:	9901      	ldr	r1, [sp, #4]
 8013180:	f891 3093 	ldrb.w	r3, [r1, #147]	; 0x93
 8013184:	b113      	cbz	r3, 801318c <LISTBOX_UpdateScrollers+0x94>
 8013186:	4620      	mov	r0, r4
 8013188:	f7ff ff77 	bl	801307a <LISTBOX__SetScrollbarWidth>
 801318c:	9901      	ldr	r1, [sp, #4]
 801318e:	4620      	mov	r0, r4
 8013190:	f7ff ff8f 	bl	80130b2 <LISTBOX__SetScrollbarColor>
 8013194:	4628      	mov	r0, r5
 8013196:	f7fd fc61 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801319a:	4620      	mov	r0, r4
 801319c:	f7fd fc50 	bl	8010a40 <GUI_ALLOC_LockH>
 80131a0:	4606      	mov	r6, r0
 80131a2:	9001      	str	r0, [sp, #4]
 80131a4:	f7ff fc22 	bl	80129ec <LISTBOX__GetNumItems>
 80131a8:	63f0      	str	r0, [r6, #60]	; 0x3c
 80131aa:	4620      	mov	r0, r4
 80131ac:	9e01      	ldr	r6, [sp, #4]
 80131ae:	f7ff fc20 	bl	80129f2 <_GetNumVisItems>
 80131b2:	a902      	add	r1, sp, #8
 80131b4:	6470      	str	r0, [r6, #68]	; 0x44
 80131b6:	4620      	mov	r0, r4
 80131b8:	f001 fca4 	bl	8014b04 <WM_GetInsideRectExScrollbar>
 80131bc:	4620      	mov	r0, r4
 80131be:	9e01      	ldr	r6, [sp, #4]
 80131c0:	f7ff fc47 	bl	8012a52 <_GetContentsSizeX>
 80131c4:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80131c8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80131cc:	64b0      	str	r0, [r6, #72]	; 0x48
 80131ce:	1ad2      	subs	r2, r2, r3
 80131d0:	9b01      	ldr	r3, [sp, #4]
 80131d2:	3201      	adds	r2, #1
 80131d4:	651a      	str	r2, [r3, #80]	; 0x50
 80131d6:	4620      	mov	r0, r4
 80131d8:	f7ff fce8 	bl	8012bac <_UpdateScrollPos>
 80131dc:	4604      	mov	r4, r0
 80131de:	4628      	mov	r0, r5
 80131e0:	f7fd fc3c 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80131e4:	4620      	mov	r0, r4
 80131e6:	b004      	add	sp, #16
 80131e8:	bd70      	pop	{r4, r5, r6, pc}

080131ea <LISTBOX__AddSize>:
 80131ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80131ec:	4604      	mov	r4, r0
 80131ee:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80131f0:	f7f5 fb09 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 80131f4:	9001      	str	r0, [sp, #4]
 80131f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80131f8:	f7fc fb08 	bl	800f80c <GUI_SetFont>
 80131fc:	4606      	mov	r6, r0
 80131fe:	9801      	ldr	r0, [sp, #4]
 8013200:	3009      	adds	r0, #9
 8013202:	f7fc fd2b 	bl	800fc5c <GUI_GetStringDistX>
 8013206:	4605      	mov	r5, r0
 8013208:	4630      	mov	r0, r6
 801320a:	f7fc faff 	bl	800f80c <GUI_SetFont>
 801320e:	a802      	add	r0, sp, #8
 8013210:	b2ae      	uxth	r6, r5
 8013212:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8013216:	8016      	strh	r6, [r2, #0]
 8013218:	f7fd fc20 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801321c:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
 8013220:	42ab      	cmp	r3, r5
 8013222:	bfb8      	it	lt
 8013224:	f8a4 6096 	strhlt.w	r6, [r4, #150]	; 0x96
 8013228:	b002      	add	sp, #8
 801322a:	bd70      	pop	{r4, r5, r6, pc}

0801322c <LISTBOX_InvalidateItem>:
 801322c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801322e:	460c      	mov	r4, r1
 8013230:	4605      	mov	r5, r0
 8013232:	2800      	cmp	r0, #0
 8013234:	d043      	beq.n	80132be <LISTBOX_InvalidateItem+0x92>
 8013236:	f7fd fc03 	bl	8010a40 <GUI_ALLOC_LockH>
 801323a:	9001      	str	r0, [sp, #4]
 801323c:	f7ff fbd6 	bl	80129ec <LISTBOX__GetNumItems>
 8013240:	4284      	cmp	r4, r0
 8013242:	4606      	mov	r6, r0
 8013244:	da38      	bge.n	80132b8 <LISTBOX_InvalidateItem+0x8c>
 8013246:	2c00      	cmp	r4, #0
 8013248:	da25      	bge.n	8013296 <LISTBOX_InvalidateItem+0x6a>
 801324a:	2400      	movs	r4, #0
 801324c:	42b4      	cmp	r4, r6
 801324e:	da13      	bge.n	8013278 <LISTBOX_InvalidateItem+0x4c>
 8013250:	4621      	mov	r1, r4
 8013252:	9801      	ldr	r0, [sp, #4]
 8013254:	f7ff fe7e 	bl	8012f54 <LISTBOX__InvalidateItemSize>
 8013258:	9b01      	ldr	r3, [sp, #4]
 801325a:	4621      	mov	r1, r4
 801325c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801325e:	f7f5 fad2 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 8013262:	ab02      	add	r3, sp, #8
 8013264:	f04f 32ff 	mov.w	r2, #4294967295
 8013268:	f843 0d08 	str.w	r0, [r3, #-8]!
 801326c:	6042      	str	r2, [r0, #4]
 801326e:	4668      	mov	r0, sp
 8013270:	f7fd fbf4 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8013274:	3401      	adds	r4, #1
 8013276:	e7e9      	b.n	801324c <LISTBOX_InvalidateItem+0x20>
 8013278:	a802      	add	r0, sp, #8
 801327a:	2200      	movs	r2, #0
 801327c:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8013280:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8013284:	f7fd fbea 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8013288:	4628      	mov	r0, r5
 801328a:	f7ff ff35 	bl	80130f8 <LISTBOX_UpdateScrollers>
 801328e:	4628      	mov	r0, r5
 8013290:	f7ff fe6f 	bl	8012f72 <LISTBOX__InvalidateInsideArea>
 8013294:	e013      	b.n	80132be <LISTBOX_InvalidateItem+0x92>
 8013296:	ae02      	add	r6, sp, #8
 8013298:	4621      	mov	r1, r4
 801329a:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 801329e:	f7ff fe59 	bl	8012f54 <LISTBOX__InvalidateItemSize>
 80132a2:	4630      	mov	r0, r6
 80132a4:	f7fd fbda 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80132a8:	4628      	mov	r0, r5
 80132aa:	f7ff ff25 	bl	80130f8 <LISTBOX_UpdateScrollers>
 80132ae:	4628      	mov	r0, r5
 80132b0:	4621      	mov	r1, r4
 80132b2:	f7ff fecb 	bl	801304c <LISTBOX__InvalidateItemAndBelow>
 80132b6:	e002      	b.n	80132be <LISTBOX_InvalidateItem+0x92>
 80132b8:	a801      	add	r0, sp, #4
 80132ba:	f7fd fbcf 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80132be:	b002      	add	sp, #8
 80132c0:	bd70      	pop	{r4, r5, r6, pc}

080132c2 <LISTBOX_AddString>:
 80132c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132c6:	b086      	sub	sp, #24
 80132c8:	4604      	mov	r4, r0
 80132ca:	460f      	mov	r7, r1
 80132cc:	a803      	add	r0, sp, #12
 80132ce:	2100      	movs	r1, #0
 80132d0:	220c      	movs	r2, #12
 80132d2:	f005 fcca 	bl	8018c6a <memset>
 80132d6:	2c00      	cmp	r4, #0
 80132d8:	d041      	beq.n	801335e <LISTBOX_AddString+0x9c>
 80132da:	2f00      	cmp	r7, #0
 80132dc:	d03f      	beq.n	801335e <LISTBOX_AddString+0x9c>
 80132de:	4620      	mov	r0, r4
 80132e0:	f7fd fbae 	bl	8010a40 <GUI_ALLOC_LockH>
 80132e4:	ae06      	add	r6, sp, #24
 80132e6:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
 80132ea:	f846 0d14 	str.w	r0, [r6, #-20]!
 80132ee:	4630      	mov	r0, r6
 80132f0:	f7fd fbb4 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80132f4:	4638      	mov	r0, r7
 80132f6:	f7ec ff7b 	bl	80001f0 <strlen>
 80132fa:	a903      	add	r1, sp, #12
 80132fc:	f100 020c 	add.w	r2, r0, #12
 8013300:	4640      	mov	r0, r8
 8013302:	f7f5 f9a9 	bl	8008658 <GUI_ARRAY_AddItem>
 8013306:	bb50      	cbnz	r0, 801335e <LISTBOX_AddString+0x9c>
 8013308:	4640      	mov	r0, r8
 801330a:	f7f5 f996 	bl	800863a <GUI_ARRAY_GetNumItems>
 801330e:	1e45      	subs	r5, r0, #1
 8013310:	4629      	mov	r1, r5
 8013312:	4640      	mov	r0, r8
 8013314:	f7f5 fa77 	bl	8008806 <GUI_ARRAY_GetpItemLocked>
 8013318:	f10d 0818 	add.w	r8, sp, #24
 801331c:	f04f 33ff 	mov.w	r3, #4294967295
 8013320:	f848 0d10 	str.w	r0, [r8, #-16]!
 8013324:	6043      	str	r3, [r0, #4]
 8013326:	4639      	mov	r1, r7
 8013328:	3009      	adds	r0, #9
 801332a:	f005 fcb5 	bl	8018c98 <strcpy>
 801332e:	4640      	mov	r0, r8
 8013330:	f7fd fb94 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8013334:	4620      	mov	r0, r4
 8013336:	f7fd fb83 	bl	8010a40 <GUI_ALLOC_LockH>
 801333a:	4629      	mov	r1, r5
 801333c:	9001      	str	r0, [sp, #4]
 801333e:	f7ff fe09 	bl	8012f54 <LISTBOX__InvalidateItemSize>
 8013342:	4629      	mov	r1, r5
 8013344:	9801      	ldr	r0, [sp, #4]
 8013346:	f7ff ff50 	bl	80131ea <LISTBOX__AddSize>
 801334a:	4630      	mov	r0, r6
 801334c:	f7fd fb86 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8013350:	4620      	mov	r0, r4
 8013352:	f7ff fed1 	bl	80130f8 <LISTBOX_UpdateScrollers>
 8013356:	4620      	mov	r0, r4
 8013358:	4629      	mov	r1, r5
 801335a:	f7ff fe15 	bl	8012f88 <LISTBOX__InvalidateItem>
 801335e:	b006      	add	sp, #24
 8013360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013364 <LISTBOX_SetText>:
 8013364:	b538      	push	{r3, r4, r5, lr}
 8013366:	460c      	mov	r4, r1
 8013368:	4605      	mov	r5, r0
 801336a:	b160      	cbz	r0, 8013386 <LISTBOX_SetText+0x22>
 801336c:	f04f 31ff 	mov.w	r1, #4294967295
 8013370:	f7ff ff5c 	bl	801322c <LISTBOX_InvalidateItem>
 8013374:	b13c      	cbz	r4, 8013386 <LISTBOX_SetText+0x22>
 8013376:	3c04      	subs	r4, #4
 8013378:	f854 1f04 	ldr.w	r1, [r4, #4]!
 801337c:	b119      	cbz	r1, 8013386 <LISTBOX_SetText+0x22>
 801337e:	4628      	mov	r0, r5
 8013380:	f7ff ff9f 	bl	80132c2 <LISTBOX_AddString>
 8013384:	e7f8      	b.n	8013378 <LISTBOX_SetText+0x14>
 8013386:	bd38      	pop	{r3, r4, r5, pc}

08013388 <LISTBOX_CreateUser>:
 8013388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801338c:	b086      	sub	sp, #24
 801338e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8013390:	9400      	str	r4, [sp, #0]
 8013392:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8013394:	9401      	str	r4, [sp, #4]
 8013396:	4c20      	ldr	r4, [pc, #128]	; (8013418 <LISTBOX_CreateUser+0x90>)
 8013398:	9402      	str	r4, [sp, #8]
 801339a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801339c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80133a0:	346c      	adds	r4, #108	; 0x6c
 80133a2:	9403      	str	r4, [sp, #12]
 80133a4:	f7f8 fce2 	bl	800bd6c <WM_CreateWindowAsChild>
 80133a8:	4606      	mov	r6, r0
 80133aa:	2800      	cmp	r0, #0
 80133ac:	d02f      	beq.n	801340e <LISTBOX_CreateUser+0x86>
 80133ae:	f7f5 fa3d 	bl	800882c <GUI_ARRAY_Create>
 80133b2:	4604      	mov	r4, r0
 80133b4:	4630      	mov	r0, r6
 80133b6:	b344      	cbz	r4, 801340a <LISTBOX_CreateUser+0x82>
 80133b8:	f7fd fb42 	bl	8010a40 <GUI_ALLOC_LockH>
 80133bc:	4d17      	ldr	r5, [pc, #92]	; (801341c <LISTBOX_CreateUser+0x94>)
 80133be:	6344      	str	r4, [r0, #52]	; 0x34
 80133c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80133c2:	9005      	str	r0, [sp, #20]
 80133c4:	2210      	movs	r2, #16
 80133c6:	f7f3 fedf 	bl	8007188 <WIDGET__Init>
 80133ca:	af06      	add	r7, sp, #24
 80133cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80133ce:	f857 ed04 	ldr.w	lr, [r7, #-4]!
 80133d2:	f10e 0454 	add.w	r4, lr, #84	; 0x54
 80133d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80133d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80133da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80133dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80133de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80133e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80133e4:	4b0e      	ldr	r3, [pc, #56]	; (8013420 <LISTBOX_CreateUser+0x98>)
 80133e6:	e884 0003 	stmia.w	r4, {r0, r1}
 80133ea:	f8ce 3038 	str.w	r3, [lr, #56]	; 0x38
 80133ee:	4638      	mov	r0, r7
 80133f0:	f7fd fb34 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80133f4:	f1b8 0f00 	cmp.w	r8, #0
 80133f8:	d003      	beq.n	8013402 <LISTBOX_CreateUser+0x7a>
 80133fa:	4630      	mov	r0, r6
 80133fc:	4641      	mov	r1, r8
 80133fe:	f7ff ffb1 	bl	8013364 <LISTBOX_SetText>
 8013402:	4630      	mov	r0, r6
 8013404:	f7ff fe78 	bl	80130f8 <LISTBOX_UpdateScrollers>
 8013408:	e001      	b.n	801340e <LISTBOX_CreateUser+0x86>
 801340a:	f7f8 fd59 	bl	800bec0 <WM_DeleteWindow>
 801340e:	4630      	mov	r0, r6
 8013410:	b006      	add	sp, #24
 8013412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013416:	bf00      	nop
 8013418:	080136dd 	.word	0x080136dd
 801341c:	200003c0 	.word	0x200003c0
 8013420:	08012d31 	.word	0x08012d31

08013424 <LISTBOX_CreateEx>:
 8013424:	b510      	push	{r4, lr}
 8013426:	b086      	sub	sp, #24
 8013428:	9c08      	ldr	r4, [sp, #32]
 801342a:	9400      	str	r4, [sp, #0]
 801342c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801342e:	9401      	str	r4, [sp, #4]
 8013430:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013432:	9402      	str	r4, [sp, #8]
 8013434:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8013436:	9403      	str	r4, [sp, #12]
 8013438:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801343a:	9404      	str	r4, [sp, #16]
 801343c:	2400      	movs	r4, #0
 801343e:	9405      	str	r4, [sp, #20]
 8013440:	f7ff ffa2 	bl	8013388 <LISTBOX_CreateUser>
 8013444:	b006      	add	sp, #24
 8013446:	bd10      	pop	{r4, pc}

08013448 <LISTBOX_SetSel>:
 8013448:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801344a:	460c      	mov	r4, r1
 801344c:	4605      	mov	r5, r0
 801344e:	2800      	cmp	r0, #0
 8013450:	d046      	beq.n	80134e0 <LISTBOX_SetSel+0x98>
 8013452:	f7fd faf5 	bl	8010a40 <GUI_ALLOC_LockH>
 8013456:	9000      	str	r0, [sp, #0]
 8013458:	f7ff fac8 	bl	80129ec <LISTBOX__GetNumItems>
 801345c:	b100      	cbz	r0, 8013460 <LISTBOX_SetSel+0x18>
 801345e:	3801      	subs	r0, #1
 8013460:	42a0      	cmp	r0, r4
 8013462:	bfb8      	it	lt
 8013464:	4604      	movlt	r4, r0
 8013466:	2c00      	cmp	r4, #0
 8013468:	db14      	blt.n	8013494 <LISTBOX_SetSel+0x4c>
 801346a:	9b00      	ldr	r3, [sp, #0]
 801346c:	4621      	mov	r1, r4
 801346e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8013470:	f7f5 f9b6 	bl	80087e0 <GUI_ARRAY_GethItem>
 8013474:	b180      	cbz	r0, 8013498 <LISTBOX_SetSel+0x50>
 8013476:	f7fd fae3 	bl	8010a40 <GUI_ALLOC_LockH>
 801347a:	ab02      	add	r3, sp, #8
 801347c:	7a02      	ldrb	r2, [r0, #8]
 801347e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8013482:	f012 0f02 	tst.w	r2, #2
 8013486:	4618      	mov	r0, r3
 8013488:	bf18      	it	ne
 801348a:	f04f 34ff 	movne.w	r4, #4294967295
 801348e:	f7fd fae5 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8013492:	e001      	b.n	8013498 <LISTBOX_SetSel+0x50>
 8013494:	f04f 34ff 	mov.w	r4, #4294967295
 8013498:	a802      	add	r0, sp, #8
 801349a:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 801349e:	f9b3 6090 	ldrsh.w	r6, [r3, #144]	; 0x90
 80134a2:	42b4      	cmp	r4, r6
 80134a4:	d019      	beq.n	80134da <LISTBOX_SetSel+0x92>
 80134a6:	f8a3 4090 	strh.w	r4, [r3, #144]	; 0x90
 80134aa:	4668      	mov	r0, sp
 80134ac:	f7fd fad6 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80134b0:	4628      	mov	r0, r5
 80134b2:	f7ff fb7b 	bl	8012bac <_UpdateScrollPos>
 80134b6:	b118      	cbz	r0, 80134c0 <LISTBOX_SetSel+0x78>
 80134b8:	4628      	mov	r0, r5
 80134ba:	f7ff fd5a 	bl	8012f72 <LISTBOX__InvalidateInsideArea>
 80134be:	e007      	b.n	80134d0 <LISTBOX_SetSel+0x88>
 80134c0:	4628      	mov	r0, r5
 80134c2:	4631      	mov	r1, r6
 80134c4:	f7ff fd60 	bl	8012f88 <LISTBOX__InvalidateItem>
 80134c8:	4628      	mov	r0, r5
 80134ca:	4621      	mov	r1, r4
 80134cc:	f7ff fd5c 	bl	8012f88 <LISTBOX__InvalidateItem>
 80134d0:	4628      	mov	r0, r5
 80134d2:	2104      	movs	r1, #4
 80134d4:	f7ff fa69 	bl	80129aa <_NotifyOwner>
 80134d8:	e002      	b.n	80134e0 <LISTBOX_SetSel+0x98>
 80134da:	4668      	mov	r0, sp
 80134dc:	f7fd fabe 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80134e0:	b002      	add	sp, #8
 80134e2:	bd70      	pop	{r4, r5, r6, pc}

080134e4 <LISTBOX_GetSel>:
 80134e4:	b513      	push	{r0, r1, r4, lr}
 80134e6:	b150      	cbz	r0, 80134fe <LISTBOX_GetSel+0x1a>
 80134e8:	f7fd faaa 	bl	8010a40 <GUI_ALLOC_LockH>
 80134ec:	ab02      	add	r3, sp, #8
 80134ee:	f9b0 4090 	ldrsh.w	r4, [r0, #144]	; 0x90
 80134f2:	f843 0d04 	str.w	r0, [r3, #-4]!
 80134f6:	4618      	mov	r0, r3
 80134f8:	f7fd fab0 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80134fc:	e001      	b.n	8013502 <LISTBOX_GetSel+0x1e>
 80134fe:	f04f 34ff 	mov.w	r4, #4294967295
 8013502:	4620      	mov	r0, r4
 8013504:	b002      	add	sp, #8
 8013506:	bd10      	pop	{r4, pc}

08013508 <_MoveSel>:
 8013508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801350c:	4689      	mov	r9, r1
 801350e:	4605      	mov	r5, r0
 8013510:	f7ff ffe8 	bl	80134e4 <LISTBOX_GetSel>
 8013514:	4604      	mov	r4, r0
 8013516:	4628      	mov	r0, r5
 8013518:	f7fd fa92 	bl	8010a40 <GUI_ALLOC_LockH>
 801351c:	af02      	add	r7, sp, #8
 801351e:	9000      	str	r0, [sp, #0]
 8013520:	f8d0 a034 	ldr.w	sl, [r0, #52]	; 0x34
 8013524:	f7ff fa62 	bl	80129ec <LISTBOX__GetNumItems>
 8013528:	f857 3d08 	ldr.w	r3, [r7, #-8]!
 801352c:	4680      	mov	r8, r0
 801352e:	4668      	mov	r0, sp
 8013530:	f893 b092 	ldrb.w	fp, [r3, #146]	; 0x92
 8013534:	f7fd fa92 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8013538:	f04f 36ff 	mov.w	r6, #4294967295
 801353c:	f01b 0f08 	tst.w	fp, #8
 8013540:	444c      	add	r4, r9
 8013542:	d008      	beq.n	8013556 <_MoveSel+0x4e>
 8013544:	2c00      	cmp	r4, #0
 8013546:	da02      	bge.n	801354e <_MoveSel+0x46>
 8013548:	f108 34ff 	add.w	r4, r8, #4294967295
 801354c:	e007      	b.n	801355e <_MoveSel+0x56>
 801354e:	4544      	cmp	r4, r8
 8013550:	bfa8      	it	ge
 8013552:	2400      	movge	r4, #0
 8013554:	e003      	b.n	801355e <_MoveSel+0x56>
 8013556:	2c00      	cmp	r4, #0
 8013558:	db16      	blt.n	8013588 <_MoveSel+0x80>
 801355a:	4544      	cmp	r4, r8
 801355c:	da14      	bge.n	8013588 <_MoveSel+0x80>
 801355e:	4650      	mov	r0, sl
 8013560:	4621      	mov	r1, r4
 8013562:	f7f5 f93d 	bl	80087e0 <GUI_ARRAY_GethItem>
 8013566:	b160      	cbz	r0, 8013582 <_MoveSel+0x7a>
 8013568:	f7fd fa6a 	bl	8010a40 <GUI_ALLOC_LockH>
 801356c:	ab02      	add	r3, sp, #8
 801356e:	7a02      	ldrb	r2, [r0, #8]
 8013570:	f843 0d04 	str.w	r0, [r3, #-4]!
 8013574:	f012 0f02 	tst.w	r2, #2
 8013578:	4618      	mov	r0, r3
 801357a:	bf08      	it	eq
 801357c:	4626      	moveq	r6, r4
 801357e:	f7fd fa6d 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8013582:	2e00      	cmp	r6, #0
 8013584:	dbda      	blt.n	801353c <_MoveSel+0x34>
 8013586:	e001      	b.n	801358c <_MoveSel+0x84>
 8013588:	2e00      	cmp	r6, #0
 801358a:	db04      	blt.n	8013596 <_MoveSel+0x8e>
 801358c:	4628      	mov	r0, r5
 801358e:	4631      	mov	r1, r6
 8013590:	f7ff ff5a 	bl	8013448 <LISTBOX_SetSel>
 8013594:	e017      	b.n	80135c6 <_MoveSel+0xbe>
 8013596:	4628      	mov	r0, r5
 8013598:	f7fd fa52 	bl	8010a40 <GUI_ALLOC_LockH>
 801359c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 801359e:	9000      	str	r0, [sp, #0]
 80135a0:	eb04 0309 	add.w	r3, r4, r9
 80135a4:	6403      	str	r3, [r0, #64]	; 0x40
 80135a6:	303c      	adds	r0, #60	; 0x3c
 80135a8:	f001 fb3c 	bl	8014c24 <WM_CheckScrollBounds>
 80135ac:	9b00      	ldr	r3, [sp, #0]
 80135ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135b0:	429c      	cmp	r4, r3
 80135b2:	d002      	beq.n	80135ba <_MoveSel+0xb2>
 80135b4:	4628      	mov	r0, r5
 80135b6:	f7ff fcdc 	bl	8012f72 <LISTBOX__InvalidateInsideArea>
 80135ba:	4668      	mov	r0, sp
 80135bc:	f7fd fa4e 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80135c0:	4628      	mov	r0, r5
 80135c2:	f7ff fd99 	bl	80130f8 <LISTBOX_UpdateScrollers>
 80135c6:	b003      	add	sp, #12
 80135c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080135cc <LISTBOX_IncSel>:
 80135cc:	b110      	cbz	r0, 80135d4 <LISTBOX_IncSel+0x8>
 80135ce:	2101      	movs	r1, #1
 80135d0:	f7ff bf9a 	b.w	8013508 <_MoveSel>
 80135d4:	4770      	bx	lr

080135d6 <LISTBOX_DecSel>:
 80135d6:	b118      	cbz	r0, 80135e0 <LISTBOX_DecSel+0xa>
 80135d8:	f04f 31ff 	mov.w	r1, #4294967295
 80135dc:	f7ff bf94 	b.w	8013508 <_MoveSel>
 80135e0:	4770      	bx	lr

080135e2 <LISTBOX_AddKey>:
 80135e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80135e6:	460c      	mov	r4, r1
 80135e8:	4605      	mov	r5, r0
 80135ea:	2800      	cmp	r0, #0
 80135ec:	d049      	beq.n	8013682 <LISTBOX_AddKey+0xa0>
 80135ee:	2912      	cmp	r1, #18
 80135f0:	d012      	beq.n	8013618 <LISTBOX_AddKey+0x36>
 80135f2:	dc06      	bgt.n	8013602 <LISTBOX_AddKey+0x20>
 80135f4:	2910      	cmp	r1, #16
 80135f6:	d028      	beq.n	801364a <LISTBOX_AddKey+0x68>
 80135f8:	2911      	cmp	r1, #17
 80135fa:	d134      	bne.n	8013666 <LISTBOX_AddKey+0x84>
 80135fc:	f7ff ffeb 	bl	80135d6 <LISTBOX_DecSel>
 8013600:	e065      	b.n	80136ce <LISTBOX_AddKey+0xec>
 8013602:	2913      	cmp	r1, #19
 8013604:	d02c      	beq.n	8013660 <LISTBOX_AddKey+0x7e>
 8013606:	2920      	cmp	r1, #32
 8013608:	d12d      	bne.n	8013666 <LISTBOX_AddKey+0x84>
 801360a:	f7ff ff6b 	bl	80134e4 <LISTBOX_GetSel>
 801360e:	4601      	mov	r1, r0
 8013610:	4628      	mov	r0, r5
 8013612:	f7ff fcea 	bl	8012fea <_ToggleMultiSel>
 8013616:	e05a      	b.n	80136ce <LISTBOX_AddKey+0xec>
 8013618:	f7fd fa12 	bl	8010a40 <GUI_ALLOC_LockH>
 801361c:	ac02      	add	r4, sp, #8
 801361e:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8013622:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013624:	f844 0d04 	str.w	r0, [r4, #-4]!
 8013628:	4419      	add	r1, r3
 801362a:	3048      	adds	r0, #72	; 0x48
 801362c:	f001 fb09 	bl	8014c42 <WM_SetScrollValue>
 8013630:	4606      	mov	r6, r0
 8013632:	4620      	mov	r0, r4
 8013634:	f7fd fa12 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8013638:	2e00      	cmp	r6, #0
 801363a:	d048      	beq.n	80136ce <LISTBOX_AddKey+0xec>
 801363c:	4628      	mov	r0, r5
 801363e:	f7ff fd5b 	bl	80130f8 <LISTBOX_UpdateScrollers>
 8013642:	4628      	mov	r0, r5
 8013644:	f7ff fc95 	bl	8012f72 <LISTBOX__InvalidateInsideArea>
 8013648:	e041      	b.n	80136ce <LISTBOX_AddKey+0xec>
 801364a:	f7fd f9f9 	bl	8010a40 <GUI_ALLOC_LockH>
 801364e:	ac02      	add	r4, sp, #8
 8013650:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8013654:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8013656:	f844 0d04 	str.w	r0, [r4, #-4]!
 801365a:	1ac9      	subs	r1, r1, r3
 801365c:	3048      	adds	r0, #72	; 0x48
 801365e:	e7e5      	b.n	801362c <LISTBOX_AddKey+0x4a>
 8013660:	f7ff ffb4 	bl	80135cc <LISTBOX_IncSel>
 8013664:	e033      	b.n	80136ce <LISTBOX_AddKey+0xec>
 8013666:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801366a:	2e19      	cmp	r6, #25
 801366c:	bf94      	ite	ls
 801366e:	f104 0320 	addls.w	r3, r4, #32
 8013672:	4623      	movhi	r3, r4
 8013674:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8013678:	2a19      	cmp	r2, #25
 801367a:	d904      	bls.n	8013686 <LISTBOX_AddKey+0xa4>
 801367c:	3b30      	subs	r3, #48	; 0x30
 801367e:	2b09      	cmp	r3, #9
 8013680:	d901      	bls.n	8013686 <LISTBOX_AddKey+0xa4>
 8013682:	2000      	movs	r0, #0
 8013684:	e027      	b.n	80136d6 <LISTBOX_AddKey+0xf4>
 8013686:	4628      	mov	r0, r5
 8013688:	f7fd f9da 	bl	8010a40 <GUI_ALLOC_LockH>
 801368c:	2e19      	cmp	r6, #25
 801368e:	9000      	str	r0, [sp, #0]
 8013690:	d800      	bhi.n	8013694 <LISTBOX_AddKey+0xb2>
 8013692:	3420      	adds	r4, #32
 8013694:	f7ff f9aa 	bl	80129ec <LISTBOX__GetNumItems>
 8013698:	4680      	mov	r8, r0
 801369a:	4668      	mov	r0, sp
 801369c:	f7fd f9de 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80136a0:	2600      	movs	r6, #0
 80136a2:	4546      	cmp	r6, r8
 80136a4:	da13      	bge.n	80136ce <LISTBOX_AddKey+0xec>
 80136a6:	4631      	mov	r1, r6
 80136a8:	aa01      	add	r2, sp, #4
 80136aa:	4628      	mov	r0, r5
 80136ac:	f7ff fb27 	bl	8012cfe <LISTBOX__GetpStringLocked>
 80136b0:	7807      	ldrb	r7, [r0, #0]
 80136b2:	f1a7 0341 	sub.w	r3, r7, #65	; 0x41
 80136b6:	2b19      	cmp	r3, #25
 80136b8:	bf98      	it	ls
 80136ba:	3720      	addls	r7, #32
 80136bc:	a801      	add	r0, sp, #4
 80136be:	f7fd f9cd 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80136c2:	42a7      	cmp	r7, r4
 80136c4:	d105      	bne.n	80136d2 <LISTBOX_AddKey+0xf0>
 80136c6:	4628      	mov	r0, r5
 80136c8:	4631      	mov	r1, r6
 80136ca:	f7ff febd 	bl	8013448 <LISTBOX_SetSel>
 80136ce:	2001      	movs	r0, #1
 80136d0:	e001      	b.n	80136d6 <LISTBOX_AddKey+0xf4>
 80136d2:	3601      	adds	r6, #1
 80136d4:	e7e5      	b.n	80136a2 <LISTBOX_AddKey+0xc0>
 80136d6:	b002      	add	sp, #8
 80136d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080136dc <LISTBOX_Callback>:
 80136dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136e0:	6844      	ldr	r4, [r0, #4]
 80136e2:	4605      	mov	r5, r0
 80136e4:	b092      	sub	sp, #72	; 0x48
 80136e6:	4620      	mov	r0, r4
 80136e8:	4629      	mov	r1, r5
 80136ea:	f7f3 fd55 	bl	8007198 <WIDGET_HandleActive>
 80136ee:	682b      	ldr	r3, [r5, #0]
 80136f0:	b948      	cbnz	r0, 8013706 <LISTBOX_Callback+0x2a>
 80136f2:	2b1e      	cmp	r3, #30
 80136f4:	f040 815e 	bne.w	80139b4 <LISTBOX_Callback+0x2d8>
 80136f8:	68eb      	ldr	r3, [r5, #12]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	f040 815a 	bne.w	80139b4 <LISTBOX_Callback+0x2d8>
 8013700:	4620      	mov	r0, r4
 8013702:	210b      	movs	r1, #11
 8013704:	e0ec      	b.n	80138e0 <LISTBOX_Callback+0x204>
 8013706:	2b0f      	cmp	r3, #15
 8013708:	d053      	beq.n	80137b2 <LISTBOX_Callback+0xd6>
 801370a:	dc0f      	bgt.n	801372c <LISTBOX_Callback+0x50>
 801370c:	2b0b      	cmp	r3, #11
 801370e:	f000 8118 	beq.w	8013942 <LISTBOX_Callback+0x266>
 8013712:	2b0e      	cmp	r3, #14
 8013714:	f000 8122 	beq.w	801395c <LISTBOX_Callback+0x280>
 8013718:	2b05      	cmp	r3, #5
 801371a:	f040 8148 	bne.w	80139ae <LISTBOX_Callback+0x2d2>
 801371e:	4620      	mov	r0, r4
 8013720:	f7ff fcea 	bl	80130f8 <LISTBOX_UpdateScrollers>
 8013724:	4620      	mov	r0, r4
 8013726:	f7f8 fae0 	bl	800bcea <WM_InvalidateWindow>
 801372a:	e140      	b.n	80139ae <LISTBOX_Callback+0x2d2>
 801372c:	2b11      	cmp	r3, #17
 801372e:	f000 80c2 	beq.w	80138b6 <LISTBOX_Callback+0x1da>
 8013732:	f2c0 80e3 	blt.w	80138fc <LISTBOX_Callback+0x220>
 8013736:	2b26      	cmp	r3, #38	; 0x26
 8013738:	d004      	beq.n	8013744 <LISTBOX_Callback+0x68>
 801373a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801373e:	f000 80d2 	beq.w	80138e6 <LISTBOX_Callback+0x20a>
 8013742:	e134      	b.n	80139ae <LISTBOX_Callback+0x2d2>
 8013744:	68eb      	ldr	r3, [r5, #12]
 8013746:	2b05      	cmp	r3, #5
 8013748:	d006      	beq.n	8013758 <LISTBOX_Callback+0x7c>
 801374a:	2b06      	cmp	r3, #6
 801374c:	f040 812f 	bne.w	80139ae <LISTBOX_Callback+0x2d2>
 8013750:	4620      	mov	r0, r4
 8013752:	f7ff fcd1 	bl	80130f8 <LISTBOX_UpdateScrollers>
 8013756:	e12a      	b.n	80139ae <LISTBOX_Callback+0x2d2>
 8013758:	4620      	mov	r0, r4
 801375a:	68ae      	ldr	r6, [r5, #8]
 801375c:	f001 f9af 	bl	8014abe <WM_GetScrollbarV>
 8013760:	4286      	cmp	r6, r0
 8013762:	d10a      	bne.n	801377a <LISTBOX_Callback+0x9e>
 8013764:	68a8      	ldr	r0, [r5, #8]
 8013766:	a906      	add	r1, sp, #24
 8013768:	f001 f9ae 	bl	8014ac8 <WM_GetScrollState>
 801376c:	4620      	mov	r0, r4
 801376e:	f7fd f967 	bl	8010a40 <GUI_ALLOC_LockH>
 8013772:	9b07      	ldr	r3, [sp, #28]
 8013774:	9004      	str	r0, [sp, #16]
 8013776:	6403      	str	r3, [r0, #64]	; 0x40
 8013778:	e010      	b.n	801379c <LISTBOX_Callback+0xc0>
 801377a:	4620      	mov	r0, r4
 801377c:	68ae      	ldr	r6, [r5, #8]
 801377e:	f001 f999 	bl	8014ab4 <WM_GetScrollbarH>
 8013782:	4286      	cmp	r6, r0
 8013784:	f040 8113 	bne.w	80139ae <LISTBOX_Callback+0x2d2>
 8013788:	68a8      	ldr	r0, [r5, #8]
 801378a:	a906      	add	r1, sp, #24
 801378c:	f001 f99c 	bl	8014ac8 <WM_GetScrollState>
 8013790:	4620      	mov	r0, r4
 8013792:	f7fd f955 	bl	8010a40 <GUI_ALLOC_LockH>
 8013796:	9b07      	ldr	r3, [sp, #28]
 8013798:	9004      	str	r0, [sp, #16]
 801379a:	64c3      	str	r3, [r0, #76]	; 0x4c
 801379c:	a804      	add	r0, sp, #16
 801379e:	f7fd f95d 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80137a2:	4620      	mov	r0, r4
 80137a4:	f7ff fbe5 	bl	8012f72 <LISTBOX__InvalidateInsideArea>
 80137a8:	4620      	mov	r0, r4
 80137aa:	210a      	movs	r1, #10
 80137ac:	f7ff f8fd 	bl	80129aa <_NotifyOwner>
 80137b0:	e0fd      	b.n	80139ae <LISTBOX_Callback+0x2d2>
 80137b2:	4620      	mov	r0, r4
 80137b4:	f7fd f944 	bl	8010a40 <GUI_ALLOC_LockH>
 80137b8:	9001      	str	r0, [sp, #4]
 80137ba:	f8d0 905c 	ldr.w	r9, [r0, #92]	; 0x5c
 80137be:	6b87      	ldr	r7, [r0, #56]	; 0x38
 80137c0:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80137c2:	f7ff f913 	bl	80129ec <LISTBOX__GetNumItems>
 80137c6:	9b01      	ldr	r3, [sp, #4]
 80137c8:	4682      	mov	sl, r0
 80137ca:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80137cc:	f7fc f81e 	bl	800f80c <GUI_SetFont>
 80137d0:	68ea      	ldr	r2, [r5, #12]
 80137d2:	6810      	ldr	r0, [r2, #0]
 80137d4:	6851      	ldr	r1, [r2, #4]
 80137d6:	ab06      	add	r3, sp, #24
 80137d8:	c303      	stmia	r3!, {r0, r1}
 80137da:	9b01      	ldr	r3, [sp, #4]
 80137dc:	f9b3 1000 	ldrsh.w	r1, [r3]
 80137e0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80137e4:	a806      	add	r0, sp, #24
 80137e6:	4252      	negs	r2, r2
 80137e8:	4249      	negs	r1, r1
 80137ea:	f7fc f993 	bl	800fb14 <GUI_MoveRect>
 80137ee:	4620      	mov	r0, r4
 80137f0:	a902      	add	r1, sp, #8
 80137f2:	f001 f987 	bl	8014b04 <WM_GetInsideRectExScrollbar>
 80137f6:	a806      	add	r0, sp, #24
 80137f8:	a902      	add	r1, sp, #8
 80137fa:	f7fb fb59 	bl	800eeb0 <GUI__IntersectRect>
 80137fe:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8013802:	f8ad 3010 	strh.w	r3, [sp, #16]
 8013806:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801380a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801380e:	2301      	movs	r3, #1
 8013810:	930a      	str	r3, [sp, #40]	; 0x28
 8013812:	9b01      	ldr	r3, [sp, #4]
 8013814:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8013818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801381a:	9409      	str	r4, [sp, #36]	; 0x24
 801381c:	1ad3      	subs	r3, r2, r3
 801381e:	930d      	str	r3, [sp, #52]	; 0x34
 8013820:	a801      	add	r0, sp, #4
 8013822:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8013826:	930e      	str	r3, [sp, #56]	; 0x38
 8013828:	f7fd f918 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801382c:	4556      	cmp	r6, sl
 801382e:	da08      	bge.n	8013842 <LISTBOX_Callback+0x166>
 8013830:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8013834:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 8013838:	f8ad 3012 	strh.w	r3, [sp, #18]
 801383c:	b21b      	sxth	r3, r3
 801383e:	429a      	cmp	r2, r3
 8013840:	da14      	bge.n	801386c <LISTBOX_Callback+0x190>
 8013842:	2000      	movs	r0, #0
 8013844:	f7f7 f804 	bl	800a850 <WM_SetUserClipRect>
 8013848:	4620      	mov	r0, r4
 801384a:	f7f7 f82d 	bl	800a8a8 <WM_GetHasTrans>
 801384e:	bb50      	cbnz	r0, 80138a6 <LISTBOX_Callback+0x1ca>
 8013850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013852:	f8ad 3012 	strh.w	r3, [sp, #18]
 8013856:	4648      	mov	r0, r9
 8013858:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801385c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013860:	f7fb f9f4 	bl	800ec4c <LCD_SetBkColor>
 8013864:	a804      	add	r0, sp, #16
 8013866:	f004 f83b 	bl	80178e0 <GUI_ClearRectEx>
 801386a:	e01c      	b.n	80138a6 <LISTBOX_Callback+0x1ca>
 801386c:	4620      	mov	r0, r4
 801386e:	4631      	mov	r1, r6
 8013870:	f7ff f865 	bl	801293e <_GetItemSizeY>
 8013874:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8013878:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 801387c:	3b01      	subs	r3, #1
 801387e:	4403      	add	r3, r0
 8013880:	b29b      	uxth	r3, r3
 8013882:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013886:	b21b      	sxth	r3, r3
 8013888:	429a      	cmp	r2, r3
 801388a:	4680      	mov	r8, r0
 801388c:	dc06      	bgt.n	801389c <LISTBOX_Callback+0x1c0>
 801388e:	a804      	add	r0, sp, #16
 8013890:	f7f6 ffde 	bl	800a850 <WM_SetUserClipRect>
 8013894:	960b      	str	r6, [sp, #44]	; 0x2c
 8013896:	b10f      	cbz	r7, 801389c <LISTBOX_Callback+0x1c0>
 8013898:	a809      	add	r0, sp, #36	; 0x24
 801389a:	47b8      	blx	r7
 801389c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801389e:	4443      	add	r3, r8
 80138a0:	930e      	str	r3, [sp, #56]	; 0x38
 80138a2:	3601      	adds	r6, #1
 80138a4:	e7c2      	b.n	801382c <LISTBOX_Callback+0x150>
 80138a6:	4620      	mov	r0, r4
 80138a8:	f7fd f8ca 	bl	8010a40 <GUI_ALLOC_LockH>
 80138ac:	9001      	str	r0, [sp, #4]
 80138ae:	f7f3 fd6d 	bl	800738c <WIDGET__EFFECT_DrawDown>
 80138b2:	a801      	add	r0, sp, #4
 80138b4:	e04f      	b.n	8013956 <LISTBOX_Callback+0x27a>
 80138b6:	68eb      	ldr	r3, [r5, #12]
 80138b8:	7a1a      	ldrb	r2, [r3, #8]
 80138ba:	2a00      	cmp	r2, #0
 80138bc:	d077      	beq.n	80139ae <LISTBOX_Callback+0x2d2>
 80138be:	4620      	mov	r0, r4
 80138c0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80138c4:	f7ff f9e2 	bl	8012c8c <_GetItemFromPos>
 80138c8:	1e05      	subs	r5, r0, #0
 80138ca:	db73      	blt.n	80139b4 <LISTBOX_Callback+0x2d8>
 80138cc:	4620      	mov	r0, r4
 80138ce:	4629      	mov	r1, r5
 80138d0:	f7ff fb8b 	bl	8012fea <_ToggleMultiSel>
 80138d4:	4620      	mov	r0, r4
 80138d6:	4629      	mov	r1, r5
 80138d8:	f7ff fdb6 	bl	8013448 <LISTBOX_SetSel>
 80138dc:	4620      	mov	r0, r4
 80138de:	2101      	movs	r1, #1
 80138e0:	f7ff f863 	bl	80129aa <_NotifyOwner>
 80138e4:	e066      	b.n	80139b4 <LISTBOX_Callback+0x2d8>
 80138e6:	68eb      	ldr	r3, [r5, #12]
 80138e8:	b12b      	cbz	r3, 80138f6 <LISTBOX_Callback+0x21a>
 80138ea:	7a1b      	ldrb	r3, [r3, #8]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d161      	bne.n	80139b4 <LISTBOX_Callback+0x2d8>
 80138f0:	4620      	mov	r0, r4
 80138f2:	2102      	movs	r1, #2
 80138f4:	e7f4      	b.n	80138e0 <LISTBOX_Callback+0x204>
 80138f6:	4620      	mov	r0, r4
 80138f8:	2103      	movs	r1, #3
 80138fa:	e7f1      	b.n	80138e0 <LISTBOX_Callback+0x204>
 80138fc:	4620      	mov	r0, r4
 80138fe:	68ed      	ldr	r5, [r5, #12]
 8013900:	f7fd f89e 	bl	8010a40 <GUI_ALLOC_LockH>
 8013904:	ab12      	add	r3, sp, #72	; 0x48
 8013906:	f8d0 708c 	ldr.w	r7, [r0, #140]	; 0x8c
 801390a:	f843 0d24 	str.w	r0, [r3, #-36]!
 801390e:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8013910:	4618      	mov	r0, r3
 8013912:	f7fd f8a3 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8013916:	2f00      	cmp	r7, #0
 8013918:	d04c      	beq.n	80139b4 <LISTBOX_Callback+0x2d8>
 801391a:	2d00      	cmp	r5, #0
 801391c:	d04a      	beq.n	80139b4 <LISTBOX_Callback+0x2d8>
 801391e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8013922:	4620      	mov	r0, r4
 8013924:	f7ff f9b2 	bl	8012c8c <_GetItemFromPos>
 8013928:	1e05      	subs	r5, r0, #0
 801392a:	db43      	blt.n	80139b4 <LISTBOX_Callback+0x2d8>
 801392c:	4620      	mov	r0, r4
 801392e:	f7ff f860 	bl	80129f2 <_GetNumVisItems>
 8013932:	4430      	add	r0, r6
 8013934:	4285      	cmp	r5, r0
 8013936:	da3d      	bge.n	80139b4 <LISTBOX_Callback+0x2d8>
 8013938:	4620      	mov	r0, r4
 801393a:	4629      	mov	r1, r5
 801393c:	f7ff fd84 	bl	8013448 <LISTBOX_SetSel>
 8013940:	e038      	b.n	80139b4 <LISTBOX_Callback+0x2d8>
 8013942:	4620      	mov	r0, r4
 8013944:	f7fd f87c 	bl	8010a40 <GUI_ALLOC_LockH>
 8013948:	ac12      	add	r4, sp, #72	; 0x48
 801394a:	f844 0d24 	str.w	r0, [r4, #-36]!
 801394e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8013950:	f7f4 fecc 	bl	80086ec <GUI_ARRAY_Delete>
 8013954:	4620      	mov	r0, r4
 8013956:	f7fd f881 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801395a:	e028      	b.n	80139ae <LISTBOX_Callback+0x2d2>
 801395c:	68eb      	ldr	r3, [r5, #12]
 801395e:	685a      	ldr	r2, [r3, #4]
 8013960:	2a00      	cmp	r2, #0
 8013962:	dc12      	bgt.n	801398a <LISTBOX_Callback+0x2ae>
 8013964:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013968:	ae09      	add	r6, sp, #36	; 0x24
 801396a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 801396e:	2321      	movs	r3, #33	; 0x21
 8013970:	4620      	mov	r0, r4
 8013972:	9309      	str	r3, [sp, #36]	; 0x24
 8013974:	f7fd f864 	bl	8010a40 <GUI_ALLOC_LockH>
 8013978:	f8d0 708c 	ldr.w	r7, [r0, #140]	; 0x8c
 801397c:	9006      	str	r0, [sp, #24]
 801397e:	b957      	cbnz	r7, 8013996 <LISTBOX_Callback+0x2ba>
 8013980:	4620      	mov	r0, r4
 8013982:	f7f7 fb8e 	bl	800b0a2 <WM_GetParent>
 8013986:	4607      	mov	r7, r0
 8013988:	e005      	b.n	8013996 <LISTBOX_Callback+0x2ba>
 801398a:	4620      	mov	r0, r4
 801398c:	6819      	ldr	r1, [r3, #0]
 801398e:	f7ff fe28 	bl	80135e2 <LISTBOX_AddKey>
 8013992:	b978      	cbnz	r0, 80139b4 <LISTBOX_Callback+0x2d8>
 8013994:	e7e6      	b.n	8013964 <LISTBOX_Callback+0x288>
 8013996:	a806      	add	r0, sp, #24
 8013998:	940b      	str	r4, [sp, #44]	; 0x2c
 801399a:	f7fd f85f 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801399e:	4638      	mov	r0, r7
 80139a0:	4631      	mov	r1, r6
 80139a2:	f7f6 fe3d 	bl	800a620 <WM__SendMessage>
 80139a6:	4620      	mov	r0, r4
 80139a8:	f7f7 fad6 	bl	800af58 <WM_IsWindow>
 80139ac:	b110      	cbz	r0, 80139b4 <LISTBOX_Callback+0x2d8>
 80139ae:	4628      	mov	r0, r5
 80139b0:	f7f8 fdca 	bl	800c548 <WM_DefaultProc>
 80139b4:	b012      	add	sp, #72	; 0x48
 80139b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080139bc <FRAMEWIN_DrawSkinFlex>:
 80139bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139c0:	4604      	mov	r4, r0
 80139c2:	b090      	sub	sp, #64	; 0x40
 80139c4:	6800      	ldr	r0, [r0, #0]
 80139c6:	4d9b      	ldr	r5, [pc, #620]	; (8013c34 <FRAMEWIN_DrawSkinFlex+0x278>)
 80139c8:	f000 fa6f 	bl	8013eaa <FRAMEWIN_GetActive>
 80139cc:	4b9a      	ldr	r3, [pc, #616]	; (8013c38 <FRAMEWIN_DrawSkinFlex+0x27c>)
 80139ce:	6866      	ldr	r6, [r4, #4]
 80139d0:	2800      	cmp	r0, #0
 80139d2:	bf18      	it	ne
 80139d4:	461d      	movne	r5, r3
 80139d6:	2e1c      	cmp	r6, #28
 80139d8:	f200 81a6 	bhi.w	8013d28 <FRAMEWIN_DrawSkinFlex+0x36c>
 80139dc:	e8df f016 	tbh	[pc, r6, lsl #1]
 80139e0:	01a40191 	.word	0x01a40191
 80139e4:	01a401a4 	.word	0x01a401a4
 80139e8:	012e01a4 	.word	0x012e01a4
 80139ec:	01a401a4 	.word	0x01a401a4
 80139f0:	01a401a4 	.word	0x01a401a4
 80139f4:	002701a4 	.word	0x002701a4
 80139f8:	01a401a4 	.word	0x01a401a4
 80139fc:	01a4017e 	.word	0x01a4017e
 8013a00:	01a401a4 	.word	0x01a401a4
 8013a04:	01a40145 	.word	0x01a40145
 8013a08:	002301a4 	.word	0x002301a4
 8013a0c:	001f001d 	.word	0x001f001d
 8013a10:	01a40021 	.word	0x01a40021
 8013a14:	01a401a4 	.word	0x01a401a4
 8013a18:	0025      	.short	0x0025
 8013a1a:	69ee      	ldr	r6, [r5, #28]
 8013a1c:	e189      	b.n	8013d32 <FRAMEWIN_DrawSkinFlex+0x376>
 8013a1e:	6a2e      	ldr	r6, [r5, #32]
 8013a20:	e187      	b.n	8013d32 <FRAMEWIN_DrawSkinFlex+0x376>
 8013a22:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8013a24:	e185      	b.n	8013d32 <FRAMEWIN_DrawSkinFlex+0x376>
 8013a26:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8013a28:	e183      	b.n	8013d32 <FRAMEWIN_DrawSkinFlex+0x376>
 8013a2a:	696e      	ldr	r6, [r5, #20]
 8013a2c:	e181      	b.n	8013d32 <FRAMEWIN_DrawSkinFlex+0x376>
 8013a2e:	231c      	movs	r3, #28
 8013a30:	6820      	ldr	r0, [r4, #0]
 8013a32:	9308      	str	r3, [sp, #32]
 8013a34:	9007      	str	r0, [sp, #28]
 8013a36:	f7fd f803 	bl	8010a40 <GUI_ALLOC_LockH>
 8013a3a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8013a3c:	9005      	str	r0, [sp, #20]
 8013a3e:	a807      	add	r0, sp, #28
 8013a40:	4798      	blx	r3
 8013a42:	4606      	mov	r6, r0
 8013a44:	a805      	add	r0, sp, #20
 8013a46:	f7fd f809 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8013a4a:	2e01      	cmp	r6, #1
 8013a4c:	dd11      	ble.n	8013a72 <FRAMEWIN_DrawSkinFlex+0xb6>
 8013a4e:	682b      	ldr	r3, [r5, #0]
 8013a50:	9300      	str	r3, [sp, #0]
 8013a52:	686b      	ldr	r3, [r5, #4]
 8013a54:	9301      	str	r3, [sp, #4]
 8013a56:	68ab      	ldr	r3, [r5, #8]
 8013a58:	9302      	str	r3, [sp, #8]
 8013a5a:	6920      	ldr	r0, [r4, #16]
 8013a5c:	69a1      	ldr	r1, [r4, #24]
 8013a5e:	6962      	ldr	r2, [r4, #20]
 8013a60:	4633      	mov	r3, r6
 8013a62:	f002 fee1 	bl	8016828 <GUI__DrawTwinArc2>
 8013a66:	6923      	ldr	r3, [r4, #16]
 8013a68:	69a7      	ldr	r7, [r4, #24]
 8013a6a:	eb06 0803 	add.w	r8, r6, r3
 8013a6e:	1bbf      	subs	r7, r7, r6
 8013a70:	e02c      	b.n	8013acc <FRAMEWIN_DrawSkinFlex+0x110>
 8013a72:	6828      	ldr	r0, [r5, #0]
 8013a74:	f7fb fef8 	bl	800f868 <GUI_SetColor>
 8013a78:	6921      	ldr	r1, [r4, #16]
 8013a7a:	69ea      	ldr	r2, [r5, #28]
 8013a7c:	6960      	ldr	r0, [r4, #20]
 8013a7e:	440a      	add	r2, r1
 8013a80:	3a01      	subs	r2, #1
 8013a82:	f7fc f97d 	bl	800fd80 <GUI_DrawHLine>
 8013a86:	69a2      	ldr	r2, [r4, #24]
 8013a88:	69e9      	ldr	r1, [r5, #28]
 8013a8a:	6960      	ldr	r0, [r4, #20]
 8013a8c:	1a51      	subs	r1, r2, r1
 8013a8e:	3101      	adds	r1, #1
 8013a90:	f7fc f976 	bl	800fd80 <GUI_DrawHLine>
 8013a94:	6967      	ldr	r7, [r4, #20]
 8013a96:	6920      	ldr	r0, [r4, #16]
 8013a98:	3701      	adds	r7, #1
 8013a9a:	4639      	mov	r1, r7
 8013a9c:	f003 fbca 	bl	8017234 <GUI_DrawPixel>
 8013aa0:	4639      	mov	r1, r7
 8013aa2:	69a0      	ldr	r0, [r4, #24]
 8013aa4:	f003 fbc6 	bl	8017234 <GUI_DrawPixel>
 8013aa8:	6868      	ldr	r0, [r5, #4]
 8013aaa:	f7fb fedd 	bl	800f868 <GUI_SetColor>
 8013aae:	6920      	ldr	r0, [r4, #16]
 8013ab0:	4639      	mov	r1, r7
 8013ab2:	3001      	adds	r0, #1
 8013ab4:	f003 fbbe 	bl	8017234 <GUI_DrawPixel>
 8013ab8:	69a0      	ldr	r0, [r4, #24]
 8013aba:	4639      	mov	r1, r7
 8013abc:	3801      	subs	r0, #1
 8013abe:	f003 fbb9 	bl	8017234 <GUI_DrawPixel>
 8013ac2:	6923      	ldr	r3, [r4, #16]
 8013ac4:	69a7      	ldr	r7, [r4, #24]
 8013ac6:	f103 0802 	add.w	r8, r3, #2
 8013aca:	3f02      	subs	r7, #2
 8013acc:	6828      	ldr	r0, [r5, #0]
 8013ace:	f7fb fecb 	bl	800f868 <GUI_SetColor>
 8013ad2:	4641      	mov	r1, r8
 8013ad4:	463a      	mov	r2, r7
 8013ad6:	6960      	ldr	r0, [r4, #20]
 8013ad8:	f7fc f952 	bl	800fd80 <GUI_DrawHLine>
 8013adc:	6868      	ldr	r0, [r5, #4]
 8013ade:	f7fb fec3 	bl	800f868 <GUI_SetColor>
 8013ae2:	6960      	ldr	r0, [r4, #20]
 8013ae4:	4641      	mov	r1, r8
 8013ae6:	3001      	adds	r0, #1
 8013ae8:	463a      	mov	r2, r7
 8013aea:	f7fc f949 	bl	800fd80 <GUI_DrawHLine>
 8013aee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013af0:	2b02      	cmp	r3, #2
 8013af2:	dd0a      	ble.n	8013b0a <FRAMEWIN_DrawSkinFlex+0x14e>
 8013af4:	68a8      	ldr	r0, [r5, #8]
 8013af6:	f7fb feb7 	bl	800f868 <GUI_SetColor>
 8013afa:	6961      	ldr	r1, [r4, #20]
 8013afc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013afe:	440b      	add	r3, r1
 8013b00:	4640      	mov	r0, r8
 8013b02:	3102      	adds	r1, #2
 8013b04:	463a      	mov	r2, r7
 8013b06:	3b01      	subs	r3, #1
 8013b08:	e01d      	b.n	8013b46 <FRAMEWIN_DrawSkinFlex+0x18a>
 8013b0a:	6a2a      	ldr	r2, [r5, #32]
 8013b0c:	42b2      	cmp	r2, r6
 8013b0e:	dd1c      	ble.n	8013b4a <FRAMEWIN_DrawSkinFlex+0x18e>
 8013b10:	6967      	ldr	r7, [r4, #20]
 8013b12:	6923      	ldr	r3, [r4, #16]
 8013b14:	2e01      	cmp	r6, #1
 8013b16:	f107 0802 	add.w	r8, r7, #2
 8013b1a:	f340 8107 	ble.w	8013d2c <FRAMEWIN_DrawSkinFlex+0x370>
 8013b1e:	4437      	add	r7, r6
 8013b20:	18f0      	adds	r0, r6, r3
 8013b22:	441a      	add	r2, r3
 8013b24:	3a01      	subs	r2, #1
 8013b26:	4641      	mov	r1, r8
 8013b28:	463b      	mov	r3, r7
 8013b2a:	f7fc f8c1 	bl	800fcb0 <GUI_FillRect>
 8013b2e:	69a3      	ldr	r3, [r4, #24]
 8013b30:	69e8      	ldr	r0, [r5, #28]
 8013b32:	2e01      	cmp	r6, #1
 8013b34:	ebc0 0003 	rsb	r0, r0, r3
 8013b38:	bfcc      	ite	gt
 8013b3a:	ebc6 0203 	rsbgt	r2, r6, r3
 8013b3e:	1e9a      	suble	r2, r3, #2
 8013b40:	3001      	adds	r0, #1
 8013b42:	4641      	mov	r1, r8
 8013b44:	463b      	mov	r3, r7
 8013b46:	f7fc f8b3 	bl	800fcb0 <GUI_FillRect>
 8013b4a:	6963      	ldr	r3, [r4, #20]
 8013b4c:	69e7      	ldr	r7, [r4, #28]
 8013b4e:	6828      	ldr	r0, [r5, #0]
 8013b50:	2e01      	cmp	r6, #1
 8013b52:	bfcc      	ite	gt
 8013b54:	18f6      	addgt	r6, r6, r3
 8013b56:	1c9e      	addle	r6, r3, #2
 8013b58:	3f01      	subs	r7, #1
 8013b5a:	f7fb fe85 	bl	800f868 <GUI_SetColor>
 8013b5e:	463a      	mov	r2, r7
 8013b60:	6920      	ldr	r0, [r4, #16]
 8013b62:	4631      	mov	r1, r6
 8013b64:	f7fc f8ea 	bl	800fd3c <GUI_DrawVLine>
 8013b68:	463a      	mov	r2, r7
 8013b6a:	4631      	mov	r1, r6
 8013b6c:	69a0      	ldr	r0, [r4, #24]
 8013b6e:	f7fc f8e5 	bl	800fd3c <GUI_DrawVLine>
 8013b72:	69e7      	ldr	r7, [r4, #28]
 8013b74:	6868      	ldr	r0, [r5, #4]
 8013b76:	f7fb fe77 	bl	800f868 <GUI_SetColor>
 8013b7a:	6920      	ldr	r0, [r4, #16]
 8013b7c:	3f02      	subs	r7, #2
 8013b7e:	3001      	adds	r0, #1
 8013b80:	4631      	mov	r1, r6
 8013b82:	463a      	mov	r2, r7
 8013b84:	f7fc f8da 	bl	800fd3c <GUI_DrawVLine>
 8013b88:	69a0      	ldr	r0, [r4, #24]
 8013b8a:	4631      	mov	r1, r6
 8013b8c:	3801      	subs	r0, #1
 8013b8e:	463a      	mov	r2, r7
 8013b90:	f7fc f8d4 	bl	800fd3c <GUI_DrawVLine>
 8013b94:	69eb      	ldr	r3, [r5, #28]
 8013b96:	2b02      	cmp	r3, #2
 8013b98:	dc02      	bgt.n	8013ba0 <FRAMEWIN_DrawSkinFlex+0x1e4>
 8013b9a:	6a2b      	ldr	r3, [r5, #32]
 8013b9c:	2b02      	cmp	r3, #2
 8013b9e:	dd20      	ble.n	8013be2 <FRAMEWIN_DrawSkinFlex+0x226>
 8013ba0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8013ba2:	69e7      	ldr	r7, [r4, #28]
 8013ba4:	68a8      	ldr	r0, [r5, #8]
 8013ba6:	2b02      	cmp	r3, #2
 8013ba8:	bfcc      	ite	gt
 8013baa:	ebc3 0707 	rsbgt	r7, r3, r7
 8013bae:	3f02      	suble	r7, #2
 8013bb0:	f7fb fe5a 	bl	800f868 <GUI_SetColor>
 8013bb4:	69ea      	ldr	r2, [r5, #28]
 8013bb6:	2a02      	cmp	r2, #2
 8013bb8:	dd07      	ble.n	8013bca <FRAMEWIN_DrawSkinFlex+0x20e>
 8013bba:	6920      	ldr	r0, [r4, #16]
 8013bbc:	4402      	add	r2, r0
 8013bbe:	4631      	mov	r1, r6
 8013bc0:	3002      	adds	r0, #2
 8013bc2:	3a01      	subs	r2, #1
 8013bc4:	463b      	mov	r3, r7
 8013bc6:	f7fc f873 	bl	800fcb0 <GUI_FillRect>
 8013bca:	6a2b      	ldr	r3, [r5, #32]
 8013bcc:	2b02      	cmp	r3, #2
 8013bce:	dd08      	ble.n	8013be2 <FRAMEWIN_DrawSkinFlex+0x226>
 8013bd0:	69a2      	ldr	r2, [r4, #24]
 8013bd2:	69e8      	ldr	r0, [r5, #28]
 8013bd4:	1a10      	subs	r0, r2, r0
 8013bd6:	3001      	adds	r0, #1
 8013bd8:	4631      	mov	r1, r6
 8013bda:	3a02      	subs	r2, #2
 8013bdc:	463b      	mov	r3, r7
 8013bde:	f7fc f867 	bl	800fcb0 <GUI_FillRect>
 8013be2:	6828      	ldr	r0, [r5, #0]
 8013be4:	f7fb fe40 	bl	800f868 <GUI_SetColor>
 8013be8:	6921      	ldr	r1, [r4, #16]
 8013bea:	69a2      	ldr	r2, [r4, #24]
 8013bec:	69e0      	ldr	r0, [r4, #28]
 8013bee:	f7fc f8c7 	bl	800fd80 <GUI_DrawHLine>
 8013bf2:	6868      	ldr	r0, [r5, #4]
 8013bf4:	f7fb fe38 	bl	800f868 <GUI_SetColor>
 8013bf8:	69e0      	ldr	r0, [r4, #28]
 8013bfa:	6921      	ldr	r1, [r4, #16]
 8013bfc:	69a2      	ldr	r2, [r4, #24]
 8013bfe:	3801      	subs	r0, #1
 8013c00:	3101      	adds	r1, #1
 8013c02:	3a01      	subs	r2, #1
 8013c04:	f7fc f8bc 	bl	800fd80 <GUI_DrawHLine>
 8013c08:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8013c0a:	2e02      	cmp	r6, #2
 8013c0c:	f340 808c 	ble.w	8013d28 <FRAMEWIN_DrawSkinFlex+0x36c>
 8013c10:	6920      	ldr	r0, [r4, #16]
 8013c12:	69a2      	ldr	r2, [r4, #24]
 8013c14:	69e4      	ldr	r4, [r4, #28]
 8013c16:	f100 0802 	add.w	r8, r0, #2
 8013c1a:	68a8      	ldr	r0, [r5, #8]
 8013c1c:	1e97      	subs	r7, r2, #2
 8013c1e:	f7fb fe23 	bl	800f868 <GUI_SetColor>
 8013c22:	1ba1      	subs	r1, r4, r6
 8013c24:	4640      	mov	r0, r8
 8013c26:	3101      	adds	r1, #1
 8013c28:	463a      	mov	r2, r7
 8013c2a:	1ea3      	subs	r3, r4, #2
 8013c2c:	f7fc f840 	bl	800fcb0 <GUI_FillRect>
 8013c30:	e07a      	b.n	8013d28 <FRAMEWIN_DrawSkinFlex+0x36c>
 8013c32:	bf00      	nop
 8013c34:	20000424 	.word	0x20000424
 8013c38:	200003f8 	.word	0x200003f8
 8013c3c:	8a20      	ldrh	r0, [r4, #16]
 8013c3e:	8aa1      	ldrh	r1, [r4, #20]
 8013c40:	8b22      	ldrh	r2, [r4, #24]
 8013c42:	8ba3      	ldrh	r3, [r4, #28]
 8013c44:	68ec      	ldr	r4, [r5, #12]
 8013c46:	9400      	str	r4, [sp, #0]
 8013c48:	692c      	ldr	r4, [r5, #16]
 8013c4a:	f8ad 001c 	strh.w	r0, [sp, #28]
 8013c4e:	f8ad 101e 	strh.w	r1, [sp, #30]
 8013c52:	f8ad 2020 	strh.w	r2, [sp, #32]
 8013c56:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013c5a:	9401      	str	r4, [sp, #4]
 8013c5c:	b200      	sxth	r0, r0
 8013c5e:	b209      	sxth	r1, r1
 8013c60:	b212      	sxth	r2, r2
 8013c62:	b21b      	sxth	r3, r3
 8013c64:	f003 fbf6 	bl	8017454 <GUI_DrawGradientV>
 8013c68:	e05e      	b.n	8013d28 <FRAMEWIN_DrawSkinFlex+0x36c>
 8013c6a:	8b2b      	ldrh	r3, [r5, #24]
 8013c6c:	6922      	ldr	r2, [r4, #16]
 8013c6e:	6820      	ldr	r0, [r4, #0]
 8013c70:	441a      	add	r2, r3
 8013c72:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013c76:	6962      	ldr	r2, [r4, #20]
 8013c78:	f8ad 201e 	strh.w	r2, [sp, #30]
 8013c7c:	69a2      	ldr	r2, [r4, #24]
 8013c7e:	1ad3      	subs	r3, r2, r3
 8013c80:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013c84:	69e3      	ldr	r3, [r4, #28]
 8013c86:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013c8a:	f7fc fed9 	bl	8010a40 <GUI_ALLOC_LockH>
 8013c8e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8013c90:	9005      	str	r0, [sp, #20]
 8013c92:	b1fb      	cbz	r3, 8013cd4 <FRAMEWIN_DrawSkinFlex+0x318>
 8013c94:	2002      	movs	r0, #2
 8013c96:	f7fb fdaf 	bl	800f7f8 <GUI_SetTextMode>
 8013c9a:	9b05      	ldr	r3, [sp, #20]
 8013c9c:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 8013ca0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8013ca4:	320e      	adds	r2, #14
 8013ca6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013caa:	6898      	ldr	r0, [r3, #8]
 8013cac:	f7fb fddc 	bl	800f868 <GUI_SetColor>
 8013cb0:	9b05      	ldr	r3, [sp, #20]
 8013cb2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8013cb4:	f7fb fdaa 	bl	800f80c <GUI_SetFont>
 8013cb8:	9b05      	ldr	r3, [sp, #20]
 8013cba:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8013cbc:	f7fc fec0 	bl	8010a40 <GUI_ALLOC_LockH>
 8013cc0:	9b05      	ldr	r3, [sp, #20]
 8013cc2:	9006      	str	r0, [sp, #24]
 8013cc4:	a907      	add	r1, sp, #28
 8013cc6:	f9b3 205a 	ldrsh.w	r2, [r3, #90]	; 0x5a
 8013cca:	f003 fd44 	bl	8017756 <GUI_DispStringInRect>
 8013cce:	a806      	add	r0, sp, #24
 8013cd0:	f7fc fec4 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8013cd4:	a805      	add	r0, sp, #20
 8013cd6:	f7fc fec1 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8013cda:	e025      	b.n	8013d28 <FRAMEWIN_DrawSkinFlex+0x36c>
 8013cdc:	6923      	ldr	r3, [r4, #16]
 8013cde:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013ce2:	6963      	ldr	r3, [r4, #20]
 8013ce4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013ce8:	69a3      	ldr	r3, [r4, #24]
 8013cea:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013cee:	68a8      	ldr	r0, [r5, #8]
 8013cf0:	69e3      	ldr	r3, [r4, #28]
 8013cf2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013cf6:	f7fb fdb7 	bl	800f868 <GUI_SetColor>
 8013cfa:	a807      	add	r0, sp, #28
 8013cfc:	f7fb ffcc 	bl	800fc98 <GUI_FillRectEx>
 8013d00:	e012      	b.n	8013d28 <FRAMEWIN_DrawSkinFlex+0x36c>
 8013d02:	6820      	ldr	r0, [r4, #0]
 8013d04:	f7fc fe9c 	bl	8010a40 <GUI_ALLOC_LockH>
 8013d08:	ab10      	add	r3, sp, #64	; 0x40
 8013d0a:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 8013d0e:	f843 0d2c 	str.w	r0, [r3, #-44]!
 8013d12:	f042 020c 	orr.w	r2, r2, #12
 8013d16:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	f7fc fe9e 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8013d20:	6820      	ldr	r0, [r4, #0]
 8013d22:	f7f6 fda1 	bl	800a868 <WM_SetHasTrans>
 8013d26:	e004      	b.n	8013d32 <FRAMEWIN_DrawSkinFlex+0x376>
 8013d28:	2600      	movs	r6, #0
 8013d2a:	e002      	b.n	8013d32 <FRAMEWIN_DrawSkinFlex+0x376>
 8013d2c:	1c98      	adds	r0, r3, #2
 8013d2e:	4647      	mov	r7, r8
 8013d30:	e6f7      	b.n	8013b22 <FRAMEWIN_DrawSkinFlex+0x166>
 8013d32:	4630      	mov	r0, r6
 8013d34:	b010      	add	sp, #64	; 0x40
 8013d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d3a:	bf00      	nop

08013d3c <_GetBorderSize>:
 8013d3c:	b570      	push	{r4, r5, r6, lr}
 8013d3e:	b08a      	sub	sp, #40	; 0x28
 8013d40:	4605      	mov	r5, r0
 8013d42:	460c      	mov	r4, r1
 8013d44:	f7fc fe7c 	bl	8010a40 <GUI_ALLOC_LockH>
 8013d48:	ab0a      	add	r3, sp, #40	; 0x28
 8013d4a:	6d06      	ldr	r6, [r0, #80]	; 0x50
 8013d4c:	f843 0d28 	str.w	r0, [r3, #-40]!
 8013d50:	4668      	mov	r0, sp
 8013d52:	f7fc fe83 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8013d56:	9501      	str	r5, [sp, #4]
 8013d58:	2c03      	cmp	r4, #3
 8013d5a:	d80b      	bhi.n	8013d74 <_GetBorderSize+0x38>
 8013d5c:	e8df f004 	tbb	[pc, r4]
 8013d60:	08060402 	.word	0x08060402
 8013d64:	2318      	movs	r3, #24
 8013d66:	e004      	b.n	8013d72 <_GetBorderSize+0x36>
 8013d68:	2316      	movs	r3, #22
 8013d6a:	e002      	b.n	8013d72 <_GetBorderSize+0x36>
 8013d6c:	2315      	movs	r3, #21
 8013d6e:	e000      	b.n	8013d72 <_GetBorderSize+0x36>
 8013d70:	2317      	movs	r3, #23
 8013d72:	9302      	str	r3, [sp, #8]
 8013d74:	a801      	add	r0, sp, #4
 8013d76:	47b0      	blx	r6
 8013d78:	b00a      	add	sp, #40	; 0x28
 8013d7a:	bd70      	pop	{r4, r5, r6, pc}

08013d7c <_Create>:
 8013d7c:	b530      	push	{r4, r5, lr}
 8013d7e:	b08b      	sub	sp, #44	; 0x2c
 8013d80:	4605      	mov	r5, r0
 8013d82:	f7fc fe5d 	bl	8010a40 <GUI_ALLOC_LockH>
 8013d86:	ab0a      	add	r3, sp, #40	; 0x28
 8013d88:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8013d8a:	f843 0d28 	str.w	r0, [r3, #-40]!
 8013d8e:	4668      	mov	r0, sp
 8013d90:	6894      	ldr	r4, [r2, #8]
 8013d92:	f7fc fe63 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8013d96:	a80a      	add	r0, sp, #40	; 0x28
 8013d98:	2300      	movs	r3, #0
 8013d9a:	9302      	str	r3, [sp, #8]
 8013d9c:	f840 5d24 	str.w	r5, [r0, #-36]!
 8013da0:	6863      	ldr	r3, [r4, #4]
 8013da2:	4798      	blx	r3
 8013da4:	b00b      	add	sp, #44	; 0x2c
 8013da6:	bd30      	pop	{r4, r5, pc}

08013da8 <_Paint>:
 8013da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dac:	b091      	sub	sp, #68	; 0x44
 8013dae:	4604      	mov	r4, r0
 8013db0:	f7fc fe46 	bl	8010a40 <GUI_ALLOC_LockH>
 8013db4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8013db6:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8013db8:	9603      	str	r6, [sp, #12]
 8013dba:	9006      	str	r0, [sp, #24]
 8013dbc:	689e      	ldr	r6, [r3, #8]
 8013dbe:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8013dc0:	f7f4 fe9d 	bl	8008afe <FRAMEWIN__CalcTitleHeight>
 8013dc4:	4683      	mov	fp, r0
 8013dc6:	a810      	add	r0, sp, #64	; 0x40
 8013dc8:	f850 2d28 	ldr.w	r2, [r0, #-40]!
 8013dcc:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 8013dd0:	9204      	str	r2, [sp, #16]
 8013dd2:	f7fc fe43 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8013dd6:	4620      	mov	r0, r4
 8013dd8:	f7f7 f91a 	bl	800b010 <WM_GetWindowSizeX>
 8013ddc:	4681      	mov	r9, r0
 8013dde:	4620      	mov	r0, r4
 8013de0:	f7f7 f92b 	bl	800b03a <WM_GetWindowSizeY>
 8013de4:	6832      	ldr	r2, [r6, #0]
 8013de6:	2101      	movs	r1, #1
 8013de8:	4680      	mov	r8, r0
 8013dea:	4620      	mov	r0, r4
 8013dec:	4790      	blx	r2
 8013dee:	6832      	ldr	r2, [r6, #0]
 8013df0:	2103      	movs	r1, #3
 8013df2:	4607      	mov	r7, r0
 8013df4:	4620      	mov	r0, r4
 8013df6:	4790      	blx	r2
 8013df8:	6832      	ldr	r2, [r6, #0]
 8013dfa:	2100      	movs	r1, #0
 8013dfc:	4682      	mov	sl, r0
 8013dfe:	4620      	mov	r0, r4
 8013e00:	4790      	blx	r2
 8013e02:	6833      	ldr	r3, [r6, #0]
 8013e04:	9002      	str	r0, [sp, #8]
 8013e06:	2102      	movs	r1, #2
 8013e08:	4620      	mov	r0, r4
 8013e0a:	4798      	blx	r3
 8013e0c:	9005      	str	r0, [sp, #20]
 8013e0e:	2000      	movs	r0, #0
 8013e10:	9407      	str	r4, [sp, #28]
 8013e12:	f7f8 f9a5 	bl	800c160 <WM__InitIVRSearch>
 8013e16:	2800      	cmp	r0, #0
 8013e18:	d044      	beq.n	8013ea4 <_Paint+0xfc>
 8013e1a:	2300      	movs	r3, #0
 8013e1c:	930c      	str	r3, [sp, #48]	; 0x30
 8013e1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013e20:	f109 33ff 	add.w	r3, r9, #4294967295
 8013e24:	930d      	str	r3, [sp, #52]	; 0x34
 8013e26:	f108 33ff 	add.w	r3, r8, #4294967295
 8013e2a:	930e      	str	r3, [sp, #56]	; 0x38
 8013e2c:	230b      	movs	r3, #11
 8013e2e:	9308      	str	r3, [sp, #32]
 8013e30:	a807      	add	r0, sp, #28
 8013e32:	47a8      	blx	r5
 8013e34:	9b02      	ldr	r3, [sp, #8]
 8013e36:	9e04      	ldr	r6, [sp, #16]
 8013e38:	970b      	str	r7, [sp, #44]	; 0x2c
 8013e3a:	445b      	add	r3, fp
 8013e3c:	fa03 f086 	sxtah	r0, r3, r6
 8013e40:	9e05      	ldr	r6, [sp, #20]
 8013e42:	930c      	str	r3, [sp, #48]	; 0x30
 8013e44:	ebc6 0108 	rsb	r1, r6, r8
 8013e48:	ebca 0209 	rsb	r2, sl, r9
 8013e4c:	3801      	subs	r0, #1
 8013e4e:	3901      	subs	r1, #1
 8013e50:	3a01      	subs	r2, #1
 8013e52:	4288      	cmp	r0, r1
 8013e54:	bfd4      	ite	le
 8013e56:	900e      	strle	r0, [sp, #56]	; 0x38
 8013e58:	910e      	strgt	r1, [sp, #56]	; 0x38
 8013e5a:	210e      	movs	r1, #14
 8013e5c:	9108      	str	r1, [sp, #32]
 8013e5e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8013e62:	920d      	str	r2, [sp, #52]	; 0x34
 8013e64:	a807      	add	r0, sp, #28
 8013e66:	47a8      	blx	r5
 8013e68:	9b01      	ldr	r3, [sp, #4]
 8013e6a:	9a00      	ldr	r2, [sp, #0]
 8013e6c:	9e02      	ldr	r6, [sp, #8]
 8013e6e:	920d      	str	r2, [sp, #52]	; 0x34
 8013e70:	3b01      	subs	r3, #1
 8013e72:	930e      	str	r3, [sp, #56]	; 0x38
 8013e74:	2305      	movs	r3, #5
 8013e76:	9308      	str	r3, [sp, #32]
 8013e78:	970b      	str	r7, [sp, #44]	; 0x2c
 8013e7a:	960c      	str	r6, [sp, #48]	; 0x30
 8013e7c:	a807      	add	r0, sp, #28
 8013e7e:	47a8      	blx	r5
 8013e80:	a90b      	add	r1, sp, #44	; 0x2c
 8013e82:	aa0d      	add	r2, sp, #52	; 0x34
 8013e84:	4620      	mov	r0, r4
 8013e86:	f7f4 fe49 	bl	8008b1c <FRAMEWIN__GetTitleLimits>
 8013e8a:	2002      	movs	r0, #2
 8013e8c:	f7fb fcb4 	bl	800f7f8 <GUI_SetTextMode>
 8013e90:	9803      	ldr	r0, [sp, #12]
 8013e92:	f7fb fcbb 	bl	800f80c <GUI_SetFont>
 8013e96:	2312      	movs	r3, #18
 8013e98:	9308      	str	r3, [sp, #32]
 8013e9a:	a807      	add	r0, sp, #28
 8013e9c:	47a8      	blx	r5
 8013e9e:	f7f8 f89d 	bl	800bfdc <WM__GetNextIVR>
 8013ea2:	e7b8      	b.n	8013e16 <_Paint+0x6e>
 8013ea4:	b011      	add	sp, #68	; 0x44
 8013ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013eaa <FRAMEWIN_GetActive>:
 8013eaa:	b513      	push	{r0, r1, r4, lr}
 8013eac:	4604      	mov	r4, r0
 8013eae:	b158      	cbz	r0, 8013ec8 <FRAMEWIN_GetActive+0x1e>
 8013eb0:	f7fc fdc6 	bl	8010a40 <GUI_ALLOC_LockH>
 8013eb4:	ab02      	add	r3, sp, #8
 8013eb6:	f8b0 407c 	ldrh.w	r4, [r0, #124]	; 0x7c
 8013eba:	f843 0d04 	str.w	r0, [r3, #-4]!
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 8013ec4:	f7fc fdca 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8013ec8:	4620      	mov	r0, r4
 8013eca:	b002      	add	sp, #8
 8013ecc:	bd10      	pop	{r4, pc}
	...

08013ed0 <DROPDOWN_DrawSkinFlex>:
 8013ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ed4:	4604      	mov	r4, r0
 8013ed6:	b088      	sub	sp, #32
 8013ed8:	6800      	ldr	r0, [r0, #0]
 8013eda:	f7fc fdb1 	bl	8010a40 <GUI_ALLOC_LockH>
 8013ede:	ab08      	add	r3, sp, #32
 8013ee0:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
 8013ee4:	f843 0d10 	str.w	r0, [r3, #-16]!
 8013ee8:	8e46      	ldrh	r6, [r0, #50]	; 0x32
 8013eea:	4618      	mov	r0, r3
 8013eec:	f7fc fdb6 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8013ef0:	6820      	ldr	r0, [r4, #0]
 8013ef2:	f7f6 fbbc 	bl	800a66e <WM__IsEnabled>
 8013ef6:	b935      	cbnz	r5, 8013f06 <DROPDOWN_DrawSkinFlex+0x36>
 8013ef8:	07f3      	lsls	r3, r6, #31
 8013efa:	d406      	bmi.n	8013f0a <DROPDOWN_DrawSkinFlex+0x3a>
 8013efc:	2800      	cmp	r0, #0
 8013efe:	bf0c      	ite	eq
 8013f00:	2303      	moveq	r3, #3
 8013f02:	2302      	movne	r3, #2
 8013f04:	e002      	b.n	8013f0c <DROPDOWN_DrawSkinFlex+0x3c>
 8013f06:	2300      	movs	r3, #0
 8013f08:	e000      	b.n	8013f0c <DROPDOWN_DrawSkinFlex+0x3c>
 8013f0a:	2301      	movs	r3, #1
 8013f0c:	4a77      	ldr	r2, [pc, #476]	; (80140ec <DROPDOWN_DrawSkinFlex+0x21c>)
 8013f0e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8013f12:	6863      	ldr	r3, [r4, #4]
 8013f14:	2b02      	cmp	r3, #2
 8013f16:	f000 80c3 	beq.w	80140a0 <DROPDOWN_DrawSkinFlex+0x1d0>
 8013f1a:	dc06      	bgt.n	8013f2a <DROPDOWN_DrawSkinFlex+0x5a>
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	f040 80e0 	bne.w	80140e2 <DROPDOWN_DrawSkinFlex+0x212>
 8013f22:	6820      	ldr	r0, [r4, #0]
 8013f24:	f7f6 fca0 	bl	800a868 <WM_SetHasTrans>
 8013f28:	e0db      	b.n	80140e2 <DROPDOWN_DrawSkinFlex+0x212>
 8013f2a:	2b05      	cmp	r3, #5
 8013f2c:	d034      	beq.n	8013f98 <DROPDOWN_DrawSkinFlex+0xc8>
 8013f2e:	2b12      	cmp	r3, #18
 8013f30:	f040 80d7 	bne.w	80140e2 <DROPDOWN_DrawSkinFlex+0x212>
 8013f34:	6820      	ldr	r0, [r4, #0]
 8013f36:	f7fc fd83 	bl	8010a40 <GUI_ALLOC_LockH>
 8013f3a:	4603      	mov	r3, r0
 8013f3c:	a808      	add	r0, sp, #32
 8013f3e:	f8b3 6080 	ldrh.w	r6, [r3, #128]	; 0x80
 8013f42:	f840 3d0c 	str.w	r3, [r0, #-12]!
 8013f46:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8013f48:	f9b3 8082 	ldrsh.w	r8, [r3, #130]	; 0x82
 8013f4c:	f7fc fd86 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8013f50:	6923      	ldr	r3, [r4, #16]
 8013f52:	69a2      	ldr	r2, [r4, #24]
 8013f54:	b2b1      	uxth	r1, r6
 8013f56:	440b      	add	r3, r1
 8013f58:	8aa6      	ldrh	r6, [r4, #20]
 8013f5a:	3302      	adds	r3, #2
 8013f5c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013f60:	1cb3      	adds	r3, r6, #2
 8013f62:	4416      	add	r6, r2
 8013f64:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013f68:	3e03      	subs	r6, #3
 8013f6a:	8ba3      	ldrh	r3, [r4, #28]
 8013f6c:	1a71      	subs	r1, r6, r1
 8013f6e:	1ac9      	subs	r1, r1, r3
 8013f70:	2002      	movs	r0, #2
 8013f72:	3b02      	subs	r3, #2
 8013f74:	f8ad 101c 	strh.w	r1, [sp, #28]
 8013f78:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013f7c:	f7fb fc3c 	bl	800f7f8 <GUI_SetTextMode>
 8013f80:	4638      	mov	r0, r7
 8013f82:	f7fb fc43 	bl	800f80c <GUI_SetFont>
 8013f86:	6a28      	ldr	r0, [r5, #32]
 8013f88:	f7fb fc6e 	bl	800f868 <GUI_SetColor>
 8013f8c:	6a20      	ldr	r0, [r4, #32]
 8013f8e:	a906      	add	r1, sp, #24
 8013f90:	4642      	mov	r2, r8
 8013f92:	f003 fbe0 	bl	8017756 <GUI_DispStringInRect>
 8013f96:	e0a4      	b.n	80140e2 <DROPDOWN_DrawSkinFlex+0x212>
 8013f98:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8013f9a:	9300      	str	r3, [sp, #0]
 8013f9c:	682b      	ldr	r3, [r5, #0]
 8013f9e:	9301      	str	r3, [sp, #4]
 8013fa0:	686b      	ldr	r3, [r5, #4]
 8013fa2:	9302      	str	r3, [sp, #8]
 8013fa4:	68ab      	ldr	r3, [r5, #8]
 8013fa6:	9303      	str	r3, [sp, #12]
 8013fa8:	f104 0010 	add.w	r0, r4, #16
 8013fac:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8013fae:	f002 fcef 	bl	8016990 <GUI__DrawTwinArc4>
 8013fb2:	2600      	movs	r6, #0
 8013fb4:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8013fb8:	f7fb fc56 	bl	800f868 <GUI_SetColor>
 8013fbc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8013fbe:	6960      	ldr	r0, [r4, #20]
 8013fc0:	6921      	ldr	r1, [r4, #16]
 8013fc2:	69a2      	ldr	r2, [r4, #24]
 8013fc4:	4430      	add	r0, r6
 8013fc6:	4419      	add	r1, r3
 8013fc8:	1ad2      	subs	r2, r2, r3
 8013fca:	f7fb fed9 	bl	800fd80 <GUI_DrawHLine>
 8013fce:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8013fd0:	69e0      	ldr	r0, [r4, #28]
 8013fd2:	6921      	ldr	r1, [r4, #16]
 8013fd4:	69a2      	ldr	r2, [r4, #24]
 8013fd6:	1b80      	subs	r0, r0, r6
 8013fd8:	4419      	add	r1, r3
 8013fda:	1ad2      	subs	r2, r2, r3
 8013fdc:	f7fb fed0 	bl	800fd80 <GUI_DrawHLine>
 8013fe0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8013fe2:	6920      	ldr	r0, [r4, #16]
 8013fe4:	6961      	ldr	r1, [r4, #20]
 8013fe6:	69e2      	ldr	r2, [r4, #28]
 8013fe8:	4430      	add	r0, r6
 8013fea:	4419      	add	r1, r3
 8013fec:	1ad2      	subs	r2, r2, r3
 8013fee:	f7fb fea5 	bl	800fd3c <GUI_DrawVLine>
 8013ff2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8013ff4:	69a0      	ldr	r0, [r4, #24]
 8013ff6:	6961      	ldr	r1, [r4, #20]
 8013ff8:	69e2      	ldr	r2, [r4, #28]
 8013ffa:	1b80      	subs	r0, r0, r6
 8013ffc:	4419      	add	r1, r3
 8013ffe:	1ad2      	subs	r2, r2, r3
 8014000:	3601      	adds	r6, #1
 8014002:	f7fb fe9b 	bl	800fd3c <GUI_DrawVLine>
 8014006:	2e02      	cmp	r6, #2
 8014008:	d1d4      	bne.n	8013fb4 <DROPDOWN_DrawSkinFlex+0xe4>
 801400a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801400c:	2b02      	cmp	r3, #2
 801400e:	dd18      	ble.n	8014042 <DROPDOWN_DrawSkinFlex+0x172>
 8014010:	68a8      	ldr	r0, [r5, #8]
 8014012:	f7fb fc29 	bl	800f868 <GUI_SetColor>
 8014016:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8014018:	6920      	ldr	r0, [r4, #16]
 801401a:	69e6      	ldr	r6, [r4, #28]
 801401c:	6961      	ldr	r1, [r4, #20]
 801401e:	18c2      	adds	r2, r0, r3
 8014020:	4419      	add	r1, r3
 8014022:	3002      	adds	r0, #2
 8014024:	1af3      	subs	r3, r6, r3
 8014026:	3a01      	subs	r2, #1
 8014028:	f7fb fe42 	bl	800fcb0 <GUI_FillRect>
 801402c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801402e:	69a2      	ldr	r2, [r4, #24]
 8014030:	6961      	ldr	r1, [r4, #20]
 8014032:	69e6      	ldr	r6, [r4, #28]
 8014034:	1ad0      	subs	r0, r2, r3
 8014036:	4419      	add	r1, r3
 8014038:	3001      	adds	r0, #1
 801403a:	3a02      	subs	r2, #2
 801403c:	1af3      	subs	r3, r6, r3
 801403e:	f7fb fe37 	bl	800fcb0 <GUI_FillRect>
 8014042:	f104 0010 	add.w	r0, r4, #16
 8014046:	c843      	ldmia	r0, {r0, r1, r6}
 8014048:	69e3      	ldr	r3, [r4, #28]
 801404a:	68ef      	ldr	r7, [r5, #12]
 801404c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801404e:	9700      	str	r7, [sp, #0]
 8014050:	692f      	ldr	r7, [r5, #16]
 8014052:	9701      	str	r7, [sp, #4]
 8014054:	440b      	add	r3, r1
 8014056:	4410      	add	r0, r2
 8014058:	3102      	adds	r1, #2
 801405a:	1ab2      	subs	r2, r6, r2
 801405c:	105b      	asrs	r3, r3, #1
 801405e:	f003 f9f9 	bl	8017454 <GUI_DrawGradientV>
 8014062:	69e3      	ldr	r3, [r4, #28]
 8014064:	6961      	ldr	r1, [r4, #20]
 8014066:	696f      	ldr	r7, [r5, #20]
 8014068:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801406a:	6920      	ldr	r0, [r4, #16]
 801406c:	69a6      	ldr	r6, [r4, #24]
 801406e:	9700      	str	r7, [sp, #0]
 8014070:	4419      	add	r1, r3
 8014072:	69af      	ldr	r7, [r5, #24]
 8014074:	9701      	str	r7, [sp, #4]
 8014076:	1049      	asrs	r1, r1, #1
 8014078:	4410      	add	r0, r2
 801407a:	3101      	adds	r1, #1
 801407c:	1ab2      	subs	r2, r6, r2
 801407e:	3b02      	subs	r3, #2
 8014080:	f003 f9e8 	bl	8017454 <GUI_DrawGradientV>
 8014084:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8014086:	f7fb fbef 	bl	800f868 <GUI_SetColor>
 801408a:	6961      	ldr	r1, [r4, #20]
 801408c:	69e2      	ldr	r2, [r4, #28]
 801408e:	69a3      	ldr	r3, [r4, #24]
 8014090:	1a88      	subs	r0, r1, r2
 8014092:	4418      	add	r0, r3
 8014094:	3001      	adds	r0, #1
 8014096:	3104      	adds	r1, #4
 8014098:	3a04      	subs	r2, #4
 801409a:	f7fb fe4f 	bl	800fd3c <GUI_DrawVLine>
 801409e:	e020      	b.n	80140e2 <DROPDOWN_DrawSkinFlex+0x212>
 80140a0:	69e2      	ldr	r2, [r4, #28]
 80140a2:	6963      	ldr	r3, [r4, #20]
 80140a4:	69a7      	ldr	r7, [r4, #24]
 80140a6:	69e8      	ldr	r0, [r5, #28]
 80140a8:	1ad3      	subs	r3, r2, r3
 80140aa:	f1a3 0608 	sub.w	r6, r3, #8
 80140ae:	1076      	asrs	r6, r6, #1
 80140b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80140b4:	1c5a      	adds	r2, r3, #1
 80140b6:	ebc8 0303 	rsb	r3, r8, r3
 80140ba:	eba7 0762 	sub.w	r7, r7, r2, asr #1
 80140be:	ea4f 0863 	mov.w	r8, r3, asr #1
 80140c2:	f7fb fbd1 	bl	800f868 <GUI_SetColor>
 80140c6:	2400      	movs	r4, #0
 80140c8:	eb04 0008 	add.w	r0, r4, r8
 80140cc:	3401      	adds	r4, #1
 80140ce:	1b33      	subs	r3, r6, r4
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	db06      	blt.n	80140e2 <DROPDOWN_DrawSkinFlex+0x212>
 80140d4:	1bb9      	subs	r1, r7, r6
 80140d6:	19ba      	adds	r2, r7, r6
 80140d8:	4421      	add	r1, r4
 80140da:	1b12      	subs	r2, r2, r4
 80140dc:	f7fb fe50 	bl	800fd80 <GUI_DrawHLine>
 80140e0:	e7f2      	b.n	80140c8 <DROPDOWN_DrawSkinFlex+0x1f8>
 80140e2:	2000      	movs	r0, #0
 80140e4:	b008      	add	sp, #32
 80140e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140ea:	bf00      	nop
 80140ec:	08020c0c 	.word	0x08020c0c

080140f0 <_Create>:
 80140f0:	b530      	push	{r4, r5, lr}
 80140f2:	b08b      	sub	sp, #44	; 0x2c
 80140f4:	4605      	mov	r5, r0
 80140f6:	f7fc fca3 	bl	8010a40 <GUI_ALLOC_LockH>
 80140fa:	ab0a      	add	r3, sp, #40	; 0x28
 80140fc:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8014100:	f843 0d28 	str.w	r0, [r3, #-40]!
 8014104:	4668      	mov	r0, sp
 8014106:	6894      	ldr	r4, [r2, #8]
 8014108:	f7fc fca8 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801410c:	a80a      	add	r0, sp, #40	; 0x28
 801410e:	2300      	movs	r3, #0
 8014110:	9302      	str	r3, [sp, #8]
 8014112:	f840 5d24 	str.w	r5, [r0, #-36]!
 8014116:	6823      	ldr	r3, [r4, #0]
 8014118:	4798      	blx	r3
 801411a:	b00b      	add	sp, #44	; 0x2c
 801411c:	bd30      	pop	{r4, r5, pc}

0801411e <_Paint>:
 801411e:	b570      	push	{r4, r5, r6, lr}
 8014120:	b08e      	sub	sp, #56	; 0x38
 8014122:	4605      	mov	r5, r0
 8014124:	f7fc fc8c 	bl	8010a40 <GUI_ALLOC_LockH>
 8014128:	ab0e      	add	r3, sp, #56	; 0x38
 801412a:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
 801412c:	f843 0d34 	str.w	r0, [r3, #-52]!
 8014130:	f9b0 6034 	ldrsh.w	r6, [r0, #52]	; 0x34
 8014134:	4618      	mov	r0, r3
 8014136:	f7fc fc91 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801413a:	a903      	add	r1, sp, #12
 801413c:	4628      	mov	r0, r5
 801413e:	f7f7 f84a 	bl	800b1d6 <WM_GetClientRectEx>
 8014142:	2305      	movs	r3, #5
 8014144:	9306      	str	r3, [sp, #24]
 8014146:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801414a:	9309      	str	r3, [sp, #36]	; 0x24
 801414c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8014150:	930a      	str	r3, [sp, #40]	; 0x28
 8014152:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8014156:	930b      	str	r3, [sp, #44]	; 0x2c
 8014158:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801415c:	930c      	str	r3, [sp, #48]	; 0x30
 801415e:	9505      	str	r5, [sp, #20]
 8014160:	a805      	add	r0, sp, #20
 8014162:	47a0      	blx	r4
 8014164:	4628      	mov	r0, r5
 8014166:	4631      	mov	r1, r6
 8014168:	f7f5 fcfe 	bl	8009b68 <DROPDOWN__GetpItemLocked>
 801416c:	9002      	str	r0, [sp, #8]
 801416e:	b138      	cbz	r0, 8014180 <_Paint+0x62>
 8014170:	2312      	movs	r3, #18
 8014172:	900d      	str	r0, [sp, #52]	; 0x34
 8014174:	9306      	str	r3, [sp, #24]
 8014176:	a805      	add	r0, sp, #20
 8014178:	47a0      	blx	r4
 801417a:	a802      	add	r0, sp, #8
 801417c:	f7fc fc6e 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8014180:	2302      	movs	r3, #2
 8014182:	9306      	str	r3, [sp, #24]
 8014184:	a805      	add	r0, sp, #20
 8014186:	47a0      	blx	r4
 8014188:	b00e      	add	sp, #56	; 0x38
 801418a:	bd70      	pop	{r4, r5, r6, pc}

0801418c <BUTTON_DrawSkinFlex>:
 801418c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014190:	6883      	ldr	r3, [r0, #8]
 8014192:	4a8a      	ldr	r2, [pc, #552]	; (80143bc <BUTTON_DrawSkinFlex+0x230>)
 8014194:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8014198:	6843      	ldr	r3, [r0, #4]
 801419a:	2b05      	cmp	r3, #5
 801419c:	b088      	sub	sp, #32
 801419e:	4604      	mov	r4, r0
 80141a0:	d00e      	beq.n	80141c0 <BUTTON_DrawSkinFlex+0x34>
 80141a2:	dc06      	bgt.n	80141b2 <BUTTON_DrawSkinFlex+0x26>
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	f040 8104 	bne.w	80143b2 <BUTTON_DrawSkinFlex+0x226>
 80141aa:	6800      	ldr	r0, [r0, #0]
 80141ac:	f7f6 fb5c 	bl	800a868 <WM_SetHasTrans>
 80141b0:	e0ff      	b.n	80143b2 <BUTTON_DrawSkinFlex+0x226>
 80141b2:	2b06      	cmp	r3, #6
 80141b4:	f000 8088 	beq.w	80142c8 <BUTTON_DrawSkinFlex+0x13c>
 80141b8:	2b12      	cmp	r3, #18
 80141ba:	f000 80a9 	beq.w	8014310 <BUTTON_DrawSkinFlex+0x184>
 80141be:	e0f8      	b.n	80143b2 <BUTTON_DrawSkinFlex+0x226>
 80141c0:	69ee      	ldr	r6, [r5, #28]
 80141c2:	2e00      	cmp	r6, #0
 80141c4:	d051      	beq.n	801426a <BUTTON_DrawSkinFlex+0xde>
 80141c6:	9600      	str	r6, [sp, #0]
 80141c8:	682b      	ldr	r3, [r5, #0]
 80141ca:	9301      	str	r3, [sp, #4]
 80141cc:	686b      	ldr	r3, [r5, #4]
 80141ce:	9302      	str	r3, [sp, #8]
 80141d0:	68ab      	ldr	r3, [r5, #8]
 80141d2:	9303      	str	r3, [sp, #12]
 80141d4:	3010      	adds	r0, #16
 80141d6:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80141d8:	f002 fbda 	bl	8016990 <GUI__DrawTwinArc4>
 80141dc:	2600      	movs	r6, #0
 80141de:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 80141e2:	f7fb fb41 	bl	800f868 <GUI_SetColor>
 80141e6:	69eb      	ldr	r3, [r5, #28]
 80141e8:	6960      	ldr	r0, [r4, #20]
 80141ea:	6921      	ldr	r1, [r4, #16]
 80141ec:	69a2      	ldr	r2, [r4, #24]
 80141ee:	4430      	add	r0, r6
 80141f0:	4419      	add	r1, r3
 80141f2:	1ad2      	subs	r2, r2, r3
 80141f4:	f7fb fdc4 	bl	800fd80 <GUI_DrawHLine>
 80141f8:	69eb      	ldr	r3, [r5, #28]
 80141fa:	69e0      	ldr	r0, [r4, #28]
 80141fc:	6921      	ldr	r1, [r4, #16]
 80141fe:	69a2      	ldr	r2, [r4, #24]
 8014200:	1b80      	subs	r0, r0, r6
 8014202:	4419      	add	r1, r3
 8014204:	1ad2      	subs	r2, r2, r3
 8014206:	f7fb fdbb 	bl	800fd80 <GUI_DrawHLine>
 801420a:	69eb      	ldr	r3, [r5, #28]
 801420c:	6920      	ldr	r0, [r4, #16]
 801420e:	6961      	ldr	r1, [r4, #20]
 8014210:	69e2      	ldr	r2, [r4, #28]
 8014212:	4430      	add	r0, r6
 8014214:	4419      	add	r1, r3
 8014216:	1ad2      	subs	r2, r2, r3
 8014218:	f7fb fd90 	bl	800fd3c <GUI_DrawVLine>
 801421c:	69eb      	ldr	r3, [r5, #28]
 801421e:	69a0      	ldr	r0, [r4, #24]
 8014220:	6961      	ldr	r1, [r4, #20]
 8014222:	69e2      	ldr	r2, [r4, #28]
 8014224:	1b80      	subs	r0, r0, r6
 8014226:	4419      	add	r1, r3
 8014228:	1ad2      	subs	r2, r2, r3
 801422a:	3601      	adds	r6, #1
 801422c:	f7fb fd86 	bl	800fd3c <GUI_DrawVLine>
 8014230:	2e02      	cmp	r6, #2
 8014232:	d1d4      	bne.n	80141de <BUTTON_DrawSkinFlex+0x52>
 8014234:	68a8      	ldr	r0, [r5, #8]
 8014236:	f7fb fb17 	bl	800f868 <GUI_SetColor>
 801423a:	69eb      	ldr	r3, [r5, #28]
 801423c:	6920      	ldr	r0, [r4, #16]
 801423e:	69e6      	ldr	r6, [r4, #28]
 8014240:	6961      	ldr	r1, [r4, #20]
 8014242:	18c2      	adds	r2, r0, r3
 8014244:	4419      	add	r1, r3
 8014246:	3002      	adds	r0, #2
 8014248:	1af3      	subs	r3, r6, r3
 801424a:	3a01      	subs	r2, #1
 801424c:	f7fb fd30 	bl	800fcb0 <GUI_FillRect>
 8014250:	69eb      	ldr	r3, [r5, #28]
 8014252:	69a2      	ldr	r2, [r4, #24]
 8014254:	69e6      	ldr	r6, [r4, #28]
 8014256:	6961      	ldr	r1, [r4, #20]
 8014258:	1ad0      	subs	r0, r2, r3
 801425a:	4419      	add	r1, r3
 801425c:	3001      	adds	r0, #1
 801425e:	1af3      	subs	r3, r6, r3
 8014260:	3a02      	subs	r2, #2
 8014262:	f7fb fd25 	bl	800fcb0 <GUI_FillRect>
 8014266:	69ee      	ldr	r6, [r5, #28]
 8014268:	e00f      	b.n	801428a <BUTTON_DrawSkinFlex+0xfe>
 801426a:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 801426e:	f7fb fafb 	bl	800f868 <GUI_SetColor>
 8014272:	f104 0010 	add.w	r0, r4, #16
 8014276:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8014278:	4430      	add	r0, r6
 801427a:	4431      	add	r1, r6
 801427c:	1b92      	subs	r2, r2, r6
 801427e:	1b9b      	subs	r3, r3, r6
 8014280:	3601      	adds	r6, #1
 8014282:	f003 fb39 	bl	80178f8 <GUI_DrawRect>
 8014286:	2e02      	cmp	r6, #2
 8014288:	d1ef      	bne.n	801426a <BUTTON_DrawSkinFlex+0xde>
 801428a:	f104 0010 	add.w	r0, r4, #16
 801428e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8014290:	68ef      	ldr	r7, [r5, #12]
 8014292:	9700      	str	r7, [sp, #0]
 8014294:	692f      	ldr	r7, [r5, #16]
 8014296:	9701      	str	r7, [sp, #4]
 8014298:	440b      	add	r3, r1
 801429a:	4430      	add	r0, r6
 801429c:	1b92      	subs	r2, r2, r6
 801429e:	3102      	adds	r1, #2
 80142a0:	105b      	asrs	r3, r3, #1
 80142a2:	f003 f8d7 	bl	8017454 <GUI_DrawGradientV>
 80142a6:	69e3      	ldr	r3, [r4, #28]
 80142a8:	6962      	ldr	r2, [r4, #20]
 80142aa:	6920      	ldr	r0, [r4, #16]
 80142ac:	441a      	add	r2, r3
 80142ae:	1051      	asrs	r1, r2, #1
 80142b0:	69a2      	ldr	r2, [r4, #24]
 80142b2:	696c      	ldr	r4, [r5, #20]
 80142b4:	9400      	str	r4, [sp, #0]
 80142b6:	69ac      	ldr	r4, [r5, #24]
 80142b8:	9401      	str	r4, [sp, #4]
 80142ba:	4430      	add	r0, r6
 80142bc:	3101      	adds	r1, #1
 80142be:	1b92      	subs	r2, r2, r6
 80142c0:	3b02      	subs	r3, #2
 80142c2:	f003 f8c7 	bl	8017454 <GUI_DrawGradientV>
 80142c6:	e074      	b.n	80143b2 <BUTTON_DrawSkinFlex+0x226>
 80142c8:	6800      	ldr	r0, [r0, #0]
 80142ca:	f7fc fbb9 	bl	8010a40 <GUI_ALLOC_LockH>
 80142ce:	9004      	str	r0, [sp, #16]
 80142d0:	6820      	ldr	r0, [r4, #0]
 80142d2:	f7f6 f9cc 	bl	800a66e <WM__IsEnabled>
 80142d6:	9b04      	ldr	r3, [sp, #16]
 80142d8:	b130      	cbz	r0, 80142e8 <BUTTON_DrawSkinFlex+0x15c>
 80142da:	68a2      	ldr	r2, [r4, #8]
 80142dc:	b952      	cbnz	r2, 80142f4 <BUTTON_DrawSkinFlex+0x168>
 80142de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80142e0:	3200      	adds	r2, #0
 80142e2:	bf18      	it	ne
 80142e4:	2201      	movne	r2, #1
 80142e6:	e006      	b.n	80142f6 <BUTTON_DrawSkinFlex+0x16a>
 80142e8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80142ea:	2a00      	cmp	r2, #0
 80142ec:	bf0c      	ite	eq
 80142ee:	2200      	moveq	r2, #0
 80142f0:	2202      	movne	r2, #2
 80142f2:	e000      	b.n	80142f6 <BUTTON_DrawSkinFlex+0x16a>
 80142f4:	2200      	movs	r2, #0
 80142f6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80142fa:	a804      	add	r0, sp, #16
 80142fc:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 80142fe:	f7fc fbad 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8014302:	2200      	movs	r2, #0
 8014304:	4628      	mov	r0, r5
 8014306:	6821      	ldr	r1, [r4, #0]
 8014308:	4613      	mov	r3, r2
 801430a:	f7f4 f938 	bl	800857e <GUI_DRAW__Draw>
 801430e:	e050      	b.n	80143b2 <BUTTON_DrawSkinFlex+0x226>
 8014310:	6800      	ldr	r0, [r0, #0]
 8014312:	f7fc fb95 	bl	8010a40 <GUI_ALLOC_LockH>
 8014316:	ae08      	add	r6, sp, #32
 8014318:	6e87      	ldr	r7, [r0, #104]	; 0x68
 801431a:	f846 0d10 	str.w	r0, [r6, #-16]!
 801431e:	2f00      	cmp	r7, #0
 8014320:	d044      	beq.n	80143ac <BUTTON_DrawSkinFlex+0x220>
 8014322:	68a2      	ldr	r2, [r4, #8]
 8014324:	f9b0 805c 	ldrsh.w	r8, [r0, #92]	; 0x5c
 8014328:	b122      	cbz	r2, 8014334 <BUTTON_DrawSkinFlex+0x1a8>
 801432a:	2a03      	cmp	r2, #3
 801432c:	bf14      	ite	ne
 801432e:	2100      	movne	r1, #0
 8014330:	2102      	moveq	r1, #2
 8014332:	e000      	b.n	8014336 <BUTTON_DrawSkinFlex+0x1aa>
 8014334:	2101      	movs	r1, #1
 8014336:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801433a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801433c:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 801433e:	f7fb fa65 	bl	800f80c <GUI_SetFont>
 8014342:	4620      	mov	r0, r4
 8014344:	f7fb fa90 	bl	800f868 <GUI_SetColor>
 8014348:	a806      	add	r0, sp, #24
 801434a:	f002 ff6f 	bl	801722c <GUI_GetClientRect>
 801434e:	8bab      	ldrh	r3, [r5, #28]
 8014350:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8014354:	441a      	add	r2, r3
 8014356:	f8ad 2018 	strh.w	r2, [sp, #24]
 801435a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801435e:	1ad3      	subs	r3, r2, r3
 8014360:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014364:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8014368:	3302      	adds	r3, #2
 801436a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801436e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8014372:	3b02      	subs	r3, #2
 8014374:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014378:	9b04      	ldr	r3, [sp, #16]
 801437a:	a806      	add	r0, sp, #24
 801437c:	f9b3 105e 	ldrsh.w	r1, [r3, #94]	; 0x5e
 8014380:	f9b3 2060 	ldrsh.w	r2, [r3, #96]	; 0x60
 8014384:	f7fb fbc6 	bl	800fb14 <GUI_MoveRect>
 8014388:	4630      	mov	r0, r6
 801438a:	f7fc fb67 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801438e:	2002      	movs	r0, #2
 8014390:	f7fb fa32 	bl	800f7f8 <GUI_SetTextMode>
 8014394:	4638      	mov	r0, r7
 8014396:	f7fc fb53 	bl	8010a40 <GUI_ALLOC_LockH>
 801439a:	ac08      	add	r4, sp, #32
 801439c:	a906      	add	r1, sp, #24
 801439e:	f844 0d0c 	str.w	r0, [r4, #-12]!
 80143a2:	4642      	mov	r2, r8
 80143a4:	f003 f9d7 	bl	8017756 <GUI_DispStringInRect>
 80143a8:	4620      	mov	r0, r4
 80143aa:	e000      	b.n	80143ae <BUTTON_DrawSkinFlex+0x222>
 80143ac:	4630      	mov	r0, r6
 80143ae:	f7fc fb55 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80143b2:	2000      	movs	r0, #0
 80143b4:	b008      	add	sp, #32
 80143b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143ba:	bf00      	nop
 80143bc:	08020c1c 	.word	0x08020c1c

080143c0 <_Create>:
 80143c0:	b530      	push	{r4, r5, lr}
 80143c2:	b08b      	sub	sp, #44	; 0x2c
 80143c4:	2100      	movs	r1, #0
 80143c6:	4604      	mov	r4, r0
 80143c8:	2224      	movs	r2, #36	; 0x24
 80143ca:	a801      	add	r0, sp, #4
 80143cc:	f004 fc4d 	bl	8018c6a <memset>
 80143d0:	4620      	mov	r0, r4
 80143d2:	f7fc fb35 	bl	8010a40 <GUI_ALLOC_LockH>
 80143d6:	ab0a      	add	r3, sp, #40	; 0x28
 80143d8:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80143da:	f843 0d28 	str.w	r0, [r3, #-40]!
 80143de:	6895      	ldr	r5, [r2, #8]
 80143e0:	4668      	mov	r0, sp
 80143e2:	f7fc fb3b 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80143e6:	2300      	movs	r3, #0
 80143e8:	9302      	str	r3, [sp, #8]
 80143ea:	9401      	str	r4, [sp, #4]
 80143ec:	682b      	ldr	r3, [r5, #0]
 80143ee:	a801      	add	r0, sp, #4
 80143f0:	4798      	blx	r3
 80143f2:	b00b      	add	sp, #44	; 0x2c
 80143f4:	bd30      	pop	{r4, r5, pc}

080143f6 <_Paint>:
 80143f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143fa:	b08a      	sub	sp, #40	; 0x28
 80143fc:	4605      	mov	r5, r0
 80143fe:	f7fc fb1f 	bl	8010a40 <GUI_ALLOC_LockH>
 8014402:	4603      	mov	r3, r0
 8014404:	a80a      	add	r0, sp, #40	; 0x28
 8014406:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 8014408:	f840 3d28 	str.w	r3, [r0, #-40]!
 801440c:	4668      	mov	r0, sp
 801440e:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8014410:	8e5f      	ldrh	r7, [r3, #50]	; 0x32
 8014412:	f7fc fb23 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8014416:	4628      	mov	r0, r5
 8014418:	f7f6 fdfa 	bl	800b010 <WM_GetWindowSizeX>
 801441c:	4680      	mov	r8, r0
 801441e:	4628      	mov	r0, r5
 8014420:	f7f6 fe0b 	bl	800b03a <WM_GetWindowSizeY>
 8014424:	2300      	movs	r3, #0
 8014426:	9306      	str	r3, [sp, #24]
 8014428:	9305      	str	r3, [sp, #20]
 801442a:	3801      	subs	r0, #1
 801442c:	f108 33ff 	add.w	r3, r8, #4294967295
 8014430:	f016 0610 	ands.w	r6, r6, #16
 8014434:	9501      	str	r5, [sp, #4]
 8014436:	9307      	str	r3, [sp, #28]
 8014438:	9008      	str	r0, [sp, #32]
 801443a:	d001      	beq.n	8014440 <_Paint+0x4a>
 801443c:	2303      	movs	r3, #3
 801443e:	e007      	b.n	8014450 <_Paint+0x5a>
 8014440:	05fa      	lsls	r2, r7, #23
 8014442:	d501      	bpl.n	8014448 <_Paint+0x52>
 8014444:	9603      	str	r6, [sp, #12]
 8014446:	e004      	b.n	8014452 <_Paint+0x5c>
 8014448:	07fb      	lsls	r3, r7, #31
 801444a:	bf4c      	ite	mi
 801444c:	2301      	movmi	r3, #1
 801444e:	2302      	movpl	r3, #2
 8014450:	9303      	str	r3, [sp, #12]
 8014452:	2305      	movs	r3, #5
 8014454:	9302      	str	r3, [sp, #8]
 8014456:	a801      	add	r0, sp, #4
 8014458:	47a0      	blx	r4
 801445a:	2306      	movs	r3, #6
 801445c:	9302      	str	r3, [sp, #8]
 801445e:	a801      	add	r0, sp, #4
 8014460:	47a0      	blx	r4
 8014462:	2312      	movs	r3, #18
 8014464:	9302      	str	r3, [sp, #8]
 8014466:	a801      	add	r0, sp, #4
 8014468:	47a0      	blx	r4
 801446a:	230a      	movs	r3, #10
 801446c:	9302      	str	r3, [sp, #8]
 801446e:	a801      	add	r0, sp, #4
 8014470:	47a0      	blx	r4
 8014472:	b00a      	add	sp, #40	; 0x28
 8014474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014478 <WM__SendMessageNoPara>:
 8014478:	b530      	push	{r4, r5, lr}
 801447a:	b085      	sub	sp, #20
 801447c:	4604      	mov	r4, r0
 801447e:	2210      	movs	r2, #16
 8014480:	460d      	mov	r5, r1
 8014482:	4668      	mov	r0, sp
 8014484:	2100      	movs	r1, #0
 8014486:	f004 fbf0 	bl	8018c6a <memset>
 801448a:	4620      	mov	r0, r4
 801448c:	f7fc face 	bl	8010a2c <GUI_ALLOC_h2p>
 8014490:	6903      	ldr	r3, [r0, #16]
 8014492:	b11b      	cbz	r3, 801449c <WM__SendMessageNoPara+0x24>
 8014494:	9401      	str	r4, [sp, #4]
 8014496:	9500      	str	r5, [sp, #0]
 8014498:	4668      	mov	r0, sp
 801449a:	4798      	blx	r3
 801449c:	b005      	add	sp, #20
 801449e:	bd30      	pop	{r4, r5, pc}

080144a0 <WM__GetPrevSibling>:
 80144a0:	b538      	push	{r3, r4, r5, lr}
 80144a2:	4605      	mov	r5, r0
 80144a4:	f000 f82e 	bl	8014504 <WM__GetFirstSibling>
 80144a8:	4604      	mov	r4, r0
 80144aa:	b154      	cbz	r4, 80144c2 <WM__GetPrevSibling+0x22>
 80144ac:	42ac      	cmp	r4, r5
 80144ae:	d007      	beq.n	80144c0 <WM__GetPrevSibling+0x20>
 80144b0:	4620      	mov	r0, r4
 80144b2:	f7fc fabb 	bl	8010a2c <GUI_ALLOC_h2p>
 80144b6:	6a03      	ldr	r3, [r0, #32]
 80144b8:	42ab      	cmp	r3, r5
 80144ba:	d002      	beq.n	80144c2 <WM__GetPrevSibling+0x22>
 80144bc:	461c      	mov	r4, r3
 80144be:	e7f4      	b.n	80144aa <WM__GetPrevSibling+0xa>
 80144c0:	2400      	movs	r4, #0
 80144c2:	4620      	mov	r0, r4
 80144c4:	bd38      	pop	{r3, r4, r5, pc}

080144c6 <WM__GetLastSibling>:
 80144c6:	b510      	push	{r4, lr}
 80144c8:	4604      	mov	r4, r0
 80144ca:	b130      	cbz	r0, 80144da <WM__GetLastSibling+0x14>
 80144cc:	4620      	mov	r0, r4
 80144ce:	f7fc faad 	bl	8010a2c <GUI_ALLOC_h2p>
 80144d2:	6a03      	ldr	r3, [r0, #32]
 80144d4:	b10b      	cbz	r3, 80144da <WM__GetLastSibling+0x14>
 80144d6:	461c      	mov	r4, r3
 80144d8:	e7f8      	b.n	80144cc <WM__GetLastSibling+0x6>
 80144da:	4620      	mov	r0, r4
 80144dc:	bd10      	pop	{r4, pc}
	...

080144e0 <WM__GetFocussedChild>:
 80144e0:	b538      	push	{r3, r4, r5, lr}
 80144e2:	4d06      	ldr	r5, [pc, #24]	; (80144fc <WM__GetFocussedChild+0x1c>)
 80144e4:	4c06      	ldr	r4, [pc, #24]	; (8014500 <WM__GetFocussedChild+0x20>)
 80144e6:	682b      	ldr	r3, [r5, #0]
 80144e8:	4601      	mov	r1, r0
 80144ea:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80144ee:	f7f6 f8c7 	bl	800a680 <WM__IsChild>
 80144f2:	b110      	cbz	r0, 80144fa <WM__GetFocussedChild+0x1a>
 80144f4:	682b      	ldr	r3, [r5, #0]
 80144f6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80144fa:	bd38      	pop	{r3, r4, r5, pc}
 80144fc:	20021b98 	.word	0x20021b98
 8014500:	20021b88 	.word	0x20021b88

08014504 <WM__GetFirstSibling>:
 8014504:	b508      	push	{r3, lr}
 8014506:	f7f6 fdcc 	bl	800b0a2 <WM_GetParent>
 801450a:	b118      	cbz	r0, 8014514 <WM__GetFirstSibling+0x10>
 801450c:	f7fc fa8e 	bl	8010a2c <GUI_ALLOC_h2p>
 8014510:	69c0      	ldr	r0, [r0, #28]
 8014512:	bd08      	pop	{r3, pc}
 8014514:	bd08      	pop	{r3, pc}
	...

08014518 <WM_ValidateWindow>:
 8014518:	b507      	push	{r0, r1, r2, lr}
 801451a:	b178      	cbz	r0, 801453c <WM_ValidateWindow+0x24>
 801451c:	f7fc fa90 	bl	8010a40 <GUI_ALLOC_LockH>
 8014520:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014522:	9001      	str	r0, [sp, #4]
 8014524:	069a      	lsls	r2, r3, #26
 8014526:	d506      	bpl.n	8014536 <WM_ValidateWindow+0x1e>
 8014528:	f023 0320 	bic.w	r3, r3, #32
 801452c:	6283      	str	r3, [r0, #40]	; 0x28
 801452e:	4b05      	ldr	r3, [pc, #20]	; (8014544 <WM_ValidateWindow+0x2c>)
 8014530:	881a      	ldrh	r2, [r3, #0]
 8014532:	3a01      	subs	r2, #1
 8014534:	801a      	strh	r2, [r3, #0]
 8014536:	a801      	add	r0, sp, #4
 8014538:	f7fc fa90 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801453c:	b003      	add	sp, #12
 801453e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014542:	bf00      	nop
 8014544:	20021b90 	.word	0x20021b90

08014548 <WM__IsInModalArea>:
 8014548:	4b12      	ldr	r3, [pc, #72]	; (8014594 <WM__IsInModalArea+0x4c>)
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	2b00      	cmp	r3, #0
 801454e:	b570      	push	{r4, r5, r6, lr}
 8014550:	4604      	mov	r4, r0
 8014552:	da0f      	bge.n	8014574 <WM__IsInModalArea+0x2c>
 8014554:	4e10      	ldr	r6, [pc, #64]	; (8014598 <WM__IsInModalArea+0x50>)
 8014556:	4d11      	ldr	r5, [pc, #68]	; (801459c <WM__IsInModalArea+0x54>)
 8014558:	6833      	ldr	r3, [r6, #0]
 801455a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 801455e:	4620      	mov	r0, r4
 8014560:	6859      	ldr	r1, [r3, #4]
 8014562:	f7f6 f8a1 	bl	800a6a8 <WM__IsAncestor>
 8014566:	6833      	ldr	r3, [r6, #0]
 8014568:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801456c:	686a      	ldr	r2, [r5, #4]
 801456e:	686b      	ldr	r3, [r5, #4]
 8014570:	b942      	cbnz	r2, 8014584 <WM__IsInModalArea+0x3c>
 8014572:	e00c      	b.n	801458e <WM__IsInModalArea+0x46>
 8014574:	4a0a      	ldr	r2, [pc, #40]	; (80145a0 <WM__IsInModalArea+0x58>)
 8014576:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801457a:	f7f6 f895 	bl	800a6a8 <WM__IsAncestor>
 801457e:	2800      	cmp	r0, #0
 8014580:	d1e8      	bne.n	8014554 <WM__IsInModalArea+0xc>
 8014582:	bd70      	pop	{r4, r5, r6, pc}
 8014584:	b918      	cbnz	r0, 801458e <WM__IsInModalArea+0x46>
 8014586:	1ae3      	subs	r3, r4, r3
 8014588:	4258      	negs	r0, r3
 801458a:	4158      	adcs	r0, r3
 801458c:	bd70      	pop	{r4, r5, r6, pc}
 801458e:	2001      	movs	r0, #1
 8014590:	bd70      	pop	{r4, r5, r6, pc}
 8014592:	bf00      	nop
 8014594:	200005ac 	.word	0x200005ac
 8014598:	20021b98 	.word	0x20021b98
 801459c:	20021cfc 	.word	0x20021cfc
 80145a0:	20021b78 	.word	0x20021b78

080145a4 <WM__SendPIDMessage>:
 80145a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145a6:	4606      	mov	r6, r0
 80145a8:	460c      	mov	r4, r1
 80145aa:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 80145ac:	b085      	sub	sp, #20
 80145ae:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80145b2:	230d      	movs	r3, #13
 80145b4:	9602      	str	r6, [sp, #8]
 80145b6:	9300      	str	r3, [sp, #0]
 80145b8:	4637      	mov	r7, r6
 80145ba:	4638      	mov	r0, r7
 80145bc:	f7f6 fccc 	bl	800af58 <WM_IsWindow>
 80145c0:	b150      	cbz	r0, 80145d8 <WM__SendPIDMessage+0x34>
 80145c2:	4638      	mov	r0, r7
 80145c4:	f7f6 fd6d 	bl	800b0a2 <WM_GetParent>
 80145c8:	4607      	mov	r7, r0
 80145ca:	2800      	cmp	r0, #0
 80145cc:	d0f5      	beq.n	80145ba <WM__SendPIDMessage+0x16>
 80145ce:	4669      	mov	r1, sp
 80145d0:	9403      	str	r4, [sp, #12]
 80145d2:	f003 fda5 	bl	8018120 <WM__SendMessageIfEnabled>
 80145d6:	e7f0      	b.n	80145ba <WM__SendPIDMessage+0x16>
 80145d8:	4630      	mov	r0, r6
 80145da:	4621      	mov	r1, r4
 80145dc:	f003 fda0 	bl	8018120 <WM__SendMessageIfEnabled>
 80145e0:	b005      	add	sp, #20
 80145e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080145e4 <WM__SendTouchMessage>:
 80145e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80145e6:	68cc      	ldr	r4, [r1, #12]
 80145e8:	4606      	mov	r6, r0
 80145ea:	460d      	mov	r5, r1
 80145ec:	b194      	cbz	r4, 8014614 <WM__SendTouchMessage+0x30>
 80145ee:	f7fc fa27 	bl	8010a40 <GUI_ALLOC_LockH>
 80145f2:	ab02      	add	r3, sp, #8
 80145f4:	4602      	mov	r2, r0
 80145f6:	f843 0d04 	str.w	r0, [r3, #-4]!
 80145fa:	6821      	ldr	r1, [r4, #0]
 80145fc:	f9b0 0000 	ldrsh.w	r0, [r0]
 8014600:	1a09      	subs	r1, r1, r0
 8014602:	6021      	str	r1, [r4, #0]
 8014604:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8014608:	6862      	ldr	r2, [r4, #4]
 801460a:	1a52      	subs	r2, r2, r1
 801460c:	6062      	str	r2, [r4, #4]
 801460e:	4618      	mov	r0, r3
 8014610:	f7fc fa24 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8014614:	4630      	mov	r0, r6
 8014616:	4629      	mov	r1, r5
 8014618:	f7ff ffc4 	bl	80145a4 <WM__SendPIDMessage>
 801461c:	b002      	add	sp, #8
 801461e:	bd70      	pop	{r4, r5, r6, pc}

08014620 <WM_HandlePID>:
 8014620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014624:	b097      	sub	sp, #92	; 0x5c
 8014626:	ae06      	add	r6, sp, #24
 8014628:	f04f 080c 	mov.w	r8, #12
 801462c:	2100      	movs	r1, #0
 801462e:	4642      	mov	r2, r8
 8014630:	4630      	mov	r0, r6
 8014632:	f004 fb1a 	bl	8018c6a <memset>
 8014636:	f7fb fa3d 	bl	800fab4 <GUI_PID_IsEmpty>
 801463a:	b108      	cbz	r0, 8014640 <WM_HandlePID+0x20>
 801463c:	2000      	movs	r0, #0
 801463e:	e1aa      	b.n	8014996 <WM_HandlePID+0x376>
 8014640:	ac09      	add	r4, sp, #36	; 0x24
 8014642:	4620      	mov	r0, r4
 8014644:	f7fb f9ba 	bl	800f9bc <GUI_PID_GetState>
 8014648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801464a:	4dad      	ldr	r5, [pc, #692]	; (8014900 <WM_HandlePID+0x2e0>)
 801464c:	4fad      	ldr	r7, [pc, #692]	; (8014904 <WM_HandlePID+0x2e4>)
 801464e:	1c5a      	adds	r2, r3, #1
 8014650:	d112      	bne.n	8014678 <WM_HandlePID+0x58>
 8014652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014654:	3301      	adds	r3, #1
 8014656:	d11e      	bne.n	8014696 <WM_HandlePID+0x76>
 8014658:	682b      	ldr	r3, [r5, #0]
 801465a:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801465e:	fb08 f803 	mul.w	r8, r8, r3
 8014662:	eb07 0308 	add.w	r3, r7, r8
 8014666:	7a19      	ldrb	r1, [r3, #8]
 8014668:	4291      	cmp	r1, r2
 801466a:	d0e7      	beq.n	801463c <WM_HandlePID+0x1c>
 801466c:	f857 2008 	ldr.w	r2, [r7, r8]
 8014670:	685b      	ldr	r3, [r3, #4]
 8014672:	9209      	str	r2, [sp, #36]	; 0x24
 8014674:	930a      	str	r3, [sp, #40]	; 0x28
 8014676:	e00e      	b.n	8014696 <WM_HandlePID+0x76>
 8014678:	2b00      	cmp	r3, #0
 801467a:	db0c      	blt.n	8014696 <WM_HandlePID+0x76>
 801467c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801467e:	2a00      	cmp	r2, #0
 8014680:	db09      	blt.n	8014696 <WM_HandlePID+0x76>
 8014682:	49a1      	ldr	r1, [pc, #644]	; (8014908 <WM_HandlePID+0x2e8>)
 8014684:	f9b1 1000 	ldrsh.w	r1, [r1]
 8014688:	440b      	add	r3, r1
 801468a:	9309      	str	r3, [sp, #36]	; 0x24
 801468c:	4b9f      	ldr	r3, [pc, #636]	; (801490c <WM_HandlePID+0x2ec>)
 801468e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014692:	441a      	add	r2, r3
 8014694:	920a      	str	r2, [sp, #40]	; 0x28
 8014696:	a804      	add	r0, sp, #16
 8014698:	f000 faa6 	bl	8014be8 <WM__AddCriticalHandle>
 801469c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80146a0:	2b01      	cmp	r3, #1
 80146a2:	bf98      	it	ls
 80146a4:	602b      	strls	r3, [r5, #0]
 80146a6:	6828      	ldr	r0, [r5, #0]
 80146a8:	a901      	add	r1, sp, #4
 80146aa:	aa02      	add	r2, sp, #8
 80146ac:	f7fb f8fa 	bl	800f8a4 <GUI_GetLayerPosEx>
 80146b0:	9b01      	ldr	r3, [sp, #4]
 80146b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80146b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80146b6:	1ac0      	subs	r0, r0, r3
 80146b8:	9b02      	ldr	r3, [sp, #8]
 80146ba:	9009      	str	r0, [sp, #36]	; 0x24
 80146bc:	1ac9      	subs	r1, r1, r3
 80146be:	682b      	ldr	r3, [r5, #0]
 80146c0:	910a      	str	r1, [sp, #40]	; 0x28
 80146c2:	220c      	movs	r2, #12
 80146c4:	435a      	muls	r2, r3
 80146c6:	18bb      	adds	r3, r7, r2
 80146c8:	58ba      	ldr	r2, [r7, r2]
 80146ca:	4282      	cmp	r2, r0
 80146cc:	d108      	bne.n	80146e0 <WM_HandlePID+0xc0>
 80146ce:	685a      	ldr	r2, [r3, #4]
 80146d0:	428a      	cmp	r2, r1
 80146d2:	d105      	bne.n	80146e0 <WM_HandlePID+0xc0>
 80146d4:	7a1a      	ldrb	r2, [r3, #8]
 80146d6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80146da:	429a      	cmp	r2, r3
 80146dc:	f000 8156 	beq.w	801498c <WM_HandlePID+0x36c>
 80146e0:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80146e4:	f003 f8c8 	bl	8017878 <GUI_CURSOR_SetPositionEx>
 80146e8:	4b89      	ldr	r3, [pc, #548]	; (8014910 <WM_HandlePID+0x2f0>)
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	b113      	cbz	r3, 80146f4 <WM_HandlePID+0xd4>
 80146ee:	4620      	mov	r0, r4
 80146f0:	2100      	movs	r1, #0
 80146f2:	4798      	blx	r3
 80146f4:	682b      	ldr	r3, [r5, #0]
 80146f6:	4a87      	ldr	r2, [pc, #540]	; (8014914 <WM_HandlePID+0x2f4>)
 80146f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80146fc:	b918      	cbnz	r0, 8014706 <WM_HandlePID+0xe6>
 80146fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014700:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014702:	f7f6 faa3 	bl	800ac4c <WM_Screen2hWin>
 8014706:	4b84      	ldr	r3, [pc, #528]	; (8014918 <WM_HandlePID+0x2f8>)
 8014708:	9005      	str	r0, [sp, #20]
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	b113      	cbz	r3, 8014714 <WM_HandlePID+0xf4>
 801470e:	9905      	ldr	r1, [sp, #20]
 8014710:	4620      	mov	r0, r4
 8014712:	4798      	blx	r3
 8014714:	4981      	ldr	r1, [pc, #516]	; (801491c <WM_HandlePID+0x2fc>)
 8014716:	682b      	ldr	r3, [r5, #0]
 8014718:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8014900 <WM_HandlePID+0x2e0>
 801471c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8014720:	4688      	mov	r8, r1
 8014722:	685a      	ldr	r2, [r3, #4]
 8014724:	9805      	ldr	r0, [sp, #20]
 8014726:	b312      	cbz	r2, 801476e <WM_HandlePID+0x14e>
 8014728:	4282      	cmp	r2, r0
 801472a:	d020      	beq.n	801476e <WM_HandlePID+0x14e>
 801472c:	6858      	ldr	r0, [r3, #4]
 801472e:	f7ff ff0b 	bl	8014548 <WM__IsInModalArea>
 8014732:	b1e0      	cbz	r0, 801476e <WM_HandlePID+0x14e>
 8014734:	f8d9 3000 	ldr.w	r3, [r9]
 8014738:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801473c:	6858      	ldr	r0, [r3, #4]
 801473e:	f7f5 ff96 	bl	800a66e <WM__IsEnabled>
 8014742:	b1a0      	cbz	r0, 801476e <WM_HandlePID+0x14e>
 8014744:	2312      	movs	r3, #18
 8014746:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801474a:	9312      	str	r3, [sp, #72]	; 0x48
 801474c:	f8d9 3000 	ldr.w	r3, [r9]
 8014750:	9615      	str	r6, [sp, #84]	; 0x54
 8014752:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8014756:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 801475a:	6858      	ldr	r0, [r3, #4]
 801475c:	a912      	add	r1, sp, #72	; 0x48
 801475e:	f7ff ff41 	bl	80145e4 <WM__SendTouchMessage>
 8014762:	f8d9 3000 	ldr.w	r3, [r9]
 8014766:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801476a:	2200      	movs	r2, #0
 801476c:	605a      	str	r2, [r3, #4]
 801476e:	9805      	ldr	r0, [sp, #20]
 8014770:	f7ff feea 	bl	8014548 <WM__IsInModalArea>
 8014774:	b908      	cbnz	r0, 801477a <WM_HandlePID+0x15a>
 8014776:	2600      	movs	r6, #0
 8014778:	e0fb      	b.n	8014972 <WM_HandlePID+0x352>
 801477a:	682b      	ldr	r3, [r5, #0]
 801477c:	9905      	ldr	r1, [sp, #20]
 801477e:	f8df a180 	ldr.w	sl, [pc, #384]	; 8014900 <WM_HandlePID+0x2e0>
 8014782:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8014904 <WM_HandlePID+0x2e4>
 8014786:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801478a:	f04f 080c 	mov.w	r8, #12
 801478e:	fb08 7303 	mla	r3, r8, r3, r7
 8014792:	6051      	str	r1, [r2, #4]
 8014794:	7a1a      	ldrb	r2, [r3, #8]
 8014796:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801479a:	429a      	cmp	r2, r3
 801479c:	d062      	beq.n	8014864 <WM_HandlePID+0x244>
 801479e:	9b05      	ldr	r3, [sp, #20]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d05f      	beq.n	8014864 <WM_HandlePID+0x244>
 80147a4:	9805      	ldr	r0, [sp, #20]
 80147a6:	f7fc f94b 	bl	8010a40 <GUI_ALLOC_LockH>
 80147aa:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80147ae:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 80147b2:	f8da 3000 	ldr.w	r3, [sl]
 80147b6:	9003      	str	r0, [sp, #12]
 80147b8:	fb08 9303 	mla	r3, r8, r3, r9
 80147bc:	7a1b      	ldrb	r3, [r3, #8]
 80147be:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 80147c2:	f9b0 2000 	ldrsh.w	r2, [r0]
 80147c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147c8:	1a9b      	subs	r3, r3, r2
 80147ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80147cc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80147d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147d2:	eb0d 0008 	add.w	r0, sp, r8
 80147d6:	1a9b      	subs	r3, r3, r2
 80147d8:	9310      	str	r3, [sp, #64]	; 0x40
 80147da:	f7fc f93f 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80147de:	f8da e000 	ldr.w	lr, [sl]
 80147e2:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8014920 <WM_HandlePID+0x300>
 80147e6:	ab0f      	add	r3, sp, #60	; 0x3c
 80147e8:	9315      	str	r3, [sp, #84]	; 0x54
 80147ea:	2311      	movs	r3, #17
 80147ec:	9312      	str	r3, [sp, #72]	; 0x48
 80147ee:	fb08 930e 	mla	r3, r8, lr, r9
 80147f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80147f6:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80147fa:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 80147fe:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8014802:	721a      	strb	r2, [r3, #8]
 8014804:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8014808:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801480c:	b133      	cbz	r3, 801481c <WM_HandlePID+0x1fc>
 801480e:	eb0a 030e 	add.w	r3, sl, lr
 8014812:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8014816:	9a05      	ldr	r2, [sp, #20]
 8014818:	605a      	str	r2, [r3, #4]
 801481a:	e000      	b.n	801481e <WM_HandlePID+0x1fe>
 801481c:	4699      	mov	r9, r3
 801481e:	eb0a 030e 	add.w	r3, sl, lr
 8014822:	a912      	add	r1, sp, #72	; 0x48
 8014824:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8014828:	9805      	ldr	r0, [sp, #20]
 801482a:	f003 fc79 	bl	8018120 <WM__SendMessageIfEnabled>
 801482e:	682b      	ldr	r3, [r5, #0]
 8014830:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
 8014834:	6851      	ldr	r1, [r2, #4]
 8014836:	458b      	cmp	fp, r1
 8014838:	bf1c      	itt	ne
 801483a:	6852      	ldrne	r2, [r2, #4]
 801483c:	9205      	strne	r2, [sp, #20]
 801483e:	220c      	movs	r2, #12
 8014840:	fb02 7303 	mla	r3, r2, r3, r7
 8014844:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8014848:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801484c:	f1b9 0f00 	cmp.w	r9, #0
 8014850:	d008      	beq.n	8014864 <WM_HandlePID+0x244>
 8014852:	4648      	mov	r0, r9
 8014854:	f7f6 fb80 	bl	800af58 <WM_IsWindow>
 8014858:	b120      	cbz	r0, 8014864 <WM_HandlePID+0x244>
 801485a:	682b      	ldr	r3, [r5, #0]
 801485c:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 8014860:	f8c3 9004 	str.w	r9, [r3, #4]
 8014864:	682a      	ldr	r2, [r5, #0]
 8014866:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801486a:	210c      	movs	r1, #12
 801486c:	4351      	muls	r1, r2
 801486e:	1878      	adds	r0, r7, r1
 8014870:	f890 8008 	ldrb.w	r8, [r0, #8]
 8014874:	ea53 0808 	orrs.w	r8, r3, r8
 8014878:	d064      	beq.n	8014944 <WM_HandlePID+0x324>
 801487a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8014920 <WM_HandlePID+0x300>
 801487e:	f44f 7e10 	mov.w	lr, #576	; 0x240
 8014882:	00d2      	lsls	r2, r2, #3
 8014884:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 8014888:	eb08 0e02 	add.w	lr, r8, r2
 801488c:	f8de 9004 	ldr.w	r9, [lr, #4]
 8014890:	f8dd c014 	ldr.w	ip, [sp, #20]
 8014894:	45e1      	cmp	r9, ip
 8014896:	d01c      	beq.n	80148d2 <WM_HandlePID+0x2b2>
 8014898:	f8de e004 	ldr.w	lr, [lr, #4]
 801489c:	f1be 0f00 	cmp.w	lr, #0
 80148a0:	d017      	beq.n	80148d2 <WM_HandlePID+0x2b2>
 80148a2:	b113      	cbz	r3, 80148aa <WM_HandlePID+0x28a>
 80148a4:	2300      	movs	r3, #0
 80148a6:	9315      	str	r3, [sp, #84]	; 0x54
 80148a8:	e009      	b.n	80148be <WM_HandlePID+0x29e>
 80148aa:	f8df e058 	ldr.w	lr, [pc, #88]	; 8014904 <WM_HandlePID+0x2e4>
 80148ae:	f88d 3020 	strb.w	r3, [sp, #32]
 80148b2:	f85e 1001 	ldr.w	r1, [lr, r1]
 80148b6:	9106      	str	r1, [sp, #24]
 80148b8:	6841      	ldr	r1, [r0, #4]
 80148ba:	9107      	str	r1, [sp, #28]
 80148bc:	9615      	str	r6, [sp, #84]	; 0x54
 80148be:	4442      	add	r2, r8
 80148c0:	a912      	add	r1, sp, #72	; 0x48
 80148c2:	6850      	ldr	r0, [r2, #4]
 80148c4:	f7ff fe8e 	bl	80145e4 <WM__SendTouchMessage>
 80148c8:	682b      	ldr	r3, [r5, #0]
 80148ca:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80148ce:	2200      	movs	r2, #0
 80148d0:	605a      	str	r2, [r3, #4]
 80148d2:	682b      	ldr	r3, [r5, #0]
 80148d4:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
 80148d8:	220c      	movs	r2, #12
 80148da:	fb02 7203 	mla	r2, r2, r3, r7
 80148de:	f882 e008 	strb.w	lr, [r2, #8]
 80148e2:	9a05      	ldr	r2, [sp, #20]
 80148e4:	2a00      	cmp	r2, #0
 80148e6:	d043      	beq.n	8014970 <WM_HandlePID+0x350>
 80148e8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80148ec:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80148f0:	f1be 0f00 	cmp.w	lr, #0
 80148f4:	d016      	beq.n	8014924 <WM_HandlePID+0x304>
 80148f6:	9a05      	ldr	r2, [sp, #20]
 80148f8:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80148fc:	e01b      	b.n	8014936 <WM_HandlePID+0x316>
 80148fe:	bf00      	nop
 8014900:	20021b98 	.word	0x20021b98
 8014904:	200017cc 	.word	0x200017cc
 8014908:	20021bf8 	.word	0x20021bf8
 801490c:	20021bec 	.word	0x20021bec
 8014910:	200017c4 	.word	0x200017c4
 8014914:	20021bb4 	.word	0x20021bb4
 8014918:	200017c8 	.word	0x200017c8
 801491c:	20021cdc 	.word	0x20021cdc
 8014920:	20021cec 	.word	0x20021cec
 8014924:	4b1d      	ldr	r3, [pc, #116]	; (801499c <WM_HandlePID+0x37c>)
 8014926:	781b      	ldrb	r3, [r3, #0]
 8014928:	b10b      	cbz	r3, 801492e <WM_HandlePID+0x30e>
 801492a:	f7f6 f93f 	bl	800abac <WM_ReleaseCapture>
 801492e:	682b      	ldr	r3, [r5, #0]
 8014930:	2200      	movs	r2, #0
 8014932:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8014936:	605a      	str	r2, [r3, #4]
 8014938:	9805      	ldr	r0, [sp, #20]
 801493a:	9615      	str	r6, [sp, #84]	; 0x54
 801493c:	a912      	add	r1, sp, #72	; 0x48
 801493e:	f7ff fe51 	bl	80145e4 <WM__SendTouchMessage>
 8014942:	e015      	b.n	8014970 <WM_HandlePID+0x350>
 8014944:	9b05      	ldr	r3, [sp, #20]
 8014946:	2b00      	cmp	r3, #0
 8014948:	f43f af15 	beq.w	8014776 <WM_HandlePID+0x156>
 801494c:	9805      	ldr	r0, [sp, #20]
 801494e:	f7f5 fe8e 	bl	800a66e <WM__IsEnabled>
 8014952:	2800      	cmp	r0, #0
 8014954:	f43f af0f 	beq.w	8014776 <WM_HandlePID+0x156>
 8014958:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801495c:	2310      	movs	r3, #16
 801495e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8014962:	9805      	ldr	r0, [sp, #20]
 8014964:	9312      	str	r3, [sp, #72]	; 0x48
 8014966:	a912      	add	r1, sp, #72	; 0x48
 8014968:	9615      	str	r6, [sp, #84]	; 0x54
 801496a:	f7ff fe3b 	bl	80145e4 <WM__SendTouchMessage>
 801496e:	e702      	b.n	8014776 <WM_HandlePID+0x156>
 8014970:	2601      	movs	r6, #1
 8014972:	682b      	ldr	r3, [r5, #0]
 8014974:	220c      	movs	r2, #12
 8014976:	fb02 7703 	mla	r7, r2, r3, r7
 801497a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801497e:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8014982:	4620      	mov	r0, r4
 8014984:	4619      	mov	r1, r3
 8014986:	f000 f84f 	bl	8014a28 <WM_PID__SetPrevState>
 801498a:	e000      	b.n	801498e <WM_HandlePID+0x36e>
 801498c:	2600      	movs	r6, #0
 801498e:	a804      	add	r0, sp, #16
 8014990:	f000 f932 	bl	8014bf8 <WM__RemoveCriticalHandle>
 8014994:	4630      	mov	r0, r6
 8014996:	b017      	add	sp, #92	; 0x5c
 8014998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801499c:	20021b9c 	.word	0x20021b9c

080149a0 <_SetScrollbar>:
 80149a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80149a2:	460d      	mov	r5, r1
 80149a4:	4611      	mov	r1, r2
 80149a6:	4606      	mov	r6, r0
 80149a8:	461f      	mov	r7, r3
 80149aa:	f7f6 fbda 	bl	800b162 <WM_GetDialogItem>
 80149ae:	4604      	mov	r4, r0
 80149b0:	b1a5      	cbz	r5, 80149dc <_SetScrollbar+0x3c>
 80149b2:	b920      	cbnz	r0, 80149be <_SetScrollbar+0x1e>
 80149b4:	4630      	mov	r0, r6
 80149b6:	4639      	mov	r1, r7
 80149b8:	f7fc fc50 	bl	801125c <SCROLLBAR_CreateAttached>
 80149bc:	e014      	b.n	80149e8 <_SetScrollbar+0x48>
 80149be:	f7fc f83f 	bl	8010a40 <GUI_ALLOC_LockH>
 80149c2:	ab02      	add	r3, sp, #8
 80149c4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80149c6:	f843 0d04 	str.w	r0, [r3, #-4]!
 80149ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80149ce:	f042 0202 	orr.w	r2, r2, #2
 80149d2:	6282      	str	r2, [r0, #40]	; 0x28
 80149d4:	4618      	mov	r0, r3
 80149d6:	f7fc f841 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80149da:	e005      	b.n	80149e8 <_SetScrollbar+0x48>
 80149dc:	b120      	cbz	r0, 80149e8 <_SetScrollbar+0x48>
 80149de:	f7f6 fad6 	bl	800af8e <WM_HideWindow>
 80149e2:	4620      	mov	r0, r4
 80149e4:	f7f7 fce2 	bl	800c3ac <WM__DeleteSecure>
 80149e8:	1c20      	adds	r0, r4, #0
 80149ea:	bf18      	it	ne
 80149ec:	2001      	movne	r0, #1
 80149ee:	b003      	add	sp, #12
 80149f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080149f2 <WM__SetScrollbarV>:
 80149f2:	22fe      	movs	r2, #254	; 0xfe
 80149f4:	2308      	movs	r3, #8
 80149f6:	f7ff bfd3 	b.w	80149a0 <_SetScrollbar>

080149fa <WM__SetScrollbarH>:
 80149fa:	22ff      	movs	r2, #255	; 0xff
 80149fc:	2300      	movs	r3, #0
 80149fe:	f7ff bfcf 	b.w	80149a0 <_SetScrollbar>

08014a02 <WM_SetScrollbarH>:
 8014a02:	f7ff bffa 	b.w	80149fa <WM__SetScrollbarH>

08014a06 <WM_SetScrollbarV>:
 8014a06:	f7ff bff4 	b.w	80149f2 <WM__SetScrollbarV>

08014a0a <WM_SendToParent>:
 8014a0a:	b538      	push	{r3, r4, r5, lr}
 8014a0c:	4605      	mov	r5, r0
 8014a0e:	460c      	mov	r4, r1
 8014a10:	b141      	cbz	r1, 8014a24 <WM_SendToParent+0x1a>
 8014a12:	f7f6 fb46 	bl	800b0a2 <WM_GetParent>
 8014a16:	b128      	cbz	r0, 8014a24 <WM_SendToParent+0x1a>
 8014a18:	60a5      	str	r5, [r4, #8]
 8014a1a:	4621      	mov	r1, r4
 8014a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a20:	f7f5 bdfe 	b.w	800a620 <WM__SendMessage>
 8014a24:	bd38      	pop	{r3, r4, r5, pc}
	...

08014a28 <WM_PID__SetPrevState>:
 8014a28:	4b03      	ldr	r3, [pc, #12]	; (8014a38 <WM_PID__SetPrevState+0x10>)
 8014a2a:	220c      	movs	r2, #12
 8014a2c:	fb02 3301 	mla	r3, r2, r1, r3
 8014a30:	c807      	ldmia	r0, {r0, r1, r2}
 8014a32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014a36:	4770      	bx	lr
 8014a38:	200017e4 	.word	0x200017e4

08014a3c <WM_OnKey>:
 8014a3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014a3e:	4a0a      	ldr	r2, [pc, #40]	; (8014a68 <WM_OnKey+0x2c>)
 8014a40:	4603      	mov	r3, r0
 8014a42:	6810      	ldr	r0, [r2, #0]
 8014a44:	4a09      	ldr	r2, [pc, #36]	; (8014a6c <WM_OnKey+0x30>)
 8014a46:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8014a4a:	b148      	cbz	r0, 8014a60 <WM_OnKey+0x24>
 8014a4c:	9300      	str	r3, [sp, #0]
 8014a4e:	230e      	movs	r3, #14
 8014a50:	9101      	str	r1, [sp, #4]
 8014a52:	9302      	str	r3, [sp, #8]
 8014a54:	a902      	add	r1, sp, #8
 8014a56:	ab00      	add	r3, sp, #0
 8014a58:	9305      	str	r3, [sp, #20]
 8014a5a:	f7f5 fde1 	bl	800a620 <WM__SendMessage>
 8014a5e:	2001      	movs	r0, #1
 8014a60:	b007      	add	sp, #28
 8014a62:	f85d fb04 	ldr.w	pc, [sp], #4
 8014a66:	bf00      	nop
 8014a68:	20021b98 	.word	0x20021b98
 8014a6c:	20021b88 	.word	0x20021b88

08014a70 <_GetDialogItem>:
 8014a70:	b570      	push	{r4, r5, r6, lr}
 8014a72:	4606      	mov	r6, r0
 8014a74:	460d      	mov	r5, r1
 8014a76:	f7fb ffd9 	bl	8010a2c <GUI_ALLOC_h2p>
 8014a7a:	69c4      	ldr	r4, [r0, #28]
 8014a7c:	b14c      	cbz	r4, 8014a92 <_GetDialogItem+0x22>
 8014a7e:	4620      	mov	r0, r4
 8014a80:	f7f6 fb2f 	bl	800b0e2 <WM_GetId>
 8014a84:	42a8      	cmp	r0, r5
 8014a86:	4620      	mov	r0, r4
 8014a88:	d013      	beq.n	8014ab2 <_GetDialogItem+0x42>
 8014a8a:	f7fb ffcf 	bl	8010a2c <GUI_ALLOC_h2p>
 8014a8e:	6a04      	ldr	r4, [r0, #32]
 8014a90:	e7f4      	b.n	8014a7c <_GetDialogItem+0xc>
 8014a92:	4630      	mov	r0, r6
 8014a94:	f7fb ffca 	bl	8010a2c <GUI_ALLOC_h2p>
 8014a98:	69c4      	ldr	r4, [r0, #28]
 8014a9a:	4620      	mov	r0, r4
 8014a9c:	b144      	cbz	r4, 8014ab0 <_GetDialogItem+0x40>
 8014a9e:	4629      	mov	r1, r5
 8014aa0:	f7ff ffe6 	bl	8014a70 <_GetDialogItem>
 8014aa4:	b928      	cbnz	r0, 8014ab2 <_GetDialogItem+0x42>
 8014aa6:	4620      	mov	r0, r4
 8014aa8:	f7fb ffc0 	bl	8010a2c <GUI_ALLOC_h2p>
 8014aac:	6a04      	ldr	r4, [r0, #32]
 8014aae:	e7f4      	b.n	8014a9a <_GetDialogItem+0x2a>
 8014ab0:	bd70      	pop	{r4, r5, r6, pc}
 8014ab2:	bd70      	pop	{r4, r5, r6, pc}

08014ab4 <WM_GetScrollbarH>:
 8014ab4:	b110      	cbz	r0, 8014abc <WM_GetScrollbarH+0x8>
 8014ab6:	21ff      	movs	r1, #255	; 0xff
 8014ab8:	f7ff bfda 	b.w	8014a70 <_GetDialogItem>
 8014abc:	4770      	bx	lr

08014abe <WM_GetScrollbarV>:
 8014abe:	b110      	cbz	r0, 8014ac6 <WM_GetScrollbarV+0x8>
 8014ac0:	21fe      	movs	r1, #254	; 0xfe
 8014ac2:	f7ff bfd5 	b.w	8014a70 <_GetDialogItem>
 8014ac6:	4770      	bx	lr

08014ac8 <WM_GetScrollState>:
 8014ac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014aca:	2323      	movs	r3, #35	; 0x23
 8014acc:	9103      	str	r1, [sp, #12]
 8014ace:	4669      	mov	r1, sp
 8014ad0:	9300      	str	r3, [sp, #0]
 8014ad2:	f7f7 f8b3 	bl	800bc3c <WM_SendMessage>
 8014ad6:	b005      	add	sp, #20
 8014ad8:	f85d fb04 	ldr.w	pc, [sp], #4

08014adc <WM_GetScrollPartner>:
 8014adc:	b538      	push	{r3, r4, r5, lr}
 8014ade:	4605      	mov	r5, r0
 8014ae0:	f7f6 faff 	bl	800b0e2 <WM_GetId>
 8014ae4:	28ff      	cmp	r0, #255	; 0xff
 8014ae6:	4604      	mov	r4, r0
 8014ae8:	d003      	beq.n	8014af2 <WM_GetScrollPartner+0x16>
 8014aea:	28fe      	cmp	r0, #254	; 0xfe
 8014aec:	bf08      	it	eq
 8014aee:	24ff      	moveq	r4, #255	; 0xff
 8014af0:	e000      	b.n	8014af4 <WM_GetScrollPartner+0x18>
 8014af2:	24fe      	movs	r4, #254	; 0xfe
 8014af4:	4628      	mov	r0, r5
 8014af6:	f7f6 fad4 	bl	800b0a2 <WM_GetParent>
 8014afa:	4621      	mov	r1, r4
 8014afc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b00:	f7f6 bb2f 	b.w	800b162 <WM_GetDialogItem>

08014b04 <WM_GetInsideRectExScrollbar>:
 8014b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b06:	460c      	mov	r4, r1
 8014b08:	b087      	sub	sp, #28
 8014b0a:	4606      	mov	r6, r0
 8014b0c:	2800      	cmp	r0, #0
 8014b0e:	d04b      	beq.n	8014ba8 <WM_GetInsideRectExScrollbar+0xa4>
 8014b10:	2900      	cmp	r1, #0
 8014b12:	d049      	beq.n	8014ba8 <WM_GetInsideRectExScrollbar+0xa4>
 8014b14:	21ff      	movs	r1, #255	; 0xff
 8014b16:	f7f6 fb24 	bl	800b162 <WM_GetDialogItem>
 8014b1a:	21fe      	movs	r1, #254	; 0xfe
 8014b1c:	4605      	mov	r5, r0
 8014b1e:	4630      	mov	r0, r6
 8014b20:	f7f6 fb1f 	bl	800b162 <WM_GetDialogItem>
 8014b24:	4669      	mov	r1, sp
 8014b26:	4607      	mov	r7, r0
 8014b28:	4630      	mov	r0, r6
 8014b2a:	f7f6 faaf 	bl	800b08c <WM_GetWindowRectEx>
 8014b2e:	4630      	mov	r0, r6
 8014b30:	a902      	add	r1, sp, #8
 8014b32:	f000 f83b 	bl	8014bac <WM_GetInsideRectEx>
 8014b36:	b1c7      	cbz	r7, 8014b6a <WM_GetInsideRectExScrollbar+0x66>
 8014b38:	4638      	mov	r0, r7
 8014b3a:	a904      	add	r1, sp, #16
 8014b3c:	f7f6 faa6 	bl	800b08c <WM_GetWindowRectEx>
 8014b40:	f9bd 1000 	ldrsh.w	r1, [sp]
 8014b44:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8014b48:	a804      	add	r0, sp, #16
 8014b4a:	4249      	negs	r1, r1
 8014b4c:	4252      	negs	r2, r2
 8014b4e:	f7fa ffe1 	bl	800fb14 <GUI_MoveRect>
 8014b52:	4638      	mov	r0, r7
 8014b54:	f000 f83e 	bl	8014bd4 <WM_GetFlags>
 8014b58:	f000 0082 	and.w	r0, r0, #130	; 0x82
 8014b5c:	2882      	cmp	r0, #130	; 0x82
 8014b5e:	d104      	bne.n	8014b6a <WM_GetInsideRectExScrollbar+0x66>
 8014b60:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8014b64:	3b01      	subs	r3, #1
 8014b66:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014b6a:	b1cd      	cbz	r5, 8014ba0 <WM_GetInsideRectExScrollbar+0x9c>
 8014b6c:	4628      	mov	r0, r5
 8014b6e:	a904      	add	r1, sp, #16
 8014b70:	f7f6 fa8c 	bl	800b08c <WM_GetWindowRectEx>
 8014b74:	f9bd 1000 	ldrsh.w	r1, [sp]
 8014b78:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8014b7c:	a804      	add	r0, sp, #16
 8014b7e:	4249      	negs	r1, r1
 8014b80:	4252      	negs	r2, r2
 8014b82:	f7fa ffc7 	bl	800fb14 <GUI_MoveRect>
 8014b86:	4628      	mov	r0, r5
 8014b88:	f000 f824 	bl	8014bd4 <WM_GetFlags>
 8014b8c:	f400 7081 	and.w	r0, r0, #258	; 0x102
 8014b90:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
 8014b94:	d104      	bne.n	8014ba0 <WM_GetInsideRectExScrollbar+0x9c>
 8014b96:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8014b9a:	3b01      	subs	r3, #1
 8014b9c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014ba0:	ab02      	add	r3, sp, #8
 8014ba2:	cb03      	ldmia	r3!, {r0, r1}
 8014ba4:	6020      	str	r0, [r4, #0]
 8014ba6:	6061      	str	r1, [r4, #4]
 8014ba8:	b007      	add	sp, #28
 8014baa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014bac <WM_GetInsideRectEx>:
 8014bac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014bae:	9103      	str	r1, [sp, #12]
 8014bb0:	a904      	add	r1, sp, #16
 8014bb2:	2314      	movs	r3, #20
 8014bb4:	f841 3d10 	str.w	r3, [r1, #-16]!
 8014bb8:	4669      	mov	r1, sp
 8014bba:	f7f7 f83f 	bl	800bc3c <WM_SendMessage>
 8014bbe:	b005      	add	sp, #20
 8014bc0:	f85d fb04 	ldr.w	pc, [sp], #4

08014bc4 <WM_GetInsideRect>:
 8014bc4:	4b02      	ldr	r3, [pc, #8]	; (8014bd0 <WM_GetInsideRect+0xc>)
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	4601      	mov	r1, r0
 8014bca:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8014bcc:	f7ff bfee 	b.w	8014bac <WM_GetInsideRectEx>
 8014bd0:	20000308 	.word	0x20000308

08014bd4 <WM_GetFlags>:
 8014bd4:	b508      	push	{r3, lr}
 8014bd6:	b118      	cbz	r0, 8014be0 <WM_GetFlags+0xc>
 8014bd8:	f7fb ff28 	bl	8010a2c <GUI_ALLOC_h2p>
 8014bdc:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 8014bde:	bd08      	pop	{r3, pc}
 8014be0:	bd08      	pop	{r3, pc}

08014be2 <WM_ForEachDesc>:
 8014be2:	f003 baaa 	b.w	801813a <WM__ForEachDesc>
	...

08014be8 <WM__AddCriticalHandle>:
 8014be8:	4b02      	ldr	r3, [pc, #8]	; (8014bf4 <WM__AddCriticalHandle+0xc>)
 8014bea:	681a      	ldr	r2, [r3, #0]
 8014bec:	6002      	str	r2, [r0, #0]
 8014bee:	6018      	str	r0, [r3, #0]
 8014bf0:	4770      	bx	lr
 8014bf2:	bf00      	nop
 8014bf4:	20021bac 	.word	0x20021bac

08014bf8 <WM__RemoveCriticalHandle>:
 8014bf8:	4a09      	ldr	r2, [pc, #36]	; (8014c20 <WM__RemoveCriticalHandle+0x28>)
 8014bfa:	6813      	ldr	r3, [r2, #0]
 8014bfc:	b510      	push	{r4, lr}
 8014bfe:	4614      	mov	r4, r2
 8014c00:	b16b      	cbz	r3, 8014c1e <WM__RemoveCriticalHandle+0x26>
 8014c02:	2200      	movs	r2, #0
 8014c04:	4283      	cmp	r3, r0
 8014c06:	d105      	bne.n	8014c14 <WM__RemoveCriticalHandle+0x1c>
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	b10a      	cbz	r2, 8014c10 <WM__RemoveCriticalHandle+0x18>
 8014c0c:	6013      	str	r3, [r2, #0]
 8014c0e:	bd10      	pop	{r4, pc}
 8014c10:	6023      	str	r3, [r4, #0]
 8014c12:	bd10      	pop	{r4, pc}
 8014c14:	6819      	ldr	r1, [r3, #0]
 8014c16:	b111      	cbz	r1, 8014c1e <WM__RemoveCriticalHandle+0x26>
 8014c18:	461a      	mov	r2, r3
 8014c1a:	460b      	mov	r3, r1
 8014c1c:	e7f2      	b.n	8014c04 <WM__RemoveCriticalHandle+0xc>
 8014c1e:	bd10      	pop	{r4, pc}
 8014c20:	20021bac 	.word	0x20021bac

08014c24 <WM_CheckScrollBounds>:
 8014c24:	6802      	ldr	r2, [r0, #0]
 8014c26:	6883      	ldr	r3, [r0, #8]
 8014c28:	1ad3      	subs	r3, r2, r3
 8014c2a:	6842      	ldr	r2, [r0, #4]
 8014c2c:	2a00      	cmp	r2, #0
 8014c2e:	bfbc      	itt	lt
 8014c30:	2200      	movlt	r2, #0
 8014c32:	6042      	strlt	r2, [r0, #4]
 8014c34:	6842      	ldr	r2, [r0, #4]
 8014c36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014c3a:	429a      	cmp	r2, r3
 8014c3c:	bfc8      	it	gt
 8014c3e:	6043      	strgt	r3, [r0, #4]
 8014c40:	4770      	bx	lr

08014c42 <WM_SetScrollValue>:
 8014c42:	b538      	push	{r3, r4, r5, lr}
 8014c44:	4604      	mov	r4, r0
 8014c46:	6845      	ldr	r5, [r0, #4]
 8014c48:	6041      	str	r1, [r0, #4]
 8014c4a:	f7ff ffeb 	bl	8014c24 <WM_CheckScrollBounds>
 8014c4e:	6860      	ldr	r0, [r4, #4]
 8014c50:	1b40      	subs	r0, r0, r5
 8014c52:	bd38      	pop	{r3, r4, r5, pc}

08014c54 <WM_BringToBottom>:
 8014c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014c58:	4604      	mov	r4, r0
 8014c5a:	b087      	sub	sp, #28
 8014c5c:	2800      	cmp	r0, #0
 8014c5e:	d039      	beq.n	8014cd4 <WM_BringToBottom+0x80>
 8014c60:	f7fb feee 	bl	8010a40 <GUI_ALLOC_LockH>
 8014c64:	4603      	mov	r3, r0
 8014c66:	9001      	str	r0, [sp, #4]
 8014c68:	c803      	ldmia	r0, {r0, r1}
 8014c6a:	ad04      	add	r5, sp, #16
 8014c6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8014c70:	a801      	add	r0, sp, #4
 8014c72:	6a1e      	ldr	r6, [r3, #32]
 8014c74:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 8014c78:	f7fb fef0 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8014c7c:	4620      	mov	r0, r4
 8014c7e:	f7ff fc0f 	bl	80144a0 <WM__GetPrevSibling>
 8014c82:	4607      	mov	r7, r0
 8014c84:	b330      	cbz	r0, 8014cd4 <WM_BringToBottom+0x80>
 8014c86:	4620      	mov	r0, r4
 8014c88:	f7f6 fa0b 	bl	800b0a2 <WM_GetParent>
 8014c8c:	f019 0f02 	tst.w	r9, #2
 8014c90:	4680      	mov	r8, r0
 8014c92:	d004      	beq.n	8014c9e <WM_BringToBottom+0x4a>
 8014c94:	4628      	mov	r0, r5
 8014c96:	4641      	mov	r1, r8
 8014c98:	4632      	mov	r2, r6
 8014c9a:	f7f6 ffb7 	bl	800bc0c <WM__InvalidateRectEx>
 8014c9e:	4620      	mov	r0, r4
 8014ca0:	f7fb fece 	bl	8010a40 <GUI_ALLOC_LockH>
 8014ca4:	9001      	str	r0, [sp, #4]
 8014ca6:	4640      	mov	r0, r8
 8014ca8:	f7fb feca 	bl	8010a40 <GUI_ALLOC_LockH>
 8014cac:	9003      	str	r0, [sp, #12]
 8014cae:	4638      	mov	r0, r7
 8014cb0:	f7fb fec6 	bl	8010a40 <GUI_ALLOC_LockH>
 8014cb4:	9b03      	ldr	r3, [sp, #12]
 8014cb6:	9a01      	ldr	r2, [sp, #4]
 8014cb8:	69d9      	ldr	r1, [r3, #28]
 8014cba:	6206      	str	r6, [r0, #32]
 8014cbc:	9002      	str	r0, [sp, #8]
 8014cbe:	6211      	str	r1, [r2, #32]
 8014cc0:	a801      	add	r0, sp, #4
 8014cc2:	61dc      	str	r4, [r3, #28]
 8014cc4:	f7fb feca 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8014cc8:	a803      	add	r0, sp, #12
 8014cca:	f7fb fec7 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8014cce:	a802      	add	r0, sp, #8
 8014cd0:	f7fb fec4 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8014cd4:	b007      	add	sp, #28
 8014cd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08014cda <_Convert16>:
 8014cda:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cde:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8014ce2:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8014ce6:	4605      	mov	r5, r0
 8014ce8:	460e      	mov	r6, r1
 8014cea:	4690      	mov	r8, r2
 8014cec:	461f      	mov	r7, r3
 8014cee:	4614      	mov	r4, r2
 8014cf0:	4689      	mov	r9, r1
 8014cf2:	f835 0b02 	ldrh.w	r0, [r5], #2
 8014cf6:	47d8      	blx	fp
 8014cf8:	47d0      	blx	sl
 8014cfa:	3c01      	subs	r4, #1
 8014cfc:	f849 0b04 	str.w	r0, [r9], #4
 8014d00:	d1f7      	bne.n	8014cf2 <_Convert16+0x18>
 8014d02:	2f1f      	cmp	r7, #31
 8014d04:	d806      	bhi.n	8014d14 <_Convert16+0x3a>
 8014d06:	4630      	mov	r0, r6
 8014d08:	4641      	mov	r1, r8
 8014d0a:	463a      	mov	r2, r7
 8014d0c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d10:	f002 b8a3 	b.w	8016e5a <GUI__CompactPixelIndices>
 8014d14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014d18 <_Convert8>:
 8014d18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d1c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8014d20:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8014d24:	4605      	mov	r5, r0
 8014d26:	460e      	mov	r6, r1
 8014d28:	4690      	mov	r8, r2
 8014d2a:	461f      	mov	r7, r3
 8014d2c:	4689      	mov	r9, r1
 8014d2e:	4604      	mov	r4, r0
 8014d30:	f814 0b01 	ldrb.w	r0, [r4], #1
 8014d34:	47d8      	blx	fp
 8014d36:	47d0      	blx	sl
 8014d38:	1b2b      	subs	r3, r5, r4
 8014d3a:	4443      	add	r3, r8
 8014d3c:	f849 0b04 	str.w	r0, [r9], #4
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d1f5      	bne.n	8014d30 <_Convert8+0x18>
 8014d44:	2f1f      	cmp	r7, #31
 8014d46:	d806      	bhi.n	8014d56 <_Convert8+0x3e>
 8014d48:	4630      	mov	r0, r6
 8014d4a:	4641      	mov	r1, r8
 8014d4c:	463a      	mov	r2, r7
 8014d4e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d52:	f002 b882 	b.w	8016e5a <GUI__CompactPixelIndices>
 8014d56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08014d5c <GUI_MEMDEV__WriteToActiveOpaque>:
 8014d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d60:	b09d      	sub	sp, #116	; 0x74
 8014d62:	4606      	mov	r6, r0
 8014d64:	910f      	str	r1, [sp, #60]	; 0x3c
 8014d66:	920d      	str	r2, [sp, #52]	; 0x34
 8014d68:	f7fb fe6a 	bl	8010a40 <GUI_ALLOC_LockH>
 8014d6c:	ab1c      	add	r3, sp, #112	; 0x70
 8014d6e:	6944      	ldr	r4, [r0, #20]
 8014d70:	f843 0d1c 	str.w	r0, [r3, #-28]!
 8014d74:	4618      	mov	r0, r3
 8014d76:	f7fb fe71 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8014d7a:	4630      	mov	r0, r6
 8014d7c:	f7f8 fc08 	bl	800d590 <GUI_MEMDEV_GetBitsPerPixel>
 8014d80:	2808      	cmp	r0, #8
 8014d82:	4601      	mov	r1, r0
 8014d84:	dd02      	ble.n	8014d8c <GUI_MEMDEV__WriteToActiveOpaque+0x30>
 8014d86:	2c00      	cmp	r4, #0
 8014d88:	f000 81c3 	beq.w	8015112 <GUI_MEMDEV__WriteToActiveOpaque+0x3b6>
 8014d8c:	2201      	movs	r2, #1
 8014d8e:	f04f 0800 	mov.w	r8, #0
 8014d92:	4630      	mov	r0, r6
 8014d94:	921b      	str	r2, [sp, #108]	; 0x6c
 8014d96:	920b      	str	r2, [sp, #44]	; 0x2c
 8014d98:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8014d9c:	f7fb fe50 	bl	8010a40 <GUI_ALLOC_LockH>
 8014da0:	6803      	ldr	r3, [r0, #0]
 8014da2:	f8df a610 	ldr.w	sl, [pc, #1552]	; 80153b4 <GUI_MEMDEV__WriteToActiveOpaque+0x658>
 8014da6:	691b      	ldr	r3, [r3, #16]
 8014da8:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 8014dac:	685b      	ldr	r3, [r3, #4]
 8014dae:	930e      	str	r3, [sp, #56]	; 0x38
 8014db0:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 8014db4:	f8da 3000 	ldr.w	r3, [sl]
 8014db8:	f84b 0d14 	str.w	r0, [fp, #-20]!
 8014dbc:	6904      	ldr	r4, [r0, #16]
 8014dbe:	6945      	ldr	r5, [r0, #20]
 8014dc0:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8014dc4:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8014dc8:	7c58      	ldrb	r0, [r3, #17]
 8014dca:	9112      	str	r1, [sp, #72]	; 0x48
 8014dcc:	f7f9 fb5a 	bl	800e484 <GUI_GetBitsPerPixelEx>
 8014dd0:	f8da 3000 	ldr.w	r3, [sl]
 8014dd4:	9010      	str	r0, [sp, #64]	; 0x40
 8014dd6:	7c58      	ldrb	r0, [r3, #17]
 8014dd8:	f7f9 fb72 	bl	800e4c0 <GUI_GetpfIndex2ColorEx>
 8014ddc:	4603      	mov	r3, r0
 8014dde:	4658      	mov	r0, fp
 8014de0:	9309      	str	r3, [sp, #36]	; 0x24
 8014de2:	f7fb fe3b 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8014de6:	2c08      	cmp	r4, #8
 8014de8:	4651      	mov	r1, sl
 8014dea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dee:	d904      	bls.n	8014dfa <GUI_MEMDEV__WriteToActiveOpaque+0x9e>
 8014df0:	2c10      	cmp	r4, #16
 8014df2:	bf8c      	ite	hi
 8014df4:	2204      	movhi	r2, #4
 8014df6:	2202      	movls	r2, #2
 8014df8:	e005      	b.n	8014e06 <GUI_MEMDEV__WriteToActiveOpaque+0xaa>
 8014dfa:	2c01      	cmp	r4, #1
 8014dfc:	d103      	bne.n	8014e06 <GUI_MEMDEV__WriteToActiveOpaque+0xaa>
 8014dfe:	9411      	str	r4, [sp, #68]	; 0x44
 8014e00:	f10d 0868 	add.w	r8, sp, #104	; 0x68
 8014e04:	e000      	b.n	8014e08 <GUI_MEMDEV__WriteToActiveOpaque+0xac>
 8014e06:	9211      	str	r2, [sp, #68]	; 0x44
 8014e08:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014e0a:	4298      	cmp	r0, r3
 8014e0c:	f000 80e2 	beq.w	8014fd4 <GUI_MEMDEV__WriteToActiveOpaque+0x278>
 8014e10:	680b      	ldr	r3, [r1, #0]
 8014e12:	7c58      	ldrb	r0, [r3, #17]
 8014e14:	f7f9 fb5c 	bl	800e4d0 <GUI_GetpfColor2IndexEx>
 8014e18:	9013      	str	r0, [sp, #76]	; 0x4c
 8014e1a:	00b8      	lsls	r0, r7, #2
 8014e1c:	f7fc f868 	bl	8010ef0 <GUI_ALLOC_AllocNoInit>
 8014e20:	900c      	str	r0, [sp, #48]	; 0x30
 8014e22:	2800      	cmp	r0, #0
 8014e24:	f000 8327 	beq.w	8015476 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 8014e28:	4630      	mov	r0, r6
 8014e2a:	f7f7 fd65 	bl	800c8f8 <GUI_MEMDEV_GetDataPtr>
 8014e2e:	4606      	mov	r6, r0
 8014e30:	2d00      	cmp	r5, #0
 8014e32:	f000 80be 	beq.w	8014fb2 <GUI_MEMDEV__WriteToActiveOpaque+0x256>
 8014e36:	4628      	mov	r0, r5
 8014e38:	f7fb fe02 	bl	8010a40 <GUI_ALLOC_LockH>
 8014e3c:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8014e40:	9018      	str	r0, [sp, #96]	; 0x60
 8014e42:	f04f 0a00 	mov.w	sl, #0
 8014e46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014e48:	4592      	cmp	sl, r2
 8014e4a:	f280 80ae 	bge.w	8014faa <GUI_MEMDEV__WriteToActiveOpaque+0x24e>
 8014e4e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8014e50:	2300      	movs	r3, #0
 8014e52:	9319      	str	r3, [sp, #100]	; 0x64
 8014e54:	6883      	ldr	r3, [r0, #8]
 8014e56:	a919      	add	r1, sp, #100	; 0x64
 8014e58:	695b      	ldr	r3, [r3, #20]
 8014e5a:	4652      	mov	r2, sl
 8014e5c:	4798      	blx	r3
 8014e5e:	42b8      	cmp	r0, r7
 8014e60:	4605      	mov	r5, r0
 8014e62:	d12f      	bne.n	8014ec4 <GUI_MEMDEV__WriteToActiveOpaque+0x168>
 8014e64:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014e66:	f7fb fdeb 	bl	8010a40 <GUI_ALLOC_LockH>
 8014e6a:	2c08      	cmp	r4, #8
 8014e6c:	4601      	mov	r1, r0
 8014e6e:	9016      	str	r0, [sp, #88]	; 0x58
 8014e70:	d909      	bls.n	8014e86 <GUI_MEMDEV__WriteToActiveOpaque+0x12a>
 8014e72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014e74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014e76:	9200      	str	r2, [sp, #0]
 8014e78:	9301      	str	r3, [sp, #4]
 8014e7a:	4630      	mov	r0, r6
 8014e7c:	463a      	mov	r2, r7
 8014e7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014e80:	f7ff ff2b 	bl	8014cda <_Convert16>
 8014e84:	e008      	b.n	8014e98 <GUI_MEMDEV__WriteToActiveOpaque+0x13c>
 8014e86:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014e88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014e8a:	9000      	str	r0, [sp, #0]
 8014e8c:	9201      	str	r2, [sp, #4]
 8014e8e:	4630      	mov	r0, r6
 8014e90:	463a      	mov	r2, r7
 8014e92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014e94:	f7ff ff40 	bl	8014d18 <_Convert8>
 8014e98:	2301      	movs	r3, #1
 8014e9a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014e9c:	9002      	str	r0, [sp, #8]
 8014e9e:	ad1c      	add	r5, sp, #112	; 0x70
 8014ea0:	2200      	movs	r2, #0
 8014ea2:	9300      	str	r3, [sp, #0]
 8014ea4:	9301      	str	r3, [sp, #4]
 8014ea6:	9203      	str	r2, [sp, #12]
 8014ea8:	f855 2d18 	ldr.w	r2, [r5, #-24]!
 8014eac:	9204      	str	r2, [sp, #16]
 8014eae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8014eb0:	f8cd 8014 	str.w	r8, [sp, #20]
 8014eb4:	4659      	mov	r1, fp
 8014eb6:	463a      	mov	r2, r7
 8014eb8:	f7f9 fd0c 	bl	800e8d4 <LCD_DrawBitmap>
 8014ebc:	4628      	mov	r0, r5
 8014ebe:	f7fb fdcd 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8014ec2:	e060      	b.n	8014f86 <GUI_MEMDEV__WriteToActiveOpaque+0x22a>
 8014ec4:	2c01      	cmp	r4, #1
 8014ec6:	d15c      	bne.n	8014f82 <GUI_MEMDEV__WriteToActiveOpaque+0x226>
 8014ec8:	2d00      	cmp	r5, #0
 8014eca:	d05c      	beq.n	8014f86 <GUI_MEMDEV__WriteToActiveOpaque+0x22a>
 8014ecc:	9819      	ldr	r0, [sp, #100]	; 0x64
 8014ece:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014ed0:	f8cd 900c 	str.w	r9, [sp, #12]
 8014ed4:	2208      	movs	r2, #8
 8014ed6:	fb90 f2f2 	sdiv	r2, r0, r2
 8014eda:	4432      	add	r2, r6
 8014edc:	2301      	movs	r3, #1
 8014ede:	9204      	str	r2, [sp, #16]
 8014ee0:	f000 0207 	and.w	r2, r0, #7
 8014ee4:	9300      	str	r3, [sp, #0]
 8014ee6:	4408      	add	r0, r1
 8014ee8:	9301      	str	r3, [sp, #4]
 8014eea:	9302      	str	r3, [sp, #8]
 8014eec:	9206      	str	r2, [sp, #24]
 8014eee:	4659      	mov	r1, fp
 8014ef0:	462a      	mov	r2, r5
 8014ef2:	f8cd 8014 	str.w	r8, [sp, #20]
 8014ef6:	f7f9 fc0d 	bl	800e714 <LCD__DrawBitmap_1bpp>
 8014efa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014efc:	9818      	ldr	r0, [sp, #96]	; 0x60
 8014efe:	441d      	add	r5, r3
 8014f00:	6883      	ldr	r3, [r0, #8]
 8014f02:	9519      	str	r5, [sp, #100]	; 0x64
 8014f04:	695b      	ldr	r3, [r3, #20]
 8014f06:	a919      	add	r1, sp, #100	; 0x64
 8014f08:	4652      	mov	r2, sl
 8014f0a:	4798      	blx	r3
 8014f0c:	4605      	mov	r5, r0
 8014f0e:	e7db      	b.n	8014ec8 <GUI_MEMDEV__WriteToActiveOpaque+0x16c>
 8014f10:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014f12:	f7fb fd95 	bl	8010a40 <GUI_ALLOC_LockH>
 8014f16:	2c08      	cmp	r4, #8
 8014f18:	4601      	mov	r1, r0
 8014f1a:	9016      	str	r0, [sp, #88]	; 0x58
 8014f1c:	9819      	ldr	r0, [sp, #100]	; 0x64
 8014f1e:	d938      	bls.n	8014f92 <GUI_MEMDEV__WriteToActiveOpaque+0x236>
 8014f20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014f22:	9200      	str	r2, [sp, #0]
 8014f24:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014f26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014f28:	9301      	str	r3, [sp, #4]
 8014f2a:	fb00 6002 	mla	r0, r0, r2, r6
 8014f2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014f30:	462a      	mov	r2, r5
 8014f32:	f7ff fed2 	bl	8014cda <_Convert16>
 8014f36:	2301      	movs	r3, #1
 8014f38:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 8014f3c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014f3e:	9300      	str	r3, [sp, #0]
 8014f40:	2200      	movs	r2, #0
 8014f42:	9301      	str	r3, [sp, #4]
 8014f44:	9002      	str	r0, [sp, #8]
 8014f46:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014f48:	9203      	str	r2, [sp, #12]
 8014f4a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8014f4c:	f85c 2d18 	ldr.w	r2, [ip, #-24]!
 8014f50:	9204      	str	r2, [sp, #16]
 8014f52:	4408      	add	r0, r1
 8014f54:	462a      	mov	r2, r5
 8014f56:	4659      	mov	r1, fp
 8014f58:	f8cd 8014 	str.w	r8, [sp, #20]
 8014f5c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8014f60:	f7f9 fcb8 	bl	800e8d4 <LCD_DrawBitmap>
 8014f64:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8014f68:	4660      	mov	r0, ip
 8014f6a:	f7fb fd77 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8014f6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014f70:	9818      	ldr	r0, [sp, #96]	; 0x60
 8014f72:	441d      	add	r5, r3
 8014f74:	6883      	ldr	r3, [r0, #8]
 8014f76:	9519      	str	r5, [sp, #100]	; 0x64
 8014f78:	695b      	ldr	r3, [r3, #20]
 8014f7a:	a919      	add	r1, sp, #100	; 0x64
 8014f7c:	4652      	mov	r2, sl
 8014f7e:	4798      	blx	r3
 8014f80:	4605      	mov	r5, r0
 8014f82:	2d00      	cmp	r5, #0
 8014f84:	d1c4      	bne.n	8014f10 <GUI_MEMDEV__WriteToActiveOpaque+0x1b4>
 8014f86:	444e      	add	r6, r9
 8014f88:	f10a 0a01 	add.w	sl, sl, #1
 8014f8c:	f10b 0b01 	add.w	fp, fp, #1
 8014f90:	e759      	b.n	8014e46 <GUI_MEMDEV__WriteToActiveOpaque+0xea>
 8014f92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f94:	9300      	str	r3, [sp, #0]
 8014f96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014f98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014f9a:	9201      	str	r2, [sp, #4]
 8014f9c:	fb00 6003 	mla	r0, r0, r3, r6
 8014fa0:	462a      	mov	r2, r5
 8014fa2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014fa4:	f7ff feb8 	bl	8014d18 <_Convert8>
 8014fa8:	e7c5      	b.n	8014f36 <GUI_MEMDEV__WriteToActiveOpaque+0x1da>
 8014faa:	a818      	add	r0, sp, #96	; 0x60
 8014fac:	f7fb fd56 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8014fb0:	e00e      	b.n	8014fd0 <GUI_MEMDEV__WriteToActiveOpaque+0x274>
 8014fb2:	2301      	movs	r3, #1
 8014fb4:	9300      	str	r3, [sp, #0]
 8014fb6:	9301      	str	r3, [sp, #4]
 8014fb8:	9004      	str	r0, [sp, #16]
 8014fba:	9402      	str	r4, [sp, #8]
 8014fbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8014fc0:	f8cd 8014 	str.w	r8, [sp, #20]
 8014fc4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8014fc6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014fc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014fca:	463a      	mov	r2, r7
 8014fcc:	f7f9 fc82 	bl	800e8d4 <LCD_DrawBitmap>
 8014fd0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014fd2:	e24e      	b.n	8015472 <GUI_MEMDEV__WriteToActiveOpaque+0x716>
 8014fd4:	4630      	mov	r0, r6
 8014fd6:	f7f7 fc8f 	bl	800c8f8 <GUI_MEMDEV_GetDataPtr>
 8014fda:	4606      	mov	r6, r0
 8014fdc:	2d00      	cmp	r5, #0
 8014fde:	f000 808a 	beq.w	80150f6 <GUI_MEMDEV__WriteToActiveOpaque+0x39a>
 8014fe2:	4628      	mov	r0, r5
 8014fe4:	f7fb fd2c 	bl	8010a40 <GUI_ALLOC_LockH>
 8014fe8:	2500      	movs	r5, #0
 8014fea:	9018      	str	r0, [sp, #96]	; 0x60
 8014fec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014fee:	429d      	cmp	r5, r3
 8014ff0:	da7d      	bge.n	80150ee <GUI_MEMDEV__WriteToActiveOpaque+0x392>
 8014ff2:	9818      	ldr	r0, [sp, #96]	; 0x60
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	9319      	str	r3, [sp, #100]	; 0x64
 8014ff8:	6883      	ldr	r3, [r0, #8]
 8014ffa:	a919      	add	r1, sp, #100	; 0x64
 8014ffc:	695b      	ldr	r3, [r3, #20]
 8014ffe:	462a      	mov	r2, r5
 8015000:	4798      	blx	r3
 8015002:	42b8      	cmp	r0, r7
 8015004:	4682      	mov	sl, r0
 8015006:	d124      	bne.n	8015052 <GUI_MEMDEV__WriteToActiveOpaque+0x2f6>
 8015008:	46aa      	mov	sl, r5
 801500a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801500c:	6883      	ldr	r3, [r0, #8]
 801500e:	f10a 0b01 	add.w	fp, sl, #1
 8015012:	695b      	ldr	r3, [r3, #20]
 8015014:	a919      	add	r1, sp, #100	; 0x64
 8015016:	465a      	mov	r2, fp
 8015018:	4798      	blx	r3
 801501a:	42b8      	cmp	r0, r7
 801501c:	d101      	bne.n	8015022 <GUI_MEMDEV__WriteToActiveOpaque+0x2c6>
 801501e:	46da      	mov	sl, fp
 8015020:	e7f3      	b.n	801500a <GUI_MEMDEV__WriteToActiveOpaque+0x2ae>
 8015022:	ebc5 0b0a 	rsb	fp, r5, sl
 8015026:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015028:	9604      	str	r6, [sp, #16]
 801502a:	2301      	movs	r3, #1
 801502c:	f10b 0b01 	add.w	fp, fp, #1
 8015030:	9300      	str	r3, [sp, #0]
 8015032:	9301      	str	r3, [sp, #4]
 8015034:	4429      	add	r1, r5
 8015036:	9402      	str	r4, [sp, #8]
 8015038:	f8cd 900c 	str.w	r9, [sp, #12]
 801503c:	f8cd 8014 	str.w	r8, [sp, #20]
 8015040:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015042:	463a      	mov	r2, r7
 8015044:	465b      	mov	r3, fp
 8015046:	f7f9 fc45 	bl	800e8d4 <LCD_DrawBitmap>
 801504a:	fb09 660b 	mla	r6, r9, fp, r6
 801504e:	4655      	mov	r5, sl
 8015050:	e04b      	b.n	80150ea <GUI_MEMDEV__WriteToActiveOpaque+0x38e>
 8015052:	2c01      	cmp	r4, #1
 8015054:	d127      	bne.n	80150a6 <GUI_MEMDEV__WriteToActiveOpaque+0x34a>
 8015056:	f1ba 0f00 	cmp.w	sl, #0
 801505a:	d022      	beq.n	80150a2 <GUI_MEMDEV__WriteToActiveOpaque+0x346>
 801505c:	9819      	ldr	r0, [sp, #100]	; 0x64
 801505e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015060:	f8cd 900c 	str.w	r9, [sp, #12]
 8015064:	2208      	movs	r2, #8
 8015066:	fb90 f2f2 	sdiv	r2, r0, r2
 801506a:	4432      	add	r2, r6
 801506c:	9204      	str	r2, [sp, #16]
 801506e:	f000 0207 	and.w	r2, r0, #7
 8015072:	4408      	add	r0, r1
 8015074:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015076:	9206      	str	r2, [sp, #24]
 8015078:	2301      	movs	r3, #1
 801507a:	4652      	mov	r2, sl
 801507c:	9300      	str	r3, [sp, #0]
 801507e:	9301      	str	r3, [sp, #4]
 8015080:	9302      	str	r3, [sp, #8]
 8015082:	4429      	add	r1, r5
 8015084:	f8cd 8014 	str.w	r8, [sp, #20]
 8015088:	f7f9 fb44 	bl	800e714 <LCD__DrawBitmap_1bpp>
 801508c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801508e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8015090:	4453      	add	r3, sl
 8015092:	9319      	str	r3, [sp, #100]	; 0x64
 8015094:	6883      	ldr	r3, [r0, #8]
 8015096:	a919      	add	r1, sp, #100	; 0x64
 8015098:	695b      	ldr	r3, [r3, #20]
 801509a:	462a      	mov	r2, r5
 801509c:	4798      	blx	r3
 801509e:	4682      	mov	sl, r0
 80150a0:	e7d9      	b.n	8015056 <GUI_MEMDEV__WriteToActiveOpaque+0x2fa>
 80150a2:	444e      	add	r6, r9
 80150a4:	e021      	b.n	80150ea <GUI_MEMDEV__WriteToActiveOpaque+0x38e>
 80150a6:	f1ba 0f00 	cmp.w	sl, #0
 80150aa:	d0fa      	beq.n	80150a2 <GUI_MEMDEV__WriteToActiveOpaque+0x346>
 80150ac:	9819      	ldr	r0, [sp, #100]	; 0x64
 80150ae:	9911      	ldr	r1, [sp, #68]	; 0x44
 80150b0:	9402      	str	r4, [sp, #8]
 80150b2:	fb00 6201 	mla	r2, r0, r1, r6
 80150b6:	9204      	str	r2, [sp, #16]
 80150b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80150ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80150bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80150c0:	2301      	movs	r3, #1
 80150c2:	4410      	add	r0, r2
 80150c4:	9300      	str	r3, [sp, #0]
 80150c6:	4652      	mov	r2, sl
 80150c8:	9301      	str	r3, [sp, #4]
 80150ca:	4429      	add	r1, r5
 80150cc:	f8cd 8014 	str.w	r8, [sp, #20]
 80150d0:	f7f9 fc00 	bl	800e8d4 <LCD_DrawBitmap>
 80150d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80150d6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80150d8:	4453      	add	r3, sl
 80150da:	9319      	str	r3, [sp, #100]	; 0x64
 80150dc:	6883      	ldr	r3, [r0, #8]
 80150de:	a919      	add	r1, sp, #100	; 0x64
 80150e0:	695b      	ldr	r3, [r3, #20]
 80150e2:	462a      	mov	r2, r5
 80150e4:	4798      	blx	r3
 80150e6:	4682      	mov	sl, r0
 80150e8:	e7dd      	b.n	80150a6 <GUI_MEMDEV__WriteToActiveOpaque+0x34a>
 80150ea:	3501      	adds	r5, #1
 80150ec:	e77e      	b.n	8014fec <GUI_MEMDEV__WriteToActiveOpaque+0x290>
 80150ee:	a818      	add	r0, sp, #96	; 0x60
 80150f0:	f7fb fcb4 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80150f4:	e1bf      	b.n	8015476 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 80150f6:	2301      	movs	r3, #1
 80150f8:	9300      	str	r3, [sp, #0]
 80150fa:	9301      	str	r3, [sp, #4]
 80150fc:	9004      	str	r0, [sp, #16]
 80150fe:	9402      	str	r4, [sp, #8]
 8015100:	f8cd 900c 	str.w	r9, [sp, #12]
 8015104:	f8cd 8014 	str.w	r8, [sp, #20]
 8015108:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801510a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801510c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801510e:	463a      	mov	r2, r7
 8015110:	e041      	b.n	8015196 <GUI_MEMDEV__WriteToActiveOpaque+0x43a>
 8015112:	4630      	mov	r0, r6
 8015114:	910a      	str	r1, [sp, #40]	; 0x28
 8015116:	f7fb fc93 	bl	8010a40 <GUI_ALLOC_LockH>
 801511a:	4682      	mov	sl, r0
 801511c:	a81c      	add	r0, sp, #112	; 0x70
 801511e:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 8015122:	f840 ad10 	str.w	sl, [r0, #-16]!
 8015126:	f8da 4000 	ldr.w	r4, [sl]
 801512a:	9210      	str	r2, [sp, #64]	; 0x40
 801512c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015130:	f8ba 7008 	ldrh.w	r7, [sl, #8]
 8015134:	4c9e      	ldr	r4, [pc, #632]	; (80153b0 <GUI_MEMDEV__WriteToActiveOpaque+0x654>)
 8015136:	b213      	sxth	r3, r2
 8015138:	f8da 200c 	ldr.w	r2, [sl, #12]
 801513c:	920b      	str	r2, [sp, #44]	; 0x2c
 801513e:	9309      	str	r3, [sp, #36]	; 0x24
 8015140:	f7fb fc8c 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8015144:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8015148:	900e      	str	r0, [sp, #56]	; 0x38
 801514a:	489a      	ldr	r0, [pc, #616]	; (80153b4 <GUI_MEMDEV__WriteToActiveOpaque+0x658>)
 801514c:	6800      	ldr	r0, [r0, #0]
 801514e:	7c40      	ldrb	r0, [r0, #17]
 8015150:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 8015154:	6925      	ldr	r5, [r4, #16]
 8015156:	f8d5 8000 	ldr.w	r8, [r5]
 801515a:	f7f9 f993 	bl	800e484 <GUI_GetBitsPerPixelEx>
 801515e:	2808      	cmp	r0, #8
 8015160:	fa0f fb87 	sxth.w	fp, r7
 8015164:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015166:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801516a:	d904      	bls.n	8015176 <GUI_MEMDEV__WriteToActiveOpaque+0x41a>
 801516c:	2810      	cmp	r0, #16
 801516e:	bf8c      	ite	hi
 8015170:	2404      	movhi	r4, #4
 8015172:	2402      	movls	r4, #2
 8015174:	e000      	b.n	8015178 <GUI_MEMDEV__WriteToActiveOpaque+0x41c>
 8015176:	2401      	movs	r4, #1
 8015178:	45a9      	cmp	r9, r5
 801517a:	d10f      	bne.n	801519c <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 801517c:	2001      	movs	r0, #1
 801517e:	9203      	str	r2, [sp, #12]
 8015180:	f10a 0218 	add.w	r2, sl, #24
 8015184:	9000      	str	r0, [sp, #0]
 8015186:	9001      	str	r0, [sp, #4]
 8015188:	9102      	str	r1, [sp, #8]
 801518a:	9204      	str	r2, [sp, #16]
 801518c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801518e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015190:	2200      	movs	r2, #0
 8015192:	9205      	str	r2, [sp, #20]
 8015194:	465a      	mov	r2, fp
 8015196:	f7f9 fb9d 	bl	800e8d4 <LCD_DrawBitmap>
 801519a:	e16c      	b.n	8015476 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 801519c:	2920      	cmp	r1, #32
 801519e:	f040 808e 	bne.w	80152be <GUI_MEMDEV__WriteToActiveOpaque+0x562>
 80151a2:	fb0b f004 	mul.w	r0, fp, r4
 80151a6:	f7fb fea3 	bl	8010ef0 <GUI_ALLOC_AllocNoInit>
 80151aa:	900e      	str	r0, [sp, #56]	; 0x38
 80151ac:	2800      	cmp	r0, #0
 80151ae:	f000 8162 	beq.w	8015476 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 80151b2:	f7fb fc45 	bl	8010a40 <GUI_ALLOC_LockH>
 80151b6:	901a      	str	r0, [sp, #104]	; 0x68
 80151b8:	4630      	mov	r0, r6
 80151ba:	f7fb fc41 	bl	8010a40 <GUI_ALLOC_LockH>
 80151be:	9018      	str	r0, [sp, #96]	; 0x60
 80151c0:	692b      	ldr	r3, [r5, #16]
 80151c2:	f100 0a18 	add.w	sl, r0, #24
 80151c6:	ea4f 068b 	mov.w	r6, fp, lsl #2
 80151ca:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d02f      	beq.n	8015232 <GUI_MEMDEV__WriteToActiveOpaque+0x4d6>
 80151d2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80151d6:	2c02      	cmp	r4, #2
 80151d8:	d003      	beq.n	80151e2 <GUI_MEMDEV__WriteToActiveOpaque+0x486>
 80151da:	2c04      	cmp	r4, #4
 80151dc:	d001      	beq.n	80151e2 <GUI_MEMDEV__WriteToActiveOpaque+0x486>
 80151de:	2c01      	cmp	r4, #1
 80151e0:	d106      	bne.n	80151f0 <GUI_MEMDEV__WriteToActiveOpaque+0x494>
 80151e2:	4650      	mov	r0, sl
 80151e4:	692f      	ldr	r7, [r5, #16]
 80151e6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80151e8:	465a      	mov	r2, fp
 80151ea:	4623      	mov	r3, r4
 80151ec:	47b8      	blx	r7
 80151ee:	44b2      	add	sl, r6
 80151f0:	2301      	movs	r3, #1
 80151f2:	2200      	movs	r2, #0
 80151f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80151f6:	9300      	str	r3, [sp, #0]
 80151f8:	9301      	str	r3, [sp, #4]
 80151fa:	9203      	str	r2, [sp, #12]
 80151fc:	9104      	str	r1, [sp, #16]
 80151fe:	9205      	str	r2, [sp, #20]
 8015200:	4641      	mov	r1, r8
 8015202:	465a      	mov	r2, fp
 8015204:	f8cd 9008 	str.w	r9, [sp, #8]
 8015208:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801520a:	f7f9 fb63 	bl	800e8d4 <LCD_DrawBitmap>
 801520e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015210:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015212:	f108 0701 	add.w	r7, r8, #1
 8015216:	fa02 f381 	sxtah	r3, r2, r1
 801521a:	42bb      	cmp	r3, r7
 801521c:	d107      	bne.n	801522e <GUI_MEMDEV__WriteToActiveOpaque+0x4d2>
 801521e:	a818      	add	r0, sp, #96	; 0x60
 8015220:	f7fb fc1c 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8015224:	a81a      	add	r0, sp, #104	; 0x68
 8015226:	f7fb fc19 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801522a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801522c:	e121      	b.n	8015472 <GUI_MEMDEV__WriteToActiveOpaque+0x716>
 801522e:	46b8      	mov	r8, r7
 8015230:	e7d1      	b.n	80151d6 <GUI_MEMDEV__WriteToActiveOpaque+0x47a>
 8015232:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015234:	2c02      	cmp	r4, #2
 8015236:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8015238:	d00e      	beq.n	8015258 <GUI_MEMDEV__WriteToActiveOpaque+0x4fc>
 801523a:	2c04      	cmp	r4, #4
 801523c:	d018      	beq.n	8015270 <GUI_MEMDEV__WriteToActiveOpaque+0x514>
 801523e:	2c01      	cmp	r4, #1
 8015240:	d125      	bne.n	801528e <GUI_MEMDEV__WriteToActiveOpaque+0x532>
 8015242:	2300      	movs	r3, #0
 8015244:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8015248:	9309      	str	r3, [sp, #36]	; 0x24
 801524a:	47c0      	blx	r8
 801524c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801524e:	54f8      	strb	r0, [r7, r3]
 8015250:	3301      	adds	r3, #1
 8015252:	459b      	cmp	fp, r3
 8015254:	d1f6      	bne.n	8015244 <GUI_MEMDEV__WriteToActiveOpaque+0x4e8>
 8015256:	e019      	b.n	801528c <GUI_MEMDEV__WriteToActiveOpaque+0x530>
 8015258:	2300      	movs	r3, #0
 801525a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 801525e:	9309      	str	r3, [sp, #36]	; 0x24
 8015260:	47c0      	blx	r8
 8015262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015264:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
 8015268:	3301      	adds	r3, #1
 801526a:	459b      	cmp	fp, r3
 801526c:	d1f5      	bne.n	801525a <GUI_MEMDEV__WriteToActiveOpaque+0x4fe>
 801526e:	e00d      	b.n	801528c <GUI_MEMDEV__WriteToActiveOpaque+0x530>
 8015270:	465a      	mov	r2, fp
 8015272:	2300      	movs	r3, #0
 8015274:	f85a 0003 	ldr.w	r0, [sl, r3]
 8015278:	920b      	str	r2, [sp, #44]	; 0x2c
 801527a:	9309      	str	r3, [sp, #36]	; 0x24
 801527c:	47c0      	blx	r8
 801527e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015282:	3a01      	subs	r2, #1
 8015284:	50f8      	str	r0, [r7, r3]
 8015286:	f103 0304 	add.w	r3, r3, #4
 801528a:	d1f3      	bne.n	8015274 <GUI_MEMDEV__WriteToActiveOpaque+0x518>
 801528c:	44b2      	add	sl, r6
 801528e:	2301      	movs	r3, #1
 8015290:	2200      	movs	r2, #0
 8015292:	991a      	ldr	r1, [sp, #104]	; 0x68
 8015294:	9300      	str	r3, [sp, #0]
 8015296:	9301      	str	r3, [sp, #4]
 8015298:	9203      	str	r2, [sp, #12]
 801529a:	9104      	str	r1, [sp, #16]
 801529c:	9205      	str	r2, [sp, #20]
 801529e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80152a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80152a4:	4629      	mov	r1, r5
 80152a6:	465a      	mov	r2, fp
 80152a8:	f7f9 fb14 	bl	800e8d4 <LCD_DrawBitmap>
 80152ac:	9810      	ldr	r0, [sp, #64]	; 0x40
 80152ae:	990d      	ldr	r1, [sp, #52]	; 0x34
 80152b0:	1c6f      	adds	r7, r5, #1
 80152b2:	fa01 f380 	sxtah	r3, r1, r0
 80152b6:	42bb      	cmp	r3, r7
 80152b8:	d0b1      	beq.n	801521e <GUI_MEMDEV__WriteToActiveOpaque+0x4c2>
 80152ba:	463d      	mov	r5, r7
 80152bc:	e7ba      	b.n	8015234 <GUI_MEMDEV__WriteToActiveOpaque+0x4d8>
 80152be:	2910      	cmp	r1, #16
 80152c0:	f040 80d9 	bne.w	8015476 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 80152c4:	fa0f fa87 	sxth.w	sl, r7
 80152c8:	fb0a f004 	mul.w	r0, sl, r4
 80152cc:	f7fb fe10 	bl	8010ef0 <GUI_ALLOC_AllocNoInit>
 80152d0:	9012      	str	r0, [sp, #72]	; 0x48
 80152d2:	2800      	cmp	r0, #0
 80152d4:	f000 80cf 	beq.w	8015476 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 80152d8:	f7fb fbb2 	bl	8010a40 <GUI_ALLOC_LockH>
 80152dc:	901a      	str	r0, [sp, #104]	; 0x68
 80152de:	4630      	mov	r0, r6
 80152e0:	f7fb fbae 	bl	8010a40 <GUI_ALLOC_LockH>
 80152e4:	9018      	str	r0, [sp, #96]	; 0x60
 80152e6:	692b      	ldr	r3, [r5, #16]
 80152e8:	f100 0618 	add.w	r6, r0, #24
 80152ec:	b113      	cbz	r3, 80152f4 <GUI_MEMDEV__WriteToActiveOpaque+0x598>
 80152ee:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80152f2:	b92b      	cbnz	r3, 8015300 <GUI_MEMDEV__WriteToActiveOpaque+0x5a4>
 80152f4:	00e2      	lsls	r2, r4, #3
 80152f6:	b23f      	sxth	r7, r7
 80152f8:	9211      	str	r2, [sp, #68]	; 0x44
 80152fa:	007f      	lsls	r7, r7, #1
 80152fc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80152fe:	e089      	b.n	8015414 <GUI_MEMDEV__WriteToActiveOpaque+0x6b8>
 8015300:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8015304:	0080      	lsls	r0, r0, #2
 8015306:	f7fb fdf3 	bl	8010ef0 <GUI_ALLOC_AllocNoInit>
 801530a:	9011      	str	r0, [sp, #68]	; 0x44
 801530c:	b118      	cbz	r0, 8015316 <GUI_MEMDEV__WriteToActiveOpaque+0x5ba>
 801530e:	f7fb fb97 	bl	8010a40 <GUI_ALLOC_LockH>
 8015312:	9019      	str	r0, [sp, #100]	; 0x64
 8015314:	e001      	b.n	801531a <GUI_MEMDEV__WriteToActiveOpaque+0x5be>
 8015316:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015318:	9319      	str	r3, [sp, #100]	; 0x64
 801531a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801531c:	2b00      	cmp	r3, #0
 801531e:	f000 80a1 	beq.w	8015464 <GUI_MEMDEV__WriteToActiveOpaque+0x708>
 8015322:	b23f      	sxth	r7, r7
 8015324:	007f      	lsls	r7, r7, #1
 8015326:	970e      	str	r7, [sp, #56]	; 0x38
 8015328:	00e7      	lsls	r7, r4, #3
 801532a:	9713      	str	r7, [sp, #76]	; 0x4c
 801532c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801532e:	970c      	str	r7, [sp, #48]	; 0x30
 8015330:	2c02      	cmp	r4, #2
 8015332:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8015336:	d004      	beq.n	8015342 <GUI_MEMDEV__WriteToActiveOpaque+0x5e6>
 8015338:	2c04      	cmp	r4, #4
 801533a:	d007      	beq.n	801534c <GUI_MEMDEV__WriteToActiveOpaque+0x5f0>
 801533c:	2c01      	cmp	r4, #1
 801533e:	d114      	bne.n	801536a <GUI_MEMDEV__WriteToActiveOpaque+0x60e>
 8015340:	e004      	b.n	801534c <GUI_MEMDEV__WriteToActiveOpaque+0x5f0>
 8015342:	4630      	mov	r0, r6
 8015344:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015346:	4652      	mov	r2, sl
 8015348:	4623      	mov	r3, r4
 801534a:	e003      	b.n	8015354 <GUI_MEMDEV__WriteToActiveOpaque+0x5f8>
 801534c:	9919      	ldr	r1, [sp, #100]	; 0x64
 801534e:	4630      	mov	r0, r6
 8015350:	4652      	mov	r2, sl
 8015352:	2302      	movs	r3, #2
 8015354:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8015358:	47b8      	blx	r7
 801535a:	692f      	ldr	r7, [r5, #16]
 801535c:	9819      	ldr	r0, [sp, #100]	; 0x64
 801535e:	4641      	mov	r1, r8
 8015360:	4652      	mov	r2, sl
 8015362:	4623      	mov	r3, r4
 8015364:	47b8      	blx	r7
 8015366:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8015368:	443e      	add	r6, r7
 801536a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801536c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801536e:	9104      	str	r1, [sp, #16]
 8015370:	2301      	movs	r3, #1
 8015372:	2200      	movs	r2, #0
 8015374:	f107 0801 	add.w	r8, r7, #1
 8015378:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801537a:	9300      	str	r3, [sp, #0]
 801537c:	9301      	str	r3, [sp, #4]
 801537e:	9702      	str	r7, [sp, #8]
 8015380:	9203      	str	r2, [sp, #12]
 8015382:	9205      	str	r2, [sp, #20]
 8015384:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015386:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015388:	465a      	mov	r2, fp
 801538a:	f7f9 faa3 	bl	800e8d4 <LCD_DrawBitmap>
 801538e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8015390:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015392:	fa00 f387 	sxtah	r3, r0, r7
 8015396:	4543      	cmp	r3, r8
 8015398:	d002      	beq.n	80153a0 <GUI_MEMDEV__WriteToActiveOpaque+0x644>
 801539a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 801539e:	e7c7      	b.n	8015330 <GUI_MEMDEV__WriteToActiveOpaque+0x5d4>
 80153a0:	a819      	add	r0, sp, #100	; 0x64
 80153a2:	f7fb fb5b 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80153a6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80153a8:	f7fb fb84 	bl	8010ab4 <GUI_ALLOC_Free>
 80153ac:	e05a      	b.n	8015464 <GUI_MEMDEV__WriteToActiveOpaque+0x708>
 80153ae:	bf00      	nop
 80153b0:	20021c0c 	.word	0x20021c0c
 80153b4:	20000308 	.word	0x20000308
 80153b8:	2c04      	cmp	r4, #4
 80153ba:	d041      	beq.n	8015440 <GUI_MEMDEV__WriteToActiveOpaque+0x6e4>
 80153bc:	2c01      	cmp	r4, #1
 80153be:	d111      	bne.n	80153e4 <GUI_MEMDEV__WriteToActiveOpaque+0x688>
 80153c0:	464a      	mov	r2, r9
 80153c2:	4631      	mov	r1, r6
 80153c4:	f831 0b02 	ldrh.w	r0, [r1], #2
 80153c8:	910a      	str	r1, [sp, #40]	; 0x28
 80153ca:	920b      	str	r2, [sp, #44]	; 0x2c
 80153cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80153ce:	4798      	blx	r3
 80153d0:	47c0      	blx	r8
 80153d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80153d4:	f802 0b01 	strb.w	r0, [r2], #1
 80153d8:	eb09 000a 	add.w	r0, r9, sl
 80153dc:	4282      	cmp	r2, r0
 80153de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80153e0:	d1f0      	bne.n	80153c4 <GUI_MEMDEV__WriteToActiveOpaque+0x668>
 80153e2:	443e      	add	r6, r7
 80153e4:	2301      	movs	r3, #1
 80153e6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80153e8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80153ea:	9300      	str	r3, [sp, #0]
 80153ec:	2200      	movs	r2, #0
 80153ee:	9301      	str	r3, [sp, #4]
 80153f0:	9002      	str	r0, [sp, #8]
 80153f2:	9203      	str	r2, [sp, #12]
 80153f4:	9104      	str	r1, [sp, #16]
 80153f6:	9205      	str	r2, [sp, #20]
 80153f8:	4629      	mov	r1, r5
 80153fa:	465a      	mov	r2, fp
 80153fc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80153fe:	f7f9 fa69 	bl	800e8d4 <LCD_DrawBitmap>
 8015402:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015404:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015406:	f105 0901 	add.w	r9, r5, #1
 801540a:	fa02 f381 	sxtah	r3, r2, r1
 801540e:	454b      	cmp	r3, r9
 8015410:	d028      	beq.n	8015464 <GUI_MEMDEV__WriteToActiveOpaque+0x708>
 8015412:	464d      	mov	r5, r9
 8015414:	2c02      	cmp	r4, #2
 8015416:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 801541a:	d1cd      	bne.n	80153b8 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>
 801541c:	464b      	mov	r3, r9
 801541e:	4631      	mov	r1, r6
 8015420:	46d9      	mov	r9, fp
 8015422:	f831 0b02 	ldrh.w	r0, [r1], #2
 8015426:	910a      	str	r1, [sp, #40]	; 0x28
 8015428:	9309      	str	r3, [sp, #36]	; 0x24
 801542a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801542c:	4790      	blx	r2
 801542e:	47c0      	blx	r8
 8015430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015432:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015434:	f823 0b02 	strh.w	r0, [r3], #2
 8015438:	f1b9 0901 	subs.w	r9, r9, #1
 801543c:	d1f1      	bne.n	8015422 <GUI_MEMDEV__WriteToActiveOpaque+0x6c6>
 801543e:	e7d0      	b.n	80153e2 <GUI_MEMDEV__WriteToActiveOpaque+0x686>
 8015440:	464b      	mov	r3, r9
 8015442:	4631      	mov	r1, r6
 8015444:	46d9      	mov	r9, fp
 8015446:	f831 0b02 	ldrh.w	r0, [r1], #2
 801544a:	910a      	str	r1, [sp, #40]	; 0x28
 801544c:	9309      	str	r3, [sp, #36]	; 0x24
 801544e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015450:	4790      	blx	r2
 8015452:	47c0      	blx	r8
 8015454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015456:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015458:	f843 0b04 	str.w	r0, [r3], #4
 801545c:	f1b9 0901 	subs.w	r9, r9, #1
 8015460:	d1f1      	bne.n	8015446 <GUI_MEMDEV__WriteToActiveOpaque+0x6ea>
 8015462:	e7be      	b.n	80153e2 <GUI_MEMDEV__WriteToActiveOpaque+0x686>
 8015464:	a818      	add	r0, sp, #96	; 0x60
 8015466:	f7fb faf9 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801546a:	a81a      	add	r0, sp, #104	; 0x68
 801546c:	f7fb faf6 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8015470:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015472:	f7fb fb1f 	bl	8010ab4 <GUI_ALLOC_Free>
 8015476:	b01d      	add	sp, #116	; 0x74
 8015478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801547c <GUI_MEMDEV__WriteToActiveAlpha>:
 801547c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015480:	b091      	sub	sp, #68	; 0x44
 8015482:	460e      	mov	r6, r1
 8015484:	4614      	mov	r4, r2
 8015486:	900d      	str	r0, [sp, #52]	; 0x34
 8015488:	f7fb fada 	bl	8010a40 <GUI_ALLOC_LockH>
 801548c:	4602      	mov	r2, r0
 801548e:	a810      	add	r0, sp, #64	; 0x40
 8015490:	6813      	ldr	r3, [r2, #0]
 8015492:	4d5b      	ldr	r5, [pc, #364]	; (8015600 <GUI_MEMDEV__WriteToActiveAlpha+0x184>)
 8015494:	691b      	ldr	r3, [r3, #16]
 8015496:	f840 2d08 	str.w	r2, [r0, #-8]!
 801549a:	685b      	ldr	r3, [r3, #4]
 801549c:	f8b2 b008 	ldrh.w	fp, [r2, #8]
 80154a0:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 80154a4:	9309      	str	r3, [sp, #36]	; 0x24
 80154a6:	f7fb fad9 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80154aa:	682b      	ldr	r3, [r5, #0]
 80154ac:	4f55      	ldr	r7, [pc, #340]	; (8015604 <GUI_MEMDEV__WriteToActiveAlpha+0x188>)
 80154ae:	7c5b      	ldrb	r3, [r3, #17]
 80154b0:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 80154b4:	68c3      	ldr	r3, [r0, #12]
 80154b6:	2108      	movs	r1, #8
 80154b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154ba:	4798      	blx	r3
 80154bc:	682b      	ldr	r3, [r5, #0]
 80154be:	7c5b      	ldrb	r3, [r3, #17]
 80154c0:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80154c4:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80154c8:	2817      	cmp	r0, #23
 80154ca:	bf88      	it	hi
 80154cc:	2020      	movhi	r0, #32
 80154ce:	9008      	str	r0, [sp, #32]
 80154d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80154d4:	f8d8 2000 	ldr.w	r2, [r8]
 80154d8:	910a      	str	r1, [sp, #40]	; 0x28
 80154da:	2000      	movs	r0, #0
 80154dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80154de:	f7f9 ff59 	bl	800f394 <GUI__AllocAlphaBuffer>
 80154e2:	2800      	cmp	r0, #0
 80154e4:	f040 8089 	bne.w	80155fa <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 80154e8:	682a      	ldr	r2, [r5, #0]
 80154ea:	fa0f f78b 	sxth.w	r7, fp
 80154ee:	19f5      	adds	r5, r6, r7
 80154f0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 80154f4:	3d01      	subs	r5, #1
 80154f6:	1aed      	subs	r5, r5, r3
 80154f8:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 80154fc:	2d00      	cmp	r5, #0
 80154fe:	bfcc      	ite	gt
 8015500:	ebc5 0507 	rsbgt	r5, r5, r7
 8015504:	463d      	movle	r5, r7
 8015506:	42b3      	cmp	r3, r6
 8015508:	bfc3      	ittte	gt
 801550a:	ebc6 0103 	rsbgt	r1, r6, r3
 801550e:	ebc1 0505 	rsbgt	r5, r1, r5
 8015512:	461e      	movgt	r6, r3
 8015514:	2100      	movle	r1, #0
 8015516:	2d00      	cmp	r5, #0
 8015518:	dd6f      	ble.n	80155fa <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 801551a:	fa0f f389 	sxth.w	r3, r9
 801551e:	18e0      	adds	r0, r4, r3
 8015520:	f9b2 c00e 	ldrsh.w	ip, [r2, #14]
 8015524:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8015528:	3801      	subs	r0, #1
 801552a:	ebcc 0000 	rsb	r0, ip, r0
 801552e:	2800      	cmp	r0, #0
 8015530:	bfc8      	it	gt
 8015532:	ebc0 0303 	rsbgt	r3, r0, r3
 8015536:	4294      	cmp	r4, r2
 8015538:	bfbd      	ittte	lt
 801553a:	ebc4 0a02 	rsblt	sl, r4, r2
 801553e:	ebca 0303 	rsblt	r3, sl, r3
 8015542:	4614      	movlt	r4, r2
 8015544:	f04f 0a00 	movge.w	sl, #0
 8015548:	2b00      	cmp	r3, #0
 801554a:	dd56      	ble.n	80155fa <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 801554c:	fb07 1a0a 	mla	sl, r7, sl, r1
 8015550:	18e3      	adds	r3, r4, r3
 8015552:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8015556:	930c      	str	r3, [sp, #48]	; 0x30
 8015558:	980d      	ldr	r0, [sp, #52]	; 0x34
 801555a:	f7f7 f9cd 	bl	800c8f8 <GUI_MEMDEV_GetDataPtr>
 801555e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015560:	9300      	str	r3, [sp, #0]
 8015562:	ab0f      	add	r3, sp, #60	; 0x3c
 8015564:	eb00 020a 	add.w	r2, r0, sl
 8015568:	9301      	str	r3, [sp, #4]
 801556a:	4630      	mov	r0, r6
 801556c:	4621      	mov	r1, r4
 801556e:	462b      	mov	r3, r5
 8015570:	f7f9 fe2a 	bl	800f1c8 <GUI__DoAlphaBlending>
 8015574:	4681      	mov	r9, r0
 8015576:	2800      	cmp	r0, #0
 8015578:	d03f      	beq.n	80155fa <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 801557a:	4b23      	ldr	r3, [pc, #140]	; (8015608 <GUI_MEMDEV__WriteToActiveAlpha+0x18c>)
 801557c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801557e:	4299      	cmp	r1, r3
 8015580:	d01e      	beq.n	80155c0 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 8015582:	4629      	mov	r1, r5
 8015584:	9a08      	ldr	r2, [sp, #32]
 8015586:	4643      	mov	r3, r8
 8015588:	f001 fdf1 	bl	801716e <GUI__CompactPixelIndicesEx>
 801558c:	b9c0      	cbnz	r0, 80155c0 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 801558e:	f8d8 c010 	ldr.w	ip, [r8, #16]
 8015592:	f1bc 0f00 	cmp.w	ip, #0
 8015596:	d006      	beq.n	80155a6 <GUI_MEMDEV__WriteToActiveAlpha+0x12a>
 8015598:	4648      	mov	r0, r9
 801559a:	4649      	mov	r1, r9
 801559c:	fa0f f28b 	sxth.w	r2, fp
 80155a0:	2304      	movs	r3, #4
 80155a2:	47e0      	blx	ip
 80155a4:	e00c      	b.n	80155c0 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 80155a6:	464a      	mov	r2, r9
 80155a8:	463b      	mov	r3, r7
 80155aa:	6810      	ldr	r0, [r2, #0]
 80155ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80155ae:	9206      	str	r2, [sp, #24]
 80155b0:	9307      	str	r3, [sp, #28]
 80155b2:	4788      	blx	r1
 80155b4:	9b07      	ldr	r3, [sp, #28]
 80155b6:	9a06      	ldr	r2, [sp, #24]
 80155b8:	3b01      	subs	r3, #1
 80155ba:	f842 0b04 	str.w	r0, [r2], #4
 80155be:	d1f4      	bne.n	80155aa <GUI_MEMDEV__WriteToActiveAlpha+0x12e>
 80155c0:	9a08      	ldr	r2, [sp, #32]
 80155c2:	9202      	str	r2, [sp, #8]
 80155c4:	2301      	movs	r3, #1
 80155c6:	2200      	movs	r2, #0
 80155c8:	f104 0c01 	add.w	ip, r4, #1
 80155cc:	9300      	str	r3, [sp, #0]
 80155ce:	9301      	str	r3, [sp, #4]
 80155d0:	9203      	str	r2, [sp, #12]
 80155d2:	9205      	str	r2, [sp, #20]
 80155d4:	f8cd 9010 	str.w	r9, [sp, #16]
 80155d8:	4630      	mov	r0, r6
 80155da:	4621      	mov	r1, r4
 80155dc:	462a      	mov	r2, r5
 80155de:	f8cd c01c 	str.w	ip, [sp, #28]
 80155e2:	f7f9 f977 	bl	800e8d4 <LCD_DrawBitmap>
 80155e6:	2304      	movs	r3, #4
 80155e8:	fb1b aa03 	smlabb	sl, fp, r3, sl
 80155ec:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80155f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80155f2:	459c      	cmp	ip, r3
 80155f4:	d001      	beq.n	80155fa <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 80155f6:	4664      	mov	r4, ip
 80155f8:	e7ae      	b.n	8015558 <GUI_MEMDEV__WriteToActiveAlpha+0xdc>
 80155fa:	b011      	add	sp, #68	; 0x44
 80155fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015600:	20000308 	.word	0x20000308
 8015604:	20021c0c 	.word	0x20021c0c
 8015608:	08010f89 	.word	0x08010f89

0801560c <GUI_MEMDEV_WriteAt>:
 801560c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801560e:	460c      	mov	r4, r1
 8015610:	4615      	mov	r5, r2
 8015612:	4606      	mov	r6, r0
 8015614:	b330      	cbz	r0, 8015664 <GUI_MEMDEV_WriteAt+0x58>
 8015616:	f7fb fa13 	bl	8010a40 <GUI_ALLOC_LockH>
 801561a:	4a13      	ldr	r2, [pc, #76]	; (8015668 <GUI_MEMDEV_WriteAt+0x5c>)
 801561c:	8943      	ldrh	r3, [r0, #10]
 801561e:	9001      	str	r0, [sp, #4]
 8015620:	4294      	cmp	r4, r2
 8015622:	8902      	ldrh	r2, [r0, #8]
 8015624:	bf04      	itt	eq
 8015626:	f9b0 4004 	ldrsheq.w	r4, [r0, #4]
 801562a:	f9b0 5006 	ldrsheq.w	r5, [r0, #6]
 801562e:	f8ad 4008 	strh.w	r4, [sp, #8]
 8015632:	3a01      	subs	r2, #1
 8015634:	3b01      	subs	r3, #1
 8015636:	4422      	add	r2, r4
 8015638:	442b      	add	r3, r5
 801563a:	a801      	add	r0, sp, #4
 801563c:	f8ad 200c 	strh.w	r2, [sp, #12]
 8015640:	f8ad 500a 	strh.w	r5, [sp, #10]
 8015644:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015648:	f7fb fa08 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801564c:	a802      	add	r0, sp, #8
 801564e:	f7f6 fd87 	bl	800c160 <WM__InitIVRSearch>
 8015652:	b138      	cbz	r0, 8015664 <GUI_MEMDEV_WriteAt+0x58>
 8015654:	4630      	mov	r0, r6
 8015656:	4621      	mov	r1, r4
 8015658:	462a      	mov	r2, r5
 801565a:	f7f7 fefb 	bl	800d454 <GUI_MEMDEV__WriteToActiveAt>
 801565e:	f7f6 fcbd 	bl	800bfdc <WM__GetNextIVR>
 8015662:	e7f6      	b.n	8015652 <GUI_MEMDEV_WriteAt+0x46>
 8015664:	b004      	add	sp, #16
 8015666:	bd70      	pop	{r4, r5, r6, pc}
 8015668:	fffff001 	.word	0xfffff001

0801566c <GUI_MEMDEV_Write>:
 801566c:	4901      	ldr	r1, [pc, #4]	; (8015674 <GUI_MEMDEV_Write+0x8>)
 801566e:	460a      	mov	r2, r1
 8015670:	f7ff bfcc 	b.w	801560c <GUI_MEMDEV_WriteAt>
 8015674:	fffff001 	.word	0xfffff001

08015678 <GUI_USAGE_BM_AddPixel>:
 8015678:	4603      	mov	r3, r0
 801567a:	b510      	push	{r4, lr}
 801567c:	f933 4b14 	ldrsh.w	r4, [r3], #20
 8015680:	1b09      	subs	r1, r1, r4
 8015682:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8015686:	6900      	ldr	r0, [r0, #16]
 8015688:	1b12      	subs	r2, r2, r4
 801568a:	fb00 3302 	mla	r3, r0, r2, r3
 801568e:	10c8      	asrs	r0, r1, #3
 8015690:	2280      	movs	r2, #128	; 0x80
 8015692:	f001 0107 	and.w	r1, r1, #7
 8015696:	fa42 f101 	asr.w	r1, r2, r1
 801569a:	5c1a      	ldrb	r2, [r3, r0]
 801569c:	4311      	orrs	r1, r2
 801569e:	5419      	strb	r1, [r3, r0]
 80156a0:	bd10      	pop	{r4, pc}

080156a2 <GUI_USAGE_BM_GetNextDirty>:
 80156a2:	b570      	push	{r4, r5, r6, lr}
 80156a4:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 80156a8:	680b      	ldr	r3, [r1, #0]
 80156aa:	8886      	ldrh	r6, [r0, #4]
 80156ac:	42a2      	cmp	r2, r4
 80156ae:	da41      	bge.n	8015734 <GUI_USAGE_BM_GetNextDirty+0x92>
 80156b0:	b236      	sxth	r6, r6
 80156b2:	42b3      	cmp	r3, r6
 80156b4:	6904      	ldr	r4, [r0, #16]
 80156b6:	da3d      	bge.n	8015734 <GUI_USAGE_BM_GetNextDirty+0x92>
 80156b8:	3014      	adds	r0, #20
 80156ba:	fb04 0202 	mla	r2, r4, r2, r0
 80156be:	10dd      	asrs	r5, r3, #3
 80156c0:	1e70      	subs	r0, r6, #1
 80156c2:	1954      	adds	r4, r2, r5
 80156c4:	ebc5 00e0 	rsb	r0, r5, r0, asr #3
 80156c8:	5d55      	ldrb	r5, [r2, r5]
 80156ca:	f003 0207 	and.w	r2, r3, #7
 80156ce:	fa05 f202 	lsl.w	r2, r5, r2
 80156d2:	3401      	adds	r4, #1
 80156d4:	b2d2      	uxtb	r2, r2
 80156d6:	b93a      	cbnz	r2, 80156e8 <GUI_USAGE_BM_GetNextDirty+0x46>
 80156d8:	b368      	cbz	r0, 8015736 <GUI_USAGE_BM_GetNextDirty+0x94>
 80156da:	3308      	adds	r3, #8
 80156dc:	f814 2b01 	ldrb.w	r2, [r4], #1
 80156e0:	3801      	subs	r0, #1
 80156e2:	f023 0307 	bic.w	r3, r3, #7
 80156e6:	e7f6      	b.n	80156d6 <GUI_USAGE_BM_GetNextDirty+0x34>
 80156e8:	0615      	lsls	r5, r2, #24
 80156ea:	d403      	bmi.n	80156f4 <GUI_USAGE_BM_GetNextDirty+0x52>
 80156ec:	0052      	lsls	r2, r2, #1
 80156ee:	b2d2      	uxtb	r2, r2
 80156f0:	3301      	adds	r3, #1
 80156f2:	e7f9      	b.n	80156e8 <GUI_USAGE_BM_GetNextDirty+0x46>
 80156f4:	2aff      	cmp	r2, #255	; 0xff
 80156f6:	461d      	mov	r5, r3
 80156f8:	d005      	beq.n	8015706 <GUI_USAGE_BM_GetNextDirty+0x64>
 80156fa:	0656      	lsls	r6, r2, #25
 80156fc:	d504      	bpl.n	8015708 <GUI_USAGE_BM_GetNextDirty+0x66>
 80156fe:	0052      	lsls	r2, r2, #1
 8015700:	b2d2      	uxtb	r2, r2
 8015702:	3301      	adds	r3, #1
 8015704:	e7f9      	b.n	80156fa <GUI_USAGE_BM_GetNextDirty+0x58>
 8015706:	3307      	adds	r3, #7
 8015708:	f003 0207 	and.w	r2, r3, #7
 801570c:	2a07      	cmp	r2, #7
 801570e:	d10d      	bne.n	801572c <GUI_USAGE_BM_GetNextDirty+0x8a>
 8015710:	3801      	subs	r0, #1
 8015712:	d40b      	bmi.n	801572c <GUI_USAGE_BM_GetNextDirty+0x8a>
 8015714:	f814 2b01 	ldrb.w	r2, [r4], #1
 8015718:	2aff      	cmp	r2, #255	; 0xff
 801571a:	d101      	bne.n	8015720 <GUI_USAGE_BM_GetNextDirty+0x7e>
 801571c:	3308      	adds	r3, #8
 801571e:	e7f7      	b.n	8015710 <GUI_USAGE_BM_GetNextDirty+0x6e>
 8015720:	0610      	lsls	r0, r2, #24
 8015722:	d503      	bpl.n	801572c <GUI_USAGE_BM_GetNextDirty+0x8a>
 8015724:	0052      	lsls	r2, r2, #1
 8015726:	b2d2      	uxtb	r2, r2
 8015728:	3301      	adds	r3, #1
 801572a:	e7f9      	b.n	8015720 <GUI_USAGE_BM_GetNextDirty+0x7e>
 801572c:	1b58      	subs	r0, r3, r5
 801572e:	600d      	str	r5, [r1, #0]
 8015730:	3001      	adds	r0, #1
 8015732:	bd70      	pop	{r4, r5, r6, pc}
 8015734:	2000      	movs	r0, #0
 8015736:	bd70      	pop	{r4, r5, r6, pc}

08015738 <_GUI_USAGE_BM_Delete>:
 8015738:	f7fb b9bc 	b.w	8010ab4 <GUI_ALLOC_Free>

0801573c <GUI_USAGE_BM_Clear>:
 801573c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8015740:	6902      	ldr	r2, [r0, #16]
 8015742:	2100      	movs	r1, #0
 8015744:	3014      	adds	r0, #20
 8015746:	435a      	muls	r2, r3
 8015748:	f003 ba8f 	b.w	8018c6a <memset>

0801574c <GUI_USAGE_BM_AddHLine>:
 801574c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801574e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015752:	1b09      	subs	r1, r1, r4
 8015754:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8015758:	42a1      	cmp	r1, r4
 801575a:	da2f      	bge.n	80157bc <GUI_USAGE_BM_AddHLine+0x70>
 801575c:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 8015760:	440b      	add	r3, r1
 8015762:	f100 0414 	add.w	r4, r0, #20
 8015766:	3b01      	subs	r3, #1
 8015768:	6900      	ldr	r0, [r0, #16]
 801576a:	1b52      	subs	r2, r2, r5
 801576c:	43de      	mvns	r6, r3
 801576e:	fb00 4202 	mla	r2, r0, r2, r4
 8015772:	f001 0707 	and.w	r7, r1, #7
 8015776:	10cc      	asrs	r4, r1, #3
 8015778:	f006 0607 	and.w	r6, r6, #7
 801577c:	21ff      	movs	r1, #255	; 0xff
 801577e:	fa41 f707 	asr.w	r7, r1, r7
 8015782:	fa01 f606 	lsl.w	r6, r1, r6
 8015786:	ebd4 03e3 	rsbs	r3, r4, r3, asr #3
 801578a:	eb02 0504 	add.w	r5, r2, r4
 801578e:	b2ff      	uxtb	r7, r7
 8015790:	b2f6      	uxtb	r6, r6
 8015792:	5d10      	ldrb	r0, [r2, r4]
 8015794:	d103      	bne.n	801579e <GUI_USAGE_BM_AddHLine+0x52>
 8015796:	403e      	ands	r6, r7
 8015798:	4330      	orrs	r0, r6
 801579a:	5510      	strb	r0, [r2, r4]
 801579c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801579e:	4338      	orrs	r0, r7
 80157a0:	5510      	strb	r0, [r2, r4]
 80157a2:	1e5c      	subs	r4, r3, #1
 80157a4:	2c00      	cmp	r4, #0
 80157a6:	f105 0501 	add.w	r5, r5, #1
 80157aa:	dd04      	ble.n	80157b6 <GUI_USAGE_BM_AddHLine+0x6a>
 80157ac:	4628      	mov	r0, r5
 80157ae:	4622      	mov	r2, r4
 80157b0:	f003 fa5b 	bl	8018c6a <memset>
 80157b4:	4425      	add	r5, r4
 80157b6:	782b      	ldrb	r3, [r5, #0]
 80157b8:	431e      	orrs	r6, r3
 80157ba:	702e      	strb	r6, [r5, #0]
 80157bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080157c0 <GUI_USAGE_BM_Create>:
 80157c0:	e92d 4fd3 	stmdb	sp!, {r0, r1, r4, r6, r7, r8, r9, sl, fp, lr}
 80157c4:	f102 060f 	add.w	r6, r2, #15
 80157c8:	1136      	asrs	r6, r6, #4
 80157ca:	0076      	lsls	r6, r6, #1
 80157cc:	4682      	mov	sl, r0
 80157ce:	fb06 f003 	mul.w	r0, r6, r3
 80157d2:	3014      	adds	r0, #20
 80157d4:	4689      	mov	r9, r1
 80157d6:	4690      	mov	r8, r2
 80157d8:	461f      	mov	r7, r3
 80157da:	f7fb fba2 	bl	8010f22 <GUI_ALLOC_AllocZero>
 80157de:	4683      	mov	fp, r0
 80157e0:	b198      	cbz	r0, 801580a <GUI_USAGE_BM_Create+0x4a>
 80157e2:	f7fb f92d 	bl	8010a40 <GUI_ALLOC_LockH>
 80157e6:	4604      	mov	r4, r0
 80157e8:	4b0a      	ldr	r3, [pc, #40]	; (8015814 <GUI_USAGE_BM_Create+0x54>)
 80157ea:	60a3      	str	r3, [r4, #8]
 80157ec:	a802      	add	r0, sp, #8
 80157ee:	2301      	movs	r3, #1
 80157f0:	f840 4d04 	str.w	r4, [r0, #-4]!
 80157f4:	f8a4 8004 	strh.w	r8, [r4, #4]
 80157f8:	f8a4 a000 	strh.w	sl, [r4]
 80157fc:	f8a4 9002 	strh.w	r9, [r4, #2]
 8015800:	80e7      	strh	r7, [r4, #6]
 8015802:	81a3      	strh	r3, [r4, #12]
 8015804:	6126      	str	r6, [r4, #16]
 8015806:	f7fb f929 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801580a:	4658      	mov	r0, fp
 801580c:	b002      	add	sp, #8
 801580e:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 8015812:	bf00      	nop
 8015814:	08020c2c 	.word	0x08020c2c

08015818 <GUI_USAGE_DecUseCnt>:
 8015818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801581a:	4605      	mov	r5, r0
 801581c:	f7fb f910 	bl	8010a40 <GUI_ALLOC_LockH>
 8015820:	4602      	mov	r2, r0
 8015822:	a802      	add	r0, sp, #8
 8015824:	8994      	ldrh	r4, [r2, #12]
 8015826:	f840 2d04 	str.w	r2, [r0, #-4]!
 801582a:	3c01      	subs	r4, #1
 801582c:	b2a4      	uxth	r4, r4
 801582e:	8194      	strh	r4, [r2, #12]
 8015830:	f7fb f914 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8015834:	b914      	cbnz	r4, 801583c <GUI_USAGE_DecUseCnt+0x24>
 8015836:	4628      	mov	r0, r5
 8015838:	f7fb f93c 	bl	8010ab4 <GUI_ALLOC_Free>
 801583c:	b003      	add	sp, #12
 801583e:	bd30      	pop	{r4, r5, pc}

08015840 <GUI_USAGE_AddRect>:
 8015840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015844:	4605      	mov	r5, r0
 8015846:	4688      	mov	r8, r1
 8015848:	4617      	mov	r7, r2
 801584a:	4699      	mov	r9, r3
 801584c:	68a8      	ldr	r0, [r5, #8]
 801584e:	464b      	mov	r3, r9
 8015850:	6846      	ldr	r6, [r0, #4]
 8015852:	4641      	mov	r1, r8
 8015854:	4628      	mov	r0, r5
 8015856:	1c54      	adds	r4, r2, #1
 8015858:	47b0      	blx	r6
 801585a:	9b08      	ldr	r3, [sp, #32]
 801585c:	443b      	add	r3, r7
 801585e:	42a3      	cmp	r3, r4
 8015860:	d001      	beq.n	8015866 <GUI_USAGE_AddRect+0x26>
 8015862:	4622      	mov	r2, r4
 8015864:	e7f2      	b.n	801584c <GUI_USAGE_AddRect+0xc>
 8015866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801586c <GUI_MEMDEV_ReduceYSize>:
 801586c:	b513      	push	{r0, r1, r4, lr}
 801586e:	460c      	mov	r4, r1
 8015870:	b918      	cbnz	r0, 801587a <GUI_MEMDEV_ReduceYSize+0xe>
 8015872:	4b08      	ldr	r3, [pc, #32]	; (8015894 <GUI_MEMDEV_ReduceYSize+0x28>)
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8015878:	b150      	cbz	r0, 8015890 <GUI_MEMDEV_ReduceYSize+0x24>
 801587a:	f7fb f8e1 	bl	8010a40 <GUI_ALLOC_LockH>
 801587e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8015882:	9001      	str	r0, [sp, #4]
 8015884:	429c      	cmp	r4, r3
 8015886:	bfb8      	it	lt
 8015888:	8144      	strhlt	r4, [r0, #10]
 801588a:	a801      	add	r0, sp, #4
 801588c:	f7fb f8e6 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8015890:	b002      	add	sp, #8
 8015892:	bd10      	pop	{r4, pc}
 8015894:	20000308 	.word	0x20000308

08015898 <GUI_MEMDEV_Clear>:
 8015898:	b513      	push	{r0, r1, r4, lr}
 801589a:	b918      	cbnz	r0, 80158a4 <GUI_MEMDEV_Clear+0xc>
 801589c:	4b0d      	ldr	r3, [pc, #52]	; (80158d4 <GUI_MEMDEV_Clear+0x3c>)
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80158a2:	b1a8      	cbz	r0, 80158d0 <GUI_MEMDEV_Clear+0x38>
 80158a4:	f7fb f8cc 	bl	8010a40 <GUI_ALLOC_LockH>
 80158a8:	ab02      	add	r3, sp, #8
 80158aa:	6944      	ldr	r4, [r0, #20]
 80158ac:	f843 0d08 	str.w	r0, [r3, #-8]!
 80158b0:	4668      	mov	r0, sp
 80158b2:	f7fb f8d3 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80158b6:	b15c      	cbz	r4, 80158d0 <GUI_MEMDEV_Clear+0x38>
 80158b8:	4620      	mov	r0, r4
 80158ba:	f7fb f8c1 	bl	8010a40 <GUI_ALLOC_LockH>
 80158be:	ac02      	add	r4, sp, #8
 80158c0:	6883      	ldr	r3, [r0, #8]
 80158c2:	f844 0d04 	str.w	r0, [r4, #-4]!
 80158c6:	689b      	ldr	r3, [r3, #8]
 80158c8:	4798      	blx	r3
 80158ca:	4620      	mov	r0, r4
 80158cc:	f7fb f8c6 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80158d0:	b002      	add	sp, #8
 80158d2:	bd10      	pop	{r4, pc}
 80158d4:	20000308 	.word	0x20000308

080158d8 <LCD_SelectLCD>:
 80158d8:	b510      	push	{r4, lr}
 80158da:	4b0d      	ldr	r3, [pc, #52]	; (8015910 <LCD_SelectLCD+0x38>)
 80158dc:	681a      	ldr	r2, [r3, #0]
 80158de:	7c51      	ldrb	r1, [r2, #17]
 80158e0:	4a0c      	ldr	r2, [pc, #48]	; (8015914 <LCD_SelectLCD+0x3c>)
 80158e2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80158e6:	461c      	mov	r4, r3
 80158e8:	b138      	cbz	r0, 80158fa <LCD_SelectLCD+0x22>
 80158ea:	68c2      	ldr	r2, [r0, #12]
 80158ec:	6813      	ldr	r3, [r2, #0]
 80158ee:	2b04      	cmp	r3, #4
 80158f0:	d001      	beq.n	80158f6 <LCD_SelectLCD+0x1e>
 80158f2:	6800      	ldr	r0, [r0, #0]
 80158f4:	e7f8      	b.n	80158e8 <LCD_SelectLCD+0x10>
 80158f6:	f7fa fbb3 	bl	8010060 <GUI_DEVICE_Unlink>
 80158fa:	6823      	ldr	r3, [r4, #0]
 80158fc:	2200      	movs	r2, #0
 80158fe:	661a      	str	r2, [r3, #96]	; 0x60
 8015900:	f103 0208 	add.w	r2, r3, #8
 8015904:	615a      	str	r2, [r3, #20]
 8015906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801590a:	f7f9 b8ed 	b.w	800eae8 <LCD_SetClipRectMax>
 801590e:	bf00      	nop
 8015910:	20000308 	.word	0x20000308
 8015914:	20021c0c 	.word	0x20021c0c

08015918 <_Rect2TextRect>:
 8015918:	8803      	ldrh	r3, [r0, #0]
 801591a:	8881      	ldrh	r1, [r0, #4]
 801591c:	8842      	ldrh	r2, [r0, #2]
 801591e:	b510      	push	{r4, lr}
 8015920:	88c4      	ldrh	r4, [r0, #6]
 8015922:	441c      	add	r4, r3
 8015924:	1aa4      	subs	r4, r4, r2
 8015926:	440a      	add	r2, r1
 8015928:	1ad3      	subs	r3, r2, r3
 801592a:	8084      	strh	r4, [r0, #4]
 801592c:	80c3      	strh	r3, [r0, #6]
 801592e:	bd10      	pop	{r4, pc}

08015930 <_TransformPoint>:
 8015930:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015932:	460d      	mov	r5, r1
 8015934:	4604      	mov	r4, r0
 8015936:	2300      	movs	r3, #0
 8015938:	4668      	mov	r0, sp
 801593a:	9300      	str	r3, [sp, #0]
 801593c:	9301      	str	r3, [sp, #4]
 801593e:	f7f5 fb91 	bl	800b064 <WM_GetWindowRect>
 8015942:	f7f8 fd87 	bl	800e454 <LCD_GetXSize>
 8015946:	f7f8 fd8d 	bl	800e464 <LCD_GetYSize>
 801594a:	682b      	ldr	r3, [r5, #0]
 801594c:	f9bd 1000 	ldrsh.w	r1, [sp]
 8015950:	6822      	ldr	r2, [r4, #0]
 8015952:	1acb      	subs	r3, r1, r3
 8015954:	6023      	str	r3, [r4, #0]
 8015956:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801595a:	4413      	add	r3, r2
 801595c:	602b      	str	r3, [r5, #0]
 801595e:	4b08      	ldr	r3, [pc, #32]	; (8015980 <_TransformPoint+0x50>)
 8015960:	6821      	ldr	r1, [r4, #0]
 8015962:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8015966:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801596a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801596e:	4401      	add	r1, r0
 8015970:	4411      	add	r1, r2
 8015972:	6021      	str	r1, [r4, #0]
 8015974:	6829      	ldr	r1, [r5, #0]
 8015976:	440a      	add	r2, r1
 8015978:	1ad2      	subs	r2, r2, r3
 801597a:	602a      	str	r2, [r5, #0]
 801597c:	b003      	add	sp, #12
 801597e:	bd30      	pop	{r4, r5, pc}
 8015980:	20021d10 	.word	0x20021d10

08015984 <_TransformRect>:
 8015984:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015986:	f9b0 3000 	ldrsh.w	r3, [r0]
 801598a:	9300      	str	r3, [sp, #0]
 801598c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8015990:	9301      	str	r3, [sp, #4]
 8015992:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015996:	9302      	str	r3, [sp, #8]
 8015998:	4604      	mov	r4, r0
 801599a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801599e:	9303      	str	r3, [sp, #12]
 80159a0:	4668      	mov	r0, sp
 80159a2:	a901      	add	r1, sp, #4
 80159a4:	f7ff ffc4 	bl	8015930 <_TransformPoint>
 80159a8:	a802      	add	r0, sp, #8
 80159aa:	a903      	add	r1, sp, #12
 80159ac:	f7ff ffc0 	bl	8015930 <_TransformPoint>
 80159b0:	9b02      	ldr	r3, [sp, #8]
 80159b2:	8023      	strh	r3, [r4, #0]
 80159b4:	9b01      	ldr	r3, [sp, #4]
 80159b6:	8063      	strh	r3, [r4, #2]
 80159b8:	9b00      	ldr	r3, [sp, #0]
 80159ba:	80a3      	strh	r3, [r4, #4]
 80159bc:	9b03      	ldr	r3, [sp, #12]
 80159be:	80e3      	strh	r3, [r4, #6]
 80159c0:	b004      	add	sp, #16
 80159c2:	bd10      	pop	{r4, pc}

080159c4 <_DrawBitmapCW>:
 80159c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159c8:	b091      	sub	sp, #68	; 0x44
 80159ca:	4693      	mov	fp, r2
 80159cc:	9009      	str	r0, [sp, #36]	; 0x24
 80159ce:	9108      	str	r1, [sp, #32]
 80159d0:	4410      	add	r0, r2
 80159d2:	4419      	add	r1, r3
 80159d4:	3901      	subs	r1, #1
 80159d6:	3801      	subs	r0, #1
 80159d8:	910b      	str	r1, [sp, #44]	; 0x2c
 80159da:	900a      	str	r0, [sp, #40]	; 0x28
 80159dc:	a908      	add	r1, sp, #32
 80159de:	a809      	add	r0, sp, #36	; 0x24
 80159e0:	461d      	mov	r5, r3
 80159e2:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80159e4:	f7ff ffa4 	bl	8015930 <_TransformPoint>
 80159e8:	a90b      	add	r1, sp, #44	; 0x2c
 80159ea:	a80a      	add	r0, sp, #40	; 0x28
 80159ec:	f7ff ffa0 	bl	8015930 <_TransformPoint>
 80159f0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80159f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80159f4:	2f01      	cmp	r7, #1
 80159f6:	f040 81a4 	bne.w	8015d42 <_DrawBitmapCW+0x37e>
 80159fa:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80159fc:	2f01      	cmp	r7, #1
 80159fe:	f040 81a0 	bne.w	8015d42 <_DrawBitmapCW+0x37e>
 8015a02:	4ba6      	ldr	r3, [pc, #664]	; (8015c9c <_DrawBitmapCW+0x2d8>)
 8015a04:	681a      	ldr	r2, [r3, #0]
 8015a06:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8015a0a:	4299      	cmp	r1, r3
 8015a0c:	dd07      	ble.n	8015a1e <_DrawBitmapCW+0x5a>
 8015a0e:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8015a10:	9309      	str	r3, [sp, #36]	; 0x24
 8015a12:	ebc3 0901 	rsb	r9, r3, r1
 8015a16:	ebc9 0505 	rsb	r5, r9, r5
 8015a1a:	fb07 4409 	mla	r4, r7, r9, r4
 8015a1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015a20:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 8015a24:	4299      	cmp	r1, r3
 8015a26:	da02      	bge.n	8015a2e <_DrawBitmapCW+0x6a>
 8015a28:	930a      	str	r3, [sp, #40]	; 0x28
 8015a2a:	1a5b      	subs	r3, r3, r1
 8015a2c:	1aed      	subs	r5, r5, r3
 8015a2e:	f9b2 300e 	ldrsh.w	r3, [r2, #14]
 8015a32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015a34:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8015a38:	4299      	cmp	r1, r3
 8015a3a:	bfc4      	itt	gt
 8015a3c:	ebc3 0301 	rsbgt	r3, r3, r1
 8015a40:	ebc3 0b0b 	rsbgt	fp, r3, fp
 8015a44:	9b08      	ldr	r3, [sp, #32]
 8015a46:	4293      	cmp	r3, r2
 8015a48:	da2a      	bge.n	8015aa0 <_DrawBitmapCW+0xdc>
 8015a4a:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8015a4c:	1ad6      	subs	r6, r2, r3
 8015a4e:	1e79      	subs	r1, r7, #1
 8015a50:	ebc6 0b0b 	rsb	fp, r6, fp
 8015a54:	2907      	cmp	r1, #7
 8015a56:	d824      	bhi.n	8015aa2 <_DrawBitmapCW+0xde>
 8015a58:	e8df f001 	tbb	[pc, r1]
 8015a5c:	16230d04 	.word	0x16230d04
 8015a60:	1f232323 	.word	0x1f232323
 8015a64:	f026 0207 	bic.w	r2, r6, #7
 8015a68:	4413      	add	r3, r2
 8015a6a:	eb04 04e6 	add.w	r4, r4, r6, asr #3
 8015a6e:	9308      	str	r3, [sp, #32]
 8015a70:	f006 0607 	and.w	r6, r6, #7
 8015a74:	e015      	b.n	8015aa2 <_DrawBitmapCW+0xde>
 8015a76:	f026 0203 	bic.w	r2, r6, #3
 8015a7a:	4413      	add	r3, r2
 8015a7c:	eb04 04a6 	add.w	r4, r4, r6, asr #2
 8015a80:	9308      	str	r3, [sp, #32]
 8015a82:	f006 0603 	and.w	r6, r6, #3
 8015a86:	e00c      	b.n	8015aa2 <_DrawBitmapCW+0xde>
 8015a88:	f026 0201 	bic.w	r2, r6, #1
 8015a8c:	4413      	add	r3, r2
 8015a8e:	eb04 0466 	add.w	r4, r4, r6, asr #1
 8015a92:	9308      	str	r3, [sp, #32]
 8015a94:	f006 0601 	and.w	r6, r6, #1
 8015a98:	e003      	b.n	8015aa2 <_DrawBitmapCW+0xde>
 8015a9a:	4434      	add	r4, r6
 8015a9c:	9208      	str	r2, [sp, #32]
 8015a9e:	e000      	b.n	8015aa2 <_DrawBitmapCW+0xde>
 8015aa0:	2600      	movs	r6, #0
 8015aa2:	f1bb 0f00 	cmp.w	fp, #0
 8015aa6:	f340 81ab 	ble.w	8015e00 <_DrawBitmapCW+0x43c>
 8015aaa:	2d00      	cmp	r5, #0
 8015aac:	f340 81a8 	ble.w	8015e00 <_DrawBitmapCW+0x43c>
 8015ab0:	9f08      	ldr	r7, [sp, #32]
 8015ab2:	9702      	str	r7, [sp, #8]
 8015ab4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015ab6:	9706      	str	r7, [sp, #24]
 8015ab8:	1b7d      	subs	r5, r7, r5
 8015aba:	9505      	str	r5, [sp, #20]
 8015abc:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8015abe:	1e6b      	subs	r3, r5, #1
 8015ac0:	2b07      	cmp	r3, #7
 8015ac2:	f200 8134 	bhi.w	8015d2e <_DrawBitmapCW+0x36a>
 8015ac6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015aca:	0008      	.short	0x0008
 8015acc:	013200ae 	.word	0x013200ae
 8015ad0:	013200ef 	.word	0x013200ef
 8015ad4:	01320132 	.word	0x01320132
 8015ad8:	0121      	.short	0x0121
 8015ada:	4b70      	ldr	r3, [pc, #448]	; (8015c9c <_DrawBitmapCW+0x2d8>)
 8015adc:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	682d      	ldr	r5, [r5, #0]
 8015ae2:	7c1a      	ldrb	r2, [r3, #16]
 8015ae4:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8015ae6:	9504      	str	r5, [sp, #16]
 8015ae8:	f002 0203 	and.w	r2, r2, #3
 8015aec:	9d02      	ldr	r5, [sp, #8]
 8015aee:	687f      	ldr	r7, [r7, #4]
 8015af0:	9703      	str	r7, [sp, #12]
 8015af2:	2a01      	cmp	r2, #1
 8015af4:	4435      	add	r5, r6
 8015af6:	d052      	beq.n	8015b9e <_DrawBitmapCW+0x1da>
 8015af8:	d307      	bcc.n	8015b0a <_DrawBitmapCW+0x146>
 8015afa:	2a02      	cmp	r2, #2
 8015afc:	f040 8117 	bne.w	8015d2e <_DrawBitmapCW+0x36a>
 8015b00:	eb05 0a0b 	add.w	sl, r5, fp
 8015b04:	46b0      	mov	r8, r6
 8015b06:	46a1      	mov	r9, r4
 8015b08:	e034      	b.n	8015b74 <_DrawBitmapCW+0x1b0>
 8015b0a:	eb05 0a0b 	add.w	sl, r5, fp
 8015b0e:	46b0      	mov	r8, r6
 8015b10:	46a1      	mov	r9, r4
 8015b12:	4b62      	ldr	r3, [pc, #392]	; (8015c9c <_DrawBitmapCW+0x2d8>)
 8015b14:	9f03      	ldr	r7, [sp, #12]
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	9906      	ldr	r1, [sp, #24]
 8015b1a:	7c5a      	ldrb	r2, [r3, #17]
 8015b1c:	4b60      	ldr	r3, [pc, #384]	; (8015ca0 <_DrawBitmapCW+0x2dc>)
 8015b1e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8015b22:	f899 2000 	ldrb.w	r2, [r9]
 8015b26:	68c3      	ldr	r3, [r0, #12]
 8015b28:	f8d3 c018 	ldr.w	ip, [r3, #24]
 8015b2c:	2380      	movs	r3, #128	; 0x80
 8015b2e:	fa43 f308 	asr.w	r3, r3, r8
 8015b32:	421a      	tst	r2, r3
 8015b34:	9b04      	ldr	r3, [sp, #16]
 8015b36:	462a      	mov	r2, r5
 8015b38:	bf18      	it	ne
 8015b3a:	463b      	movne	r3, r7
 8015b3c:	f108 0801 	add.w	r8, r8, #1
 8015b40:	47e0      	blx	ip
 8015b42:	3501      	adds	r5, #1
 8015b44:	f1b8 0f08 	cmp.w	r8, #8
 8015b48:	bf04      	itt	eq
 8015b4a:	f109 0901 	addeq.w	r9, r9, #1
 8015b4e:	f04f 0800 	moveq.w	r8, #0
 8015b52:	4555      	cmp	r5, sl
 8015b54:	d1dd      	bne.n	8015b12 <_DrawBitmapCW+0x14e>
 8015b56:	e0ea      	b.n	8015d2e <_DrawBitmapCW+0x36a>
 8015b58:	f108 0801 	add.w	r8, r8, #1
 8015b5c:	f1b8 0f08 	cmp.w	r8, #8
 8015b60:	f105 0501 	add.w	r5, r5, #1
 8015b64:	bf04      	itt	eq
 8015b66:	f109 0901 	addeq.w	r9, r9, #1
 8015b6a:	f04f 0800 	moveq.w	r8, #0
 8015b6e:	4555      	cmp	r5, sl
 8015b70:	f000 80dd 	beq.w	8015d2e <_DrawBitmapCW+0x36a>
 8015b74:	f899 2000 	ldrb.w	r2, [r9]
 8015b78:	2380      	movs	r3, #128	; 0x80
 8015b7a:	fa43 f308 	asr.w	r3, r3, r8
 8015b7e:	421a      	tst	r2, r3
 8015b80:	d0ea      	beq.n	8015b58 <_DrawBitmapCW+0x194>
 8015b82:	4b46      	ldr	r3, [pc, #280]	; (8015c9c <_DrawBitmapCW+0x2d8>)
 8015b84:	9906      	ldr	r1, [sp, #24]
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	7c5a      	ldrb	r2, [r3, #17]
 8015b8a:	4b45      	ldr	r3, [pc, #276]	; (8015ca0 <_DrawBitmapCW+0x2dc>)
 8015b8c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8015b90:	68c3      	ldr	r3, [r0, #12]
 8015b92:	462a      	mov	r2, r5
 8015b94:	f8d3 c018 	ldr.w	ip, [r3, #24]
 8015b98:	9b03      	ldr	r3, [sp, #12]
 8015b9a:	47e0      	blx	ip
 8015b9c:	e7dc      	b.n	8015b58 <_DrawBitmapCW+0x194>
 8015b9e:	7c5a      	ldrb	r2, [r3, #17]
 8015ba0:	4b3f      	ldr	r3, [pc, #252]	; (8015ca0 <_DrawBitmapCW+0x2dc>)
 8015ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ba6:	691b      	ldr	r3, [r3, #16]
 8015ba8:	689b      	ldr	r3, [r3, #8]
 8015baa:	4798      	blx	r3
 8015bac:	eb05 070b 	add.w	r7, r5, fp
 8015bb0:	9004      	str	r0, [sp, #16]
 8015bb2:	9703      	str	r7, [sp, #12]
 8015bb4:	46b0      	mov	r8, r6
 8015bb6:	46a1      	mov	r9, r4
 8015bb8:	f899 2000 	ldrb.w	r2, [r9]
 8015bbc:	2380      	movs	r3, #128	; 0x80
 8015bbe:	fa43 f308 	asr.w	r3, r3, r8
 8015bc2:	421a      	tst	r2, r3
 8015bc4:	d020      	beq.n	8015c08 <_DrawBitmapCW+0x244>
 8015bc6:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 8015c9c <_DrawBitmapCW+0x2d8>
 8015bca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015ca0 <_DrawBitmapCW+0x2dc>
 8015bce:	f8dc 3000 	ldr.w	r3, [ip]
 8015bd2:	9906      	ldr	r1, [sp, #24]
 8015bd4:	7c5b      	ldrb	r3, [r3, #17]
 8015bd6:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8015bda:	68c3      	ldr	r3, [r0, #12]
 8015bdc:	462a      	mov	r2, r5
 8015bde:	695b      	ldr	r3, [r3, #20]
 8015be0:	f8cd c000 	str.w	ip, [sp]
 8015be4:	4798      	blx	r3
 8015be6:	f8dd c000 	ldr.w	ip, [sp]
 8015bea:	9f04      	ldr	r7, [sp, #16]
 8015bec:	f8dc 3000 	ldr.w	r3, [ip]
 8015bf0:	7c5b      	ldrb	r3, [r3, #17]
 8015bf2:	f85a 2023 	ldr.w	r2, [sl, r3, lsl #2]
 8015bf6:	68d1      	ldr	r1, [r2, #12]
 8015bf8:	ea80 0307 	eor.w	r3, r0, r7
 8015bfc:	f8d1 c018 	ldr.w	ip, [r1, #24]
 8015c00:	9906      	ldr	r1, [sp, #24]
 8015c02:	4610      	mov	r0, r2
 8015c04:	462a      	mov	r2, r5
 8015c06:	47e0      	blx	ip
 8015c08:	f108 0801 	add.w	r8, r8, #1
 8015c0c:	9f03      	ldr	r7, [sp, #12]
 8015c0e:	f1b8 0f08 	cmp.w	r8, #8
 8015c12:	f105 0501 	add.w	r5, r5, #1
 8015c16:	bf04      	itt	eq
 8015c18:	f109 0901 	addeq.w	r9, r9, #1
 8015c1c:	f04f 0800 	moveq.w	r8, #0
 8015c20:	42bd      	cmp	r5, r7
 8015c22:	d1c9      	bne.n	8015bb8 <_DrawBitmapCW+0x1f4>
 8015c24:	e083      	b.n	8015d2e <_DrawBitmapCW+0x36a>
 8015c26:	4b1f      	ldr	r3, [pc, #124]	; (8015ca4 <_DrawBitmapCW+0x2e0>)
 8015c28:	f894 a000 	ldrb.w	sl, [r4]
 8015c2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015c2e:	ad10      	add	r5, sp, #64	; 0x40
 8015c30:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
 8015c34:	2002      	movs	r0, #2
 8015c36:	9d02      	ldr	r5, [sp, #8]
 8015c38:	f000 fbe8 	bl	801640c <LCD__GetPfSetPixel>
 8015c3c:	4435      	add	r5, r6
 8015c3e:	4603      	mov	r3, r0
 8015c40:	eb05 0c0b 	add.w	ip, r5, fp
 8015c44:	46b0      	mov	r8, r6
 8015c46:	46a1      	mov	r9, r4
 8015c48:	f1c8 0203 	rsb	r2, r8, #3
 8015c4c:	0052      	lsls	r2, r2, #1
 8015c4e:	f1c2 0106 	rsb	r1, r2, #6
 8015c52:	20c0      	movs	r0, #192	; 0xc0
 8015c54:	fa40 f101 	asr.w	r1, r0, r1
 8015c58:	ea01 010a 	and.w	r1, r1, sl
 8015c5c:	fa21 f202 	lsr.w	r2, r1, r2
 8015c60:	af10      	add	r7, sp, #64	; 0x40
 8015c62:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8015c66:	4629      	mov	r1, r5
 8015c68:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8015c6c:	9806      	ldr	r0, [sp, #24]
 8015c6e:	9301      	str	r3, [sp, #4]
 8015c70:	f8cd c000 	str.w	ip, [sp]
 8015c74:	f108 0801 	add.w	r8, r8, #1
 8015c78:	4798      	blx	r3
 8015c7a:	f1b8 0f04 	cmp.w	r8, #4
 8015c7e:	f105 0501 	add.w	r5, r5, #1
 8015c82:	9b01      	ldr	r3, [sp, #4]
 8015c84:	f8dd c000 	ldr.w	ip, [sp]
 8015c88:	d105      	bne.n	8015c96 <_DrawBitmapCW+0x2d2>
 8015c8a:	f899 a001 	ldrb.w	sl, [r9, #1]
 8015c8e:	f04f 0800 	mov.w	r8, #0
 8015c92:	f109 0901 	add.w	r9, r9, #1
 8015c96:	4565      	cmp	r5, ip
 8015c98:	d1d6      	bne.n	8015c48 <_DrawBitmapCW+0x284>
 8015c9a:	e048      	b.n	8015d2e <_DrawBitmapCW+0x36a>
 8015c9c:	20000308 	.word	0x20000308
 8015ca0:	20021c0c 	.word	0x20021c0c
 8015ca4:	0801af88 	.word	0x0801af88
 8015ca8:	2004      	movs	r0, #4
 8015caa:	9d02      	ldr	r5, [sp, #8]
 8015cac:	f894 a000 	ldrb.w	sl, [r4]
 8015cb0:	f000 fbac 	bl	801640c <LCD__GetPfSetPixel>
 8015cb4:	4435      	add	r5, r6
 8015cb6:	4603      	mov	r3, r0
 8015cb8:	eb05 0c0b 	add.w	ip, r5, fp
 8015cbc:	46b0      	mov	r8, r6
 8015cbe:	46a1      	mov	r9, r4
 8015cc0:	f1c8 0201 	rsb	r2, r8, #1
 8015cc4:	0092      	lsls	r2, r2, #2
 8015cc6:	f1c2 0104 	rsb	r1, r2, #4
 8015cca:	20f0      	movs	r0, #240	; 0xf0
 8015ccc:	fa40 f101 	asr.w	r1, r0, r1
 8015cd0:	ea01 010a 	and.w	r1, r1, sl
 8015cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8015cd8:	9301      	str	r3, [sp, #4]
 8015cda:	4629      	mov	r1, r5
 8015cdc:	f8cd c000 	str.w	ip, [sp]
 8015ce0:	9806      	ldr	r0, [sp, #24]
 8015ce2:	b2d2      	uxtb	r2, r2
 8015ce4:	f108 0801 	add.w	r8, r8, #1
 8015ce8:	4798      	blx	r3
 8015cea:	f1b8 0f02 	cmp.w	r8, #2
 8015cee:	f105 0501 	add.w	r5, r5, #1
 8015cf2:	9b01      	ldr	r3, [sp, #4]
 8015cf4:	f8dd c000 	ldr.w	ip, [sp]
 8015cf8:	d105      	bne.n	8015d06 <_DrawBitmapCW+0x342>
 8015cfa:	f899 a001 	ldrb.w	sl, [r9, #1]
 8015cfe:	f04f 0800 	mov.w	r8, #0
 8015d02:	f109 0901 	add.w	r9, r9, #1
 8015d06:	4565      	cmp	r5, ip
 8015d08:	d1da      	bne.n	8015cc0 <_DrawBitmapCW+0x2fc>
 8015d0a:	e010      	b.n	8015d2e <_DrawBitmapCW+0x36a>
 8015d0c:	2008      	movs	r0, #8
 8015d0e:	f000 fb7d 	bl	801640c <LCD__GetPfSetPixel>
 8015d12:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8015d16:	9d02      	ldr	r5, [sp, #8]
 8015d18:	4681      	mov	r9, r0
 8015d1a:	44d8      	add	r8, fp
 8015d1c:	9f02      	ldr	r7, [sp, #8]
 8015d1e:	9806      	ldr	r0, [sp, #24]
 8015d20:	1be3      	subs	r3, r4, r7
 8015d22:	4629      	mov	r1, r5
 8015d24:	5d5a      	ldrb	r2, [r3, r5]
 8015d26:	3501      	adds	r5, #1
 8015d28:	47c8      	blx	r9
 8015d2a:	4545      	cmp	r5, r8
 8015d2c:	d1f6      	bne.n	8015d1c <_DrawBitmapCW+0x358>
 8015d2e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8015d30:	9f06      	ldr	r7, [sp, #24]
 8015d32:	442c      	add	r4, r5
 8015d34:	9d05      	ldr	r5, [sp, #20]
 8015d36:	3f01      	subs	r7, #1
 8015d38:	42af      	cmp	r7, r5
 8015d3a:	9706      	str	r7, [sp, #24]
 8015d3c:	f47f aebe 	bne.w	8015abc <_DrawBitmapCW+0xf8>
 8015d40:	e05e      	b.n	8015e00 <_DrawBitmapCW+0x43c>
 8015d42:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8015d44:	f1c7 0708 	rsb	r7, r7, #8
 8015d48:	9706      	str	r7, [sp, #24]
 8015d4a:	2700      	movs	r7, #0
 8015d4c:	4689      	mov	r9, r1
 8015d4e:	46b8      	mov	r8, r7
 8015d50:	42af      	cmp	r7, r5
 8015d52:	da55      	bge.n	8015e00 <_DrawBitmapCW+0x43c>
 8015d54:	4b2c      	ldr	r3, [pc, #176]	; (8015e08 <_DrawBitmapCW+0x444>)
 8015d56:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	ebc0 0009 	rsb	r0, r0, r9
 8015d5e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8015d62:	9004      	str	r0, [sp, #16]
 8015d64:	1c41      	adds	r1, r0, #1
 8015d66:	4291      	cmp	r1, r2
 8015d68:	9105      	str	r1, [sp, #20]
 8015d6a:	db43      	blt.n	8015df4 <_DrawBitmapCW+0x430>
 8015d6c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8015d70:	4599      	cmp	r9, r3
 8015d72:	dc3f      	bgt.n	8015df4 <_DrawBitmapCW+0x430>
 8015d74:	2600      	movs	r6, #0
 8015d76:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015d7a:	9402      	str	r4, [sp, #8]
 8015d7c:	46b4      	mov	ip, r6
 8015d7e:	45dc      	cmp	ip, fp
 8015d80:	da38      	bge.n	8015df4 <_DrawBitmapCW+0x430>
 8015d82:	b92e      	cbnz	r6, 8015d90 <_DrawBitmapCW+0x3cc>
 8015d84:	9a02      	ldr	r2, [sp, #8]
 8015d86:	f892 8000 	ldrb.w	r8, [r2]
 8015d8a:	3201      	adds	r2, #1
 8015d8c:	9202      	str	r2, [sp, #8]
 8015d8e:	2608      	movs	r6, #8
 8015d90:	9806      	ldr	r0, [sp, #24]
 8015d92:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015d94:	4a1c      	ldr	r2, [pc, #112]	; (8015e08 <_DrawBitmapCW+0x444>)
 8015d96:	fa48 f300 	asr.w	r3, r8, r0
 8015d9a:	1a76      	subs	r6, r6, r1
 8015d9c:	fa08 f801 	lsl.w	r8, r8, r1
 8015da0:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 8015da4:	fa5f f888 	uxtb.w	r8, r8
 8015da8:	d103      	bne.n	8015db2 <_DrawBitmapCW+0x3ee>
 8015daa:	6810      	ldr	r0, [r2, #0]
 8015dac:	7c00      	ldrb	r0, [r0, #16]
 8015dae:	0780      	lsls	r0, r0, #30
 8015db0:	d41b      	bmi.n	8015dea <_DrawBitmapCW+0x426>
 8015db2:	6812      	ldr	r2, [r2, #0]
 8015db4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8015db6:	6810      	ldr	r0, [r2, #0]
 8015db8:	9007      	str	r0, [sp, #28]
 8015dba:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8015dbc:	b110      	cbz	r0, 8015dc4 <_DrawBitmapCW+0x400>
 8015dbe:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8015dc2:	e000      	b.n	8015dc6 <_DrawBitmapCW+0x402>
 8015dc4:	b2db      	uxtb	r3, r3
 8015dc6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8015dc8:	6013      	str	r3, [r2, #0]
 8015dca:	1e4b      	subs	r3, r1, #1
 8015dcc:	464a      	mov	r2, r9
 8015dce:	4453      	add	r3, sl
 8015dd0:	9805      	ldr	r0, [sp, #20]
 8015dd2:	f8cd c000 	str.w	ip, [sp]
 8015dd6:	4651      	mov	r1, sl
 8015dd8:	f7f8 fc70 	bl	800e6bc <LCD_FillRect>
 8015ddc:	4b0a      	ldr	r3, [pc, #40]	; (8015e08 <_DrawBitmapCW+0x444>)
 8015dde:	9a07      	ldr	r2, [sp, #28]
 8015de0:	681b      	ldr	r3, [r3, #0]
 8015de2:	f8dd c000 	ldr.w	ip, [sp]
 8015de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015de8:	601a      	str	r2, [r3, #0]
 8015dea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015dec:	f10c 0c01 	add.w	ip, ip, #1
 8015df0:	449a      	add	sl, r3
 8015df2:	e7c4      	b.n	8015d7e <_DrawBitmapCW+0x3ba>
 8015df4:	981d      	ldr	r0, [sp, #116]	; 0x74
 8015df6:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8015dfa:	3701      	adds	r7, #1
 8015dfc:	4404      	add	r4, r0
 8015dfe:	e7a7      	b.n	8015d50 <_DrawBitmapCW+0x38c>
 8015e00:	b011      	add	sp, #68	; 0x44
 8015e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e06:	bf00      	nop
 8015e08:	20000308 	.word	0x20000308

08015e0c <LCD_ReadRectEx>:
 8015e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e10:	b087      	sub	sp, #28
 8015e12:	4617      	mov	r7, r2
 8015e14:	9304      	str	r3, [sp, #16]
 8015e16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015e18:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015e1a:	68da      	ldr	r2, [r3, #12]
 8015e1c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8015e1e:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8015e22:	4606      	mov	r6, r0
 8015e24:	460d      	mov	r5, r1
 8015e26:	b973      	cbnz	r3, 8015e46 <LCD_ReadRectEx+0x3a>
 8015e28:	4b71      	ldr	r3, [pc, #452]	; (8015ff0 <LCD_ReadRectEx+0x1e4>)
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	7c58      	ldrb	r0, [r3, #17]
 8015e2e:	f7f8 fb29 	bl	800e484 <GUI_GetBitsPerPixelEx>
 8015e32:	2808      	cmp	r0, #8
 8015e34:	4682      	mov	sl, r0
 8015e36:	dd15      	ble.n	8015e64 <LCD_ReadRectEx+0x58>
 8015e38:	2810      	cmp	r0, #16
 8015e3a:	bfcc      	ite	gt
 8015e3c:	f04f 0904 	movgt.w	r9, #4
 8015e40:	f04f 0902 	movle.w	r9, #2
 8015e44:	e010      	b.n	8015e68 <LCD_ReadRectEx+0x5c>
 8015e46:	a811      	add	r0, sp, #68	; 0x44
 8015e48:	2101      	movs	r1, #1
 8015e4a:	4798      	blx	r3
 8015e4c:	4684      	mov	ip, r0
 8015e4e:	2800      	cmp	r0, #0
 8015e50:	d0ea      	beq.n	8015e28 <LCD_ReadRectEx+0x1c>
 8015e52:	9b04      	ldr	r3, [sp, #16]
 8015e54:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015e56:	e88d 0018 	stmia.w	sp, {r3, r4}
 8015e5a:	4631      	mov	r1, r6
 8015e5c:	462a      	mov	r2, r5
 8015e5e:	463b      	mov	r3, r7
 8015e60:	47e0      	blx	ip
 8015e62:	e0c1      	b.n	8015fe8 <LCD_ReadRectEx+0x1dc>
 8015e64:	f04f 0901 	mov.w	r9, #1
 8015e68:	f04f 0b00 	mov.w	fp, #0
 8015e6c:	9b04      	ldr	r3, [sp, #16]
 8015e6e:	429d      	cmp	r5, r3
 8015e70:	f300 80ba 	bgt.w	8015fe8 <LCD_ReadRectEx+0x1dc>
 8015e74:	f1b9 0f02 	cmp.w	r9, #2
 8015e78:	d009      	beq.n	8015e8e <LCD_ReadRectEx+0x82>
 8015e7a:	f1b9 0f04 	cmp.w	r9, #4
 8015e7e:	d004      	beq.n	8015e8a <LCD_ReadRectEx+0x7e>
 8015e80:	f1b9 0f01 	cmp.w	r9, #1
 8015e84:	f040 80ae 	bne.w	8015fe4 <LCD_ReadRectEx+0x1d8>
 8015e88:	e003      	b.n	8015e92 <LCD_ReadRectEx+0x86>
 8015e8a:	46b4      	mov	ip, r6
 8015e8c:	e09b      	b.n	8015fc6 <LCD_ReadRectEx+0x1ba>
 8015e8e:	46b4      	mov	ip, r6
 8015e90:	e08a      	b.n	8015fa8 <LCD_ReadRectEx+0x19c>
 8015e92:	f10a 32ff 	add.w	r2, sl, #4294967295
 8015e96:	2a07      	cmp	r2, #7
 8015e98:	f200 80a4 	bhi.w	8015fe4 <LCD_ReadRectEx+0x1d8>
 8015e9c:	e8df f002 	tbb	[pc, r2]
 8015ea0:	0606080a 	.word	0x0606080a
 8015ea4:	04040404 	.word	0x04040404
 8015ea8:	46b4      	mov	ip, r6
 8015eaa:	e066      	b.n	8015f7a <LCD_ReadRectEx+0x16e>
 8015eac:	46b4      	mov	ip, r6
 8015eae:	e047      	b.n	8015f40 <LCD_ReadRectEx+0x134>
 8015eb0:	46b4      	mov	ip, r6
 8015eb2:	e022      	b.n	8015efa <LCD_ReadRectEx+0xee>
 8015eb4:	46b4      	mov	ip, r6
 8015eb6:	45bc      	cmp	ip, r7
 8015eb8:	f300 8094 	bgt.w	8015fe4 <LCD_ReadRectEx+0x1d8>
 8015ebc:	4661      	mov	r1, ip
 8015ebe:	462a      	mov	r2, r5
 8015ec0:	f8cd c00c 	str.w	ip, [sp, #12]
 8015ec4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015ec6:	47c0      	blx	r8
 8015ec8:	f1cb 0207 	rsb	r2, fp, #7
 8015ecc:	fa00 f202 	lsl.w	r2, r0, r2
 8015ed0:	f64f 717f 	movw	r1, #65407	; 0xff7f
 8015ed4:	7820      	ldrb	r0, [r4, #0]
 8015ed6:	fa41 f10b 	asr.w	r1, r1, fp
 8015eda:	4001      	ands	r1, r0
 8015edc:	430a      	orrs	r2, r1
 8015ede:	7022      	strb	r2, [r4, #0]
 8015ee0:	f10b 0301 	add.w	r3, fp, #1
 8015ee4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8015ee8:	f023 0207 	bic.w	r2, r3, #7
 8015eec:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 8015ef0:	fa43 fb02 	asr.w	fp, r3, r2
 8015ef4:	f10c 0c01 	add.w	ip, ip, #1
 8015ef8:	e7dd      	b.n	8015eb6 <LCD_ReadRectEx+0xaa>
 8015efa:	45bc      	cmp	ip, r7
 8015efc:	dc72      	bgt.n	8015fe4 <LCD_ReadRectEx+0x1d8>
 8015efe:	4661      	mov	r1, ip
 8015f00:	462a      	mov	r2, r5
 8015f02:	f8cd c00c 	str.w	ip, [sp, #12]
 8015f06:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015f08:	47c0      	blx	r8
 8015f0a:	ea4f 024b 	mov.w	r2, fp, lsl #1
 8015f0e:	f1c2 0106 	rsb	r1, r2, #6
 8015f12:	fa00 f101 	lsl.w	r1, r0, r1
 8015f16:	f64f 703f 	movw	r0, #65343	; 0xff3f
 8015f1a:	fa40 f202 	asr.w	r2, r0, r2
 8015f1e:	7820      	ldrb	r0, [r4, #0]
 8015f20:	4002      	ands	r2, r0
 8015f22:	4311      	orrs	r1, r2
 8015f24:	7021      	strb	r1, [r4, #0]
 8015f26:	f10b 0301 	add.w	r3, fp, #1
 8015f2a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8015f2e:	f023 0203 	bic.w	r2, r3, #3
 8015f32:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 8015f36:	fa43 fb02 	asr.w	fp, r3, r2
 8015f3a:	f10c 0c01 	add.w	ip, ip, #1
 8015f3e:	e7dc      	b.n	8015efa <LCD_ReadRectEx+0xee>
 8015f40:	45bc      	cmp	ip, r7
 8015f42:	dc4f      	bgt.n	8015fe4 <LCD_ReadRectEx+0x1d8>
 8015f44:	4661      	mov	r1, ip
 8015f46:	462a      	mov	r2, r5
 8015f48:	f8cd c00c 	str.w	ip, [sp, #12]
 8015f4c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015f4e:	47c0      	blx	r8
 8015f50:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8015f54:	f1c2 0104 	rsb	r1, r2, #4
 8015f58:	fa00 f101 	lsl.w	r1, r0, r1
 8015f5c:	200f      	movs	r0, #15
 8015f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8015f62:	7820      	ldrb	r0, [r4, #0]
 8015f64:	4002      	ands	r2, r0
 8015f66:	4311      	orrs	r1, r2
 8015f68:	7021      	strb	r1, [r4, #0]
 8015f6a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8015f6e:	445c      	add	r4, fp
 8015f70:	f10c 0c01 	add.w	ip, ip, #1
 8015f74:	f08b 0b01 	eor.w	fp, fp, #1
 8015f78:	e7e2      	b.n	8015f40 <LCD_ReadRectEx+0x134>
 8015f7a:	4273      	negs	r3, r6
 8015f7c:	1ba2      	subs	r2, r4, r6
 8015f7e:	45bc      	cmp	ip, r7
 8015f80:	9305      	str	r3, [sp, #20]
 8015f82:	4462      	add	r2, ip
 8015f84:	dc0e      	bgt.n	8015fa4 <LCD_ReadRectEx+0x198>
 8015f86:	4661      	mov	r1, ip
 8015f88:	462a      	mov	r2, r5
 8015f8a:	f8cd c00c 	str.w	ip, [sp, #12]
 8015f8e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015f90:	47c0      	blx	r8
 8015f92:	9a05      	ldr	r2, [sp, #20]
 8015f94:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8015f98:	4422      	add	r2, r4
 8015f9a:	f802 000c 	strb.w	r0, [r2, ip]
 8015f9e:	f10c 0c01 	add.w	ip, ip, #1
 8015fa2:	e7ea      	b.n	8015f7a <LCD_ReadRectEx+0x16e>
 8015fa4:	4614      	mov	r4, r2
 8015fa6:	e01d      	b.n	8015fe4 <LCD_ReadRectEx+0x1d8>
 8015fa8:	45bc      	cmp	ip, r7
 8015faa:	dc1b      	bgt.n	8015fe4 <LCD_ReadRectEx+0x1d8>
 8015fac:	4661      	mov	r1, ip
 8015fae:	f8cd c00c 	str.w	ip, [sp, #12]
 8015fb2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015fb4:	462a      	mov	r2, r5
 8015fb6:	47c0      	blx	r8
 8015fb8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8015fbc:	f824 0b02 	strh.w	r0, [r4], #2
 8015fc0:	f10c 0c01 	add.w	ip, ip, #1
 8015fc4:	e7f0      	b.n	8015fa8 <LCD_ReadRectEx+0x19c>
 8015fc6:	45bc      	cmp	ip, r7
 8015fc8:	dc0c      	bgt.n	8015fe4 <LCD_ReadRectEx+0x1d8>
 8015fca:	4661      	mov	r1, ip
 8015fcc:	f8cd c00c 	str.w	ip, [sp, #12]
 8015fd0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015fd2:	462a      	mov	r2, r5
 8015fd4:	47c0      	blx	r8
 8015fd6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8015fda:	f844 0b04 	str.w	r0, [r4], #4
 8015fde:	f10c 0c01 	add.w	ip, ip, #1
 8015fe2:	e7f0      	b.n	8015fc6 <LCD_ReadRectEx+0x1ba>
 8015fe4:	3501      	adds	r5, #1
 8015fe6:	e741      	b.n	8015e6c <LCD_ReadRectEx+0x60>
 8015fe8:	b007      	add	sp, #28
 8015fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fee:	bf00      	nop
 8015ff0:	20000308 	.word	0x20000308

08015ff4 <GUI_ReadRectEx>:
 8015ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ff6:	4d16      	ldr	r5, [pc, #88]	; (8016050 <GUI_ReadRectEx+0x5c>)
 8015ff8:	9e05      	ldr	r6, [sp, #20]
 8015ffa:	682d      	ldr	r5, [r5, #0]
 8015ffc:	9c06      	ldr	r4, [sp, #24]
 8015ffe:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 8016002:	42b8      	cmp	r0, r7
 8016004:	bfb8      	it	lt
 8016006:	4638      	movlt	r0, r7
 8016008:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 801600c:	42ba      	cmp	r2, r7
 801600e:	bfa8      	it	ge
 8016010:	463a      	movge	r2, r7
 8016012:	4282      	cmp	r2, r0
 8016014:	db1b      	blt.n	801604e <GUI_ReadRectEx+0x5a>
 8016016:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 801601a:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 801601e:	42b9      	cmp	r1, r7
 8016020:	bfb8      	it	lt
 8016022:	4639      	movlt	r1, r7
 8016024:	42ab      	cmp	r3, r5
 8016026:	bfa8      	it	ge
 8016028:	462b      	movge	r3, r5
 801602a:	428b      	cmp	r3, r1
 801602c:	db0f      	blt.n	801604e <GUI_ReadRectEx+0x5a>
 801602e:	68e5      	ldr	r5, [r4, #12]
 8016030:	682d      	ldr	r5, [r5, #0]
 8016032:	f035 0704 	bics.w	r7, r5, #4
 8016036:	d105      	bne.n	8016044 <GUI_ReadRectEx+0x50>
 8016038:	9605      	str	r6, [sp, #20]
 801603a:	9406      	str	r4, [sp, #24]
 801603c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016040:	f7ff bee4 	b.w	8015e0c <LCD_ReadRectEx>
 8016044:	6825      	ldr	r5, [r4, #0]
 8016046:	2d00      	cmp	r5, #0
 8016048:	d0f6      	beq.n	8016038 <GUI_ReadRectEx+0x44>
 801604a:	462c      	mov	r4, r5
 801604c:	e7ef      	b.n	801602e <GUI_ReadRectEx+0x3a>
 801604e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016050:	20000308 	.word	0x20000308

08016054 <_OnExit>:
 8016054:	b510      	push	{r4, lr}
 8016056:	4c03      	ldr	r4, [pc, #12]	; (8016064 <_OnExit+0x10>)
 8016058:	6820      	ldr	r0, [r4, #0]
 801605a:	f7fa fcdd 	bl	8010a18 <GUI_ALLOC_FreeFixedBlock>
 801605e:	2300      	movs	r3, #0
 8016060:	6023      	str	r3, [r4, #0]
 8016062:	bd10      	pop	{r4, pc}
 8016064:	20021d0c 	.word	0x20021d0c

08016068 <LCD_InitColors>:
 8016068:	b538      	push	{r3, r4, r5, lr}
 801606a:	4d09      	ldr	r5, [pc, #36]	; (8016090 <LCD_InitColors+0x28>)
 801606c:	682c      	ldr	r4, [r5, #0]
 801606e:	b95c      	cbnz	r4, 8016088 <LCD_InitColors+0x20>
 8016070:	4b08      	ldr	r3, [pc, #32]	; (8016094 <LCD_InitColors+0x2c>)
 8016072:	6818      	ldr	r0, [r3, #0]
 8016074:	0080      	lsls	r0, r0, #2
 8016076:	f7fa fe3b 	bl	8010cf0 <GUI_ALLOC_GetFixedBlock>
 801607a:	6028      	str	r0, [r5, #0]
 801607c:	b130      	cbz	r0, 801608c <LCD_InitColors+0x24>
 801607e:	4806      	ldr	r0, [pc, #24]	; (8016098 <LCD_InitColors+0x30>)
 8016080:	4b06      	ldr	r3, [pc, #24]	; (801609c <LCD_InitColors+0x34>)
 8016082:	6003      	str	r3, [r0, #0]
 8016084:	f7fa f8da 	bl	801023c <GUI__RegisterExit>
 8016088:	2000      	movs	r0, #0
 801608a:	bd38      	pop	{r3, r4, r5, pc}
 801608c:	2001      	movs	r0, #1
 801608e:	bd38      	pop	{r3, r4, r5, pc}
 8016090:	20021d0c 	.word	0x20021d0c
 8016094:	200005bc 	.word	0x200005bc
 8016098:	200017fc 	.word	0x200017fc
 801609c:	08016055 	.word	0x08016055

080160a0 <LCD_InitLUT>:
 80160a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80160a4:	f002 f894 	bl	80181d0 <LCD_GetNumLayers>
 80160a8:	2400      	movs	r4, #0
 80160aa:	4680      	mov	r8, r0
 80160ac:	4544      	cmp	r4, r8
 80160ae:	da2c      	bge.n	801610a <LCD_InitLUT+0x6a>
 80160b0:	4620      	mov	r0, r4
 80160b2:	f7f9 ff9d 	bl	800fff0 <GUI_DEVICE__GetpDriver>
 80160b6:	b330      	cbz	r0, 8016106 <LCD_InitLUT+0x66>
 80160b8:	4e15      	ldr	r6, [pc, #84]	; (8016110 <LCD_InitLUT+0x70>)
 80160ba:	6833      	ldr	r3, [r6, #0]
 80160bc:	4620      	mov	r0, r4
 80160be:	f893 9011 	ldrb.w	r9, [r3, #17]
 80160c2:	745c      	strb	r4, [r3, #17]
 80160c4:	f7f8 f9b6 	bl	800e434 <LCD_GetBitsPerPixelEx>
 80160c8:	2808      	cmp	r0, #8
 80160ca:	dd03      	ble.n	80160d4 <LCD_InitLUT+0x34>
 80160cc:	6833      	ldr	r3, [r6, #0]
 80160ce:	f883 9011 	strb.w	r9, [r3, #17]
 80160d2:	e018      	b.n	8016106 <LCD_InitLUT+0x66>
 80160d4:	4b0f      	ldr	r3, [pc, #60]	; (8016114 <LCD_InitLUT+0x74>)
 80160d6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80160da:	691a      	ldr	r2, [r3, #16]
 80160dc:	4b0e      	ldr	r3, [pc, #56]	; (8016118 <LCD_InitLUT+0x78>)
 80160de:	429a      	cmp	r2, r3
 80160e0:	d0f4      	beq.n	80160cc <LCD_InitLUT+0x2c>
 80160e2:	4620      	mov	r0, r4
 80160e4:	f7f8 f9a9 	bl	800e43a <LCD_GetNumColorsEx>
 80160e8:	2500      	movs	r5, #0
 80160ea:	4682      	mov	sl, r0
 80160ec:	4555      	cmp	r5, sl
 80160ee:	daed      	bge.n	80160cc <LCD_InitLUT+0x2c>
 80160f0:	b2ef      	uxtb	r7, r5
 80160f2:	4638      	mov	r0, r7
 80160f4:	f7f8 fd62 	bl	800ebbc <LCD_Index2Color>
 80160f8:	4639      	mov	r1, r7
 80160fa:	4602      	mov	r2, r0
 80160fc:	4620      	mov	r0, r4
 80160fe:	f7f8 f925 	bl	800e34c <LCD_SetLUTEntryEx>
 8016102:	3501      	adds	r5, #1
 8016104:	e7f2      	b.n	80160ec <LCD_InitLUT+0x4c>
 8016106:	3401      	adds	r4, #1
 8016108:	e7d0      	b.n	80160ac <LCD_InitLUT+0xc>
 801610a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801610e:	bf00      	nop
 8016110:	20000308 	.word	0x20000308
 8016114:	20021c0c 	.word	0x20021c0c
 8016118:	08023150 	.word	0x08023150

0801611c <LCD_AA_SetAndMask>:
 801611c:	4b02      	ldr	r3, [pc, #8]	; (8016128 <LCD_AA_SetAndMask+0xc>)
 801611e:	681a      	ldr	r2, [r3, #0]
 8016120:	6018      	str	r0, [r3, #0]
 8016122:	4610      	mov	r0, r2
 8016124:	4770      	bx	lr
 8016126:	bf00      	nop
 8016128:	200005c0 	.word	0x200005c0

0801612c <LCD_AA_MixColors16>:
 801612c:	b510      	push	{r4, lr}
 801612e:	0e0c      	lsrs	r4, r1, #24
 8016130:	2cff      	cmp	r4, #255	; 0xff
 8016132:	4603      	mov	r3, r0
 8016134:	4c09      	ldr	r4, [pc, #36]	; (801615c <LCD_AA_MixColors16+0x30>)
 8016136:	d108      	bne.n	801614a <LCD_AA_MixColors16+0x1e>
 8016138:	f06f 0010 	mvn.w	r0, #16
 801613c:	4350      	muls	r0, r2
 801613e:	6821      	ldr	r1, [r4, #0]
 8016140:	30ff      	adds	r0, #255	; 0xff
 8016142:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8016146:	4008      	ands	r0, r1
 8016148:	bd10      	pop	{r4, pc}
 801614a:	4b05      	ldr	r3, [pc, #20]	; (8016160 <LCD_AA_MixColors16+0x34>)
 801614c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	b2d2      	uxtb	r2, r2
 8016154:	4798      	blx	r3
 8016156:	6823      	ldr	r3, [r4, #0]
 8016158:	4018      	ands	r0, r3
 801615a:	bd10      	pop	{r4, pc}
 801615c:	200005c0 	.word	0x200005c0
 8016160:	200002f4 	.word	0x200002f4

08016164 <LCD_SetPixelAA4_Trans>:
 8016164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016168:	4605      	mov	r5, r0
 801616a:	460c      	mov	r4, r1
 801616c:	4616      	mov	r6, r2
 801616e:	2a00      	cmp	r2, #0
 8016170:	d040      	beq.n	80161f4 <LCD_SetPixelAA4_Trans+0x90>
 8016172:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80161fc <LCD_SetPixelAA4_Trans+0x98>
 8016176:	f8d8 3000 	ldr.w	r3, [r8]
 801617a:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 801617e:	4291      	cmp	r1, r2
 8016180:	db38      	blt.n	80161f4 <LCD_SetPixelAA4_Trans+0x90>
 8016182:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8016186:	4291      	cmp	r1, r2
 8016188:	dc34      	bgt.n	80161f4 <LCD_SetPixelAA4_Trans+0x90>
 801618a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801618e:	4290      	cmp	r0, r2
 8016190:	db30      	blt.n	80161f4 <LCD_SetPixelAA4_Trans+0x90>
 8016192:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8016196:	4290      	cmp	r0, r2
 8016198:	dc2c      	bgt.n	80161f4 <LCD_SetPixelAA4_Trans+0x90>
 801619a:	2e0e      	cmp	r6, #14
 801619c:	4f16      	ldr	r7, [pc, #88]	; (80161f8 <LCD_SetPixelAA4_Trans+0x94>)
 801619e:	f8d3 e03c 	ldr.w	lr, [r3, #60]	; 0x3c
 80161a2:	d90b      	bls.n	80161bc <LCD_SetPixelAA4_Trans+0x58>
 80161a4:	7c5b      	ldrb	r3, [r3, #17]
 80161a6:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 80161aa:	68c3      	ldr	r3, [r0, #12]
 80161ac:	4629      	mov	r1, r5
 80161ae:	699e      	ldr	r6, [r3, #24]
 80161b0:	f8de 3000 	ldr.w	r3, [lr]
 80161b4:	4622      	mov	r2, r4
 80161b6:	47b0      	blx	r6
 80161b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80161bc:	f8de 0000 	ldr.w	r0, [lr]
 80161c0:	f7f8 fcfc 	bl	800ebbc <LCD_Index2Color>
 80161c4:	4621      	mov	r1, r4
 80161c6:	4681      	mov	r9, r0
 80161c8:	4628      	mov	r0, r5
 80161ca:	f001 ffcb 	bl	8018164 <LCD_GetPixelColor>
 80161ce:	4632      	mov	r2, r6
 80161d0:	4601      	mov	r1, r0
 80161d2:	4648      	mov	r0, r9
 80161d4:	f7ff ffaa 	bl	801612c <LCD_AA_MixColors16>
 80161d8:	f8d8 3000 	ldr.w	r3, [r8]
 80161dc:	7c5b      	ldrb	r3, [r3, #17]
 80161de:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
 80161e2:	68f3      	ldr	r3, [r6, #12]
 80161e4:	699f      	ldr	r7, [r3, #24]
 80161e6:	f7f8 fcd9 	bl	800eb9c <LCD_Color2Index>
 80161ea:	4629      	mov	r1, r5
 80161ec:	4603      	mov	r3, r0
 80161ee:	4622      	mov	r2, r4
 80161f0:	4630      	mov	r0, r6
 80161f2:	47b8      	blx	r7
 80161f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80161f8:	20021c0c 	.word	0x20021c0c
 80161fc:	20000308 	.word	0x20000308

08016200 <LCD_SetPixelAA4_NoTrans>:
 8016200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016204:	4f27      	ldr	r7, [pc, #156]	; (80162a4 <LCD_SetPixelAA4_NoTrans+0xa4>)
 8016206:	683b      	ldr	r3, [r7, #0]
 8016208:	4690      	mov	r8, r2
 801620a:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 801620e:	4291      	cmp	r1, r2
 8016210:	4605      	mov	r5, r0
 8016212:	460c      	mov	r4, r1
 8016214:	db43      	blt.n	801629e <LCD_SetPixelAA4_NoTrans+0x9e>
 8016216:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 801621a:	4291      	cmp	r1, r2
 801621c:	dc3f      	bgt.n	801629e <LCD_SetPixelAA4_NoTrans+0x9e>
 801621e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8016222:	4290      	cmp	r0, r2
 8016224:	db3b      	blt.n	801629e <LCD_SetPixelAA4_NoTrans+0x9e>
 8016226:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801622a:	4290      	cmp	r0, r2
 801622c:	dc37      	bgt.n	801629e <LCD_SetPixelAA4_NoTrans+0x9e>
 801622e:	4e1e      	ldr	r6, [pc, #120]	; (80162a8 <LCD_SetPixelAA4_NoTrans+0xa8>)
 8016230:	f1b8 0f00 	cmp.w	r8, #0
 8016234:	d109      	bne.n	801624a <LCD_SetPixelAA4_NoTrans+0x4a>
 8016236:	7c5a      	ldrb	r2, [r3, #17]
 8016238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801623a:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	68c2      	ldr	r2, [r0, #12]
 8016242:	4629      	mov	r1, r5
 8016244:	6996      	ldr	r6, [r2, #24]
 8016246:	4622      	mov	r2, r4
 8016248:	e028      	b.n	801629c <LCD_SetPixelAA4_NoTrans+0x9c>
 801624a:	f1b8 0f0f 	cmp.w	r8, #15
 801624e:	f8d3 e03c 	ldr.w	lr, [r3, #60]	; 0x3c
 8016252:	d109      	bne.n	8016268 <LCD_SetPixelAA4_NoTrans+0x68>
 8016254:	7c5b      	ldrb	r3, [r3, #17]
 8016256:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 801625a:	68c3      	ldr	r3, [r0, #12]
 801625c:	4629      	mov	r1, r5
 801625e:	699e      	ldr	r6, [r3, #24]
 8016260:	f8de 3000 	ldr.w	r3, [lr]
 8016264:	4622      	mov	r2, r4
 8016266:	e019      	b.n	801629c <LCD_SetPixelAA4_NoTrans+0x9c>
 8016268:	f8de 0000 	ldr.w	r0, [lr]
 801626c:	f7f8 fca6 	bl	800ebbc <LCD_Index2Color>
 8016270:	683b      	ldr	r3, [r7, #0]
 8016272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016274:	4681      	mov	r9, r0
 8016276:	6818      	ldr	r0, [r3, #0]
 8016278:	f7f8 fca0 	bl	800ebbc <LCD_Index2Color>
 801627c:	4642      	mov	r2, r8
 801627e:	4601      	mov	r1, r0
 8016280:	4648      	mov	r0, r9
 8016282:	f7ff ff53 	bl	801612c <LCD_AA_MixColors16>
 8016286:	f7f8 fc89 	bl	800eb9c <LCD_Color2Index>
 801628a:	683a      	ldr	r2, [r7, #0]
 801628c:	7c52      	ldrb	r2, [r2, #17]
 801628e:	4603      	mov	r3, r0
 8016290:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 8016294:	68c1      	ldr	r1, [r0, #12]
 8016296:	4622      	mov	r2, r4
 8016298:	698e      	ldr	r6, [r1, #24]
 801629a:	4629      	mov	r1, r5
 801629c:	47b0      	blx	r6
 801629e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80162a2:	bf00      	nop
 80162a4:	20000308 	.word	0x20000308
 80162a8:	20021c0c 	.word	0x20021c0c

080162ac <LCD_AA_MixColors256>:
 80162ac:	b508      	push	{r3, lr}
 80162ae:	4b03      	ldr	r3, [pc, #12]	; (80162bc <LCD_AA_MixColors256+0x10>)
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	4798      	blx	r3
 80162b4:	4b02      	ldr	r3, [pc, #8]	; (80162c0 <LCD_AA_MixColors256+0x14>)
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	4018      	ands	r0, r3
 80162ba:	bd08      	pop	{r3, pc}
 80162bc:	200002f4 	.word	0x200002f4
 80162c0:	200005c0 	.word	0x200005c0

080162c4 <LCD_SetPixelAA8_Trans>:
 80162c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80162c8:	4605      	mov	r5, r0
 80162ca:	460c      	mov	r4, r1
 80162cc:	4616      	mov	r6, r2
 80162ce:	2a00      	cmp	r2, #0
 80162d0:	d040      	beq.n	8016354 <LCD_SetPixelAA8_Trans+0x90>
 80162d2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 801635c <LCD_SetPixelAA8_Trans+0x98>
 80162d6:	f8d8 3000 	ldr.w	r3, [r8]
 80162da:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80162de:	4291      	cmp	r1, r2
 80162e0:	db38      	blt.n	8016354 <LCD_SetPixelAA8_Trans+0x90>
 80162e2:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80162e6:	4291      	cmp	r1, r2
 80162e8:	dc34      	bgt.n	8016354 <LCD_SetPixelAA8_Trans+0x90>
 80162ea:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80162ee:	4290      	cmp	r0, r2
 80162f0:	db30      	blt.n	8016354 <LCD_SetPixelAA8_Trans+0x90>
 80162f2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80162f6:	4290      	cmp	r0, r2
 80162f8:	dc2c      	bgt.n	8016354 <LCD_SetPixelAA8_Trans+0x90>
 80162fa:	2eff      	cmp	r6, #255	; 0xff
 80162fc:	4f16      	ldr	r7, [pc, #88]	; (8016358 <LCD_SetPixelAA8_Trans+0x94>)
 80162fe:	f8d3 e03c 	ldr.w	lr, [r3, #60]	; 0x3c
 8016302:	d10b      	bne.n	801631c <LCD_SetPixelAA8_Trans+0x58>
 8016304:	7c5b      	ldrb	r3, [r3, #17]
 8016306:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 801630a:	68c3      	ldr	r3, [r0, #12]
 801630c:	4629      	mov	r1, r5
 801630e:	699e      	ldr	r6, [r3, #24]
 8016310:	f8de 3000 	ldr.w	r3, [lr]
 8016314:	4622      	mov	r2, r4
 8016316:	47b0      	blx	r6
 8016318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801631c:	f8de 0000 	ldr.w	r0, [lr]
 8016320:	f7f8 fc4c 	bl	800ebbc <LCD_Index2Color>
 8016324:	4621      	mov	r1, r4
 8016326:	4681      	mov	r9, r0
 8016328:	4628      	mov	r0, r5
 801632a:	f001 ff1b 	bl	8018164 <LCD_GetPixelColor>
 801632e:	4632      	mov	r2, r6
 8016330:	4601      	mov	r1, r0
 8016332:	4648      	mov	r0, r9
 8016334:	f7ff ffba 	bl	80162ac <LCD_AA_MixColors256>
 8016338:	f8d8 3000 	ldr.w	r3, [r8]
 801633c:	7c5b      	ldrb	r3, [r3, #17]
 801633e:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
 8016342:	68f3      	ldr	r3, [r6, #12]
 8016344:	699f      	ldr	r7, [r3, #24]
 8016346:	f7f8 fc29 	bl	800eb9c <LCD_Color2Index>
 801634a:	4629      	mov	r1, r5
 801634c:	4603      	mov	r3, r0
 801634e:	4622      	mov	r2, r4
 8016350:	4630      	mov	r0, r6
 8016352:	47b8      	blx	r7
 8016354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016358:	20021c0c 	.word	0x20021c0c
 801635c:	20000308 	.word	0x20000308

08016360 <LCD_SetPixelAA8_NoTrans>:
 8016360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016364:	4f27      	ldr	r7, [pc, #156]	; (8016404 <LCD_SetPixelAA8_NoTrans+0xa4>)
 8016366:	683b      	ldr	r3, [r7, #0]
 8016368:	4690      	mov	r8, r2
 801636a:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 801636e:	4291      	cmp	r1, r2
 8016370:	4605      	mov	r5, r0
 8016372:	460c      	mov	r4, r1
 8016374:	db43      	blt.n	80163fe <LCD_SetPixelAA8_NoTrans+0x9e>
 8016376:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 801637a:	4291      	cmp	r1, r2
 801637c:	dc3f      	bgt.n	80163fe <LCD_SetPixelAA8_NoTrans+0x9e>
 801637e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8016382:	4290      	cmp	r0, r2
 8016384:	db3b      	blt.n	80163fe <LCD_SetPixelAA8_NoTrans+0x9e>
 8016386:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801638a:	4290      	cmp	r0, r2
 801638c:	dc37      	bgt.n	80163fe <LCD_SetPixelAA8_NoTrans+0x9e>
 801638e:	4e1e      	ldr	r6, [pc, #120]	; (8016408 <LCD_SetPixelAA8_NoTrans+0xa8>)
 8016390:	f1b8 0f00 	cmp.w	r8, #0
 8016394:	d109      	bne.n	80163aa <LCD_SetPixelAA8_NoTrans+0x4a>
 8016396:	7c5a      	ldrb	r2, [r3, #17]
 8016398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801639a:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	68c2      	ldr	r2, [r0, #12]
 80163a2:	4629      	mov	r1, r5
 80163a4:	6996      	ldr	r6, [r2, #24]
 80163a6:	4622      	mov	r2, r4
 80163a8:	e028      	b.n	80163fc <LCD_SetPixelAA8_NoTrans+0x9c>
 80163aa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80163ae:	f8d3 e03c 	ldr.w	lr, [r3, #60]	; 0x3c
 80163b2:	d109      	bne.n	80163c8 <LCD_SetPixelAA8_NoTrans+0x68>
 80163b4:	7c5b      	ldrb	r3, [r3, #17]
 80163b6:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 80163ba:	68c3      	ldr	r3, [r0, #12]
 80163bc:	4629      	mov	r1, r5
 80163be:	699e      	ldr	r6, [r3, #24]
 80163c0:	f8de 3000 	ldr.w	r3, [lr]
 80163c4:	4622      	mov	r2, r4
 80163c6:	e019      	b.n	80163fc <LCD_SetPixelAA8_NoTrans+0x9c>
 80163c8:	f8de 0000 	ldr.w	r0, [lr]
 80163cc:	f7f8 fbf6 	bl	800ebbc <LCD_Index2Color>
 80163d0:	683b      	ldr	r3, [r7, #0]
 80163d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80163d4:	4681      	mov	r9, r0
 80163d6:	6818      	ldr	r0, [r3, #0]
 80163d8:	f7f8 fbf0 	bl	800ebbc <LCD_Index2Color>
 80163dc:	4642      	mov	r2, r8
 80163de:	4601      	mov	r1, r0
 80163e0:	4648      	mov	r0, r9
 80163e2:	f7ff ff63 	bl	80162ac <LCD_AA_MixColors256>
 80163e6:	f7f8 fbd9 	bl	800eb9c <LCD_Color2Index>
 80163ea:	683a      	ldr	r2, [r7, #0]
 80163ec:	7c52      	ldrb	r2, [r2, #17]
 80163ee:	4603      	mov	r3, r0
 80163f0:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 80163f4:	68c1      	ldr	r1, [r0, #12]
 80163f6:	4622      	mov	r2, r4
 80163f8:	698e      	ldr	r6, [r1, #24]
 80163fa:	4629      	mov	r1, r5
 80163fc:	47b0      	blx	r6
 80163fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016402:	bf00      	nop
 8016404:	20000308 	.word	0x20000308
 8016408:	20021c0c 	.word	0x20021c0c

0801640c <LCD__GetPfSetPixel>:
 801640c:	2804      	cmp	r0, #4
 801640e:	d003      	beq.n	8016418 <LCD__GetPfSetPixel+0xc>
 8016410:	2808      	cmp	r0, #8
 8016412:	d009      	beq.n	8016428 <LCD__GetPfSetPixel+0x1c>
 8016414:	2802      	cmp	r0, #2
 8016416:	d111      	bne.n	801643c <LCD__GetPfSetPixel+0x30>
 8016418:	4b09      	ldr	r3, [pc, #36]	; (8016440 <LCD__GetPfSetPixel+0x34>)
 801641a:	480a      	ldr	r0, [pc, #40]	; (8016444 <LCD__GetPfSetPixel+0x38>)
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	7c1b      	ldrb	r3, [r3, #16]
 8016420:	f013 0f02 	tst.w	r3, #2
 8016424:	4b08      	ldr	r3, [pc, #32]	; (8016448 <LCD__GetPfSetPixel+0x3c>)
 8016426:	e006      	b.n	8016436 <LCD__GetPfSetPixel+0x2a>
 8016428:	4b05      	ldr	r3, [pc, #20]	; (8016440 <LCD__GetPfSetPixel+0x34>)
 801642a:	4808      	ldr	r0, [pc, #32]	; (801644c <LCD__GetPfSetPixel+0x40>)
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	7c1b      	ldrb	r3, [r3, #16]
 8016430:	f013 0f02 	tst.w	r3, #2
 8016434:	4b06      	ldr	r3, [pc, #24]	; (8016450 <LCD__GetPfSetPixel+0x44>)
 8016436:	bf08      	it	eq
 8016438:	4618      	moveq	r0, r3
 801643a:	4770      	bx	lr
 801643c:	2000      	movs	r0, #0
 801643e:	4770      	bx	lr
 8016440:	20000308 	.word	0x20000308
 8016444:	08016165 	.word	0x08016165
 8016448:	08016201 	.word	0x08016201
 801644c:	080162c5 	.word	0x080162c5
 8016450:	08016361 	.word	0x08016361

08016454 <GUI__strcmp>:
 8016454:	b510      	push	{r4, lr}
 8016456:	4b09      	ldr	r3, [pc, #36]	; (801647c <GUI__strcmp+0x28>)
 8016458:	2800      	cmp	r0, #0
 801645a:	bf08      	it	eq
 801645c:	4618      	moveq	r0, r3
 801645e:	2900      	cmp	r1, #0
 8016460:	bf08      	it	eq
 8016462:	4619      	moveq	r1, r3
 8016464:	2300      	movs	r3, #0
 8016466:	5cc4      	ldrb	r4, [r0, r3]
 8016468:	5cca      	ldrb	r2, [r1, r3]
 801646a:	42a2      	cmp	r2, r4
 801646c:	d104      	bne.n	8016478 <GUI__strcmp+0x24>
 801646e:	3301      	adds	r3, #1
 8016470:	2a00      	cmp	r2, #0
 8016472:	d1f8      	bne.n	8016466 <GUI__strcmp+0x12>
 8016474:	4610      	mov	r0, r2
 8016476:	bd10      	pop	{r4, pc}
 8016478:	2001      	movs	r0, #1
 801647a:	bd10      	pop	{r4, pc}
 801647c:	0801dafd 	.word	0x0801dafd

08016480 <GUI__strcmp_hp>:
 8016480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016482:	460d      	mov	r5, r1
 8016484:	b160      	cbz	r0, 80164a0 <GUI__strcmp_hp+0x20>
 8016486:	f7fa fadb 	bl	8010a40 <GUI_ALLOC_LockH>
 801648a:	ac02      	add	r4, sp, #8
 801648c:	4629      	mov	r1, r5
 801648e:	f844 0d04 	str.w	r0, [r4, #-4]!
 8016492:	f7ff ffdf 	bl	8016454 <GUI__strcmp>
 8016496:	4605      	mov	r5, r0
 8016498:	4620      	mov	r0, r4
 801649a:	f7fa fadf 	bl	8010a5c <GUI_ALLOC_UnlockH>
 801649e:	e000      	b.n	80164a2 <GUI__strcmp_hp+0x22>
 80164a0:	2501      	movs	r5, #1
 80164a2:	4628      	mov	r0, r5
 80164a4:	b003      	add	sp, #12
 80164a6:	bd30      	pop	{r4, r5, pc}

080164a8 <_GetWordWrap>:
 80164a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80164ac:	2500      	movs	r5, #0
 80164ae:	9001      	str	r0, [sp, #4]
 80164b0:	468a      	mov	sl, r1
 80164b2:	4691      	mov	r9, r2
 80164b4:	46a8      	mov	r8, r5
 80164b6:	462e      	mov	r6, r5
 80164b8:	462c      	mov	r4, r5
 80164ba:	462f      	mov	r7, r5
 80164bc:	a801      	add	r0, sp, #4
 80164be:	f7f8 ff9f 	bl	800f400 <GUI_UC__GetCharCodeInc>
 80164c2:	2d00      	cmp	r5, #0
 80164c4:	bf08      	it	eq
 80164c6:	4605      	moveq	r5, r0
 80164c8:	b108      	cbz	r0, 80164ce <_GetWordWrap+0x26>
 80164ca:	280a      	cmp	r0, #10
 80164cc:	d10b      	bne.n	80164e6 <_GetWordWrap+0x3e>
 80164ce:	4626      	mov	r6, r4
 80164d0:	2e00      	cmp	r6, #0
 80164d2:	bf18      	it	ne
 80164d4:	4634      	movne	r4, r6
 80164d6:	f1b9 0f00 	cmp.w	r9, #0
 80164da:	d016      	beq.n	801650a <_GetWordWrap+0x62>
 80164dc:	ebc8 0707 	rsb	r7, r8, r7
 80164e0:	f8c9 7000 	str.w	r7, [r9]
 80164e4:	e011      	b.n	801650a <_GetWordWrap+0x62>
 80164e6:	2820      	cmp	r0, #32
 80164e8:	d00d      	beq.n	8016506 <_GetWordWrap+0x5e>
 80164ea:	2d20      	cmp	r5, #32
 80164ec:	bf04      	itt	eq
 80164ee:	4626      	moveq	r6, r4
 80164f0:	2500      	moveq	r5, #0
 80164f2:	f7fa f997 	bl	8010824 <GUI_GetCharDistX>
 80164f6:	4407      	add	r7, r0
 80164f8:	4557      	cmp	r7, sl
 80164fa:	4680      	mov	r8, r0
 80164fc:	dd01      	ble.n	8016502 <_GetWordWrap+0x5a>
 80164fe:	2c00      	cmp	r4, #0
 8016500:	d1e6      	bne.n	80164d0 <_GetWordWrap+0x28>
 8016502:	3401      	adds	r4, #1
 8016504:	e7da      	b.n	80164bc <_GetWordWrap+0x14>
 8016506:	4626      	mov	r6, r4
 8016508:	e7f3      	b.n	80164f2 <_GetWordWrap+0x4a>
 801650a:	4620      	mov	r0, r4
 801650c:	b002      	add	sp, #8
 801650e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016512 <_GetCharWrap>:
 8016512:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016514:	2400      	movs	r4, #0
 8016516:	9001      	str	r0, [sp, #4]
 8016518:	460e      	mov	r6, r1
 801651a:	4625      	mov	r5, r4
 801651c:	a801      	add	r0, sp, #4
 801651e:	f7f8 ff6f 	bl	800f400 <GUI_UC__GetCharCodeInc>
 8016522:	4607      	mov	r7, r0
 8016524:	b148      	cbz	r0, 801653a <_GetCharWrap+0x28>
 8016526:	f7fa f97d 	bl	8010824 <GUI_GetCharDistX>
 801652a:	4405      	add	r5, r0
 801652c:	b10c      	cbz	r4, 8016532 <_GetCharWrap+0x20>
 801652e:	42b5      	cmp	r5, r6
 8016530:	dc03      	bgt.n	801653a <_GetCharWrap+0x28>
 8016532:	2f0a      	cmp	r7, #10
 8016534:	d001      	beq.n	801653a <_GetCharWrap+0x28>
 8016536:	3401      	adds	r4, #1
 8016538:	e7f0      	b.n	801651c <_GetCharWrap+0xa>
 801653a:	4620      	mov	r0, r4
 801653c:	b003      	add	sp, #12
 801653e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016540 <_WrapGetNumCharsDisp>:
 8016540:	2a01      	cmp	r2, #1
 8016542:	b510      	push	{r4, lr}
 8016544:	d005      	beq.n	8016552 <_WrapGetNumCharsDisp+0x12>
 8016546:	2a02      	cmp	r2, #2
 8016548:	d108      	bne.n	801655c <_WrapGetNumCharsDisp+0x1c>
 801654a:	4b07      	ldr	r3, [pc, #28]	; (8016568 <_WrapGetNumCharsDisp+0x28>)
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	4798      	blx	r3
 8016550:	bd10      	pop	{r4, pc}
 8016552:	4a06      	ldr	r2, [pc, #24]	; (801656c <_WrapGetNumCharsDisp+0x2c>)
 8016554:	6814      	ldr	r4, [r2, #0]
 8016556:	461a      	mov	r2, r3
 8016558:	47a0      	blx	r4
 801655a:	bd10      	pop	{r4, pc}
 801655c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8016560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016564:	f7fa b88c 	b.w	8010680 <GUI__GetLineNumChars>
 8016568:	200005c4 	.word	0x200005c4
 801656c:	200005c8 	.word	0x200005c8

08016570 <GUI__WrapGetNumCharsDisp>:
 8016570:	2300      	movs	r3, #0
 8016572:	f7ff bfe5 	b.w	8016540 <_WrapGetNumCharsDisp>

08016576 <GUI__WrapGetNumCharsToNextLine>:
 8016576:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016578:	b085      	sub	sp, #20
 801657a:	ab03      	add	r3, sp, #12
 801657c:	4617      	mov	r7, r2
 801657e:	460e      	mov	r6, r1
 8016580:	9001      	str	r0, [sp, #4]
 8016582:	f7ff ffdd 	bl	8016540 <_WrapGetNumCharsDisp>
 8016586:	9d01      	ldr	r5, [sp, #4]
 8016588:	4604      	mov	r4, r0
 801658a:	4621      	mov	r1, r4
 801658c:	4628      	mov	r0, r5
 801658e:	f7f8 ff4b 	bl	800f428 <GUI_UC__NumChars2NumBytes>
 8016592:	4428      	add	r0, r5
 8016594:	ad04      	add	r5, sp, #16
 8016596:	f845 0d0c 	str.w	r0, [r5, #-12]!
 801659a:	4628      	mov	r0, r5
 801659c:	f7f8 ff30 	bl	800f400 <GUI_UC__GetCharCodeInc>
 80165a0:	280a      	cmp	r0, #10
 80165a2:	d101      	bne.n	80165a8 <GUI__WrapGetNumCharsToNextLine+0x32>
 80165a4:	3401      	adds	r4, #1
 80165a6:	e012      	b.n	80165ce <GUI__WrapGetNumCharsToNextLine+0x58>
 80165a8:	2f01      	cmp	r7, #1
 80165aa:	d110      	bne.n	80165ce <GUI__WrapGetNumCharsToNextLine+0x58>
 80165ac:	2820      	cmp	r0, #32
 80165ae:	d10e      	bne.n	80165ce <GUI__WrapGetNumCharsToNextLine+0x58>
 80165b0:	f7fa f938 	bl	8010824 <GUI_GetCharDistX>
 80165b4:	4607      	mov	r7, r0
 80165b6:	9b03      	ldr	r3, [sp, #12]
 80165b8:	429e      	cmp	r6, r3
 80165ba:	db08      	blt.n	80165ce <GUI__WrapGetNumCharsToNextLine+0x58>
 80165bc:	443b      	add	r3, r7
 80165be:	4628      	mov	r0, r5
 80165c0:	9303      	str	r3, [sp, #12]
 80165c2:	f7f8 ff1d 	bl	800f400 <GUI_UC__GetCharCodeInc>
 80165c6:	2820      	cmp	r0, #32
 80165c8:	f104 0401 	add.w	r4, r4, #1
 80165cc:	d0f3      	beq.n	80165b6 <GUI__WrapGetNumCharsToNextLine+0x40>
 80165ce:	4620      	mov	r0, r4
 80165d0:	b005      	add	sp, #20
 80165d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080165d4 <GUI__WrapGetNumBytesToNextLine>:
 80165d4:	b510      	push	{r4, lr}
 80165d6:	4604      	mov	r4, r0
 80165d8:	f7ff ffcd 	bl	8016576 <GUI__WrapGetNumCharsToNextLine>
 80165dc:	4601      	mov	r1, r0
 80165de:	4620      	mov	r0, r4
 80165e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80165e4:	f7f8 bf20 	b.w	800f428 <GUI_UC__NumChars2NumBytes>

080165e8 <GUI__ExpandPixelIndicesEx>:
 80165e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165ec:	1e0c      	subs	r4, r1, #0
 80165ee:	4605      	mov	r5, r0
 80165f0:	f340 80b3 	ble.w	801675a <GUI__ExpandPixelIndicesEx+0x172>
 80165f4:	2a08      	cmp	r2, #8
 80165f6:	685f      	ldr	r7, [r3, #4]
 80165f8:	dd04      	ble.n	8016604 <GUI__ExpandPixelIndicesEx+0x1c>
 80165fa:	2a10      	cmp	r2, #16
 80165fc:	f340 8098 	ble.w	8016730 <GUI__ExpandPixelIndicesEx+0x148>
 8016600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016604:	3a01      	subs	r2, #1
 8016606:	2a07      	cmp	r2, #7
 8016608:	f200 80a7 	bhi.w	801675a <GUI__ExpandPixelIndicesEx+0x172>
 801660c:	e8df f002 	tbb	[pc, r2]
 8016610:	58a52d04 	.word	0x58a52d04
 8016614:	83a5a5a5 	.word	0x83a5a5a5
 8016618:	1e66      	subs	r6, r4, #1
 801661a:	10f2      	asrs	r2, r6, #3
 801661c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8016620:	3b01      	subs	r3, #1
 8016622:	eb05 0802 	add.w	r8, r5, r2
 8016626:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 801662a:	f006 0607 	and.w	r6, r6, #7
 801662e:	f815 a002 	ldrb.w	sl, [r5, r2]
 8016632:	2580      	movs	r5, #128	; 0x80
 8016634:	4135      	asrs	r5, r6
 8016636:	f108 38ff 	add.w	r8, r8, #4294967295
 801663a:	b2ed      	uxtb	r5, r5
 801663c:	f1c6 0307 	rsb	r3, r6, #7
 8016640:	ea0a 0005 	and.w	r0, sl, r5
 8016644:	4118      	asrs	r0, r3
 8016646:	47b8      	blx	r7
 8016648:	f849 0904 	str.w	r0, [r9], #-4
 801664c:	b936      	cbnz	r6, 801665c <GUI__ExpandPixelIndicesEx+0x74>
 801664e:	f898 a000 	ldrb.w	sl, [r8]
 8016652:	2501      	movs	r5, #1
 8016654:	f108 38ff 	add.w	r8, r8, #4294967295
 8016658:	2607      	movs	r6, #7
 801665a:	e002      	b.n	8016662 <GUI__ExpandPixelIndicesEx+0x7a>
 801665c:	006d      	lsls	r5, r5, #1
 801665e:	3e01      	subs	r6, #1
 8016660:	b2ed      	uxtb	r5, r5
 8016662:	3c01      	subs	r4, #1
 8016664:	d1ea      	bne.n	801663c <GUI__ExpandPixelIndicesEx+0x54>
 8016666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801666a:	1e66      	subs	r6, r4, #1
 801666c:	10b2      	asrs	r2, r6, #2
 801666e:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8016672:	3b01      	subs	r3, #1
 8016674:	f006 0603 	and.w	r6, r6, #3
 8016678:	eb05 0802 	add.w	r8, r5, r2
 801667c:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 8016680:	f815 a002 	ldrb.w	sl, [r5, r2]
 8016684:	0073      	lsls	r3, r6, #1
 8016686:	25c0      	movs	r5, #192	; 0xc0
 8016688:	411d      	asrs	r5, r3
 801668a:	f108 38ff 	add.w	r8, r8, #4294967295
 801668e:	b2ed      	uxtb	r5, r5
 8016690:	0073      	lsls	r3, r6, #1
 8016692:	f1c3 0306 	rsb	r3, r3, #6
 8016696:	ea0a 0005 	and.w	r0, sl, r5
 801669a:	4118      	asrs	r0, r3
 801669c:	47b8      	blx	r7
 801669e:	f849 0904 	str.w	r0, [r9], #-4
 80166a2:	b936      	cbnz	r6, 80166b2 <GUI__ExpandPixelIndicesEx+0xca>
 80166a4:	2503      	movs	r5, #3
 80166a6:	f898 a000 	ldrb.w	sl, [r8]
 80166aa:	462e      	mov	r6, r5
 80166ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80166b0:	e002      	b.n	80166b8 <GUI__ExpandPixelIndicesEx+0xd0>
 80166b2:	00ad      	lsls	r5, r5, #2
 80166b4:	3e01      	subs	r6, #1
 80166b6:	b2ed      	uxtb	r5, r5
 80166b8:	3c01      	subs	r4, #1
 80166ba:	d1e9      	bne.n	8016690 <GUI__ExpandPixelIndicesEx+0xa8>
 80166bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166c0:	1e66      	subs	r6, r4, #1
 80166c2:	1072      	asrs	r2, r6, #1
 80166c4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80166c8:	3b01      	subs	r3, #1
 80166ca:	f006 0601 	and.w	r6, r6, #1
 80166ce:	eb05 0802 	add.w	r8, r5, r2
 80166d2:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 80166d6:	f815 a002 	ldrb.w	sl, [r5, r2]
 80166da:	00b3      	lsls	r3, r6, #2
 80166dc:	25f0      	movs	r5, #240	; 0xf0
 80166de:	411d      	asrs	r5, r3
 80166e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80166e4:	b2ed      	uxtb	r5, r5
 80166e6:	00b3      	lsls	r3, r6, #2
 80166e8:	f1c3 0304 	rsb	r3, r3, #4
 80166ec:	ea0a 0005 	and.w	r0, sl, r5
 80166f0:	4118      	asrs	r0, r3
 80166f2:	47b8      	blx	r7
 80166f4:	f849 0904 	str.w	r0, [r9], #-4
 80166f8:	b936      	cbnz	r6, 8016708 <GUI__ExpandPixelIndicesEx+0x120>
 80166fa:	f898 a000 	ldrb.w	sl, [r8]
 80166fe:	250f      	movs	r5, #15
 8016700:	f108 38ff 	add.w	r8, r8, #4294967295
 8016704:	2601      	movs	r6, #1
 8016706:	e002      	b.n	801670e <GUI__ExpandPixelIndicesEx+0x126>
 8016708:	012d      	lsls	r5, r5, #4
 801670a:	b2ed      	uxtb	r5, r5
 801670c:	2600      	movs	r6, #0
 801670e:	3c01      	subs	r4, #1
 8016710:	d1e9      	bne.n	80166e6 <GUI__ExpandPixelIndicesEx+0xfe>
 8016712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016716:	192e      	adds	r6, r5, r4
 8016718:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 801671c:	1b34      	subs	r4, r6, r4
 801671e:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 8016722:	47b8      	blx	r7
 8016724:	42a6      	cmp	r6, r4
 8016726:	f845 0d04 	str.w	r0, [r5, #-4]!
 801672a:	d1f8      	bne.n	801671e <GUI__ExpandPixelIndicesEx+0x136>
 801672c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016730:	695e      	ldr	r6, [r3, #20]
 8016732:	b12e      	cbz	r6, 8016740 <GUI__ExpandPixelIndicesEx+0x158>
 8016734:	4629      	mov	r1, r5
 8016736:	4622      	mov	r2, r4
 8016738:	2302      	movs	r3, #2
 801673a:	47b0      	blx	r6
 801673c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016740:	0064      	lsls	r4, r4, #1
 8016742:	4425      	add	r5, r4
 8016744:	192e      	adds	r6, r5, r4
 8016746:	1b2c      	subs	r4, r5, r4
 8016748:	f835 0d02 	ldrh.w	r0, [r5, #-2]!
 801674c:	47b8      	blx	r7
 801674e:	42a5      	cmp	r5, r4
 8016750:	f846 0d04 	str.w	r0, [r6, #-4]!
 8016754:	d1f8      	bne.n	8016748 <GUI__ExpandPixelIndicesEx+0x160>
 8016756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801675a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801675e <_GetTwinArcPara>:
 801675e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016762:	fb01 f901 	mul.w	r9, r1, r1
 8016766:	1e47      	subs	r7, r0, #1
 8016768:	4604      	mov	r4, r0
 801676a:	4340      	muls	r0, r0
 801676c:	ebc9 0000 	rsb	r0, r9, r0
 8016770:	460d      	mov	r5, r1
 8016772:	4692      	mov	sl, r2
 8016774:	4698      	mov	r8, r3
 8016776:	9e08      	ldr	r6, [sp, #32]
 8016778:	f001 fd4a 	bl	8018210 <GUI__sqrt32>
 801677c:	42bd      	cmp	r5, r7
 801677e:	f8ca 0000 	str.w	r0, [sl]
 8016782:	da10      	bge.n	80167a6 <_GetTwinArcPara+0x48>
 8016784:	fb07 f007 	mul.w	r0, r7, r7
 8016788:	ebc9 0000 	rsb	r0, r9, r0
 801678c:	f001 fd40 	bl	8018210 <GUI__sqrt32>
 8016790:	3c02      	subs	r4, #2
 8016792:	42a5      	cmp	r5, r4
 8016794:	f8c8 0000 	str.w	r0, [r8]
 8016798:	da03      	bge.n	80167a2 <_GetTwinArcPara+0x44>
 801679a:	3801      	subs	r0, #1
 801679c:	6030      	str	r0, [r6, #0]
 801679e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167a2:	2300      	movs	r3, #0
 80167a4:	e002      	b.n	80167ac <_GetTwinArcPara+0x4e>
 80167a6:	2300      	movs	r3, #0
 80167a8:	f8c8 3000 	str.w	r3, [r8]
 80167ac:	6033      	str	r3, [r6, #0]
 80167ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080167b2 <_GetTrippleArcPara>:
 80167b2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167b6:	fb01 f801 	mul.w	r8, r1, r1
 80167ba:	f100 3aff 	add.w	sl, r0, #4294967295
 80167be:	4604      	mov	r4, r0
 80167c0:	4340      	muls	r0, r0
 80167c2:	ebc8 0000 	rsb	r0, r8, r0
 80167c6:	460d      	mov	r5, r1
 80167c8:	4691      	mov	r9, r2
 80167ca:	469b      	mov	fp, r3
 80167cc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80167ce:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80167d0:	f001 fd1e 	bl	8018210 <GUI__sqrt32>
 80167d4:	4555      	cmp	r5, sl
 80167d6:	f8c9 0000 	str.w	r0, [r9]
 80167da:	da1d      	bge.n	8016818 <_GetTrippleArcPara+0x66>
 80167dc:	fb0a f00a 	mul.w	r0, sl, sl
 80167e0:	ebc8 0000 	rsb	r0, r8, r0
 80167e4:	f001 fd14 	bl	8018210 <GUI__sqrt32>
 80167e8:	f1a4 0902 	sub.w	r9, r4, #2
 80167ec:	454d      	cmp	r5, r9
 80167ee:	f8cb 0000 	str.w	r0, [fp]
 80167f2:	da0f      	bge.n	8016814 <_GetTrippleArcPara+0x62>
 80167f4:	fb09 f009 	mul.w	r0, r9, r9
 80167f8:	ebc8 0000 	rsb	r0, r8, r0
 80167fc:	f001 fd08 	bl	8018210 <GUI__sqrt32>
 8016800:	3c03      	subs	r4, #3
 8016802:	42a5      	cmp	r5, r4
 8016804:	6038      	str	r0, [r7, #0]
 8016806:	da03      	bge.n	8016810 <_GetTrippleArcPara+0x5e>
 8016808:	3801      	subs	r0, #1
 801680a:	6030      	str	r0, [r6, #0]
 801680c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016810:	2300      	movs	r3, #0
 8016812:	e005      	b.n	8016820 <_GetTrippleArcPara+0x6e>
 8016814:	2300      	movs	r3, #0
 8016816:	e002      	b.n	801681e <_GetTrippleArcPara+0x6c>
 8016818:	2300      	movs	r3, #0
 801681a:	f8cb 3000 	str.w	r3, [fp]
 801681e:	603b      	str	r3, [r7, #0]
 8016820:	6033      	str	r3, [r6, #0]
 8016822:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08016828 <GUI__DrawTwinArc2>:
 8016828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801682c:	461c      	mov	r4, r3
 801682e:	4b57      	ldr	r3, [pc, #348]	; (801698c <GUI__DrawTwinArc2+0x164>)
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8016834:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8016836:	b08b      	sub	sp, #44	; 0x2c
 8016838:	4415      	add	r5, r2
 801683a:	1e63      	subs	r3, r4, #1
 801683c:	19c6      	adds	r6, r0, r7
 801683e:	442b      	add	r3, r5
 8016840:	440f      	add	r7, r1
 8016842:	a808      	add	r0, sp, #32
 8016844:	f8ad 6020 	strh.w	r6, [sp, #32]
 8016848:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801684c:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 8016850:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8016854:	f7f5 fc84 	bl	800c160 <WM__InitIVRSearch>
 8016858:	2800      	cmp	r0, #0
 801685a:	f000 8094 	beq.w	8016986 <GUI__DrawTwinArc2+0x15e>
 801685e:	2c00      	cmp	r4, #0
 8016860:	dc02      	bgt.n	8016868 <GUI__DrawTwinArc2+0x40>
 8016862:	f7f5 fbbb 	bl	800bfdc <WM__GetNextIVR>
 8016866:	e7f7      	b.n	8016858 <GUI__DrawTwinArc2+0x30>
 8016868:	9814      	ldr	r0, [sp, #80]	; 0x50
 801686a:	f7f8 fffd 	bl	800f868 <GUI_SetColor>
 801686e:	f104 38ff 	add.w	r8, r4, #4294967295
 8016872:	4641      	mov	r1, r8
 8016874:	f118 38ff 	adds.w	r8, r8, #4294967295
 8016878:	d324      	bcc.n	80168c4 <GUI__DrawTwinArc2+0x9c>
 801687a:	ab07      	add	r3, sp, #28
 801687c:	9300      	str	r3, [sp, #0]
 801687e:	4620      	mov	r0, r4
 8016880:	aa05      	add	r2, sp, #20
 8016882:	ab06      	add	r3, sp, #24
 8016884:	f7ff ff6b 	bl	801675e <_GetTwinArcPara>
 8016888:	f104 39ff 	add.w	r9, r4, #4294967295
 801688c:	f8dd a018 	ldr.w	sl, [sp, #24]
 8016890:	9905      	ldr	r1, [sp, #20]
 8016892:	1930      	adds	r0, r6, r4
 8016894:	44a9      	add	r9, r5
 8016896:	ebc8 0909 	rsb	r9, r8, r9
 801689a:	ebc4 0b07 	rsb	fp, r4, r7
 801689e:	ebca 0200 	rsb	r2, sl, r0
 80168a2:	eb0b 0301 	add.w	r3, fp, r1
 80168a6:	1a40      	subs	r0, r0, r1
 80168a8:	3a01      	subs	r2, #1
 80168aa:	4649      	mov	r1, r9
 80168ac:	9302      	str	r3, [sp, #8]
 80168ae:	f7f7 feb9 	bl	800e624 <LCD_DrawHLine>
 80168b2:	9b02      	ldr	r3, [sp, #8]
 80168b4:	eb0b 000a 	add.w	r0, fp, sl
 80168b8:	3001      	adds	r0, #1
 80168ba:	4649      	mov	r1, r9
 80168bc:	461a      	mov	r2, r3
 80168be:	f7f7 feb1 	bl	800e624 <LCD_DrawHLine>
 80168c2:	e7d6      	b.n	8016872 <GUI__DrawTwinArc2+0x4a>
 80168c4:	2c01      	cmp	r4, #1
 80168c6:	d0cc      	beq.n	8016862 <GUI__DrawTwinArc2+0x3a>
 80168c8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80168ca:	f7f8 ffcd 	bl	800f868 <GUI_SetColor>
 80168ce:	f1a4 0902 	sub.w	r9, r4, #2
 80168d2:	eb05 0b04 	add.w	fp, r5, r4
 80168d6:	f105 0802 	add.w	r8, r5, #2
 80168da:	f1b9 0f00 	cmp.w	r9, #0
 80168de:	d027      	beq.n	8016930 <GUI__DrawTwinArc2+0x108>
 80168e0:	ab07      	add	r3, sp, #28
 80168e2:	4649      	mov	r1, r9
 80168e4:	9300      	str	r3, [sp, #0]
 80168e6:	4620      	mov	r0, r4
 80168e8:	aa05      	add	r2, sp, #20
 80168ea:	ab06      	add	r3, sp, #24
 80168ec:	f7ff ff37 	bl	801675e <_GetTwinArcPara>
 80168f0:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80168f4:	9906      	ldr	r1, [sp, #24]
 80168f6:	1930      	adds	r0, r6, r4
 80168f8:	1b3b      	subs	r3, r7, r4
 80168fa:	ebca 0200 	rsb	r2, sl, r0
 80168fe:	eb03 0c01 	add.w	ip, r3, r1
 8016902:	1a40      	subs	r0, r0, r1
 8016904:	3a01      	subs	r2, #1
 8016906:	4641      	mov	r1, r8
 8016908:	9302      	str	r3, [sp, #8]
 801690a:	f8cd c00c 	str.w	ip, [sp, #12]
 801690e:	f7f7 fe89 	bl	800e624 <LCD_DrawHLine>
 8016912:	9b02      	ldr	r3, [sp, #8]
 8016914:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8016918:	eb03 000a 	add.w	r0, r3, sl
 801691c:	4641      	mov	r1, r8
 801691e:	3001      	adds	r0, #1
 8016920:	4662      	mov	r2, ip
 8016922:	f7f7 fe7f 	bl	800e624 <LCD_DrawHLine>
 8016926:	f109 39ff 	add.w	r9, r9, #4294967295
 801692a:	f108 0801 	add.w	r8, r8, #1
 801692e:	e7d4      	b.n	80168da <GUI__DrawTwinArc2+0xb2>
 8016930:	2c02      	cmp	r4, #2
 8016932:	d096      	beq.n	8016862 <GUI__DrawTwinArc2+0x3a>
 8016934:	9816      	ldr	r0, [sp, #88]	; 0x58
 8016936:	f7f8 ff97 	bl	800f868 <GUI_SetColor>
 801693a:	f1c4 0303 	rsb	r3, r4, #3
 801693e:	f1a4 0803 	sub.w	r8, r4, #3
 8016942:	449b      	add	fp, r3
 8016944:	f1b8 0f00 	cmp.w	r8, #0
 8016948:	d08b      	beq.n	8016862 <GUI__DrawTwinArc2+0x3a>
 801694a:	ab07      	add	r3, sp, #28
 801694c:	4641      	mov	r1, r8
 801694e:	9300      	str	r3, [sp, #0]
 8016950:	4620      	mov	r0, r4
 8016952:	ab06      	add	r3, sp, #24
 8016954:	aa05      	add	r2, sp, #20
 8016956:	f7ff ff02 	bl	801675e <_GetTwinArcPara>
 801695a:	9807      	ldr	r0, [sp, #28]
 801695c:	1932      	adds	r2, r6, r4
 801695e:	ebc4 0907 	rsb	r9, r4, r7
 8016962:	4659      	mov	r1, fp
 8016964:	eb09 0a00 	add.w	sl, r9, r0
 8016968:	1a10      	subs	r0, r2, r0
 801696a:	3a01      	subs	r2, #1
 801696c:	f7f7 fe5a 	bl	800e624 <LCD_DrawHLine>
 8016970:	4659      	mov	r1, fp
 8016972:	f109 0001 	add.w	r0, r9, #1
 8016976:	4652      	mov	r2, sl
 8016978:	f7f7 fe54 	bl	800e624 <LCD_DrawHLine>
 801697c:	f108 38ff 	add.w	r8, r8, #4294967295
 8016980:	f10b 0b01 	add.w	fp, fp, #1
 8016984:	e7de      	b.n	8016944 <GUI__DrawTwinArc2+0x11c>
 8016986:	b00b      	add	sp, #44	; 0x2c
 8016988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801698c:	20000308 	.word	0x20000308

08016990 <GUI__DrawTwinArc4>:
 8016990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016994:	4d76      	ldr	r5, [pc, #472]	; (8016b70 <GUI__DrawTwinArc4+0x1e0>)
 8016996:	682d      	ldr	r5, [r5, #0]
 8016998:	6cee      	ldr	r6, [r5, #76]	; 0x4c
 801699a:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 801699c:	b08f      	sub	sp, #60	; 0x3c
 801699e:	4430      	add	r0, r6
 80169a0:	4439      	add	r1, r7
 80169a2:	9005      	str	r0, [sp, #20]
 80169a4:	4416      	add	r6, r2
 80169a6:	441f      	add	r7, r3
 80169a8:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 80169ac:	a80c      	add	r0, sp, #48	; 0x30
 80169ae:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80169b0:	9106      	str	r1, [sp, #24]
 80169b2:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 80169b6:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
 80169ba:	f8ad 7036 	strh.w	r7, [sp, #54]	; 0x36
 80169be:	f7f5 fbcf 	bl	800c160 <WM__InitIVRSearch>
 80169c2:	2800      	cmp	r0, #0
 80169c4:	f000 80d0 	beq.w	8016b68 <GUI__DrawTwinArc4+0x1d8>
 80169c8:	2c00      	cmp	r4, #0
 80169ca:	dc02      	bgt.n	80169d2 <GUI__DrawTwinArc4+0x42>
 80169cc:	f7f5 fb06 	bl	800bfdc <WM__GetNextIVR>
 80169d0:	e7f7      	b.n	80169c2 <GUI__DrawTwinArc4+0x32>
 80169d2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80169d4:	f7f8 ff48 	bl	800f868 <GUI_SetColor>
 80169d8:	9b06      	ldr	r3, [sp, #24]
 80169da:	4423      	add	r3, r4
 80169dc:	9307      	str	r3, [sp, #28]
 80169de:	9b06      	ldr	r3, [sp, #24]
 80169e0:	1e65      	subs	r5, r4, #1
 80169e2:	f103 0801 	add.w	r8, r3, #1
 80169e6:	2d00      	cmp	r5, #0
 80169e8:	d037      	beq.n	8016a5a <GUI__DrawTwinArc4+0xca>
 80169ea:	ab0b      	add	r3, sp, #44	; 0x2c
 80169ec:	4629      	mov	r1, r5
 80169ee:	9300      	str	r3, [sp, #0]
 80169f0:	4620      	mov	r0, r4
 80169f2:	aa09      	add	r2, sp, #36	; 0x24
 80169f4:	ab0a      	add	r3, sp, #40	; 0x28
 80169f6:	f7ff feb2 	bl	801675e <_GetTwinArcPara>
 80169fa:	9b05      	ldr	r3, [sp, #20]
 80169fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80169fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016a00:	4423      	add	r3, r4
 8016a02:	ebc1 0c03 	rsb	ip, r1, r3
 8016a06:	ebc4 0b06 	rsb	fp, r4, r6
 8016a0a:	1a9b      	subs	r3, r3, r2
 8016a0c:	3b01      	subs	r3, #1
 8016a0e:	eb0b 0901 	add.w	r9, fp, r1
 8016a12:	4493      	add	fp, r2
 8016a14:	4660      	mov	r0, ip
 8016a16:	461a      	mov	r2, r3
 8016a18:	4641      	mov	r1, r8
 8016a1a:	f10b 0b01 	add.w	fp, fp, #1
 8016a1e:	9303      	str	r3, [sp, #12]
 8016a20:	f8cd c010 	str.w	ip, [sp, #16]
 8016a24:	f7f7 fdfe 	bl	800e624 <LCD_DrawHLine>
 8016a28:	4641      	mov	r1, r8
 8016a2a:	4658      	mov	r0, fp
 8016a2c:	464a      	mov	r2, r9
 8016a2e:	f7f7 fdf9 	bl	800e624 <LCD_DrawHLine>
 8016a32:	ebc4 0a07 	rsb	sl, r4, r7
 8016a36:	f8dd c010 	ldr.w	ip, [sp, #16]
 8016a3a:	9b03      	ldr	r3, [sp, #12]
 8016a3c:	44aa      	add	sl, r5
 8016a3e:	4660      	mov	r0, ip
 8016a40:	461a      	mov	r2, r3
 8016a42:	4651      	mov	r1, sl
 8016a44:	f7f7 fdee 	bl	800e624 <LCD_DrawHLine>
 8016a48:	4658      	mov	r0, fp
 8016a4a:	4651      	mov	r1, sl
 8016a4c:	464a      	mov	r2, r9
 8016a4e:	f7f7 fde9 	bl	800e624 <LCD_DrawHLine>
 8016a52:	3d01      	subs	r5, #1
 8016a54:	f108 0801 	add.w	r8, r8, #1
 8016a58:	e7c5      	b.n	80169e6 <GUI__DrawTwinArc4+0x56>
 8016a5a:	2c01      	cmp	r4, #1
 8016a5c:	d0b6      	beq.n	80169cc <GUI__DrawTwinArc4+0x3c>
 8016a5e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016a60:	f7f8 ff02 	bl	800f868 <GUI_SetColor>
 8016a64:	9b07      	ldr	r3, [sp, #28]
 8016a66:	f1c4 0802 	rsb	r8, r4, #2
 8016a6a:	1ea5      	subs	r5, r4, #2
 8016a6c:	4498      	add	r8, r3
 8016a6e:	2d00      	cmp	r5, #0
 8016a70:	d037      	beq.n	8016ae2 <GUI__DrawTwinArc4+0x152>
 8016a72:	ab0b      	add	r3, sp, #44	; 0x2c
 8016a74:	4629      	mov	r1, r5
 8016a76:	9300      	str	r3, [sp, #0]
 8016a78:	4620      	mov	r0, r4
 8016a7a:	aa09      	add	r2, sp, #36	; 0x24
 8016a7c:	ab0a      	add	r3, sp, #40	; 0x28
 8016a7e:	f7ff fe6e 	bl	801675e <_GetTwinArcPara>
 8016a82:	9b05      	ldr	r3, [sp, #20]
 8016a84:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016a86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016a88:	4423      	add	r3, r4
 8016a8a:	ebc1 0c03 	rsb	ip, r1, r3
 8016a8e:	ebc4 0b06 	rsb	fp, r4, r6
 8016a92:	1a9b      	subs	r3, r3, r2
 8016a94:	3b01      	subs	r3, #1
 8016a96:	eb0b 0901 	add.w	r9, fp, r1
 8016a9a:	4493      	add	fp, r2
 8016a9c:	4660      	mov	r0, ip
 8016a9e:	461a      	mov	r2, r3
 8016aa0:	4641      	mov	r1, r8
 8016aa2:	f10b 0b01 	add.w	fp, fp, #1
 8016aa6:	9303      	str	r3, [sp, #12]
 8016aa8:	f8cd c010 	str.w	ip, [sp, #16]
 8016aac:	f7f7 fdba 	bl	800e624 <LCD_DrawHLine>
 8016ab0:	4641      	mov	r1, r8
 8016ab2:	4658      	mov	r0, fp
 8016ab4:	464a      	mov	r2, r9
 8016ab6:	f7f7 fdb5 	bl	800e624 <LCD_DrawHLine>
 8016aba:	ebc4 0a07 	rsb	sl, r4, r7
 8016abe:	f8dd c010 	ldr.w	ip, [sp, #16]
 8016ac2:	9b03      	ldr	r3, [sp, #12]
 8016ac4:	44aa      	add	sl, r5
 8016ac6:	4660      	mov	r0, ip
 8016ac8:	461a      	mov	r2, r3
 8016aca:	4651      	mov	r1, sl
 8016acc:	f7f7 fdaa 	bl	800e624 <LCD_DrawHLine>
 8016ad0:	4658      	mov	r0, fp
 8016ad2:	4651      	mov	r1, sl
 8016ad4:	464a      	mov	r2, r9
 8016ad6:	f7f7 fda5 	bl	800e624 <LCD_DrawHLine>
 8016ada:	3d01      	subs	r5, #1
 8016adc:	f108 0801 	add.w	r8, r8, #1
 8016ae0:	e7c5      	b.n	8016a6e <GUI__DrawTwinArc4+0xde>
 8016ae2:	2c02      	cmp	r4, #2
 8016ae4:	f43f af72 	beq.w	80169cc <GUI__DrawTwinArc4+0x3c>
 8016ae8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016aea:	f7f8 febd 	bl	800f868 <GUI_SetColor>
 8016aee:	9b07      	ldr	r3, [sp, #28]
 8016af0:	f1c4 0803 	rsb	r8, r4, #3
 8016af4:	1ee5      	subs	r5, r4, #3
 8016af6:	4498      	add	r8, r3
 8016af8:	2d00      	cmp	r5, #0
 8016afa:	f43f af67 	beq.w	80169cc <GUI__DrawTwinArc4+0x3c>
 8016afe:	ab0b      	add	r3, sp, #44	; 0x2c
 8016b00:	4629      	mov	r1, r5
 8016b02:	9300      	str	r3, [sp, #0]
 8016b04:	4620      	mov	r0, r4
 8016b06:	aa09      	add	r2, sp, #36	; 0x24
 8016b08:	ab0a      	add	r3, sp, #40	; 0x28
 8016b0a:	f7ff fe28 	bl	801675e <_GetTwinArcPara>
 8016b0e:	9b05      	ldr	r3, [sp, #20]
 8016b10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016b12:	4423      	add	r3, r4
 8016b14:	ebc2 0c03 	rsb	ip, r2, r3
 8016b18:	ebc4 0b06 	rsb	fp, r4, r6
 8016b1c:	3b01      	subs	r3, #1
 8016b1e:	eb0b 0902 	add.w	r9, fp, r2
 8016b22:	4660      	mov	r0, ip
 8016b24:	461a      	mov	r2, r3
 8016b26:	4641      	mov	r1, r8
 8016b28:	f10b 0b01 	add.w	fp, fp, #1
 8016b2c:	9303      	str	r3, [sp, #12]
 8016b2e:	f8cd c010 	str.w	ip, [sp, #16]
 8016b32:	f7f7 fd77 	bl	800e624 <LCD_DrawHLine>
 8016b36:	4641      	mov	r1, r8
 8016b38:	4658      	mov	r0, fp
 8016b3a:	464a      	mov	r2, r9
 8016b3c:	f7f7 fd72 	bl	800e624 <LCD_DrawHLine>
 8016b40:	ebc4 0a07 	rsb	sl, r4, r7
 8016b44:	f8dd c010 	ldr.w	ip, [sp, #16]
 8016b48:	9b03      	ldr	r3, [sp, #12]
 8016b4a:	44aa      	add	sl, r5
 8016b4c:	4660      	mov	r0, ip
 8016b4e:	461a      	mov	r2, r3
 8016b50:	4651      	mov	r1, sl
 8016b52:	f7f7 fd67 	bl	800e624 <LCD_DrawHLine>
 8016b56:	4658      	mov	r0, fp
 8016b58:	4651      	mov	r1, sl
 8016b5a:	464a      	mov	r2, r9
 8016b5c:	f7f7 fd62 	bl	800e624 <LCD_DrawHLine>
 8016b60:	3d01      	subs	r5, #1
 8016b62:	f108 0801 	add.w	r8, r8, #1
 8016b66:	e7c7      	b.n	8016af8 <GUI__DrawTwinArc4+0x168>
 8016b68:	b00f      	add	sp, #60	; 0x3c
 8016b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b6e:	bf00      	nop
 8016b70:	20000308 	.word	0x20000308

08016b74 <GUI__FillTrippleArc>:
 8016b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b78:	b095      	sub	sp, #84	; 0x54
 8016b7a:	930d      	str	r3, [sp, #52]	; 0x34
 8016b7c:	4baf      	ldr	r3, [pc, #700]	; (8016e3c <GUI__FillTrippleArc+0x2c8>)
 8016b7e:	9205      	str	r2, [sp, #20]
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016b84:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 8016b86:	1882      	adds	r2, r0, r2
 8016b88:	9805      	ldr	r0, [sp, #20]
 8016b8a:	9206      	str	r2, [sp, #24]
 8016b8c:	1e43      	subs	r3, r0, #1
 8016b8e:	440e      	add	r6, r1
 8016b90:	b29b      	uxth	r3, r3
 8016b92:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8016b96:	a812      	add	r0, sp, #72	; 0x48
 8016b98:	441a      	add	r2, r3
 8016b9a:	4433      	add	r3, r6
 8016b9c:	f8ad 604a 	strh.w	r6, [sp, #74]	; 0x4a
 8016ba0:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
 8016ba4:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 8016ba8:	f7f5 fada 	bl	800c160 <WM__InitIVRSearch>
 8016bac:	2800      	cmp	r0, #0
 8016bae:	f000 8141 	beq.w	8016e34 <GUI__FillTrippleArc+0x2c0>
 8016bb2:	9a05      	ldr	r2, [sp, #20]
 8016bb4:	1055      	asrs	r5, r2, #1
 8016bb6:	1c6b      	adds	r3, r5, #1
 8016bb8:	1e68      	subs	r0, r5, #1
 8016bba:	1eaa      	subs	r2, r5, #2
 8016bbc:	1cac      	adds	r4, r5, #2
 8016bbe:	930a      	str	r3, [sp, #40]	; 0x28
 8016bc0:	900b      	str	r0, [sp, #44]	; 0x2c
 8016bc2:	920c      	str	r2, [sp, #48]	; 0x30
 8016bc4:	9b05      	ldr	r3, [sp, #20]
 8016bc6:	07da      	lsls	r2, r3, #31
 8016bc8:	f100 812f 	bmi.w	8016e2a <GUI__FillTrippleArc+0x2b6>
 8016bcc:	2c00      	cmp	r4, #0
 8016bce:	f340 812c 	ble.w	8016e2a <GUI__FillTrippleArc+0x2b6>
 8016bd2:	9806      	ldr	r0, [sp, #24]
 8016bd4:	9a06      	ldr	r2, [sp, #24]
 8016bd6:	3801      	subs	r0, #1
 8016bd8:	9007      	str	r0, [sp, #28]
 8016bda:	9805      	ldr	r0, [sp, #20]
 8016bdc:	441a      	add	r2, r3
 8016bde:	1e73      	subs	r3, r6, #1
 8016be0:	4418      	add	r0, r3
 8016be2:	9009      	str	r0, [sp, #36]	; 0x24
 8016be4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016be6:	9208      	str	r2, [sp, #32]
 8016be8:	f7f8 fe3e 	bl	800f868 <GUI_SetColor>
 8016bec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8016bee:	2f01      	cmp	r7, #1
 8016bf0:	dd48      	ble.n	8016c84 <GUI__FillTrippleArc+0x110>
 8016bf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016bf4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8016bf8:	ab10      	add	r3, sp, #64	; 0x40
 8016bfa:	9300      	str	r3, [sp, #0]
 8016bfc:	ea6f 0a05 	mvn.w	sl, r5
 8016c00:	ab11      	add	r3, sp, #68	; 0x44
 8016c02:	4492      	add	sl, r2
 8016c04:	9301      	str	r3, [sp, #4]
 8016c06:	4620      	mov	r0, r4
 8016c08:	4639      	mov	r1, r7
 8016c0a:	aa0e      	add	r2, sp, #56	; 0x38
 8016c0c:	ab0f      	add	r3, sp, #60	; 0x3c
 8016c0e:	f7ff fdd0 	bl	80167b2 <_GetTrippleArcPara>
 8016c12:	9808      	ldr	r0, [sp, #32]
 8016c14:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8016c18:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016c1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c1c:	1b02      	subs	r2, r0, r4
 8016c1e:	44a4      	add	ip, r4
 8016c20:	ebc1 090c 	rsb	r9, r1, ip
 8016c24:	ebc3 0c0c 	rsb	ip, r3, ip
 8016c28:	4413      	add	r3, r2
 8016c2a:	44b3      	add	fp, r6
 8016c2c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016c30:	3301      	adds	r3, #1
 8016c32:	ebc7 0b0b 	rsb	fp, r7, fp
 8016c36:	4563      	cmp	r3, ip
 8016c38:	eb02 0801 	add.w	r8, r2, r1
 8016c3c:	44ba      	add	sl, r7
 8016c3e:	4648      	mov	r0, r9
 8016c40:	4659      	mov	r1, fp
 8016c42:	da04      	bge.n	8016c4e <GUI__FillTrippleArc+0xda>
 8016c44:	4642      	mov	r2, r8
 8016c46:	f7f7 fced 	bl	800e624 <LCD_DrawHLine>
 8016c4a:	4648      	mov	r0, r9
 8016c4c:	e014      	b.n	8016c78 <GUI__FillTrippleArc+0x104>
 8016c4e:	4662      	mov	r2, ip
 8016c50:	f8cd c010 	str.w	ip, [sp, #16]
 8016c54:	9303      	str	r3, [sp, #12]
 8016c56:	f7f7 fce5 	bl	800e624 <LCD_DrawHLine>
 8016c5a:	9b03      	ldr	r3, [sp, #12]
 8016c5c:	4659      	mov	r1, fp
 8016c5e:	4618      	mov	r0, r3
 8016c60:	4642      	mov	r2, r8
 8016c62:	f7f7 fcdf 	bl	800e624 <LCD_DrawHLine>
 8016c66:	f8dd c010 	ldr.w	ip, [sp, #16]
 8016c6a:	4648      	mov	r0, r9
 8016c6c:	4651      	mov	r1, sl
 8016c6e:	4662      	mov	r2, ip
 8016c70:	f7f7 fcd8 	bl	800e624 <LCD_DrawHLine>
 8016c74:	9b03      	ldr	r3, [sp, #12]
 8016c76:	4618      	mov	r0, r3
 8016c78:	4651      	mov	r1, sl
 8016c7a:	4642      	mov	r2, r8
 8016c7c:	f7f7 fcd2 	bl	800e624 <LCD_DrawHLine>
 8016c80:	3f01      	subs	r7, #1
 8016c82:	e7b4      	b.n	8016bee <GUI__FillTrippleArc+0x7a>
 8016c84:	2c01      	cmp	r4, #1
 8016c86:	f000 80d0 	beq.w	8016e2a <GUI__FillTrippleArc+0x2b6>
 8016c8a:	981e      	ldr	r0, [sp, #120]	; 0x78
 8016c8c:	f7f8 fdec 	bl	800f868 <GUI_SetColor>
 8016c90:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8016c92:	4437      	add	r7, r6
 8016c94:	1b7f      	subs	r7, r7, r5
 8016c96:	46a8      	mov	r8, r5
 8016c98:	f1b8 0f01 	cmp.w	r8, #1
 8016c9c:	dd45      	ble.n	8016d2a <GUI__FillTrippleArc+0x1b6>
 8016c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016ca0:	ab10      	add	r3, sp, #64	; 0x40
 8016ca2:	9300      	str	r3, [sp, #0]
 8016ca4:	ea6f 0b05 	mvn.w	fp, r5
 8016ca8:	ab11      	add	r3, sp, #68	; 0x44
 8016caa:	4493      	add	fp, r2
 8016cac:	9301      	str	r3, [sp, #4]
 8016cae:	4620      	mov	r0, r4
 8016cb0:	4641      	mov	r1, r8
 8016cb2:	aa0e      	add	r2, sp, #56	; 0x38
 8016cb4:	ab0f      	add	r3, sp, #60	; 0x3c
 8016cb6:	f7ff fd7c 	bl	80167b2 <_GetTrippleArcPara>
 8016cba:	9808      	ldr	r0, [sp, #32]
 8016cbc:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8016cc0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016cc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016cc4:	1b02      	subs	r2, r0, r4
 8016cc6:	44a4      	add	ip, r4
 8016cc8:	ebc1 0a0c 	rsb	sl, r1, ip
 8016ccc:	ebc3 0c0c 	rsb	ip, r3, ip
 8016cd0:	4413      	add	r3, r2
 8016cd2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016cd6:	3301      	adds	r3, #1
 8016cd8:	4563      	cmp	r3, ip
 8016cda:	eb02 0901 	add.w	r9, r2, r1
 8016cde:	44c3      	add	fp, r8
 8016ce0:	4650      	mov	r0, sl
 8016ce2:	4639      	mov	r1, r7
 8016ce4:	da04      	bge.n	8016cf0 <GUI__FillTrippleArc+0x17c>
 8016ce6:	464a      	mov	r2, r9
 8016ce8:	f7f7 fc9c 	bl	800e624 <LCD_DrawHLine>
 8016cec:	4650      	mov	r0, sl
 8016cee:	e014      	b.n	8016d1a <GUI__FillTrippleArc+0x1a6>
 8016cf0:	4662      	mov	r2, ip
 8016cf2:	f8cd c010 	str.w	ip, [sp, #16]
 8016cf6:	9303      	str	r3, [sp, #12]
 8016cf8:	f7f7 fc94 	bl	800e624 <LCD_DrawHLine>
 8016cfc:	9b03      	ldr	r3, [sp, #12]
 8016cfe:	4639      	mov	r1, r7
 8016d00:	4618      	mov	r0, r3
 8016d02:	464a      	mov	r2, r9
 8016d04:	f7f7 fc8e 	bl	800e624 <LCD_DrawHLine>
 8016d08:	f8dd c010 	ldr.w	ip, [sp, #16]
 8016d0c:	4650      	mov	r0, sl
 8016d0e:	4659      	mov	r1, fp
 8016d10:	4662      	mov	r2, ip
 8016d12:	f7f7 fc87 	bl	800e624 <LCD_DrawHLine>
 8016d16:	9b03      	ldr	r3, [sp, #12]
 8016d18:	4618      	mov	r0, r3
 8016d1a:	4659      	mov	r1, fp
 8016d1c:	464a      	mov	r2, r9
 8016d1e:	f7f7 fc81 	bl	800e624 <LCD_DrawHLine>
 8016d22:	f108 38ff 	add.w	r8, r8, #4294967295
 8016d26:	3701      	adds	r7, #1
 8016d28:	e7b6      	b.n	8016c98 <GUI__FillTrippleArc+0x124>
 8016d2a:	2c02      	cmp	r4, #2
 8016d2c:	d07d      	beq.n	8016e2a <GUI__FillTrippleArc+0x2b6>
 8016d2e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8016d30:	f7f8 fd9a 	bl	800f868 <GUI_SetColor>
 8016d34:	19a7      	adds	r7, r4, r6
 8016d36:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8016d3a:	1b7f      	subs	r7, r7, r5
 8016d3c:	f1b8 0f01 	cmp.w	r8, #1
 8016d40:	dd45      	ble.n	8016dce <GUI__FillTrippleArc+0x25a>
 8016d42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016d44:	ab10      	add	r3, sp, #64	; 0x40
 8016d46:	9300      	str	r3, [sp, #0]
 8016d48:	ea6f 0b05 	mvn.w	fp, r5
 8016d4c:	ab11      	add	r3, sp, #68	; 0x44
 8016d4e:	4493      	add	fp, r2
 8016d50:	9301      	str	r3, [sp, #4]
 8016d52:	4620      	mov	r0, r4
 8016d54:	4641      	mov	r1, r8
 8016d56:	aa0e      	add	r2, sp, #56	; 0x38
 8016d58:	ab0f      	add	r3, sp, #60	; 0x3c
 8016d5a:	f7ff fd2a 	bl	80167b2 <_GetTrippleArcPara>
 8016d5e:	9808      	ldr	r0, [sp, #32]
 8016d60:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8016d64:	9910      	ldr	r1, [sp, #64]	; 0x40
 8016d66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016d68:	1b02      	subs	r2, r0, r4
 8016d6a:	44a4      	add	ip, r4
 8016d6c:	ebc1 0a0c 	rsb	sl, r1, ip
 8016d70:	ebc3 0c0c 	rsb	ip, r3, ip
 8016d74:	4413      	add	r3, r2
 8016d76:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016d7a:	3301      	adds	r3, #1
 8016d7c:	4563      	cmp	r3, ip
 8016d7e:	eb02 0901 	add.w	r9, r2, r1
 8016d82:	44c3      	add	fp, r8
 8016d84:	4650      	mov	r0, sl
 8016d86:	4639      	mov	r1, r7
 8016d88:	da04      	bge.n	8016d94 <GUI__FillTrippleArc+0x220>
 8016d8a:	464a      	mov	r2, r9
 8016d8c:	f7f7 fc4a 	bl	800e624 <LCD_DrawHLine>
 8016d90:	4650      	mov	r0, sl
 8016d92:	e014      	b.n	8016dbe <GUI__FillTrippleArc+0x24a>
 8016d94:	4662      	mov	r2, ip
 8016d96:	f8cd c010 	str.w	ip, [sp, #16]
 8016d9a:	9303      	str	r3, [sp, #12]
 8016d9c:	f7f7 fc42 	bl	800e624 <LCD_DrawHLine>
 8016da0:	9b03      	ldr	r3, [sp, #12]
 8016da2:	4639      	mov	r1, r7
 8016da4:	4618      	mov	r0, r3
 8016da6:	464a      	mov	r2, r9
 8016da8:	f7f7 fc3c 	bl	800e624 <LCD_DrawHLine>
 8016dac:	f8dd c010 	ldr.w	ip, [sp, #16]
 8016db0:	4650      	mov	r0, sl
 8016db2:	4659      	mov	r1, fp
 8016db4:	4662      	mov	r2, ip
 8016db6:	f7f7 fc35 	bl	800e624 <LCD_DrawHLine>
 8016dba:	9b03      	ldr	r3, [sp, #12]
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	4659      	mov	r1, fp
 8016dc0:	464a      	mov	r2, r9
 8016dc2:	f7f7 fc2f 	bl	800e624 <LCD_DrawHLine>
 8016dc6:	f108 38ff 	add.w	r8, r8, #4294967295
 8016dca:	3701      	adds	r7, #1
 8016dcc:	e7b6      	b.n	8016d3c <GUI__FillTrippleArc+0x1c8>
 8016dce:	2c03      	cmp	r4, #3
 8016dd0:	d02b      	beq.n	8016e2a <GUI__FillTrippleArc+0x2b6>
 8016dd2:	9820      	ldr	r0, [sp, #128]	; 0x80
 8016dd4:	f7f8 fd48 	bl	800f868 <GUI_SetColor>
 8016dd8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8016dda:	f106 0803 	add.w	r8, r6, #3
 8016dde:	b327      	cbz	r7, 8016e2a <GUI__FillTrippleArc+0x2b6>
 8016de0:	ab10      	add	r3, sp, #64	; 0x40
 8016de2:	9300      	str	r3, [sp, #0]
 8016de4:	ab11      	add	r3, sp, #68	; 0x44
 8016de6:	4639      	mov	r1, r7
 8016de8:	9301      	str	r3, [sp, #4]
 8016dea:	4620      	mov	r0, r4
 8016dec:	aa0e      	add	r2, sp, #56	; 0x38
 8016dee:	ab0f      	add	r3, sp, #60	; 0x3c
 8016df0:	f7ff fcdf 	bl	80167b2 <_GetTrippleArcPara>
 8016df4:	9a08      	ldr	r2, [sp, #32]
 8016df6:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8016dfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016dfc:	ebc4 0902 	rsb	r9, r4, r2
 8016e00:	44a2      	add	sl, r4
 8016e02:	ebc3 0a0a 	rsb	sl, r3, sl
 8016e06:	4499      	add	r9, r3
 8016e08:	4641      	mov	r1, r8
 8016e0a:	4650      	mov	r0, sl
 8016e0c:	464a      	mov	r2, r9
 8016e0e:	f7f7 fc09 	bl	800e624 <LCD_DrawHLine>
 8016e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e14:	43e9      	mvns	r1, r5
 8016e16:	4419      	add	r1, r3
 8016e18:	4439      	add	r1, r7
 8016e1a:	4650      	mov	r0, sl
 8016e1c:	464a      	mov	r2, r9
 8016e1e:	f7f7 fc01 	bl	800e624 <LCD_DrawHLine>
 8016e22:	3f01      	subs	r7, #1
 8016e24:	f108 0801 	add.w	r8, r8, #1
 8016e28:	e7d9      	b.n	8016dde <GUI__FillTrippleArc+0x26a>
 8016e2a:	f7f5 f8d7 	bl	800bfdc <WM__GetNextIVR>
 8016e2e:	2800      	cmp	r0, #0
 8016e30:	f47f aec8 	bne.w	8016bc4 <GUI__FillTrippleArc+0x50>
 8016e34:	b015      	add	sp, #84	; 0x54
 8016e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e3a:	bf00      	nop
 8016e3c:	20000308 	.word	0x20000308

08016e40 <GUI__DivideRound32>:
 8016e40:	b149      	cbz	r1, 8016e56 <GUI__DivideRound32+0x16>
 8016e42:	2800      	cmp	r0, #0
 8016e44:	ea4f 0361 	mov.w	r3, r1, asr #1
 8016e48:	bfb4      	ite	lt
 8016e4a:	ebc3 0000 	rsblt	r0, r3, r0
 8016e4e:	18c0      	addge	r0, r0, r3
 8016e50:	fb90 f0f1 	sdiv	r0, r0, r1
 8016e54:	4770      	bx	lr
 8016e56:	4608      	mov	r0, r1
 8016e58:	4770      	bx	lr

08016e5a <GUI__CompactPixelIndices>:
 8016e5a:	2a08      	cmp	r2, #8
 8016e5c:	b510      	push	{r4, lr}
 8016e5e:	dd0e      	ble.n	8016e7e <GUI__CompactPixelIndices+0x24>
 8016e60:	2a10      	cmp	r2, #16
 8016e62:	dc0a      	bgt.n	8016e7a <GUI__CompactPixelIndices+0x20>
 8016e64:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8016e68:	4603      	mov	r3, r0
 8016e6a:	f850 2b04 	ldr.w	r2, [r0], #4
 8016e6e:	f823 2b02 	strh.w	r2, [r3], #2
 8016e72:	428b      	cmp	r3, r1
 8016e74:	d1f9      	bne.n	8016e6a <GUI__CompactPixelIndices+0x10>
 8016e76:	2001      	movs	r0, #1
 8016e78:	bd10      	pop	{r4, pc}
 8016e7a:	2000      	movs	r0, #0
 8016e7c:	bd10      	pop	{r4, pc}
 8016e7e:	2a02      	cmp	r2, #2
 8016e80:	d06d      	beq.n	8016f5e <GUI__CompactPixelIndices+0x104>
 8016e82:	2a04      	cmp	r2, #4
 8016e84:	d054      	beq.n	8016f30 <GUI__CompactPixelIndices+0xd6>
 8016e86:	2a01      	cmp	r2, #1
 8016e88:	f040 8095 	bne.w	8016fb6 <GUI__CompactPixelIndices+0x15c>
 8016e8c:	4604      	mov	r4, r0
 8016e8e:	6803      	ldr	r3, [r0, #0]
 8016e90:	2901      	cmp	r1, #1
 8016e92:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8016e96:	b2db      	uxtb	r3, r3
 8016e98:	d047      	beq.n	8016f2a <GUI__CompactPixelIndices+0xd0>
 8016e9a:	6842      	ldr	r2, [r0, #4]
 8016e9c:	2902      	cmp	r1, #2
 8016e9e:	f002 0201 	and.w	r2, r2, #1
 8016ea2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8016ea6:	d102      	bne.n	8016eae <GUI__CompactPixelIndices+0x54>
 8016ea8:	f100 0208 	add.w	r2, r0, #8
 8016eac:	e03e      	b.n	8016f2c <GUI__CompactPixelIndices+0xd2>
 8016eae:	6882      	ldr	r2, [r0, #8]
 8016eb0:	2903      	cmp	r1, #3
 8016eb2:	f002 0201 	and.w	r2, r2, #1
 8016eb6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8016eba:	d102      	bne.n	8016ec2 <GUI__CompactPixelIndices+0x68>
 8016ebc:	f100 020c 	add.w	r2, r0, #12
 8016ec0:	e034      	b.n	8016f2c <GUI__CompactPixelIndices+0xd2>
 8016ec2:	68c2      	ldr	r2, [r0, #12]
 8016ec4:	2904      	cmp	r1, #4
 8016ec6:	f002 0201 	and.w	r2, r2, #1
 8016eca:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8016ece:	d102      	bne.n	8016ed6 <GUI__CompactPixelIndices+0x7c>
 8016ed0:	f100 0210 	add.w	r2, r0, #16
 8016ed4:	e02a      	b.n	8016f2c <GUI__CompactPixelIndices+0xd2>
 8016ed6:	6902      	ldr	r2, [r0, #16]
 8016ed8:	2905      	cmp	r1, #5
 8016eda:	f002 0201 	and.w	r2, r2, #1
 8016ede:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8016ee2:	d102      	bne.n	8016eea <GUI__CompactPixelIndices+0x90>
 8016ee4:	f100 0214 	add.w	r2, r0, #20
 8016ee8:	e020      	b.n	8016f2c <GUI__CompactPixelIndices+0xd2>
 8016eea:	6942      	ldr	r2, [r0, #20]
 8016eec:	2906      	cmp	r1, #6
 8016eee:	f002 0201 	and.w	r2, r2, #1
 8016ef2:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8016ef6:	d102      	bne.n	8016efe <GUI__CompactPixelIndices+0xa4>
 8016ef8:	f100 0218 	add.w	r2, r0, #24
 8016efc:	e016      	b.n	8016f2c <GUI__CompactPixelIndices+0xd2>
 8016efe:	6982      	ldr	r2, [r0, #24]
 8016f00:	3907      	subs	r1, #7
 8016f02:	f002 0201 	and.w	r2, r2, #1
 8016f06:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8016f0a:	d102      	bne.n	8016f12 <GUI__CompactPixelIndices+0xb8>
 8016f0c:	f100 021c 	add.w	r2, r0, #28
 8016f10:	e005      	b.n	8016f1e <GUI__CompactPixelIndices+0xc4>
 8016f12:	f100 0220 	add.w	r2, r0, #32
 8016f16:	69c0      	ldr	r0, [r0, #28]
 8016f18:	f000 0001 	and.w	r0, r0, #1
 8016f1c:	4303      	orrs	r3, r0
 8016f1e:	f804 3b01 	strb.w	r3, [r4], #1
 8016f22:	2900      	cmp	r1, #0
 8016f24:	d0a7      	beq.n	8016e76 <GUI__CompactPixelIndices+0x1c>
 8016f26:	4610      	mov	r0, r2
 8016f28:	e7b1      	b.n	8016e8e <GUI__CompactPixelIndices+0x34>
 8016f2a:	1d02      	adds	r2, r0, #4
 8016f2c:	2100      	movs	r1, #0
 8016f2e:	e7f6      	b.n	8016f1e <GUI__CompactPixelIndices+0xc4>
 8016f30:	4602      	mov	r2, r0
 8016f32:	6803      	ldr	r3, [r0, #0]
 8016f34:	2901      	cmp	r1, #1
 8016f36:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8016f3a:	b2db      	uxtb	r3, r3
 8016f3c:	d102      	bne.n	8016f44 <GUI__CompactPixelIndices+0xea>
 8016f3e:	1d04      	adds	r4, r0, #4
 8016f40:	2100      	movs	r1, #0
 8016f42:	e006      	b.n	8016f52 <GUI__CompactPixelIndices+0xf8>
 8016f44:	f100 0408 	add.w	r4, r0, #8
 8016f48:	6840      	ldr	r0, [r0, #4]
 8016f4a:	f000 000f 	and.w	r0, r0, #15
 8016f4e:	4303      	orrs	r3, r0
 8016f50:	3902      	subs	r1, #2
 8016f52:	f802 3b01 	strb.w	r3, [r2], #1
 8016f56:	2900      	cmp	r1, #0
 8016f58:	d08d      	beq.n	8016e76 <GUI__CompactPixelIndices+0x1c>
 8016f5a:	4620      	mov	r0, r4
 8016f5c:	e7e9      	b.n	8016f32 <GUI__CompactPixelIndices+0xd8>
 8016f5e:	4604      	mov	r4, r0
 8016f60:	6803      	ldr	r3, [r0, #0]
 8016f62:	2901      	cmp	r1, #1
 8016f64:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8016f68:	b2db      	uxtb	r3, r3
 8016f6a:	d021      	beq.n	8016fb0 <GUI__CompactPixelIndices+0x156>
 8016f6c:	6842      	ldr	r2, [r0, #4]
 8016f6e:	2902      	cmp	r1, #2
 8016f70:	f002 0203 	and.w	r2, r2, #3
 8016f74:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8016f78:	d102      	bne.n	8016f80 <GUI__CompactPixelIndices+0x126>
 8016f7a:	f100 0208 	add.w	r2, r0, #8
 8016f7e:	e018      	b.n	8016fb2 <GUI__CompactPixelIndices+0x158>
 8016f80:	6882      	ldr	r2, [r0, #8]
 8016f82:	2903      	cmp	r1, #3
 8016f84:	f002 0203 	and.w	r2, r2, #3
 8016f88:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8016f8c:	d102      	bne.n	8016f94 <GUI__CompactPixelIndices+0x13a>
 8016f8e:	f100 020c 	add.w	r2, r0, #12
 8016f92:	e00e      	b.n	8016fb2 <GUI__CompactPixelIndices+0x158>
 8016f94:	f100 0210 	add.w	r2, r0, #16
 8016f98:	68c0      	ldr	r0, [r0, #12]
 8016f9a:	f000 0003 	and.w	r0, r0, #3
 8016f9e:	4303      	orrs	r3, r0
 8016fa0:	3904      	subs	r1, #4
 8016fa2:	f804 3b01 	strb.w	r3, [r4], #1
 8016fa6:	2900      	cmp	r1, #0
 8016fa8:	f43f af65 	beq.w	8016e76 <GUI__CompactPixelIndices+0x1c>
 8016fac:	4610      	mov	r0, r2
 8016fae:	e7d7      	b.n	8016f60 <GUI__CompactPixelIndices+0x106>
 8016fb0:	1d02      	adds	r2, r0, #4
 8016fb2:	2100      	movs	r1, #0
 8016fb4:	e7f5      	b.n	8016fa2 <GUI__CompactPixelIndices+0x148>
 8016fb6:	2300      	movs	r3, #0
 8016fb8:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8016fbc:	54c2      	strb	r2, [r0, r3]
 8016fbe:	3301      	adds	r3, #1
 8016fc0:	428b      	cmp	r3, r1
 8016fc2:	d1f9      	bne.n	8016fb8 <GUI__CompactPixelIndices+0x15e>
 8016fc4:	e757      	b.n	8016e76 <GUI__CompactPixelIndices+0x1c>

08016fc6 <GUI__ConvertColor2Index>:
 8016fc6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016fca:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016fce:	681e      	ldr	r6, [r3, #0]
 8016fd0:	f1b8 0f00 	cmp.w	r8, #0
 8016fd4:	bf08      	it	eq
 8016fd6:	4680      	moveq	r8, r0
 8016fd8:	2a08      	cmp	r2, #8
 8016fda:	4604      	mov	r4, r0
 8016fdc:	460d      	mov	r5, r1
 8016fde:	dd05      	ble.n	8016fec <GUI__ConvertColor2Index+0x26>
 8016fe0:	2a10      	cmp	r2, #16
 8016fe2:	f340 80b6 	ble.w	8017152 <GUI__ConvertColor2Index+0x18c>
 8016fe6:	2000      	movs	r0, #0
 8016fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016fec:	3a01      	subs	r2, #1
 8016fee:	2a07      	cmp	r2, #7
 8016ff0:	f200 80a4 	bhi.w	801713c <GUI__ConvertColor2Index+0x176>
 8016ff4:	e8df f002 	tbb	[pc, r2]
 8016ff8:	87a26111 	.word	0x87a26111
 8016ffc:	92a2a2a2 	.word	0x92a2a2a2
 8017000:	69e0      	ldr	r0, [r4, #28]
 8017002:	47b0      	blx	r6
 8017004:	4338      	orrs	r0, r7
 8017006:	f104 0920 	add.w	r9, r4, #32
 801700a:	b2c7      	uxtb	r7, r0
 801700c:	3d08      	subs	r5, #8
 801700e:	f808 7b01 	strb.w	r7, [r8], #1
 8017012:	2d00      	cmp	r5, #0
 8017014:	f000 8092 	beq.w	801713c <GUI__ConvertColor2Index+0x176>
 8017018:	464c      	mov	r4, r9
 801701a:	6820      	ldr	r0, [r4, #0]
 801701c:	47b0      	blx	r6
 801701e:	2d01      	cmp	r5, #1
 8017020:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 8017024:	b2c7      	uxtb	r7, r0
 8017026:	f000 808c 	beq.w	8017142 <GUI__ConvertColor2Index+0x17c>
 801702a:	6860      	ldr	r0, [r4, #4]
 801702c:	47b0      	blx	r6
 801702e:	2d02      	cmp	r5, #2
 8017030:	ea47 1080 	orr.w	r0, r7, r0, lsl #6
 8017034:	b2c7      	uxtb	r7, r0
 8017036:	d102      	bne.n	801703e <GUI__ConvertColor2Index+0x78>
 8017038:	f104 0908 	add.w	r9, r4, #8
 801703c:	e083      	b.n	8017146 <GUI__ConvertColor2Index+0x180>
 801703e:	68a0      	ldr	r0, [r4, #8]
 8017040:	47b0      	blx	r6
 8017042:	2d03      	cmp	r5, #3
 8017044:	ea47 1040 	orr.w	r0, r7, r0, lsl #5
 8017048:	b2c7      	uxtb	r7, r0
 801704a:	d102      	bne.n	8017052 <GUI__ConvertColor2Index+0x8c>
 801704c:	f104 090c 	add.w	r9, r4, #12
 8017050:	e079      	b.n	8017146 <GUI__ConvertColor2Index+0x180>
 8017052:	68e0      	ldr	r0, [r4, #12]
 8017054:	47b0      	blx	r6
 8017056:	2d04      	cmp	r5, #4
 8017058:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 801705c:	b2c7      	uxtb	r7, r0
 801705e:	d102      	bne.n	8017066 <GUI__ConvertColor2Index+0xa0>
 8017060:	f104 0910 	add.w	r9, r4, #16
 8017064:	e06f      	b.n	8017146 <GUI__ConvertColor2Index+0x180>
 8017066:	6920      	ldr	r0, [r4, #16]
 8017068:	47b0      	blx	r6
 801706a:	2d05      	cmp	r5, #5
 801706c:	ea47 00c0 	orr.w	r0, r7, r0, lsl #3
 8017070:	b2c7      	uxtb	r7, r0
 8017072:	d102      	bne.n	801707a <GUI__ConvertColor2Index+0xb4>
 8017074:	f104 0914 	add.w	r9, r4, #20
 8017078:	e065      	b.n	8017146 <GUI__ConvertColor2Index+0x180>
 801707a:	6960      	ldr	r0, [r4, #20]
 801707c:	47b0      	blx	r6
 801707e:	2d06      	cmp	r5, #6
 8017080:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8017084:	b2c7      	uxtb	r7, r0
 8017086:	d102      	bne.n	801708e <GUI__ConvertColor2Index+0xc8>
 8017088:	f104 0918 	add.w	r9, r4, #24
 801708c:	e05b      	b.n	8017146 <GUI__ConvertColor2Index+0x180>
 801708e:	69a0      	ldr	r0, [r4, #24]
 8017090:	47b0      	blx	r6
 8017092:	2d07      	cmp	r5, #7
 8017094:	ea47 0040 	orr.w	r0, r7, r0, lsl #1
 8017098:	b2c7      	uxtb	r7, r0
 801709a:	d1b1      	bne.n	8017000 <GUI__ConvertColor2Index+0x3a>
 801709c:	f104 091c 	add.w	r9, r4, #28
 80170a0:	e051      	b.n	8017146 <GUI__ConvertColor2Index+0x180>
 80170a2:	68e0      	ldr	r0, [r4, #12]
 80170a4:	47b0      	blx	r6
 80170a6:	4338      	orrs	r0, r7
 80170a8:	f104 0910 	add.w	r9, r4, #16
 80170ac:	b2c7      	uxtb	r7, r0
 80170ae:	3d04      	subs	r5, #4
 80170b0:	f808 7b01 	strb.w	r7, [r8], #1
 80170b4:	2d00      	cmp	r5, #0
 80170b6:	d041      	beq.n	801713c <GUI__ConvertColor2Index+0x176>
 80170b8:	464c      	mov	r4, r9
 80170ba:	6820      	ldr	r0, [r4, #0]
 80170bc:	47b0      	blx	r6
 80170be:	2d01      	cmp	r5, #1
 80170c0:	ea4f 1080 	mov.w	r0, r0, lsl #6
 80170c4:	b2c7      	uxtb	r7, r0
 80170c6:	d040      	beq.n	801714a <GUI__ConvertColor2Index+0x184>
 80170c8:	6860      	ldr	r0, [r4, #4]
 80170ca:	47b0      	blx	r6
 80170cc:	2d02      	cmp	r5, #2
 80170ce:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 80170d2:	b2c7      	uxtb	r7, r0
 80170d4:	d102      	bne.n	80170dc <GUI__ConvertColor2Index+0x116>
 80170d6:	f104 0908 	add.w	r9, r4, #8
 80170da:	e038      	b.n	801714e <GUI__ConvertColor2Index+0x188>
 80170dc:	68a0      	ldr	r0, [r4, #8]
 80170de:	47b0      	blx	r6
 80170e0:	2d03      	cmp	r5, #3
 80170e2:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 80170e6:	b2c7      	uxtb	r7, r0
 80170e8:	d1db      	bne.n	80170a2 <GUI__ConvertColor2Index+0xdc>
 80170ea:	f104 090c 	add.w	r9, r4, #12
 80170ee:	e02e      	b.n	801714e <GUI__ConvertColor2Index+0x188>
 80170f0:	6860      	ldr	r0, [r4, #4]
 80170f2:	47b0      	blx	r6
 80170f4:	4338      	orrs	r0, r7
 80170f6:	f104 0908 	add.w	r9, r4, #8
 80170fa:	b2c7      	uxtb	r7, r0
 80170fc:	3d02      	subs	r5, #2
 80170fe:	f808 7b01 	strb.w	r7, [r8], #1
 8017102:	b1dd      	cbz	r5, 801713c <GUI__ConvertColor2Index+0x176>
 8017104:	464c      	mov	r4, r9
 8017106:	6820      	ldr	r0, [r4, #0]
 8017108:	47b0      	blx	r6
 801710a:	2d01      	cmp	r5, #1
 801710c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8017110:	b2c7      	uxtb	r7, r0
 8017112:	d1ed      	bne.n	80170f0 <GUI__ConvertColor2Index+0x12a>
 8017114:	f104 0904 	add.w	r9, r4, #4
 8017118:	2500      	movs	r5, #0
 801711a:	e7f0      	b.n	80170fe <GUI__ConvertColor2Index+0x138>
 801711c:	691f      	ldr	r7, [r3, #16]
 801711e:	b12f      	cbz	r7, 801712c <GUI__ConvertColor2Index+0x166>
 8017120:	4620      	mov	r0, r4
 8017122:	4641      	mov	r1, r8
 8017124:	462a      	mov	r2, r5
 8017126:	2301      	movs	r3, #1
 8017128:	47b8      	blx	r7
 801712a:	e007      	b.n	801713c <GUI__ConvertColor2Index+0x176>
 801712c:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
 8017130:	47b0      	blx	r6
 8017132:	f808 0007 	strb.w	r0, [r8, r7]
 8017136:	3701      	adds	r7, #1
 8017138:	42bd      	cmp	r5, r7
 801713a:	d1f7      	bne.n	801712c <GUI__ConvertColor2Index+0x166>
 801713c:	2001      	movs	r0, #1
 801713e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017142:	f104 0904 	add.w	r9, r4, #4
 8017146:	2500      	movs	r5, #0
 8017148:	e761      	b.n	801700e <GUI__ConvertColor2Index+0x48>
 801714a:	f104 0904 	add.w	r9, r4, #4
 801714e:	2500      	movs	r5, #0
 8017150:	e7ae      	b.n	80170b0 <GUI__ConvertColor2Index+0xea>
 8017152:	691f      	ldr	r7, [r3, #16]
 8017154:	b11f      	cbz	r7, 801715e <GUI__ConvertColor2Index+0x198>
 8017156:	4641      	mov	r1, r8
 8017158:	462a      	mov	r2, r5
 801715a:	2302      	movs	r3, #2
 801715c:	e7e4      	b.n	8017128 <GUI__ConvertColor2Index+0x162>
 801715e:	f854 0b04 	ldr.w	r0, [r4], #4
 8017162:	47b0      	blx	r6
 8017164:	3d01      	subs	r5, #1
 8017166:	f828 0b02 	strh.w	r0, [r8], #2
 801716a:	d1f8      	bne.n	801715e <GUI__ConvertColor2Index+0x198>
 801716c:	e7e6      	b.n	801713c <GUI__ConvertColor2Index+0x176>

0801716e <GUI__CompactPixelIndicesEx>:
 801716e:	b513      	push	{r0, r1, r4, lr}
 8017170:	2400      	movs	r4, #0
 8017172:	9400      	str	r4, [sp, #0]
 8017174:	f7ff ff27 	bl	8016fc6 <GUI__ConvertColor2Index>
 8017178:	b002      	add	sp, #8
 801717a:	bd10      	pop	{r4, pc}

0801717c <_GetCharCode>:
 801717c:	7800      	ldrb	r0, [r0, #0]
 801717e:	4770      	bx	lr

08017180 <_GetCharSize>:
 8017180:	2001      	movs	r0, #1
 8017182:	4770      	bx	lr

08017184 <_CalcSizeOfChar>:
 8017184:	2001      	movs	r0, #1
 8017186:	4770      	bx	lr

08017188 <_Encode>:
 8017188:	7001      	strb	r1, [r0, #0]
 801718a:	2001      	movs	r0, #1
 801718c:	4770      	bx	lr
	...

08017190 <GUI_SetTextAlign>:
 8017190:	4b03      	ldr	r3, [pc, #12]	; (80171a0 <GUI_SetTextAlign+0x10>)
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 8017198:	8598      	strh	r0, [r3, #44]	; 0x2c
 801719a:	4610      	mov	r0, r2
 801719c:	4770      	bx	lr
 801719e:	bf00      	nop
 80171a0:	20000308 	.word	0x20000308

080171a4 <GUI_SetOrg>:
 80171a4:	460a      	mov	r2, r1
 80171a6:	4908      	ldr	r1, [pc, #32]	; (80171c8 <GUI_SetOrg+0x24>)
 80171a8:	b510      	push	{r4, lr}
 80171aa:	8008      	strh	r0, [r1, #0]
 80171ac:	4907      	ldr	r1, [pc, #28]	; (80171cc <GUI_SetOrg+0x28>)
 80171ae:	800a      	strh	r2, [r1, #0]
 80171b0:	4907      	ldr	r1, [pc, #28]	; (80171d0 <GUI_SetOrg+0x2c>)
 80171b2:	6809      	ldr	r1, [r1, #0]
 80171b4:	4603      	mov	r3, r0
 80171b6:	7c48      	ldrb	r0, [r1, #17]
 80171b8:	4906      	ldr	r1, [pc, #24]	; (80171d4 <GUI_SetOrg+0x30>)
 80171ba:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80171be:	68c1      	ldr	r1, [r0, #12]
 80171c0:	6a0c      	ldr	r4, [r1, #32]
 80171c2:	4619      	mov	r1, r3
 80171c4:	47a0      	blx	r4
 80171c6:	bd10      	pop	{r4, pc}
 80171c8:	20021bf8 	.word	0x20021bf8
 80171cc:	20021bec 	.word	0x20021bec
 80171d0:	20000308 	.word	0x20000308
 80171d4:	20021c0c 	.word	0x20021c0c

080171d8 <GUI_SetLineStyle>:
 80171d8:	4b02      	ldr	r3, [pc, #8]	; (80171e4 <GUI_SetLineStyle+0xc>)
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	7e9a      	ldrb	r2, [r3, #26]
 80171de:	7698      	strb	r0, [r3, #26]
 80171e0:	4610      	mov	r0, r2
 80171e2:	4770      	bx	lr
 80171e4:	20000308 	.word	0x20000308

080171e8 <GUI_GetFontInfo>:
 80171e8:	b508      	push	{r3, lr}
 80171ea:	b910      	cbnz	r0, 80171f2 <GUI_GetFontInfo+0xa>
 80171ec:	4b07      	ldr	r3, [pc, #28]	; (801720c <GUI_GetFontInfo+0x24>)
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	69d8      	ldr	r0, [r3, #28]
 80171f2:	f890 3020 	ldrb.w	r3, [r0, #32]
 80171f6:	708b      	strb	r3, [r1, #2]
 80171f8:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80171fc:	710b      	strb	r3, [r1, #4]
 80171fe:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8017202:	70cb      	strb	r3, [r1, #3]
 8017204:	6883      	ldr	r3, [r0, #8]
 8017206:	4798      	blx	r3
 8017208:	bd08      	pop	{r3, pc}
 801720a:	bf00      	nop
 801720c:	20000308 	.word	0x20000308

08017210 <GUI_GetBkColor>:
 8017210:	b508      	push	{r3, lr}
 8017212:	f000 ffed 	bl	80181f0 <LCD_GetBkColorIndex>
 8017216:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801721a:	f7f7 bccf 	b.w	800ebbc <LCD_Index2Color>

0801721e <GUI_GetColor>:
 801721e:	b508      	push	{r3, lr}
 8017220:	f000 ffee 	bl	8018200 <LCD_GetColorIndex>
 8017224:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017228:	f7f7 bcc8 	b.w	800ebbc <LCD_Index2Color>

0801722c <GUI_GetClientRect>:
 801722c:	b108      	cbz	r0, 8017232 <GUI_GetClientRect+0x6>
 801722e:	f7f3 bfd5 	b.w	800b1dc <WM_GetClientRect>
 8017232:	4770      	bx	lr

08017234 <GUI_DrawPixel>:
 8017234:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017236:	4e0f      	ldr	r6, [pc, #60]	; (8017274 <GUI_DrawPixel+0x40>)
 8017238:	6833      	ldr	r3, [r6, #0]
 801723a:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 801723c:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 801723e:	4405      	add	r5, r0
 8017240:	b2ab      	uxth	r3, r5
 8017242:	440c      	add	r4, r1
 8017244:	f8ad 3004 	strh.w	r3, [sp, #4]
 8017248:	f8ad 3000 	strh.w	r3, [sp]
 801724c:	4668      	mov	r0, sp
 801724e:	b2a3      	uxth	r3, r4
 8017250:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017254:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017258:	f7f4 ff82 	bl	800c160 <WM__InitIVRSearch>
 801725c:	b140      	cbz	r0, 8017270 <GUI_DrawPixel+0x3c>
 801725e:	6833      	ldr	r3, [r6, #0]
 8017260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017262:	4628      	mov	r0, r5
 8017264:	685b      	ldr	r3, [r3, #4]
 8017266:	4621      	mov	r1, r4
 8017268:	4798      	blx	r3
 801726a:	f7f4 feb7 	bl	800bfdc <WM__GetNextIVR>
 801726e:	e7f5      	b.n	801725c <GUI_DrawPixel+0x28>
 8017270:	b002      	add	sp, #8
 8017272:	bd70      	pop	{r4, r5, r6, pc}
 8017274:	20000308 	.word	0x20000308

08017278 <_DrawGradient>:
 8017278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801727c:	b091      	sub	sp, #68	; 0x44
 801727e:	4605      	mov	r5, r0
 8017280:	4689      	mov	r9, r1
 8017282:	981c      	ldr	r0, [sp, #112]	; 0x70
 8017284:	991d      	ldr	r1, [sp, #116]	; 0x74
 8017286:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 801728a:	9002      	str	r0, [sp, #8]
 801728c:	4614      	mov	r4, r2
 801728e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017290:	9200      	str	r2, [sp, #0]
 8017292:	461e      	mov	r6, r3
 8017294:	9101      	str	r1, [sp, #4]
 8017296:	f7ff ffc2 	bl	801721e <GUI_GetColor>
 801729a:	9a00      	ldr	r2, [sp, #0]
 801729c:	900b      	str	r0, [sp, #44]	; 0x2c
 801729e:	4542      	cmp	r2, r8
 80172a0:	d109      	bne.n	80172b6 <_DrawGradient+0x3e>
 80172a2:	4610      	mov	r0, r2
 80172a4:	f7f7 fcda 	bl	800ec5c <LCD_SetColor>
 80172a8:	9a01      	ldr	r2, [sp, #4]
 80172aa:	b112      	cbz	r2, 80172b2 <_DrawGradient+0x3a>
 80172ac:	4628      	mov	r0, r5
 80172ae:	4649      	mov	r1, r9
 80172b0:	e0b5      	b.n	801741e <_DrawGradient+0x1a6>
 80172b2:	4648      	mov	r0, r9
 80172b4:	e0b9      	b.n	801742a <_DrawGradient+0x1b2>
 80172b6:	fa5f fc82 	uxtb.w	ip, r2
 80172ba:	f8cd c018 	str.w	ip, [sp, #24]
 80172be:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 80172c2:	f8cd c01c 	str.w	ip, [sp, #28]
 80172c6:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80172ca:	f8cd c020 	str.w	ip, [sp, #32]
 80172ce:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80172d2:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80172d6:	f8dd c018 	ldr.w	ip, [sp, #24]
 80172da:	fa5f f388 	uxtb.w	r3, r8
 80172de:	ebcc 0303 	rsb	r3, ip, r3
 80172e2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80172e6:	930d      	str	r3, [sp, #52]	; 0x34
 80172e8:	f3c8 2307 	ubfx	r3, r8, #8, #8
 80172ec:	ebcc 0303 	rsb	r3, ip, r3
 80172f0:	f8dd c020 	ldr.w	ip, [sp, #32]
 80172f4:	930c      	str	r3, [sp, #48]	; 0x30
 80172f6:	f3c8 4307 	ubfx	r3, r8, #16, #8
 80172fa:	ebcc 0303 	rsb	r3, ip, r3
 80172fe:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8017302:	930e      	str	r3, [sp, #56]	; 0x38
 8017304:	ebcc 6818 	rsb	r8, ip, r8, lsr #24
 8017308:	ebb6 0709 	subs.w	r7, r6, r9
 801730c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8017310:	f04f 0800 	mov.w	r8, #0
 8017314:	bf08      	it	eq
 8017316:	2701      	moveq	r7, #1
 8017318:	f109 33ff 	add.w	r3, r9, #4294967295
 801731c:	f8cd 8010 	str.w	r8, [sp, #16]
 8017320:	f8cd 800c 	str.w	r8, [sp, #12]
 8017324:	f8cd 8014 	str.w	r8, [sp, #20]
 8017328:	f04f 0a01 	mov.w	sl, #1
 801732c:	f103 0b01 	add.w	fp, r3, #1
 8017330:	45b3      	cmp	fp, r6
 8017332:	dc68      	bgt.n	8017406 <_DrawGradient+0x18e>
 8017334:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8017338:	fb98 f1f7 	sdiv	r1, r8, r7
 801733c:	4461      	add	r1, ip
 801733e:	f8dd c010 	ldr.w	ip, [sp, #16]
 8017342:	fb9c f0f7 	sdiv	r0, ip, r7
 8017346:	f8dd c020 	ldr.w	ip, [sp, #32]
 801734a:	4460      	add	r0, ip
 801734c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8017350:	fb9c fef7 	sdiv	lr, ip, r7
 8017354:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8017358:	b2c0      	uxtb	r0, r0
 801735a:	44e6      	add	lr, ip
 801735c:	f8dd c014 	ldr.w	ip, [sp, #20]
 8017360:	0400      	lsls	r0, r0, #16
 8017362:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8017366:	fb9c f1f7 	sdiv	r1, ip, r7
 801736a:	f8dd c018 	ldr.w	ip, [sp, #24]
 801736e:	4461      	add	r1, ip
 8017370:	fa5f fe8e 	uxtb.w	lr, lr
 8017374:	b2c9      	uxtb	r1, r1
 8017376:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 801737a:	4301      	orrs	r1, r0
 801737c:	45cb      	cmp	fp, r9
 801737e:	910a      	str	r1, [sp, #40]	; 0x28
 8017380:	dd26      	ble.n	80173d0 <_DrawGradient+0x158>
 8017382:	4291      	cmp	r1, r2
 8017384:	d102      	bne.n	801738c <_DrawGradient+0x114>
 8017386:	f10a 0a01 	add.w	sl, sl, #1
 801738a:	e021      	b.n	80173d0 <_DrawGradient+0x158>
 801738c:	4610      	mov	r0, r2
 801738e:	9300      	str	r3, [sp, #0]
 8017390:	f7f7 fc64 	bl	800ec5c <LCD_SetColor>
 8017394:	f1ba 0f01 	cmp.w	sl, #1
 8017398:	9b00      	ldr	r3, [sp, #0]
 801739a:	d00f      	beq.n	80173bc <_DrawGradient+0x144>
 801739c:	9801      	ldr	r0, [sp, #4]
 801739e:	ebca 010b 	rsb	r1, sl, fp
 80173a2:	b110      	cbz	r0, 80173aa <_DrawGradient+0x132>
 80173a4:	4628      	mov	r0, r5
 80173a6:	4622      	mov	r2, r4
 80173a8:	e003      	b.n	80173b2 <_DrawGradient+0x13a>
 80173aa:	4608      	mov	r0, r1
 80173ac:	461a      	mov	r2, r3
 80173ae:	4629      	mov	r1, r5
 80173b0:	4623      	mov	r3, r4
 80173b2:	f7f7 f983 	bl	800e6bc <LCD_FillRect>
 80173b6:	f04f 0a01 	mov.w	sl, #1
 80173ba:	e009      	b.n	80173d0 <_DrawGradient+0x158>
 80173bc:	9901      	ldr	r1, [sp, #4]
 80173be:	b111      	cbz	r1, 80173c6 <_DrawGradient+0x14e>
 80173c0:	4628      	mov	r0, r5
 80173c2:	4619      	mov	r1, r3
 80173c4:	e001      	b.n	80173ca <_DrawGradient+0x152>
 80173c6:	4618      	mov	r0, r3
 80173c8:	4629      	mov	r1, r5
 80173ca:	4622      	mov	r2, r4
 80173cc:	9b02      	ldr	r3, [sp, #8]
 80173ce:	4798      	blx	r3
 80173d0:	f8dd c014 	ldr.w	ip, [sp, #20]
 80173d4:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 80173d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80173da:	44f4      	add	ip, lr
 80173dc:	f8cd c014 	str.w	ip, [sp, #20]
 80173e0:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 80173e4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80173e8:	44f4      	add	ip, lr
 80173ea:	f8cd c00c 	str.w	ip, [sp, #12]
 80173ee:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 80173f2:	f8dd c010 	ldr.w	ip, [sp, #16]
 80173f6:	44f4      	add	ip, lr
 80173f8:	f8cd c010 	str.w	ip, [sp, #16]
 80173fc:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8017400:	465b      	mov	r3, fp
 8017402:	44e0      	add	r8, ip
 8017404:	e792      	b.n	801732c <_DrawGradient+0xb4>
 8017406:	4610      	mov	r0, r2
 8017408:	f7f7 fc28 	bl	800ec5c <LCD_SetColor>
 801740c:	f1ba 0f01 	cmp.w	sl, #1
 8017410:	d00f      	beq.n	8017432 <_DrawGradient+0x1ba>
 8017412:	9801      	ldr	r0, [sp, #4]
 8017414:	ebca 0106 	rsb	r1, sl, r6
 8017418:	b130      	cbz	r0, 8017428 <_DrawGradient+0x1b0>
 801741a:	4628      	mov	r0, r5
 801741c:	3101      	adds	r1, #1
 801741e:	4622      	mov	r2, r4
 8017420:	4633      	mov	r3, r6
 8017422:	f7f7 f94b 	bl	800e6bc <LCD_FillRect>
 8017426:	e00e      	b.n	8017446 <_DrawGradient+0x1ce>
 8017428:	1c48      	adds	r0, r1, #1
 801742a:	4629      	mov	r1, r5
 801742c:	4632      	mov	r2, r6
 801742e:	4623      	mov	r3, r4
 8017430:	e7f7      	b.n	8017422 <_DrawGradient+0x1aa>
 8017432:	9901      	ldr	r1, [sp, #4]
 8017434:	b111      	cbz	r1, 801743c <_DrawGradient+0x1c4>
 8017436:	4628      	mov	r0, r5
 8017438:	4631      	mov	r1, r6
 801743a:	e001      	b.n	8017440 <_DrawGradient+0x1c8>
 801743c:	4630      	mov	r0, r6
 801743e:	4629      	mov	r1, r5
 8017440:	4622      	mov	r2, r4
 8017442:	9b02      	ldr	r3, [sp, #8]
 8017444:	4798      	blx	r3
 8017446:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017448:	b011      	add	sp, #68	; 0x44
 801744a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801744e:	f7f7 bc05 	b.w	800ec5c <LCD_SetColor>
	...

08017454 <GUI_DrawGradientV>:
 8017454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017458:	4c15      	ldr	r4, [pc, #84]	; (80174b0 <GUI_DrawGradientV+0x5c>)
 801745a:	6824      	ldr	r4, [r4, #0]
 801745c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 801745e:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8017460:	b087      	sub	sp, #28
 8017462:	eb00 0905 	add.w	r9, r0, r5
 8017466:	eb01 0804 	add.w	r8, r1, r4
 801746a:	4415      	add	r5, r2
 801746c:	441c      	add	r4, r3
 801746e:	a804      	add	r0, sp, #16
 8017470:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8017472:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8017474:	f8ad 9010 	strh.w	r9, [sp, #16]
 8017478:	f8ad 5014 	strh.w	r5, [sp, #20]
 801747c:	f8ad 8012 	strh.w	r8, [sp, #18]
 8017480:	f8ad 4016 	strh.w	r4, [sp, #22]
 8017484:	f7f4 fe6c 	bl	800c160 <WM__InitIVRSearch>
 8017488:	b170      	cbz	r0, 80174a8 <GUI_DrawGradientV+0x54>
 801748a:	4b0a      	ldr	r3, [pc, #40]	; (80174b4 <GUI_DrawGradientV+0x60>)
 801748c:	9302      	str	r3, [sp, #8]
 801748e:	2301      	movs	r3, #1
 8017490:	9303      	str	r3, [sp, #12]
 8017492:	4648      	mov	r0, r9
 8017494:	4641      	mov	r1, r8
 8017496:	462a      	mov	r2, r5
 8017498:	4623      	mov	r3, r4
 801749a:	9700      	str	r7, [sp, #0]
 801749c:	9601      	str	r6, [sp, #4]
 801749e:	f7ff feeb 	bl	8017278 <_DrawGradient>
 80174a2:	f7f4 fd9b 	bl	800bfdc <WM__GetNextIVR>
 80174a6:	e7ef      	b.n	8017488 <GUI_DrawGradientV+0x34>
 80174a8:	b007      	add	sp, #28
 80174aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80174ae:	bf00      	nop
 80174b0:	20000308 	.word	0x20000308
 80174b4:	0800e625 	.word	0x0800e625

080174b8 <GUI_DrawGradientH>:
 80174b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80174bc:	4c15      	ldr	r4, [pc, #84]	; (8017514 <GUI_DrawGradientH+0x5c>)
 80174be:	6825      	ldr	r5, [r4, #0]
 80174c0:	6cec      	ldr	r4, [r5, #76]	; 0x4c
 80174c2:	6d2d      	ldr	r5, [r5, #80]	; 0x50
 80174c4:	b087      	sub	sp, #28
 80174c6:	eb00 0804 	add.w	r8, r0, r4
 80174ca:	eb01 0905 	add.w	r9, r1, r5
 80174ce:	4414      	add	r4, r2
 80174d0:	441d      	add	r5, r3
 80174d2:	a804      	add	r0, sp, #16
 80174d4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80174d6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80174d8:	f8ad 8010 	strh.w	r8, [sp, #16]
 80174dc:	f8ad 4014 	strh.w	r4, [sp, #20]
 80174e0:	f8ad 9012 	strh.w	r9, [sp, #18]
 80174e4:	f8ad 5016 	strh.w	r5, [sp, #22]
 80174e8:	f7f4 fe3a 	bl	800c160 <WM__InitIVRSearch>
 80174ec:	b170      	cbz	r0, 801750c <GUI_DrawGradientH+0x54>
 80174ee:	4b0a      	ldr	r3, [pc, #40]	; (8017518 <GUI_DrawGradientH+0x60>)
 80174f0:	9302      	str	r3, [sp, #8]
 80174f2:	2300      	movs	r3, #0
 80174f4:	9303      	str	r3, [sp, #12]
 80174f6:	4648      	mov	r0, r9
 80174f8:	4641      	mov	r1, r8
 80174fa:	462a      	mov	r2, r5
 80174fc:	4623      	mov	r3, r4
 80174fe:	9700      	str	r7, [sp, #0]
 8017500:	9601      	str	r6, [sp, #4]
 8017502:	f7ff feb9 	bl	8017278 <_DrawGradient>
 8017506:	f7f4 fd69 	bl	800bfdc <WM__GetNextIVR>
 801750a:	e7ef      	b.n	80174ec <GUI_DrawGradientH+0x34>
 801750c:	b007      	add	sp, #28
 801750e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017512:	bf00      	nop
 8017514:	20000308 	.word	0x20000308
 8017518:	0800e671 	.word	0x0800e671

0801751c <GUI_DispStringInRectEx>:
 801751c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017520:	b085      	sub	sp, #20
 8017522:	4681      	mov	r9, r0
 8017524:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8017526:	460c      	mov	r4, r1
 8017528:	4690      	mov	r8, r2
 801752a:	461f      	mov	r7, r3
 801752c:	b915      	cbnz	r5, 8017534 <GUI_DispStringInRectEx+0x18>
 801752e:	f000 f8ef 	bl	8017710 <GUI_DispStringInRectMax>
 8017532:	e03d      	b.n	80175b0 <GUI_DispStringInRectEx+0x94>
 8017534:	b919      	cbnz	r1, 801753e <GUI_DispStringInRectEx+0x22>
 8017536:	9102      	str	r1, [sp, #8]
 8017538:	9103      	str	r1, [sp, #12]
 801753a:	460d      	mov	r5, r1
 801753c:	e015      	b.n	801756a <GUI_DispStringInRectEx+0x4e>
 801753e:	6808      	ldr	r0, [r1, #0]
 8017540:	6849      	ldr	r1, [r1, #4]
 8017542:	4b1d      	ldr	r3, [pc, #116]	; (80175b8 <GUI_DispStringInRectEx+0x9c>)
 8017544:	ad02      	add	r5, sp, #8
 8017546:	c503      	stmia	r5!, {r0, r1}
 8017548:	ad02      	add	r5, sp, #8
 801754a:	cd03      	ldmia	r5!, {r0, r1}
 801754c:	6018      	str	r0, [r3, #0]
 801754e:	4620      	mov	r0, r4
 8017550:	6059      	str	r1, [r3, #4]
 8017552:	f7f3 f97d 	bl	800a850 <WM_SetUserClipRect>
 8017556:	4605      	mov	r5, r0
 8017558:	b138      	cbz	r0, 801756a <GUI_DispStringInRectEx+0x4e>
 801755a:	4668      	mov	r0, sp
 801755c:	4621      	mov	r1, r4
 801755e:	462a      	mov	r2, r5
 8017560:	f7f7 fc74 	bl	800ee4c <GUI__IntersectRects>
 8017564:	4668      	mov	r0, sp
 8017566:	f7f3 f973 	bl	800a850 <WM_SetUserClipRect>
 801756a:	4c14      	ldr	r4, [pc, #80]	; (80175bc <GUI_DispStringInRectEx+0xa0>)
 801756c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801756e:	f8df a050 	ldr.w	sl, [pc, #80]	; 80175c0 <GUI_DispStringInRectEx+0xa4>
 8017572:	6823      	ldr	r3, [r4, #0]
 8017574:	f8da b000 	ldr.w	fp, [sl]
 8017578:	f8ca 2000 	str.w	r2, [sl]
 801757c:	2600      	movs	r6, #0
 801757e:	615e      	str	r6, [r3, #20]
 8017580:	a802      	add	r0, sp, #8
 8017582:	6853      	ldr	r3, [r2, #4]
 8017584:	4798      	blx	r3
 8017586:	4642      	mov	r2, r8
 8017588:	463b      	mov	r3, r7
 801758a:	4648      	mov	r0, r9
 801758c:	a902      	add	r1, sp, #8
 801758e:	f000 f819 	bl	80175c4 <GUI__DispStringInRect>
 8017592:	4628      	mov	r0, r5
 8017594:	f7f3 f95c 	bl	800a850 <WM_SetUserClipRect>
 8017598:	4652      	mov	r2, sl
 801759a:	6823      	ldr	r3, [r4, #0]
 801759c:	f1bb 0f00 	cmp.w	fp, #0
 80175a0:	d001      	beq.n	80175a6 <GUI_DispStringInRectEx+0x8a>
 80175a2:	615e      	str	r6, [r3, #20]
 80175a4:	e002      	b.n	80175ac <GUI_DispStringInRectEx+0x90>
 80175a6:	f103 0108 	add.w	r1, r3, #8
 80175aa:	6159      	str	r1, [r3, #20]
 80175ac:	f8c2 b000 	str.w	fp, [r2]
 80175b0:	b005      	add	sp, #20
 80175b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175b6:	bf00      	nop
 80175b8:	20021d10 	.word	0x20021d10
 80175bc:	20000308 	.word	0x20000308
 80175c0:	20021be4 	.word	0x20021be4

080175c4 <GUI__DispStringInRect>:
 80175c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175c8:	b087      	sub	sp, #28
 80175ca:	460c      	mov	r4, r1
 80175cc:	9001      	str	r0, [sp, #4]
 80175ce:	4691      	mov	r9, r2
 80175d0:	461d      	mov	r5, r3
 80175d2:	f7f9 f91f 	bl	8010814 <GUI_GetFontDistY>
 80175d6:	9f01      	ldr	r7, [sp, #4]
 80175d8:	4680      	mov	r8, r0
 80175da:	b124      	cbz	r4, 80175e6 <GUI__DispStringInRect+0x22>
 80175dc:	6820      	ldr	r0, [r4, #0]
 80175de:	6861      	ldr	r1, [r4, #4]
 80175e0:	ab04      	add	r3, sp, #16
 80175e2:	c303      	stmia	r3!, {r0, r1}
 80175e4:	e002      	b.n	80175ec <GUI__DispStringInRect+0x28>
 80175e6:	a804      	add	r0, sp, #16
 80175e8:	f7ff fe20 	bl	801722c <GUI_GetClientRect>
 80175ec:	f019 0a0c 	ands.w	sl, r9, #12
 80175f0:	d002      	beq.n	80175f8 <GUI__DispStringInRect+0x34>
 80175f2:	462c      	mov	r4, r5
 80175f4:	2600      	movs	r6, #0
 80175f6:	e016      	b.n	8017626 <GUI__DispStringInRect+0x62>
 80175f8:	f9bd 4012 	ldrsh.w	r4, [sp, #18]
 80175fc:	e032      	b.n	8017664 <GUI__DispStringInRect+0xa0>
 80175fe:	4621      	mov	r1, r4
 8017600:	9801      	ldr	r0, [sp, #4]
 8017602:	f7f9 f83d 	bl	8010680 <GUI__GetLineNumChars>
 8017606:	f8dd b004 	ldr.w	fp, [sp, #4]
 801760a:	4601      	mov	r1, r0
 801760c:	1a24      	subs	r4, r4, r0
 801760e:	4658      	mov	r0, fp
 8017610:	f7f7 ff0a 	bl	800f428 <GUI_UC__NumChars2NumBytes>
 8017614:	eb0b 0300 	add.w	r3, fp, r0
 8017618:	a806      	add	r0, sp, #24
 801761a:	3601      	adds	r6, #1
 801761c:	f840 3d14 	str.w	r3, [r0, #-20]!
 8017620:	f000 fe09 	bl	8018236 <GUI__HandleEOLine>
 8017624:	b908      	cbnz	r0, 801762a <GUI__DispStringInRect+0x66>
 8017626:	2c00      	cmp	r4, #0
 8017628:	d1e9      	bne.n	80175fe <GUI__DispStringInRect+0x3a>
 801762a:	f1ba 0f08 	cmp.w	sl, #8
 801762e:	d005      	beq.n	801763c <GUI__DispStringInRect+0x78>
 8017630:	f1ba 0f0c 	cmp.w	sl, #12
 8017634:	d008      	beq.n	8017648 <GUI__DispStringInRect+0x84>
 8017636:	f1ba 0f04 	cmp.w	sl, #4
 801763a:	d112      	bne.n	8017662 <GUI__DispStringInRect+0x9e>
 801763c:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 8017640:	fb08 4416 	mls	r4, r8, r6, r4
 8017644:	3401      	adds	r4, #1
 8017646:	e00d      	b.n	8017664 <GUI__DispStringInRect+0xa0>
 8017648:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801764c:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 8017650:	1ae4      	subs	r4, r4, r3
 8017652:	3401      	adds	r4, #1
 8017654:	fb08 4416 	mls	r4, r8, r6, r4
 8017658:	2202      	movs	r2, #2
 801765a:	fb94 f4f2 	sdiv	r4, r4, r2
 801765e:	441c      	add	r4, r3
 8017660:	e000      	b.n	8017664 <GUI__DispStringInRect+0xa0>
 8017662:	2400      	movs	r4, #0
 8017664:	9701      	str	r7, [sp, #4]
 8017666:	2600      	movs	r6, #0
 8017668:	2d00      	cmp	r5, #0
 801766a:	d04b      	beq.n	8017704 <GUI__DispStringInRect+0x140>
 801766c:	4629      	mov	r1, r5
 801766e:	9801      	ldr	r0, [sp, #4]
 8017670:	f7f9 f806 	bl	8010680 <GUI__GetLineNumChars>
 8017674:	4607      	mov	r7, r0
 8017676:	1a2d      	subs	r5, r5, r0
 8017678:	4639      	mov	r1, r7
 801767a:	9801      	ldr	r0, [sp, #4]
 801767c:	f7f9 f82e 	bl	80106dc <GUI__GetLineDistX>
 8017680:	f009 0303 	and.w	r3, r9, #3
 8017684:	2b01      	cmp	r3, #1
 8017686:	d00f      	beq.n	80176a8 <GUI__DispStringInRect+0xe4>
 8017688:	2b02      	cmp	r3, #2
 801768a:	d003      	beq.n	8017694 <GUI__DispStringInRect+0xd0>
 801768c:	b983      	cbnz	r3, 80176b0 <GUI__DispStringInRect+0xec>
 801768e:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 8017692:	e00d      	b.n	80176b0 <GUI__DispStringInRect+0xec>
 8017694:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8017698:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 801769c:	1ab6      	subs	r6, r6, r2
 801769e:	1a36      	subs	r6, r6, r0
 80176a0:	fb96 f6f3 	sdiv	r6, r6, r3
 80176a4:	4416      	add	r6, r2
 80176a6:	e003      	b.n	80176b0 <GUI__DispStringInRect+0xec>
 80176a8:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 80176ac:	1a36      	subs	r6, r6, r0
 80176ae:	3601      	adds	r6, #1
 80176b0:	4b16      	ldr	r3, [pc, #88]	; (801770c <GUI__DispStringInRect+0x148>)
 80176b2:	6819      	ldr	r1, [r3, #0]
 80176b4:	3801      	subs	r0, #1
 80176b6:	b2a3      	uxth	r3, r4
 80176b8:	b2b2      	uxth	r2, r6
 80176ba:	848b      	strh	r3, [r1, #36]	; 0x24
 80176bc:	4430      	add	r0, r6
 80176be:	f8ad 300a 	strh.w	r3, [sp, #10]
 80176c2:	f108 33ff 	add.w	r3, r8, #4294967295
 80176c6:	4423      	add	r3, r4
 80176c8:	844a      	strh	r2, [r1, #34]	; 0x22
 80176ca:	f8ad 2008 	strh.w	r2, [sp, #8]
 80176ce:	4639      	mov	r1, r7
 80176d0:	aa02      	add	r2, sp, #8
 80176d2:	f8ad 000c 	strh.w	r0, [sp, #12]
 80176d6:	9801      	ldr	r0, [sp, #4]
 80176d8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80176dc:	f7f9 f82e 	bl	801073c <GUI__DispLine>
 80176e0:	f8dd a004 	ldr.w	sl, [sp, #4]
 80176e4:	4639      	mov	r1, r7
 80176e6:	4650      	mov	r0, sl
 80176e8:	f7f7 fe9e 	bl	800f428 <GUI_UC__NumChars2NumBytes>
 80176ec:	af06      	add	r7, sp, #24
 80176ee:	4450      	add	r0, sl
 80176f0:	f847 0d14 	str.w	r0, [r7, #-20]!
 80176f4:	f7f9 f88e 	bl	8010814 <GUI_GetFontDistY>
 80176f8:	4404      	add	r4, r0
 80176fa:	4638      	mov	r0, r7
 80176fc:	f000 fd9b 	bl	8018236 <GUI__HandleEOLine>
 8017700:	2800      	cmp	r0, #0
 8017702:	d0b1      	beq.n	8017668 <GUI__DispStringInRect+0xa4>
 8017704:	b007      	add	sp, #28
 8017706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801770a:	bf00      	nop
 801770c:	20000308 	.word	0x20000308

08017710 <GUI_DispStringInRectMax>:
 8017710:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017714:	460c      	mov	r4, r1
 8017716:	4690      	mov	r8, r2
 8017718:	461f      	mov	r7, r3
 801771a:	4606      	mov	r6, r0
 801771c:	b1c0      	cbz	r0, 8017750 <GUI_DispStringInRectMax+0x40>
 801771e:	b169      	cbz	r1, 801773c <GUI_DispStringInRectMax+0x2c>
 8017720:	4608      	mov	r0, r1
 8017722:	f7f3 f895 	bl	800a850 <WM_SetUserClipRect>
 8017726:	4605      	mov	r5, r0
 8017728:	b148      	cbz	r0, 801773e <GUI_DispStringInRectMax+0x2e>
 801772a:	4668      	mov	r0, sp
 801772c:	4621      	mov	r1, r4
 801772e:	462a      	mov	r2, r5
 8017730:	f7f7 fb8c 	bl	800ee4c <GUI__IntersectRects>
 8017734:	4668      	mov	r0, sp
 8017736:	f7f3 f88b 	bl	800a850 <WM_SetUserClipRect>
 801773a:	e000      	b.n	801773e <GUI_DispStringInRectMax+0x2e>
 801773c:	460d      	mov	r5, r1
 801773e:	4630      	mov	r0, r6
 8017740:	4621      	mov	r1, r4
 8017742:	4642      	mov	r2, r8
 8017744:	463b      	mov	r3, r7
 8017746:	f7ff ff3d 	bl	80175c4 <GUI__DispStringInRect>
 801774a:	4628      	mov	r0, r5
 801774c:	f7f3 f880 	bl	800a850 <WM_SetUserClipRect>
 8017750:	b002      	add	sp, #8
 8017752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017756 <GUI_DispStringInRect>:
 8017756:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801775a:	f7ff bfd9 	b.w	8017710 <GUI_DispStringInRectMax>
	...

08017760 <GUI_DispStringAt>:
 8017760:	4b02      	ldr	r3, [pc, #8]	; (801776c <GUI_DispStringAt+0xc>)
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	8459      	strh	r1, [r3, #34]	; 0x22
 8017766:	849a      	strh	r2, [r3, #36]	; 0x24
 8017768:	f000 b802 	b.w	8017770 <GUI_DispString>
 801776c:	20000308 	.word	0x20000308

08017770 <GUI_DispString>:
 8017770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017774:	4604      	mov	r4, r0
 8017776:	2800      	cmp	r0, #0
 8017778:	d079      	beq.n	801786e <GUI_DispString+0xfe>
 801777a:	4d3e      	ldr	r5, [pc, #248]	; (8017874 <GUI_DispString+0x104>)
 801777c:	f7f9 f84a 	bl	8010814 <GUI_GetFontDistY>
 8017780:	682b      	ldr	r3, [r5, #0]
 8017782:	4680      	mov	r8, r0
 8017784:	f8b3 9022 	ldrh.w	r9, [r3, #34]	; 0x22
 8017788:	f7f9 f82c 	bl	80107e4 <GUI_GetYAdjust>
 801778c:	682b      	ldr	r3, [r5, #0]
 801778e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8017790:	b287      	uxth	r7, r0
 8017792:	1bd2      	subs	r2, r2, r7
 8017794:	849a      	strh	r2, [r3, #36]	; 0x24
 8017796:	7823      	ldrb	r3, [r4, #0]
 8017798:	2b00      	cmp	r3, #0
 801779a:	d05d      	beq.n	8017858 <GUI_DispString+0xe8>
 801779c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80177a0:	4620      	mov	r0, r4
 80177a2:	f7f8 ff6d 	bl	8010680 <GUI__GetLineNumChars>
 80177a6:	4606      	mov	r6, r0
 80177a8:	4631      	mov	r1, r6
 80177aa:	4620      	mov	r0, r4
 80177ac:	f7f8 ff96 	bl	80106dc <GUI__GetLineDistX>
 80177b0:	682b      	ldr	r3, [r5, #0]
 80177b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80177b4:	f002 0203 	and.w	r2, r2, #3
 80177b8:	2a01      	cmp	r2, #1
 80177ba:	d005      	beq.n	80177c8 <GUI_DispString+0x58>
 80177bc:	2a02      	cmp	r2, #2
 80177be:	bf14      	ite	ne
 80177c0:	2200      	movne	r2, #0
 80177c2:	fb90 f2f2 	sdiveq	r2, r0, r2
 80177c6:	e000      	b.n	80177ca <GUI_DispString+0x5a>
 80177c8:	4602      	mov	r2, r0
 80177ca:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80177cc:	1a8a      	subs	r2, r1, r2
 80177ce:	b292      	uxth	r2, r2
 80177d0:	b291      	uxth	r1, r2
 80177d2:	8459      	strh	r1, [r3, #34]	; 0x22
 80177d4:	fa1f fa80 	uxth.w	sl, r0
 80177d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80177da:	f8ad 1000 	strh.w	r1, [sp]
 80177de:	f10a 31ff 	add.w	r1, sl, #4294967295
 80177e2:	440a      	add	r2, r1
 80177e4:	f8ad 3002 	strh.w	r3, [sp, #2]
 80177e8:	fa1f fb88 	uxth.w	fp, r8
 80177ec:	3b01      	subs	r3, #1
 80177ee:	445b      	add	r3, fp
 80177f0:	f8ad 2004 	strh.w	r2, [sp, #4]
 80177f4:	4620      	mov	r0, r4
 80177f6:	4631      	mov	r1, r6
 80177f8:	466a      	mov	r2, sp
 80177fa:	f8ad 3006 	strh.w	r3, [sp, #6]
 80177fe:	f7f8 ff9d 	bl	801073c <GUI__DispLine>
 8017802:	682b      	ldr	r3, [r5, #0]
 8017804:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8017808:	849a      	strh	r2, [r3, #36]	; 0x24
 801780a:	4620      	mov	r0, r4
 801780c:	4631      	mov	r1, r6
 801780e:	f7f7 fe0b 	bl	800f428 <GUI_UC__NumChars2NumBytes>
 8017812:	5c23      	ldrb	r3, [r4, r0]
 8017814:	2b0a      	cmp	r3, #10
 8017816:	eb04 0200 	add.w	r2, r4, r0
 801781a:	d001      	beq.n	8017820 <GUI_DispString+0xb0>
 801781c:	2b0d      	cmp	r3, #13
 801781e:	d112      	bne.n	8017846 <GUI_DispString+0xd6>
 8017820:	682b      	ldr	r3, [r5, #0]
 8017822:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8017824:	f001 0103 	and.w	r1, r1, #3
 8017828:	3901      	subs	r1, #1
 801782a:	2901      	cmp	r1, #1
 801782c:	bf8a      	itet	hi
 801782e:	8c19      	ldrhhi	r1, [r3, #32]
 8017830:	f8a3 9022 	strhls.w	r9, [r3, #34]	; 0x22
 8017834:	8459      	strhhi	r1, [r3, #34]	; 0x22
 8017836:	7811      	ldrb	r1, [r2, #0]
 8017838:	290a      	cmp	r1, #10
 801783a:	d10b      	bne.n	8017854 <GUI_DispString+0xe4>
 801783c:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 801783e:	448b      	add	fp, r1
 8017840:	f8a3 b024 	strh.w	fp, [r3, #36]	; 0x24
 8017844:	e006      	b.n	8017854 <GUI_DispString+0xe4>
 8017846:	4b0b      	ldr	r3, [pc, #44]	; (8017874 <GUI_DispString+0x104>)
 8017848:	f8bd 0000 	ldrh.w	r0, [sp]
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	4482      	add	sl, r0
 8017850:	f8a3 a022 	strh.w	sl, [r3, #34]	; 0x22
 8017854:	7813      	ldrb	r3, [r2, #0]
 8017856:	b943      	cbnz	r3, 801786a <GUI_DispString+0xfa>
 8017858:	682b      	ldr	r3, [r5, #0]
 801785a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 801785c:	4417      	add	r7, r2
 801785e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8017860:	849f      	strh	r7, [r3, #36]	; 0x24
 8017862:	f022 0203 	bic.w	r2, r2, #3
 8017866:	859a      	strh	r2, [r3, #44]	; 0x2c
 8017868:	e001      	b.n	801786e <GUI_DispString+0xfe>
 801786a:	1c54      	adds	r4, r2, #1
 801786c:	e793      	b.n	8017796 <GUI_DispString+0x26>
 801786e:	b003      	add	sp, #12
 8017870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017874:	20000308 	.word	0x20000308

08017878 <GUI_CURSOR_SetPositionEx>:
 8017878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801787a:	4606      	mov	r6, r0
 801787c:	4610      	mov	r0, r2
 801787e:	460d      	mov	r5, r1
 8017880:	4614      	mov	r4, r2
 8017882:	f7f8 f805 	bl	800f890 <GUI_GetCursorLayer>
 8017886:	4f15      	ldr	r7, [pc, #84]	; (80178dc <GUI_CURSOR_SetPositionEx+0x64>)
 8017888:	2314      	movs	r3, #20
 801788a:	b148      	cbz	r0, 80178a0 <GUI_CURSOR_SetPositionEx+0x28>
 801788c:	435c      	muls	r4, r3
 801788e:	593b      	ldr	r3, [r7, r4]
 8017890:	6859      	ldr	r1, [r3, #4]
 8017892:	689a      	ldr	r2, [r3, #8]
 8017894:	1a71      	subs	r1, r6, r1
 8017896:	1aaa      	subs	r2, r5, r2
 8017898:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801789c:	f7f8 b81e 	b.w	800f8dc <GUI_SetLayerPosEx>
 80178a0:	fb03 7304 	mla	r3, r3, r4, r7
 80178a4:	f103 0208 	add.w	r2, r3, #8
 80178a8:	689b      	ldr	r3, [r3, #8]
 80178aa:	42b3      	cmp	r3, r6
 80178ac:	d102      	bne.n	80178b4 <GUI_CURSOR_SetPositionEx+0x3c>
 80178ae:	6853      	ldr	r3, [r2, #4]
 80178b0:	42ab      	cmp	r3, r5
 80178b2:	d011      	beq.n	80178d8 <GUI_CURSOR_SetPositionEx+0x60>
 80178b4:	2314      	movs	r3, #20
 80178b6:	4363      	muls	r3, r4
 80178b8:	18fa      	adds	r2, r7, r3
 80178ba:	6910      	ldr	r0, [r2, #16]
 80178bc:	b138      	cbz	r0, 80178ce <GUI_CURSOR_SetPositionEx+0x56>
 80178be:	4a07      	ldr	r2, [pc, #28]	; (80178dc <GUI_CURSOR_SetPositionEx+0x64>)
 80178c0:	58d3      	ldr	r3, [r2, r3]
 80178c2:	6859      	ldr	r1, [r3, #4]
 80178c4:	689a      	ldr	r2, [r3, #8]
 80178c6:	1a71      	subs	r1, r6, r1
 80178c8:	1aaa      	subs	r2, r5, r2
 80178ca:	f000 fe17 	bl	80184fc <GUI_SPRITE_SetPosition>
 80178ce:	2314      	movs	r3, #20
 80178d0:	fb03 7404 	mla	r4, r3, r4, r7
 80178d4:	60a6      	str	r6, [r4, #8]
 80178d6:	60e5      	str	r5, [r4, #12]
 80178d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80178da:	bf00      	nop
 80178dc:	20001804 	.word	0x20001804

080178e0 <GUI_ClearRectEx>:
 80178e0:	4603      	mov	r3, r0
 80178e2:	f9b0 0000 	ldrsh.w	r0, [r0]
 80178e6:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 80178ea:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80178ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80178f2:	f7f8 bc61 	b.w	80101b8 <GUI_ClearRect>
	...

080178f8 <GUI_DrawRect>:
 80178f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80178fc:	4c1e      	ldr	r4, [pc, #120]	; (8017978 <GUI_DrawRect+0x80>)
 80178fe:	f8d4 e000 	ldr.w	lr, [r4]
 8017902:	f8de 404c 	ldr.w	r4, [lr, #76]	; 0x4c
 8017906:	f8de 6050 	ldr.w	r6, [lr, #80]	; 0x50
 801790a:	1905      	adds	r5, r0, r4
 801790c:	4414      	add	r4, r2
 801790e:	f89e 2018 	ldrb.w	r2, [lr, #24]
 8017912:	3a01      	subs	r2, #1
 8017914:	b292      	uxth	r2, r2
 8017916:	198f      	adds	r7, r1, r6
 8017918:	441e      	add	r6, r3
 801791a:	1aab      	subs	r3, r5, r2
 801791c:	f8ad 3000 	strh.w	r3, [sp]
 8017920:	1913      	adds	r3, r2, r4
 8017922:	f8ad 3004 	strh.w	r3, [sp, #4]
 8017926:	4668      	mov	r0, sp
 8017928:	1abb      	subs	r3, r7, r2
 801792a:	4432      	add	r2, r6
 801792c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017930:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017934:	f7f4 fc14 	bl	800c160 <WM__InitIVRSearch>
 8017938:	b1d0      	cbz	r0, 8017970 <GUI_DrawRect+0x78>
 801793a:	4628      	mov	r0, r5
 801793c:	4639      	mov	r1, r7
 801793e:	4622      	mov	r2, r4
 8017940:	f7f6 fe70 	bl	800e624 <LCD_DrawHLine>
 8017944:	f107 0901 	add.w	r9, r7, #1
 8017948:	4628      	mov	r0, r5
 801794a:	4631      	mov	r1, r6
 801794c:	4622      	mov	r2, r4
 801794e:	f106 38ff 	add.w	r8, r6, #4294967295
 8017952:	f7f6 fe67 	bl	800e624 <LCD_DrawHLine>
 8017956:	4628      	mov	r0, r5
 8017958:	4649      	mov	r1, r9
 801795a:	4642      	mov	r2, r8
 801795c:	f7f6 fe88 	bl	800e670 <LCD_DrawVLine>
 8017960:	4620      	mov	r0, r4
 8017962:	4649      	mov	r1, r9
 8017964:	4642      	mov	r2, r8
 8017966:	f7f6 fe83 	bl	800e670 <LCD_DrawVLine>
 801796a:	f7f4 fb37 	bl	800bfdc <WM__GetNextIVR>
 801796e:	e7e3      	b.n	8017938 <GUI_DrawRect+0x40>
 8017970:	b003      	add	sp, #12
 8017972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017976:	bf00      	nop
 8017978:	20000308 	.word	0x20000308

0801797c <_GetIndexMask_0>:
 801797c:	b508      	push	{r3, lr}
 801797e:	f7f6 fd79 	bl	800e474 <LCD_GetNumColors>
 8017982:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8017986:	d010      	beq.n	80179aa <_GetIndexMask_0+0x2e>
 8017988:	287f      	cmp	r0, #127	; 0x7f
 801798a:	d810      	bhi.n	80179ae <_GetIndexMask_0+0x32>
 801798c:	283f      	cmp	r0, #63	; 0x3f
 801798e:	d810      	bhi.n	80179b2 <_GetIndexMask_0+0x36>
 8017990:	281f      	cmp	r0, #31
 8017992:	d810      	bhi.n	80179b6 <_GetIndexMask_0+0x3a>
 8017994:	280f      	cmp	r0, #15
 8017996:	d810      	bhi.n	80179ba <_GetIndexMask_0+0x3e>
 8017998:	2807      	cmp	r0, #7
 801799a:	d810      	bhi.n	80179be <_GetIndexMask_0+0x42>
 801799c:	2803      	cmp	r0, #3
 801799e:	d810      	bhi.n	80179c2 <_GetIndexMask_0+0x46>
 80179a0:	2801      	cmp	r0, #1
 80179a2:	bf94      	ite	ls
 80179a4:	2000      	movls	r0, #0
 80179a6:	2001      	movhi	r0, #1
 80179a8:	e00c      	b.n	80179c4 <_GetIndexMask_0+0x48>
 80179aa:	2008      	movs	r0, #8
 80179ac:	e00a      	b.n	80179c4 <_GetIndexMask_0+0x48>
 80179ae:	2007      	movs	r0, #7
 80179b0:	e008      	b.n	80179c4 <_GetIndexMask_0+0x48>
 80179b2:	2006      	movs	r0, #6
 80179b4:	e006      	b.n	80179c4 <_GetIndexMask_0+0x48>
 80179b6:	2005      	movs	r0, #5
 80179b8:	e004      	b.n	80179c4 <_GetIndexMask_0+0x48>
 80179ba:	2004      	movs	r0, #4
 80179bc:	e002      	b.n	80179c4 <_GetIndexMask_0+0x48>
 80179be:	2003      	movs	r0, #3
 80179c0:	e000      	b.n	80179c4 <_GetIndexMask_0+0x48>
 80179c2:	2002      	movs	r0, #2
 80179c4:	2301      	movs	r3, #1
 80179c6:	fa03 f000 	lsl.w	r0, r3, r0
 80179ca:	3801      	subs	r0, #1
 80179cc:	bd08      	pop	{r3, pc}

080179ce <_Index2Color_0>:
 80179ce:	b538      	push	{r3, r4, r5, lr}
 80179d0:	4604      	mov	r4, r0
 80179d2:	f7f6 fd4f 	bl	800e474 <LCD_GetNumColors>
 80179d6:	4605      	mov	r5, r0
 80179d8:	f7f6 fd6a 	bl	800e4b0 <LCD_GetPalette>
 80179dc:	42ac      	cmp	r4, r5
 80179de:	d203      	bcs.n	80179e8 <_Index2Color_0+0x1a>
 80179e0:	b118      	cbz	r0, 80179ea <_Index2Color_0+0x1c>
 80179e2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80179e6:	bd38      	pop	{r3, r4, r5, pc}
 80179e8:	2000      	movs	r0, #0
 80179ea:	bd38      	pop	{r3, r4, r5, pc}

080179ec <_Color2Index_0>:
 80179ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80179f0:	4681      	mov	r9, r0
 80179f2:	f7f6 fd3f 	bl	800e474 <LCD_GetNumColors>
 80179f6:	4680      	mov	r8, r0
 80179f8:	f7f6 fd5a 	bl	800e4b0 <LCD_GetPalette>
 80179fc:	4606      	mov	r6, r0
 80179fe:	b1d8      	cbz	r0, 8017a38 <_Color2Index_0+0x4c>
 8017a00:	2300      	movs	r3, #0
 8017a02:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8017a06:	4591      	cmp	r9, r2
 8017a08:	d01a      	beq.n	8017a40 <_Color2Index_0+0x54>
 8017a0a:	3301      	adds	r3, #1
 8017a0c:	4543      	cmp	r3, r8
 8017a0e:	dbf8      	blt.n	8017a02 <_Color2Index_0+0x16>
 8017a10:	2500      	movs	r5, #0
 8017a12:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 8017a16:	462c      	mov	r4, r5
 8017a18:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8017a1c:	4648      	mov	r0, r9
 8017a1e:	f001 f840 	bl	8018aa2 <GUI_CalcColorDist>
 8017a22:	42b8      	cmp	r0, r7
 8017a24:	bf38      	it	cc
 8017a26:	4625      	movcc	r5, r4
 8017a28:	f104 0401 	add.w	r4, r4, #1
 8017a2c:	bf28      	it	cs
 8017a2e:	4638      	movcs	r0, r7
 8017a30:	4544      	cmp	r4, r8
 8017a32:	da02      	bge.n	8017a3a <_Color2Index_0+0x4e>
 8017a34:	4607      	mov	r7, r0
 8017a36:	e7ef      	b.n	8017a18 <_Color2Index_0+0x2c>
 8017a38:	4605      	mov	r5, r0
 8017a3a:	4628      	mov	r0, r5
 8017a3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a40:	4618      	mov	r0, r3
 8017a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08017a46 <_GetArrowPara>:
 8017a46:	b510      	push	{r4, lr}
 8017a48:	b121      	cbz	r1, 8017a54 <_GetArrowPara+0xe>
 8017a4a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8017a4e:	f9b0 1000 	ldrsh.w	r1, [r0]
 8017a52:	e003      	b.n	8017a5c <_GetArrowPara+0x16>
 8017a54:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8017a58:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8017a5c:	1a61      	subs	r1, r4, r1
 8017a5e:	3101      	adds	r1, #1
 8017a60:	1f0c      	subs	r4, r1, #4
 8017a62:	2003      	movs	r0, #3
 8017a64:	fb94 f0f0 	sdiv	r0, r4, r0
 8017a68:	6010      	str	r0, [r2, #0]
 8017a6a:	1a08      	subs	r0, r1, r0
 8017a6c:	eba1 0160 	sub.w	r1, r1, r0, asr #1
 8017a70:	3901      	subs	r1, #1
 8017a72:	6019      	str	r1, [r3, #0]
 8017a74:	bd10      	pop	{r4, pc}

08017a76 <_DrawGraspH>:
 8017a76:	b570      	push	{r4, r5, r6, lr}
 8017a78:	f9b0 3000 	ldrsh.w	r3, [r0]
 8017a7c:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8017a80:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 8017a84:	441e      	add	r6, r3
 8017a86:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8017a8a:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8017a8c:	1b5c      	subs	r4, r3, r5
 8017a8e:	3403      	adds	r4, #3
 8017a90:	10a4      	asrs	r4, r4, #2
 8017a92:	4425      	add	r5, r4
 8017a94:	1076      	asrs	r6, r6, #1
 8017a96:	1b1c      	subs	r4, r3, r4
 8017a98:	f7f7 fee6 	bl	800f868 <GUI_SetColor>
 8017a9c:	4630      	mov	r0, r6
 8017a9e:	4629      	mov	r1, r5
 8017aa0:	4622      	mov	r2, r4
 8017aa2:	f7f8 f94b 	bl	800fd3c <GUI_DrawVLine>
 8017aa6:	1cb0      	adds	r0, r6, #2
 8017aa8:	4629      	mov	r1, r5
 8017aaa:	4622      	mov	r2, r4
 8017aac:	f7f8 f946 	bl	800fd3c <GUI_DrawVLine>
 8017ab0:	1d30      	adds	r0, r6, #4
 8017ab2:	4629      	mov	r1, r5
 8017ab4:	4622      	mov	r2, r4
 8017ab6:	f7f8 f941 	bl	800fd3c <GUI_DrawVLine>
 8017aba:	1eb0      	subs	r0, r6, #2
 8017abc:	4629      	mov	r1, r5
 8017abe:	4622      	mov	r2, r4
 8017ac0:	f7f8 f93c 	bl	800fd3c <GUI_DrawVLine>
 8017ac4:	1f30      	subs	r0, r6, #4
 8017ac6:	4629      	mov	r1, r5
 8017ac8:	4622      	mov	r2, r4
 8017aca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017ace:	f7f8 b935 	b.w	800fd3c <GUI_DrawVLine>

08017ad2 <_DrawGraspV>:
 8017ad2:	b570      	push	{r4, r5, r6, lr}
 8017ad4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8017ad8:	f9b0 6006 	ldrsh.w	r6, [r0, #6]
 8017adc:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017ae0:	441e      	add	r6, r3
 8017ae2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017ae6:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8017ae8:	1b5c      	subs	r4, r3, r5
 8017aea:	3403      	adds	r4, #3
 8017aec:	10a4      	asrs	r4, r4, #2
 8017aee:	4425      	add	r5, r4
 8017af0:	1076      	asrs	r6, r6, #1
 8017af2:	1b1c      	subs	r4, r3, r4
 8017af4:	f7f7 feb8 	bl	800f868 <GUI_SetColor>
 8017af8:	4630      	mov	r0, r6
 8017afa:	4629      	mov	r1, r5
 8017afc:	4622      	mov	r2, r4
 8017afe:	f7f8 f93f 	bl	800fd80 <GUI_DrawHLine>
 8017b02:	1cb0      	adds	r0, r6, #2
 8017b04:	4629      	mov	r1, r5
 8017b06:	4622      	mov	r2, r4
 8017b08:	f7f8 f93a 	bl	800fd80 <GUI_DrawHLine>
 8017b0c:	1d30      	adds	r0, r6, #4
 8017b0e:	4629      	mov	r1, r5
 8017b10:	4622      	mov	r2, r4
 8017b12:	f7f8 f935 	bl	800fd80 <GUI_DrawHLine>
 8017b16:	1eb0      	subs	r0, r6, #2
 8017b18:	4629      	mov	r1, r5
 8017b1a:	4622      	mov	r2, r4
 8017b1c:	f7f8 f930 	bl	800fd80 <GUI_DrawHLine>
 8017b20:	1f30      	subs	r0, r6, #4
 8017b22:	4629      	mov	r1, r5
 8017b24:	4622      	mov	r2, r4
 8017b26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b2a:	f7f8 b929 	b.w	800fd80 <GUI_DrawHLine>

08017b2e <_DrawFrame>:
 8017b2e:	b538      	push	{r3, r4, r5, lr}
 8017b30:	4604      	mov	r4, r0
 8017b32:	6808      	ldr	r0, [r1, #0]
 8017b34:	460d      	mov	r5, r1
 8017b36:	f7f7 fe97 	bl	800f868 <GUI_SetColor>
 8017b3a:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017b3e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017b42:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8017b46:	3101      	adds	r1, #1
 8017b48:	3a01      	subs	r2, #1
 8017b4a:	f7f8 f919 	bl	800fd80 <GUI_DrawHLine>
 8017b4e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017b52:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017b56:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8017b5a:	3101      	adds	r1, #1
 8017b5c:	3a01      	subs	r2, #1
 8017b5e:	f7f8 f90f 	bl	800fd80 <GUI_DrawHLine>
 8017b62:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017b66:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017b6a:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017b6e:	3101      	adds	r1, #1
 8017b70:	3a01      	subs	r2, #1
 8017b72:	f7f8 f8e3 	bl	800fd3c <GUI_DrawVLine>
 8017b76:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017b7a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017b7e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8017b82:	3101      	adds	r1, #1
 8017b84:	3a01      	subs	r2, #1
 8017b86:	f7f8 f8d9 	bl	800fd3c <GUI_DrawVLine>
 8017b8a:	6868      	ldr	r0, [r5, #4]
 8017b8c:	f7f7 fe6c 	bl	800f868 <GUI_SetColor>
 8017b90:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8017b94:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017b98:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017b9c:	3001      	adds	r0, #1
 8017b9e:	3101      	adds	r1, #1
 8017ba0:	3a01      	subs	r2, #1
 8017ba2:	f7f8 f8ed 	bl	800fd80 <GUI_DrawHLine>
 8017ba6:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8017baa:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017bae:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017bb2:	3801      	subs	r0, #1
 8017bb4:	3101      	adds	r1, #1
 8017bb6:	3a01      	subs	r2, #1
 8017bb8:	f7f8 f8e2 	bl	800fd80 <GUI_DrawHLine>
 8017bbc:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017bc0:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017bc4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017bc8:	3001      	adds	r0, #1
 8017bca:	3102      	adds	r1, #2
 8017bcc:	3a02      	subs	r2, #2
 8017bce:	f7f8 f8b5 	bl	800fd3c <GUI_DrawVLine>
 8017bd2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8017bd6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017bda:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017bde:	3102      	adds	r1, #2
 8017be0:	3a02      	subs	r2, #2
 8017be2:	3801      	subs	r0, #1
 8017be4:	f7f8 f8aa 	bl	800fd3c <GUI_DrawVLine>
 8017be8:	68a8      	ldr	r0, [r5, #8]
 8017bea:	f7f7 fe3d 	bl	800f868 <GUI_SetColor>
 8017bee:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017bf2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017bf6:	f7ff fb1d 	bl	8017234 <GUI_DrawPixel>
 8017bfa:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017bfe:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8017c02:	f7ff fb17 	bl	8017234 <GUI_DrawPixel>
 8017c06:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8017c0a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017c0e:	f7ff fb11 	bl	8017234 <GUI_DrawPixel>
 8017c12:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8017c16:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8017c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017c1e:	f7ff bb09 	b.w	8017234 <GUI_DrawPixel>

08017c22 <_DrawBackgroundH>:
 8017c22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017c24:	4604      	mov	r4, r0
 8017c26:	460d      	mov	r5, r1
 8017c28:	f7ff ff81 	bl	8017b2e <_DrawFrame>
 8017c2c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017c30:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017c34:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017c38:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017c3c:	68ee      	ldr	r6, [r5, #12]
 8017c3e:	9600      	str	r6, [sp, #0]
 8017c40:	440b      	add	r3, r1
 8017c42:	692e      	ldr	r6, [r5, #16]
 8017c44:	9601      	str	r6, [sp, #4]
 8017c46:	3002      	adds	r0, #2
 8017c48:	3102      	adds	r1, #2
 8017c4a:	3a02      	subs	r2, #2
 8017c4c:	105b      	asrs	r3, r3, #1
 8017c4e:	f7ff fc01 	bl	8017454 <GUI_DrawGradientV>
 8017c52:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017c56:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017c5a:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017c5e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017c62:	696c      	ldr	r4, [r5, #20]
 8017c64:	9400      	str	r4, [sp, #0]
 8017c66:	4419      	add	r1, r3
 8017c68:	69ac      	ldr	r4, [r5, #24]
 8017c6a:	9401      	str	r4, [sp, #4]
 8017c6c:	1049      	asrs	r1, r1, #1
 8017c6e:	3002      	adds	r0, #2
 8017c70:	3101      	adds	r1, #1
 8017c72:	3a02      	subs	r2, #2
 8017c74:	3b02      	subs	r3, #2
 8017c76:	f7ff fbed 	bl	8017454 <GUI_DrawGradientV>
 8017c7a:	b002      	add	sp, #8
 8017c7c:	bd70      	pop	{r4, r5, r6, pc}

08017c7e <_DrawBackgroundV>:
 8017c7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017c80:	4604      	mov	r4, r0
 8017c82:	460d      	mov	r5, r1
 8017c84:	f7ff ff53 	bl	8017b2e <_DrawFrame>
 8017c88:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017c8c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017c90:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017c94:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017c98:	68ee      	ldr	r6, [r5, #12]
 8017c9a:	9600      	str	r6, [sp, #0]
 8017c9c:	4402      	add	r2, r0
 8017c9e:	692e      	ldr	r6, [r5, #16]
 8017ca0:	9601      	str	r6, [sp, #4]
 8017ca2:	3002      	adds	r0, #2
 8017ca4:	3102      	adds	r1, #2
 8017ca6:	1052      	asrs	r2, r2, #1
 8017ca8:	3b02      	subs	r3, #2
 8017caa:	f7ff fc05 	bl	80174b8 <GUI_DrawGradientH>
 8017cae:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017cb2:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017cb6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017cba:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017cbe:	696c      	ldr	r4, [r5, #20]
 8017cc0:	9400      	str	r4, [sp, #0]
 8017cc2:	4410      	add	r0, r2
 8017cc4:	69ac      	ldr	r4, [r5, #24]
 8017cc6:	9401      	str	r4, [sp, #4]
 8017cc8:	1040      	asrs	r0, r0, #1
 8017cca:	3001      	adds	r0, #1
 8017ccc:	3102      	adds	r1, #2
 8017cce:	3a02      	subs	r2, #2
 8017cd0:	3b02      	subs	r3, #2
 8017cd2:	f7ff fbf1 	bl	80174b8 <GUI_DrawGradientH>
 8017cd6:	b002      	add	sp, #8
 8017cd8:	bd70      	pop	{r4, r5, r6, pc}
	...

08017cdc <SCROLLBAR_DrawSkinFlex>:
 8017cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ce0:	4604      	mov	r4, r0
 8017ce2:	b08b      	sub	sp, #44	; 0x2c
 8017ce4:	6800      	ldr	r0, [r0, #0]
 8017ce6:	f7f8 feab 	bl	8010a40 <GUI_ALLOC_LockH>
 8017cea:	4607      	mov	r7, r0
 8017cec:	a80a      	add	r0, sp, #40	; 0x28
 8017cee:	ae06      	add	r6, sp, #24
 8017cf0:	f840 7d1c 	str.w	r7, [r0, #-28]!
 8017cf4:	f7f8 feb2 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8017cf8:	6923      	ldr	r3, [r4, #16]
 8017cfa:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017cfe:	6963      	ldr	r3, [r4, #20]
 8017d00:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017d04:	69a3      	ldr	r3, [r4, #24]
 8017d06:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017d0a:	69e3      	ldr	r3, [r4, #28]
 8017d0c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017d10:	6a25      	ldr	r5, [r4, #32]
 8017d12:	e896 0003 	ldmia.w	r6, {r0, r1}
 8017d16:	682b      	ldr	r3, [r5, #0]
 8017d18:	f10d 0820 	add.w	r8, sp, #32
 8017d1c:	e888 0003 	stmia.w	r8, {r0, r1}
 8017d20:	b153      	cbz	r3, 8017d38 <SCROLLBAR_DrawSkinFlex+0x5c>
 8017d22:	4638      	mov	r0, r7
 8017d24:	4631      	mov	r1, r6
 8017d26:	4632      	mov	r2, r6
 8017d28:	f7ef f9b7 	bl	800709a <WIDGET__RotateRect90>
 8017d2c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8017e6c <SCROLLBAR_DrawSkinFlex+0x190>
 8017d30:	f8df c13c 	ldr.w	ip, [pc, #316]	; 8017e70 <SCROLLBAR_DrawSkinFlex+0x194>
 8017d34:	4b49      	ldr	r3, [pc, #292]	; (8017e5c <SCROLLBAR_DrawSkinFlex+0x180>)
 8017d36:	e004      	b.n	8017d42 <SCROLLBAR_DrawSkinFlex+0x66>
 8017d38:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8017e74 <SCROLLBAR_DrawSkinFlex+0x198>
 8017d3c:	f8df c138 	ldr.w	ip, [pc, #312]	; 8017e78 <SCROLLBAR_DrawSkinFlex+0x19c>
 8017d40:	4b47      	ldr	r3, [pc, #284]	; (8017e60 <SCROLLBAR_DrawSkinFlex+0x184>)
 8017d42:	6862      	ldr	r2, [r4, #4]
 8017d44:	3a08      	subs	r2, #8
 8017d46:	2a11      	cmp	r2, #17
 8017d48:	f200 8083 	bhi.w	8017e52 <SCROLLBAR_DrawSkinFlex+0x176>
 8017d4c:	e8df f002 	tbb	[pc, r2]
 8017d50:	81815f13 	.word	0x81815f13
 8017d54:	81818134 	.word	0x81818134
 8017d58:	43813434 	.word	0x43813434
 8017d5c:	81818181 	.word	0x81818181
 8017d60:	0981      	.short	0x0981
 8017d62:	682b      	ldr	r3, [r5, #0]
 8017d64:	b113      	cbz	r3, 8017d6c <SCROLLBAR_DrawSkinFlex+0x90>
 8017d66:	69a0      	ldr	r0, [r4, #24]
 8017d68:	6923      	ldr	r3, [r4, #16]
 8017d6a:	e001      	b.n	8017d70 <SCROLLBAR_DrawSkinFlex+0x94>
 8017d6c:	69e0      	ldr	r0, [r4, #28]
 8017d6e:	6963      	ldr	r3, [r4, #20]
 8017d70:	1ac0      	subs	r0, r0, r3
 8017d72:	3001      	adds	r0, #1
 8017d74:	e06e      	b.n	8017e54 <SCROLLBAR_DrawSkinFlex+0x178>
 8017d76:	686a      	ldr	r2, [r5, #4]
 8017d78:	493a      	ldr	r1, [pc, #232]	; (8017e64 <SCROLLBAR_DrawSkinFlex+0x188>)
 8017d7a:	4c3b      	ldr	r4, [pc, #236]	; (8017e68 <SCROLLBAR_DrawSkinFlex+0x18c>)
 8017d7c:	2a02      	cmp	r2, #2
 8017d7e:	bf08      	it	eq
 8017d80:	460c      	moveq	r4, r1
 8017d82:	4630      	mov	r0, r6
 8017d84:	4621      	mov	r1, r4
 8017d86:	4798      	blx	r3
 8017d88:	6829      	ldr	r1, [r5, #0]
 8017d8a:	aa04      	add	r2, sp, #16
 8017d8c:	ab05      	add	r3, sp, #20
 8017d8e:	4640      	mov	r0, r8
 8017d90:	f7ff fe59 	bl	8017a46 <_GetArrowPara>
 8017d94:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017d96:	f7f7 fd67 	bl	800f868 <GUI_SetColor>
 8017d9a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8017d9e:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 8017da2:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8017da6:	1ad2      	subs	r2, r2, r3
 8017da8:	f04f 33ff 	mov.w	r3, #4294967295
 8017dac:	9300      	str	r3, [sp, #0]
 8017dae:	9b05      	ldr	r3, [sp, #20]
 8017db0:	3201      	adds	r2, #1
 8017db2:	4638      	mov	r0, r7
 8017db4:	4419      	add	r1, r3
 8017db6:	e048      	b.n	8017e4a <SCROLLBAR_DrawSkinFlex+0x16e>
 8017db8:	4c2b      	ldr	r4, [pc, #172]	; (8017e68 <SCROLLBAR_DrawSkinFlex+0x18c>)
 8017dba:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8017dbe:	69e5      	ldr	r5, [r4, #28]
 8017dc0:	9500      	str	r5, [sp, #0]
 8017dc2:	6a24      	ldr	r4, [r4, #32]
 8017dc4:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 8017dc8:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8017dcc:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8017dd0:	9401      	str	r4, [sp, #4]
 8017dd2:	47e0      	blx	ip
 8017dd4:	e03d      	b.n	8017e52 <SCROLLBAR_DrawSkinFlex+0x176>
 8017dd6:	686a      	ldr	r2, [r5, #4]
 8017dd8:	4922      	ldr	r1, [pc, #136]	; (8017e64 <SCROLLBAR_DrawSkinFlex+0x188>)
 8017dda:	4c23      	ldr	r4, [pc, #140]	; (8017e68 <SCROLLBAR_DrawSkinFlex+0x18c>)
 8017ddc:	2a03      	cmp	r2, #3
 8017dde:	bf08      	it	eq
 8017de0:	460c      	moveq	r4, r1
 8017de2:	4630      	mov	r0, r6
 8017de4:	4621      	mov	r1, r4
 8017de6:	4798      	blx	r3
 8017de8:	682b      	ldr	r3, [r5, #0]
 8017dea:	b123      	cbz	r3, 8017df6 <SCROLLBAR_DrawSkinFlex+0x11a>
 8017dec:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 8017df0:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8017df4:	e003      	b.n	8017dfe <SCROLLBAR_DrawSkinFlex+0x122>
 8017df6:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8017dfa:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8017dfe:	1ad3      	subs	r3, r2, r3
 8017e00:	3301      	adds	r3, #1
 8017e02:	2b0e      	cmp	r3, #14
 8017e04:	dd25      	ble.n	8017e52 <SCROLLBAR_DrawSkinFlex+0x176>
 8017e06:	4630      	mov	r0, r6
 8017e08:	4621      	mov	r1, r4
 8017e0a:	47c8      	blx	r9
 8017e0c:	e021      	b.n	8017e52 <SCROLLBAR_DrawSkinFlex+0x176>
 8017e0e:	686a      	ldr	r2, [r5, #4]
 8017e10:	4914      	ldr	r1, [pc, #80]	; (8017e64 <SCROLLBAR_DrawSkinFlex+0x188>)
 8017e12:	4c15      	ldr	r4, [pc, #84]	; (8017e68 <SCROLLBAR_DrawSkinFlex+0x18c>)
 8017e14:	2a01      	cmp	r2, #1
 8017e16:	bf08      	it	eq
 8017e18:	460c      	moveq	r4, r1
 8017e1a:	4630      	mov	r0, r6
 8017e1c:	4621      	mov	r1, r4
 8017e1e:	4798      	blx	r3
 8017e20:	6829      	ldr	r1, [r5, #0]
 8017e22:	aa04      	add	r2, sp, #16
 8017e24:	ab05      	add	r3, sp, #20
 8017e26:	4640      	mov	r0, r8
 8017e28:	f7ff fe0d 	bl	8017a46 <_GetArrowPara>
 8017e2c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017e2e:	f7f7 fd1b 	bl	800f868 <GUI_SetColor>
 8017e32:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8017e36:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 8017e3a:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 8017e3e:	1ad2      	subs	r2, r2, r3
 8017e40:	2301      	movs	r3, #1
 8017e42:	9300      	str	r3, [sp, #0]
 8017e44:	9b05      	ldr	r3, [sp, #20]
 8017e46:	4638      	mov	r0, r7
 8017e48:	1ac9      	subs	r1, r1, r3
 8017e4a:	1052      	asrs	r2, r2, #1
 8017e4c:	9b04      	ldr	r3, [sp, #16]
 8017e4e:	f7ef fa63 	bl	8007318 <WIDGET__DrawTriangle>
 8017e52:	2000      	movs	r0, #0
 8017e54:	b00b      	add	sp, #44	; 0x2c
 8017e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e5a:	bf00      	nop
 8017e5c:	08017c7f 	.word	0x08017c7f
 8017e60:	08017c23 	.word	0x08017c23
 8017e64:	200005cc 	.word	0x200005cc
 8017e68:	200005f8 	.word	0x200005f8
 8017e6c:	08017ad3 	.word	0x08017ad3
 8017e70:	080174b9 	.word	0x080174b9
 8017e74:	08017a77 	.word	0x08017a77
 8017e78:	08017455 	.word	0x08017455

08017e7c <_Create>:
 8017e7c:	b530      	push	{r4, r5, lr}
 8017e7e:	b08d      	sub	sp, #52	; 0x34
 8017e80:	4605      	mov	r5, r0
 8017e82:	f7f8 fddd 	bl	8010a40 <GUI_ALLOC_LockH>
 8017e86:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8017e88:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8017e8a:	9000      	str	r0, [sp, #0]
 8017e8c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8017e90:	9301      	str	r3, [sp, #4]
 8017e92:	4b07      	ldr	r3, [pc, #28]	; (8017eb0 <_Create+0x34>)
 8017e94:	6483      	str	r3, [r0, #72]	; 0x48
 8017e96:	4668      	mov	r0, sp
 8017e98:	f7f8 fde0 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8017e9c:	2300      	movs	r3, #0
 8017e9e:	9304      	str	r3, [sp, #16]
 8017ea0:	ab01      	add	r3, sp, #4
 8017ea2:	9503      	str	r5, [sp, #12]
 8017ea4:	930b      	str	r3, [sp, #44]	; 0x2c
 8017ea6:	a803      	add	r0, sp, #12
 8017ea8:	47a0      	blx	r4
 8017eaa:	b00d      	add	sp, #52	; 0x34
 8017eac:	bd30      	pop	{r4, r5, pc}
 8017eae:	bf00      	nop
 8017eb0:	08017eb5 	.word	0x08017eb5

08017eb4 <_CalcPositions>:
 8017eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017eb8:	b090      	sub	sp, #64	; 0x40
 8017eba:	4605      	mov	r5, r0
 8017ebc:	460c      	mov	r4, r1
 8017ebe:	f7f8 fdbf 	bl	8010a40 <GUI_ALLOC_LockH>
 8017ec2:	4603      	mov	r3, r0
 8017ec4:	9000      	str	r0, [sp, #0]
 8017ec6:	c803      	ldmia	r0, {r0, r1}
 8017ec8:	ae03      	add	r6, sp, #12
 8017eca:	e886 0003 	stmia.w	r6, {r0, r1}
 8017ece:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8017ed0:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8017ed4:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8017ed8:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8017edc:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8017ee0:	920e      	str	r2, [sp, #56]	; 0x38
 8017ee2:	f000 0008 	and.w	r0, r0, #8
 8017ee6:	2800      	cmp	r0, #0
 8017ee8:	bf0c      	ite	eq
 8017eea:	4608      	moveq	r0, r1
 8017eec:	4610      	movne	r0, r2
 8017eee:	61a0      	str	r0, [r4, #24]
 8017ef0:	bf0c      	ite	eq
 8017ef2:	2000      	moveq	r0, #0
 8017ef4:	2001      	movne	r0, #1
 8017ef6:	aa01      	add	r2, sp, #4
 8017ef8:	9001      	str	r0, [sp, #4]
 8017efa:	2019      	movs	r0, #25
 8017efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017efe:	9008      	str	r0, [sp, #32]
 8017f00:	9507      	str	r5, [sp, #28]
 8017f02:	920f      	str	r2, [sp, #60]	; 0x3c
 8017f04:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8017f08:	970c      	str	r7, [sp, #48]	; 0x30
 8017f0a:	910d      	str	r1, [sp, #52]	; 0x34
 8017f0c:	a807      	add	r0, sp, #28
 8017f0e:	4798      	blx	r3
 8017f10:	9b00      	ldr	r3, [sp, #0]
 8017f12:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8017f16:	2aff      	cmp	r2, #255	; 0xff
 8017f18:	4605      	mov	r5, r0
 8017f1a:	d111      	bne.n	8017f40 <_CalcPositions+0x8c>
 8017f1c:	6998      	ldr	r0, [r3, #24]
 8017f1e:	f7fc fdce 	bl	8014abe <WM_GetScrollbarV>
 8017f22:	b168      	cbz	r0, 8017f40 <_CalcPositions+0x8c>
 8017f24:	a905      	add	r1, sp, #20
 8017f26:	f7f3 f8b1 	bl	800b08c <WM_GetWindowRectEx>
 8017f2a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8017f2e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8017f32:	429a      	cmp	r2, r3
 8017f34:	d104      	bne.n	8017f40 <_CalcPositions+0x8c>
 8017f36:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8017f3a:	3b01      	subs	r3, #1
 8017f3c:	f8ad 3010 	strh.w	r3, [sp, #16]
 8017f40:	9b00      	ldr	r3, [sp, #0]
 8017f42:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8017f46:	2afe      	cmp	r2, #254	; 0xfe
 8017f48:	d111      	bne.n	8017f6e <_CalcPositions+0xba>
 8017f4a:	6998      	ldr	r0, [r3, #24]
 8017f4c:	f7fc fdb2 	bl	8014ab4 <WM_GetScrollbarH>
 8017f50:	b168      	cbz	r0, 8017f6e <_CalcPositions+0xba>
 8017f52:	a905      	add	r1, sp, #20
 8017f54:	f7f3 f89a 	bl	800b08c <WM_GetWindowRectEx>
 8017f58:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8017f5c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8017f60:	429a      	cmp	r2, r3
 8017f62:	d104      	bne.n	8017f6e <_CalcPositions+0xba>
 8017f64:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8017f68:	3b01      	subs	r3, #1
 8017f6a:	f8ad 3012 	strh.w	r3, [sp, #18]
 8017f6e:	427a      	negs	r2, r7
 8017f70:	4630      	mov	r0, r6
 8017f72:	f1c8 0100 	rsb	r1, r8, #0
 8017f76:	f7f7 fdcd 	bl	800fb14 <GUI_MoveRect>
 8017f7a:	9800      	ldr	r0, [sp, #0]
 8017f7c:	4631      	mov	r1, r6
 8017f7e:	f7f9 f99d 	bl	80112bc <SCROLLBAR__Rect2VRect>
 8017f82:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8017f86:	f9bd a010 	ldrsh.w	sl, [sp, #16]
 8017f8a:	9b00      	ldr	r3, [sp, #0]
 8017f8c:	ebc2 0a0a 	rsb	sl, r2, sl
 8017f90:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
 8017f94:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8017f96:	f10a 0601 	add.w	r6, sl, #1
 8017f9a:	eba6 0645 	sub.w	r6, r6, r5, lsl #1
 8017f9e:	4649      	mov	r1, r9
 8017fa0:	4370      	muls	r0, r6
 8017fa2:	f7fe ff4d 	bl	8016e40 <GUI__DivideRound32>
 8017fa6:	4b17      	ldr	r3, [pc, #92]	; (8018004 <_CalcPositions+0x150>)
 8017fa8:	f8c4 a014 	str.w	sl, [r4, #20]
 8017fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017fb0:	1c5a      	adds	r2, r3, #1
 8017fb2:	4282      	cmp	r2, r0
 8017fb4:	bfa8      	it	ge
 8017fb6:	1c98      	addge	r0, r3, #2
 8017fb8:	42b0      	cmp	r0, r6
 8017fba:	bfb4      	ite	lt
 8017fbc:	4607      	movlt	r7, r0
 8017fbe:	4637      	movge	r7, r6
 8017fc0:	ebc7 0806 	rsb	r8, r7, r6
 8017fc4:	442e      	add	r6, r5
 8017fc6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8017fca:	6126      	str	r6, [r4, #16]
 8017fcc:	ae10      	add	r6, sp, #64	; 0x40
 8017fce:	6023      	str	r3, [r4, #0]
 8017fd0:	1e6b      	subs	r3, r5, #1
 8017fd2:	6063      	str	r3, [r4, #4]
 8017fd4:	f856 3d40 	ldr.w	r3, [r6, #-64]!
 8017fd8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8017fda:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8017fdc:	fb00 f008 	mul.w	r0, r0, r8
 8017fe0:	ebc1 0109 	rsb	r1, r1, r9
 8017fe4:	f7fe ff2c 	bl	8016e40 <GUI__DivideRound32>
 8017fe8:	4428      	add	r0, r5
 8017fea:	19c5      	adds	r5, r0, r7
 8017fec:	3d01      	subs	r5, #1
 8017fee:	60a0      	str	r0, [r4, #8]
 8017ff0:	60e5      	str	r5, [r4, #12]
 8017ff2:	f8c4 801c 	str.w	r8, [r4, #28]
 8017ff6:	6227      	str	r7, [r4, #32]
 8017ff8:	4668      	mov	r0, sp
 8017ffa:	f7f8 fd2f 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8017ffe:	b010      	add	sp, #64	; 0x40
 8018000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018004:	2000032a 	.word	0x2000032a

08018008 <_Paint>:
 8018008:	b570      	push	{r4, r5, r6, lr}
 801800a:	b098      	sub	sp, #96	; 0x60
 801800c:	4606      	mov	r6, r0
 801800e:	f7f8 fd17 	bl	8010a40 <GUI_ALLOC_LockH>
 8018012:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8018014:	9305      	str	r3, [sp, #20]
 8018016:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8018018:	6c04      	ldr	r4, [r0, #64]	; 0x40
 801801a:	9001      	str	r0, [sp, #4]
 801801c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8018020:	a906      	add	r1, sp, #24
 8018022:	4605      	mov	r5, r0
 8018024:	4630      	mov	r0, r6
 8018026:	9304      	str	r3, [sp, #16]
 8018028:	f7ff ff44 	bl	8017eb4 <_CalcPositions>
 801802c:	a801      	add	r0, sp, #4
 801802e:	f7f8 fd15 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8018032:	a902      	add	r1, sp, #8
 8018034:	4628      	mov	r0, r5
 8018036:	f7ef f842 	bl	80070be <WIDGET__GetClientRect>
 801803a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801803e:	9314      	str	r3, [sp, #80]	; 0x50
 8018040:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018044:	9316      	str	r3, [sp, #88]	; 0x58
 8018046:	ab04      	add	r3, sp, #16
 8018048:	9317      	str	r3, [sp, #92]	; 0x5c
 801804a:	2308      	movs	r3, #8
 801804c:	9310      	str	r3, [sp, #64]	; 0x40
 801804e:	9b06      	ldr	r3, [sp, #24]
 8018050:	9313      	str	r3, [sp, #76]	; 0x4c
 8018052:	9b07      	ldr	r3, [sp, #28]
 8018054:	9315      	str	r3, [sp, #84]	; 0x54
 8018056:	960f      	str	r6, [sp, #60]	; 0x3c
 8018058:	a80f      	add	r0, sp, #60	; 0x3c
 801805a:	47a0      	blx	r4
 801805c:	2310      	movs	r3, #16
 801805e:	9310      	str	r3, [sp, #64]	; 0x40
 8018060:	9b07      	ldr	r3, [sp, #28]
 8018062:	3301      	adds	r3, #1
 8018064:	9313      	str	r3, [sp, #76]	; 0x4c
 8018066:	9b08      	ldr	r3, [sp, #32]
 8018068:	3b01      	subs	r3, #1
 801806a:	9315      	str	r3, [sp, #84]	; 0x54
 801806c:	a80f      	add	r0, sp, #60	; 0x3c
 801806e:	47a0      	blx	r4
 8018070:	2311      	movs	r3, #17
 8018072:	9310      	str	r3, [sp, #64]	; 0x40
 8018074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018076:	3301      	adds	r3, #1
 8018078:	9313      	str	r3, [sp, #76]	; 0x4c
 801807a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801807c:	3b01      	subs	r3, #1
 801807e:	9315      	str	r3, [sp, #84]	; 0x54
 8018080:	a80f      	add	r0, sp, #60	; 0x3c
 8018082:	47a0      	blx	r4
 8018084:	2313      	movs	r3, #19
 8018086:	9310      	str	r3, [sp, #64]	; 0x40
 8018088:	9b08      	ldr	r3, [sp, #32]
 801808a:	9313      	str	r3, [sp, #76]	; 0x4c
 801808c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801808e:	9315      	str	r3, [sp, #84]	; 0x54
 8018090:	a80f      	add	r0, sp, #60	; 0x3c
 8018092:	47a0      	blx	r4
 8018094:	2309      	movs	r3, #9
 8018096:	9310      	str	r3, [sp, #64]	; 0x40
 8018098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801809a:	9313      	str	r3, [sp, #76]	; 0x4c
 801809c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801809e:	9315      	str	r3, [sp, #84]	; 0x54
 80180a0:	a80f      	add	r0, sp, #60	; 0x3c
 80180a2:	47a0      	blx	r4
 80180a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80180a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80180a8:	429a      	cmp	r2, r3
 80180aa:	d006      	beq.n	80180ba <_Paint+0xb2>
 80180ac:	210c      	movs	r1, #12
 80180ae:	3201      	adds	r2, #1
 80180b0:	9110      	str	r1, [sp, #64]	; 0x40
 80180b2:	9213      	str	r2, [sp, #76]	; 0x4c
 80180b4:	9315      	str	r3, [sp, #84]	; 0x54
 80180b6:	a80f      	add	r0, sp, #60	; 0x3c
 80180b8:	47a0      	blx	r4
 80180ba:	b018      	add	sp, #96	; 0x60
 80180bc:	bd70      	pop	{r4, r5, r6, pc}

080180be <SCROLLBAR_SetWidth>:
 80180be:	b538      	push	{r3, r4, r5, lr}
 80180c0:	4604      	mov	r4, r0
 80180c2:	b130      	cbz	r0, 80180d2 <SCROLLBAR_SetWidth+0x14>
 80180c4:	f000 fd15 	bl	8018af2 <WIDGET_SetWidth>
 80180c8:	4605      	mov	r5, r0
 80180ca:	4620      	mov	r0, r4
 80180cc:	f7f9 f90e 	bl	80112ec <SCROLLBAR__InvalidatePartner>
 80180d0:	e000      	b.n	80180d4 <SCROLLBAR_SetWidth+0x16>
 80180d2:	4605      	mov	r5, r0
 80180d4:	4628      	mov	r0, r5
 80180d6:	bd38      	pop	{r3, r4, r5, pc}

080180d8 <SCROLLBAR_SetColor>:
 80180d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80180da:	460c      	mov	r4, r1
 80180dc:	4616      	mov	r6, r2
 80180de:	4605      	mov	r5, r0
 80180e0:	b198      	cbz	r0, 801810a <SCROLLBAR_SetColor+0x32>
 80180e2:	f7f8 fcad 	bl	8010a40 <GUI_ALLOC_LockH>
 80180e6:	2c02      	cmp	r4, #2
 80180e8:	9001      	str	r0, [sp, #4]
 80180ea:	d809      	bhi.n	8018100 <SCROLLBAR_SetColor+0x28>
 80180ec:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80180f0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80180f2:	42b4      	cmp	r4, r6
 80180f4:	d005      	beq.n	8018102 <SCROLLBAR_SetColor+0x2a>
 80180f6:	6346      	str	r6, [r0, #52]	; 0x34
 80180f8:	4628      	mov	r0, r5
 80180fa:	f7f3 fdf6 	bl	800bcea <WM_InvalidateWindow>
 80180fe:	e000      	b.n	8018102 <SCROLLBAR_SetColor+0x2a>
 8018100:	2400      	movs	r4, #0
 8018102:	a801      	add	r0, sp, #4
 8018104:	f7f8 fcaa 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8018108:	e000      	b.n	801810c <SCROLLBAR_SetColor+0x34>
 801810a:	4604      	mov	r4, r0
 801810c:	4620      	mov	r0, r4
 801810e:	b002      	add	sp, #8
 8018110:	bd70      	pop	{r4, r5, r6, pc}
	...

08018114 <SCROLLBAR_GetDefaultWidth>:
 8018114:	4b01      	ldr	r3, [pc, #4]	; (801811c <SCROLLBAR_GetDefaultWidth+0x8>)
 8018116:	f9b3 0000 	ldrsh.w	r0, [r3]
 801811a:	4770      	bx	lr
 801811c:	20000328 	.word	0x20000328

08018120 <WM__SendMessageIfEnabled>:
 8018120:	b538      	push	{r3, r4, r5, lr}
 8018122:	4604      	mov	r4, r0
 8018124:	460d      	mov	r5, r1
 8018126:	f7f2 faa2 	bl	800a66e <WM__IsEnabled>
 801812a:	b128      	cbz	r0, 8018138 <WM__SendMessageIfEnabled+0x18>
 801812c:	4620      	mov	r0, r4
 801812e:	4629      	mov	r1, r5
 8018130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018134:	f7f2 ba74 	b.w	800a620 <WM__SendMessage>
 8018138:	bd38      	pop	{r3, r4, r5, pc}

0801813a <WM__ForEachDesc>:
 801813a:	b570      	push	{r4, r5, r6, lr}
 801813c:	460d      	mov	r5, r1
 801813e:	4616      	mov	r6, r2
 8018140:	f7f8 fc74 	bl	8010a2c <GUI_ALLOC_h2p>
 8018144:	69c4      	ldr	r4, [r0, #28]
 8018146:	b164      	cbz	r4, 8018162 <WM__ForEachDesc+0x28>
 8018148:	4620      	mov	r0, r4
 801814a:	4631      	mov	r1, r6
 801814c:	47a8      	blx	r5
 801814e:	4620      	mov	r0, r4
 8018150:	4629      	mov	r1, r5
 8018152:	4632      	mov	r2, r6
 8018154:	f7ff fff1 	bl	801813a <WM__ForEachDesc>
 8018158:	4620      	mov	r0, r4
 801815a:	f7f8 fc67 	bl	8010a2c <GUI_ALLOC_h2p>
 801815e:	6a04      	ldr	r4, [r0, #32]
 8018160:	e7f1      	b.n	8018146 <WM__ForEachDesc+0xc>
 8018162:	bd70      	pop	{r4, r5, r6, pc}

08018164 <LCD_GetPixelColor>:
 8018164:	b508      	push	{r3, lr}
 8018166:	f000 f805 	bl	8018174 <LCD_GetPixelIndex>
 801816a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801816e:	f7f6 bd25 	b.w	800ebbc <LCD_Index2Color>
	...

08018174 <LCD_GetPixelIndex>:
 8018174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018176:	4f14      	ldr	r7, [pc, #80]	; (80181c8 <LCD_GetPixelIndex+0x54>)
 8018178:	4e14      	ldr	r6, [pc, #80]	; (80181cc <LCD_GetPixelIndex+0x58>)
 801817a:	683b      	ldr	r3, [r7, #0]
 801817c:	7c5b      	ldrb	r3, [r3, #17]
 801817e:	4605      	mov	r5, r0
 8018180:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8018184:	68c3      	ldr	r3, [r0, #12]
 8018186:	460c      	mov	r4, r1
 8018188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801818a:	4669      	mov	r1, sp
 801818c:	4798      	blx	r3
 801818e:	f9bd 3000 	ldrsh.w	r3, [sp]
 8018192:	429d      	cmp	r5, r3
 8018194:	db15      	blt.n	80181c2 <LCD_GetPixelIndex+0x4e>
 8018196:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801819a:	429d      	cmp	r5, r3
 801819c:	dc11      	bgt.n	80181c2 <LCD_GetPixelIndex+0x4e>
 801819e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80181a2:	429c      	cmp	r4, r3
 80181a4:	db0d      	blt.n	80181c2 <LCD_GetPixelIndex+0x4e>
 80181a6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80181aa:	429c      	cmp	r4, r3
 80181ac:	dc09      	bgt.n	80181c2 <LCD_GetPixelIndex+0x4e>
 80181ae:	683b      	ldr	r3, [r7, #0]
 80181b0:	7c5b      	ldrb	r3, [r3, #17]
 80181b2:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 80181b6:	68c3      	ldr	r3, [r0, #12]
 80181b8:	4629      	mov	r1, r5
 80181ba:	695b      	ldr	r3, [r3, #20]
 80181bc:	4622      	mov	r2, r4
 80181be:	4798      	blx	r3
 80181c0:	e000      	b.n	80181c4 <LCD_GetPixelIndex+0x50>
 80181c2:	2000      	movs	r0, #0
 80181c4:	b003      	add	sp, #12
 80181c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80181c8:	20000308 	.word	0x20000308
 80181cc:	20021c0c 	.word	0x20021c0c

080181d0 <LCD_GetNumLayers>:
 80181d0:	b510      	push	{r4, lr}
 80181d2:	2000      	movs	r0, #0
 80181d4:	f7f7 ff0c 	bl	800fff0 <GUI_DEVICE__GetpDriver>
 80181d8:	1c04      	adds	r4, r0, #0
 80181da:	f04f 0001 	mov.w	r0, #1
 80181de:	bf18      	it	ne
 80181e0:	2401      	movne	r4, #1
 80181e2:	f7f7 ff05 	bl	800fff0 <GUI_DEVICE__GetpDriver>
 80181e6:	b100      	cbz	r0, 80181ea <LCD_GetNumLayers+0x1a>
 80181e8:	3401      	adds	r4, #1
 80181ea:	4620      	mov	r0, r4
 80181ec:	bd10      	pop	{r4, pc}
	...

080181f0 <LCD_GetBkColorIndex>:
 80181f0:	4b02      	ldr	r3, [pc, #8]	; (80181fc <LCD_GetBkColorIndex+0xc>)
 80181f2:	681b      	ldr	r3, [r3, #0]
 80181f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80181f6:	6818      	ldr	r0, [r3, #0]
 80181f8:	4770      	bx	lr
 80181fa:	bf00      	nop
 80181fc:	20000308 	.word	0x20000308

08018200 <LCD_GetColorIndex>:
 8018200:	4b02      	ldr	r3, [pc, #8]	; (801820c <LCD_GetColorIndex+0xc>)
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018206:	6818      	ldr	r0, [r3, #0]
 8018208:	4770      	bx	lr
 801820a:	bf00      	nop
 801820c:	20000308 	.word	0x20000308

08018210 <GUI__sqrt32>:
 8018210:	b510      	push	{r4, lr}
 8018212:	2110      	movs	r1, #16
 8018214:	2300      	movs	r3, #0
 8018216:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801821a:	189c      	adds	r4, r3, r2
 801821c:	4284      	cmp	r4, r0
 801821e:	bf9c      	itt	ls
 8018220:	18a3      	addls	r3, r4, r2
 8018222:	ebc4 0000 	rsbls	r0, r4, r0
 8018226:	3901      	subs	r1, #1
 8018228:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801822c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018230:	d1f3      	bne.n	801821a <GUI__sqrt32+0xa>
 8018232:	4618      	mov	r0, r3
 8018234:	bd10      	pop	{r4, pc}

08018236 <GUI__HandleEOLine>:
 8018236:	6803      	ldr	r3, [r0, #0]
 8018238:	781a      	ldrb	r2, [r3, #0]
 801823a:	b122      	cbz	r2, 8018246 <GUI__HandleEOLine+0x10>
 801823c:	2a0a      	cmp	r2, #10
 801823e:	d104      	bne.n	801824a <GUI__HandleEOLine+0x14>
 8018240:	3301      	adds	r3, #1
 8018242:	6003      	str	r3, [r0, #0]
 8018244:	e001      	b.n	801824a <GUI__HandleEOLine+0x14>
 8018246:	2001      	movs	r0, #1
 8018248:	4770      	bx	lr
 801824a:	2000      	movs	r0, #0
 801824c:	4770      	bx	lr

0801824e <_CreateBuffer>:
 801824e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018250:	6943      	ldr	r3, [r0, #20]
 8018252:	4605      	mov	r5, r0
 8018254:	8818      	ldrh	r0, [r3, #0]
 8018256:	300d      	adds	r0, #13
 8018258:	0080      	lsls	r0, r0, #2
 801825a:	460e      	mov	r6, r1
 801825c:	f7f8 fe48 	bl	8010ef0 <GUI_ALLOC_AllocNoInit>
 8018260:	4607      	mov	r7, r0
 8018262:	b908      	cbnz	r0, 8018268 <_CreateBuffer+0x1a>
 8018264:	2000      	movs	r0, #0
 8018266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018268:	f7f8 fbea 	bl	8010a40 <GUI_ALLOC_LockH>
 801826c:	682b      	ldr	r3, [r5, #0]
 801826e:	4604      	mov	r4, r0
 8018270:	6998      	ldr	r0, [r3, #24]
 8018272:	f7f7 febd 	bl	800fff0 <GUI_DEVICE__GetpDriver>
 8018276:	2800      	cmp	r0, #0
 8018278:	d0f4      	beq.n	8018264 <_CreateBuffer+0x16>
 801827a:	68c3      	ldr	r3, [r0, #12]
 801827c:	2108      	movs	r1, #8
 801827e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018280:	4798      	blx	r3
 8018282:	2802      	cmp	r0, #2
 8018284:	dd0b      	ble.n	801829e <_CreateBuffer+0x50>
 8018286:	2804      	cmp	r0, #4
 8018288:	dd06      	ble.n	8018298 <_CreateBuffer+0x4a>
 801828a:	2808      	cmp	r0, #8
 801828c:	dd06      	ble.n	801829c <_CreateBuffer+0x4e>
 801828e:	2811      	cmp	r0, #17
 8018290:	bfb4      	ite	lt
 8018292:	2010      	movlt	r0, #16
 8018294:	2020      	movge	r0, #32
 8018296:	e002      	b.n	801829e <_CreateBuffer+0x50>
 8018298:	2004      	movs	r0, #4
 801829a:	e000      	b.n	801829e <_CreateBuffer+0x50>
 801829c:	2008      	movs	r0, #8
 801829e:	2808      	cmp	r0, #8
 80182a0:	61a0      	str	r0, [r4, #24]
 80182a2:	dd04      	ble.n	80182ae <_CreateBuffer+0x60>
 80182a4:	2810      	cmp	r0, #16
 80182a6:	bfcc      	ite	gt
 80182a8:	2304      	movgt	r3, #4
 80182aa:	2302      	movle	r3, #2
 80182ac:	e000      	b.n	80182b0 <_CreateBuffer+0x62>
 80182ae:	2301      	movs	r3, #1
 80182b0:	696a      	ldr	r2, [r5, #20]
 80182b2:	6123      	str	r3, [r4, #16]
 80182b4:	8812      	ldrh	r2, [r2, #0]
 80182b6:	61e2      	str	r2, [r4, #28]
 80182b8:	4353      	muls	r3, r2
 80182ba:	6163      	str	r3, [r4, #20]
 80182bc:	f7f8 fd6a 	bl	8010d94 <GUI_ALLOC_GetMaxSize>
 80182c0:	6963      	ldr	r3, [r4, #20]
 80182c2:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
 80182c6:	4283      	cmp	r3, r0
 80182c8:	f04f 0200 	mov.w	r2, #0
 80182cc:	bfc8      	it	gt
 80182ce:	6160      	strgt	r0, [r4, #20]
 80182d0:	2e01      	cmp	r6, #1
 80182d2:	60e2      	str	r2, [r4, #12]
 80182d4:	bf18      	it	ne
 80182d6:	69e2      	ldrne	r2, [r4, #28]
 80182d8:	60a7      	str	r7, [r4, #8]
 80182da:	bf18      	it	ne
 80182dc:	f102 4280 	addne.w	r2, r2, #1073741824	; 0x40000000
 80182e0:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80182e4:	bf18      	it	ne
 80182e6:	f102 32ff 	addne.w	r2, r2, #4294967295
 80182ea:	6023      	str	r3, [r4, #0]
 80182ec:	bf18      	it	ne
 80182ee:	eb03 0382 	addne.w	r3, r3, r2, lsl #2
 80182f2:	6063      	str	r3, [r4, #4]
 80182f4:	4620      	mov	r0, r4
 80182f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080182f8 <_GetBkIndex.isra.0>:
 80182f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182fc:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 8018300:	4540      	cmp	r0, r8
 8018302:	4606      	mov	r6, r0
 8018304:	460d      	mov	r5, r1
 8018306:	4691      	mov	r9, r2
 8018308:	461c      	mov	r4, r3
 801830a:	da04      	bge.n	8018316 <_GetBkIndex.isra.0+0x1e>
 801830c:	f8d9 0000 	ldr.w	r0, [r9]
 8018310:	bb28      	cbnz	r0, 801835e <_GetBkIndex.isra.0+0x66>
 8018312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018316:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801831a:	4298      	cmp	r0, r3
 801831c:	dcf6      	bgt.n	801830c <_GetBkIndex.isra.0+0x14>
 801831e:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
 8018322:	42b9      	cmp	r1, r7
 8018324:	dbf2      	blt.n	801830c <_GetBkIndex.isra.0+0x14>
 8018326:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801832a:	4299      	cmp	r1, r3
 801832c:	dcee      	bgt.n	801830c <_GetBkIndex.isra.0+0x14>
 801832e:	ebc8 0800 	rsb	r8, r8, r0
 8018332:	1bcf      	subs	r7, r1, r7
 8018334:	6960      	ldr	r0, [r4, #20]
 8018336:	4641      	mov	r1, r8
 8018338:	463a      	mov	r2, r7
 801833a:	f000 fba5 	bl	8018a88 <GUI_GetBitmapPixelIndex>
 801833e:	2800      	cmp	r0, #0
 8018340:	d0e4      	beq.n	801830c <_GetBkIndex.isra.0+0x14>
 8018342:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8018346:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801834a:	1a8a      	subs	r2, r1, r2
 801834c:	fb02 7707 	mla	r7, r2, r7, r7
 8018350:	f104 0320 	add.w	r3, r4, #32
 8018354:	44b8      	add	r8, r7
 8018356:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801835a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801835e:	68c3      	ldr	r3, [r0, #12]
 8018360:	4631      	mov	r1, r6
 8018362:	695b      	ldr	r3, [r3, #20]
 8018364:	462a      	mov	r2, r5
 8018366:	4798      	blx	r3
 8018368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801836c <_GetBkIndexAlpha.isra.2>:
 801836c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018370:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 8018374:	42b0      	cmp	r0, r6
 8018376:	4680      	mov	r8, r0
 8018378:	460f      	mov	r7, r1
 801837a:	4691      	mov	r9, r2
 801837c:	461d      	mov	r5, r3
 801837e:	db14      	blt.n	80183aa <_GetBkIndexAlpha.isra.2+0x3e>
 8018380:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8018384:	4298      	cmp	r0, r3
 8018386:	dc10      	bgt.n	80183aa <_GetBkIndexAlpha.isra.2+0x3e>
 8018388:	f9b5 4006 	ldrsh.w	r4, [r5, #6]
 801838c:	42a1      	cmp	r1, r4
 801838e:	db0c      	blt.n	80183aa <_GetBkIndexAlpha.isra.2+0x3e>
 8018390:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8018394:	4299      	cmp	r1, r3
 8018396:	dc08      	bgt.n	80183aa <_GetBkIndexAlpha.isra.2+0x3e>
 8018398:	1b86      	subs	r6, r0, r6
 801839a:	6968      	ldr	r0, [r5, #20]
 801839c:	1b0c      	subs	r4, r1, r4
 801839e:	b130      	cbz	r0, 80183ae <_GetBkIndexAlpha.isra.2+0x42>
 80183a0:	4631      	mov	r1, r6
 80183a2:	4622      	mov	r2, r4
 80183a4:	f000 fb70 	bl	8018a88 <GUI_GetBitmapPixelIndex>
 80183a8:	e003      	b.n	80183b2 <_GetBkIndexAlpha.isra.2+0x46>
 80183aa:	2400      	movs	r4, #0
 80183ac:	4626      	mov	r6, r4
 80183ae:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80183b2:	0e00      	lsrs	r0, r0, #24
 80183b4:	28ff      	cmp	r0, #255	; 0xff
 80183b6:	d109      	bne.n	80183cc <_GetBkIndexAlpha.isra.2+0x60>
 80183b8:	f8d9 0000 	ldr.w	r0, [r9]
 80183bc:	b190      	cbz	r0, 80183e4 <_GetBkIndexAlpha.isra.2+0x78>
 80183be:	68c3      	ldr	r3, [r0, #12]
 80183c0:	4641      	mov	r1, r8
 80183c2:	695b      	ldr	r3, [r3, #20]
 80183c4:	463a      	mov	r2, r7
 80183c6:	4798      	blx	r3
 80183c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80183cc:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80183d0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80183d4:	1a8a      	subs	r2, r1, r2
 80183d6:	fb02 4404 	mla	r4, r2, r4, r4
 80183da:	f105 0320 	add.w	r3, r5, #32
 80183de:	4426      	add	r6, r4
 80183e0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80183e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080183e8 <_GetDeviceRect>:
 80183e8:	b538      	push	{r3, r4, r5, lr}
 80183ea:	4a0c      	ldr	r2, [pc, #48]	; (801841c <_GetDeviceRect+0x34>)
 80183ec:	6983      	ldr	r3, [r0, #24]
 80183ee:	56d2      	ldrsb	r2, [r2, r3]
 80183f0:	2a01      	cmp	r2, #1
 80183f2:	4605      	mov	r5, r0
 80183f4:	460c      	mov	r4, r1
 80183f6:	dd0d      	ble.n	8018414 <_GetDeviceRect+0x2c>
 80183f8:	2200      	movs	r2, #0
 80183fa:	804a      	strh	r2, [r1, #2]
 80183fc:	800a      	strh	r2, [r1, #0]
 80183fe:	4618      	mov	r0, r3
 8018400:	f7f6 f80c 	bl	800e41c <LCD_GetXSizeEx>
 8018404:	3801      	subs	r0, #1
 8018406:	80a0      	strh	r0, [r4, #4]
 8018408:	69a8      	ldr	r0, [r5, #24]
 801840a:	f7f6 f80a 	bl	800e422 <LCD_GetYSizeEx>
 801840e:	3801      	subs	r0, #1
 8018410:	80e0      	strh	r0, [r4, #6]
 8018412:	bd38      	pop	{r3, r4, r5, pc}
 8018414:	68c3      	ldr	r3, [r0, #12]
 8018416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018418:	4798      	blx	r3
 801841a:	bd38      	pop	{r3, r4, r5, pc}
 801841c:	20021be0 	.word	0x20021be0

08018420 <_FlushBuffer.isra.5>:
 8018420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018424:	460c      	mov	r4, r1
 8018426:	68c9      	ldr	r1, [r1, #12]
 8018428:	b086      	sub	sp, #24
 801842a:	2900      	cmp	r1, #0
 801842c:	d02f      	beq.n	801848e <_FlushBuffer.isra.5+0x6e>
 801842e:	6807      	ldr	r7, [r0, #0]
 8018430:	2f00      	cmp	r7, #0
 8018432:	d02e      	beq.n	8018492 <_FlushBuffer.isra.5+0x72>
 8018434:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 8018438:	6822      	ldr	r2, [r4, #0]
 801843a:	2b01      	cmp	r3, #1
 801843c:	d104      	bne.n	8018448 <_FlushBuffer.isra.5+0x28>
 801843e:	4616      	mov	r6, r2
 8018440:	6062      	str	r2, [r4, #4]
 8018442:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 8018446:	e00a      	b.n	801845e <_FlushBuffer.isra.5+0x3e>
 8018448:	69e3      	ldr	r3, [r4, #28]
 801844a:	6866      	ldr	r6, [r4, #4]
 801844c:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8018450:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018454:	3b01      	subs	r3, #1
 8018456:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801845a:	3604      	adds	r6, #4
 801845c:	6063      	str	r3, [r4, #4]
 801845e:	4630      	mov	r0, r6
 8018460:	69a2      	ldr	r2, [r4, #24]
 8018462:	f7fe fcfa 	bl	8016e5a <GUI__CompactPixelIndices>
 8018466:	2301      	movs	r3, #1
 8018468:	68fa      	ldr	r2, [r7, #12]
 801846a:	9300      	str	r3, [sp, #0]
 801846c:	69a3      	ldr	r3, [r4, #24]
 801846e:	9301      	str	r3, [sp, #4]
 8018470:	2500      	movs	r5, #0
 8018472:	6963      	ldr	r3, [r4, #20]
 8018474:	9302      	str	r3, [sp, #8]
 8018476:	9603      	str	r6, [sp, #12]
 8018478:	9504      	str	r5, [sp, #16]
 801847a:	9505      	str	r5, [sp, #20]
 801847c:	6856      	ldr	r6, [r2, #4]
 801847e:	68e3      	ldr	r3, [r4, #12]
 8018480:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8018482:	4638      	mov	r0, r7
 8018484:	4641      	mov	r1, r8
 8018486:	47b0      	blx	r6
 8018488:	60e5      	str	r5, [r4, #12]
 801848a:	4628      	mov	r0, r5
 801848c:	e002      	b.n	8018494 <_FlushBuffer.isra.5+0x74>
 801848e:	4608      	mov	r0, r1
 8018490:	e000      	b.n	8018494 <_FlushBuffer.isra.5+0x74>
 8018492:	2001      	movs	r0, #1
 8018494:	b006      	add	sp, #24
 8018496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801849a <_SetBkIndexBuffered>:
 801849a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801849c:	9c06      	ldr	r4, [sp, #24]
 801849e:	460d      	mov	r5, r1
 80184a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80184a2:	428d      	cmp	r5, r1
 80184a4:	4606      	mov	r6, r0
 80184a6:	4617      	mov	r7, r2
 80184a8:	d105      	bne.n	80184b6 <_SetBkIndexBuffered+0x1c>
 80184aa:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 80184ae:	6a21      	ldr	r1, [r4, #32]
 80184b0:	4411      	add	r1, r2
 80184b2:	4288      	cmp	r0, r1
 80184b4:	d003      	beq.n	80184be <_SetBkIndexBuffered+0x24>
 80184b6:	4618      	mov	r0, r3
 80184b8:	4621      	mov	r1, r4
 80184ba:	f7ff ffb1 	bl	8018420 <_FlushBuffer.isra.5>
 80184be:	6863      	ldr	r3, [r4, #4]
 80184c0:	601f      	str	r7, [r3, #0]
 80184c2:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 80184c6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80184ca:	6063      	str	r3, [r4, #4]
 80184cc:	68e3      	ldr	r3, [r4, #12]
 80184ce:	b90b      	cbnz	r3, 80184d4 <_SetBkIndexBuffered+0x3a>
 80184d0:	62a6      	str	r6, [r4, #40]	; 0x28
 80184d2:	62e5      	str	r5, [r4, #44]	; 0x2c
 80184d4:	3301      	adds	r3, #1
 80184d6:	60e3      	str	r3, [r4, #12]
 80184d8:	6226      	str	r6, [r4, #32]
 80184da:	6265      	str	r5, [r4, #36]	; 0x24
 80184dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080184de <_ReleaseBuffer.isra.6>:
 80184de:	b513      	push	{r0, r1, r4, lr}
 80184e0:	9101      	str	r1, [sp, #4]
 80184e2:	f7ff ff9d 	bl	8018420 <_FlushBuffer.isra.5>
 80184e6:	a802      	add	r0, sp, #8
 80184e8:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 80184ec:	6894      	ldr	r4, [r2, #8]
 80184ee:	f7f8 fab5 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80184f2:	4620      	mov	r0, r4
 80184f4:	f7f8 fade 	bl	8010ab4 <GUI_ALLOC_Free>
 80184f8:	b002      	add	sp, #8
 80184fa:	bd10      	pop	{r4, pc}

080184fc <GUI_SPRITE_SetPosition>:
 80184fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018500:	b0a7      	sub	sp, #156	; 0x9c
 8018502:	9116      	str	r1, [sp, #88]	; 0x58
 8018504:	9217      	str	r2, [sp, #92]	; 0x5c
 8018506:	2800      	cmp	r0, #0
 8018508:	f000 8275 	beq.w	80189f6 <GUI_SPRITE_SetPosition+0x4fa>
 801850c:	f7f8 fa98 	bl	8010a40 <GUI_ALLOC_LockH>
 8018510:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018512:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018516:	6801      	ldr	r1, [r0, #0]
 8018518:	9023      	str	r0, [sp, #140]	; 0x8c
 801851a:	429a      	cmp	r2, r3
 801851c:	9106      	str	r1, [sp, #24]
 801851e:	d106      	bne.n	801852e <GUI_SPRITE_SetPosition+0x32>
 8018520:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8018524:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8018528:	459e      	cmp	lr, r3
 801852a:	f000 8239 	beq.w	80189a0 <GUI_SPRITE_SetPosition+0x4a4>
 801852e:	2000      	movs	r0, #0
 8018530:	f7f5 f8a0 	bl	800d674 <GUI_MEMDEV_Select>
 8018534:	4ba0      	ldr	r3, [pc, #640]	; (80187b8 <GUI_SPRITE_SetPosition+0x2bc>)
 8018536:	9906      	ldr	r1, [sp, #24]
 8018538:	681b      	ldr	r3, [r3, #0]
 801853a:	6989      	ldr	r1, [r1, #24]
 801853c:	7c5a      	ldrb	r2, [r3, #17]
 801853e:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8018540:	9108      	str	r1, [sp, #32]
 8018542:	4291      	cmp	r1, r2
 8018544:	bf18      	it	ne
 8018546:	7459      	strbne	r1, [r3, #17]
 8018548:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801854c:	9310      	str	r3, [sp, #64]	; 0x40
 801854e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8018552:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8018556:	f9b5 6006 	ldrsh.w	r6, [r5, #6]
 801855a:	921a      	str	r2, [sp, #104]	; 0x68
 801855c:	ebce 0303 	rsb	r3, lr, r3
 8018560:	1c59      	adds	r1, r3, #1
 8018562:	9307      	str	r3, [sp, #28]
 8018564:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8018568:	901f      	str	r0, [sp, #124]	; 0x7c
 801856a:	1b9b      	subs	r3, r3, r6
 801856c:	1c5a      	adds	r2, r3, #1
 801856e:	930e      	str	r3, [sp, #56]	; 0x38
 8018570:	8a2b      	ldrh	r3, [r5, #16]
 8018572:	910d      	str	r1, [sp, #52]	; 0x34
 8018574:	079b      	lsls	r3, r3, #30
 8018576:	921e      	str	r2, [sp, #120]	; 0x78
 8018578:	f140 81f7 	bpl.w	801896a <GUI_SPRITE_SetPosition+0x46e>
 801857c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801857e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018580:	696b      	ldr	r3, [r5, #20]
 8018582:	9311      	str	r3, [sp, #68]	; 0x44
 8018584:	ebce 0a01 	rsb	sl, lr, r1
 8018588:	f1ba 0f00 	cmp.w	sl, #0
 801858c:	ebc6 0902 	rsb	r9, r6, r2
 8018590:	dc0c      	bgt.n	80185ac <GUI_SPRITE_SetPosition+0xb0>
 8018592:	9b07      	ldr	r3, [sp, #28]
 8018594:	930a      	str	r3, [sp, #40]	; 0x28
 8018596:	469e      	mov	lr, r3
 8018598:	f04f 32ff 	mov.w	r2, #4294967295
 801859c:	44d6      	add	lr, sl
 801859e:	2100      	movs	r1, #0
 80185a0:	f8cd e01c 	str.w	lr, [sp, #28]
 80185a4:	911c      	str	r1, [sp, #112]	; 0x70
 80185a6:	9214      	str	r2, [sp, #80]	; 0x50
 80185a8:	9204      	str	r2, [sp, #16]
 80185aa:	e009      	b.n	80185c0 <GUI_SPRITE_SetPosition+0xc4>
 80185ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80185ae:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
 80185b2:	f04f 0e01 	mov.w	lr, #1
 80185b6:	2100      	movs	r1, #0
 80185b8:	9314      	str	r3, [sp, #80]	; 0x50
 80185ba:	f8cd e010 	str.w	lr, [sp, #16]
 80185be:	910a      	str	r1, [sp, #40]	; 0x28
 80185c0:	f1b9 0f00 	cmp.w	r9, #0
 80185c4:	dc0c      	bgt.n	80185e0 <GUI_SPRITE_SetPosition+0xe4>
 80185c6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80185c8:	4622      	mov	r2, r4
 80185ca:	f04f 3eff 	mov.w	lr, #4294967295
 80185ce:	444a      	add	r2, r9
 80185d0:	2300      	movs	r3, #0
 80185d2:	920e      	str	r2, [sp, #56]	; 0x38
 80185d4:	931b      	str	r3, [sp, #108]	; 0x6c
 80185d6:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
 80185da:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 80185de:	e006      	b.n	80185ee <GUI_SPRITE_SetPosition+0xf2>
 80185e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80185e2:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 80185e6:	2301      	movs	r3, #1
 80185e8:	9215      	str	r2, [sp, #84]	; 0x54
 80185ea:	9309      	str	r3, [sp, #36]	; 0x24
 80185ec:	2400      	movs	r4, #0
 80185ee:	9806      	ldr	r0, [sp, #24]
 80185f0:	a924      	add	r1, sp, #144	; 0x90
 80185f2:	f7ff fef9 	bl	80183e8 <_GetDeviceRect>
 80185f6:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80185f8:	9904      	ldr	r1, [sp, #16]
 80185fa:	f7ff fe28 	bl	801824e <_CreateBuffer>
 80185fe:	9012      	str	r0, [sp, #72]	; 0x48
 8018600:	2800      	cmp	r0, #0
 8018602:	f000 81b2 	beq.w	801896a <GUI_SPRITE_SetPosition+0x46e>
 8018606:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8018608:	9904      	ldr	r1, [sp, #16]
 801860a:	f7ff fe20 	bl	801824e <_CreateBuffer>
 801860e:	9013      	str	r0, [sp, #76]	; 0x4c
 8018610:	2800      	cmp	r0, #0
 8018612:	f000 81a5 	beq.w	8018960 <GUI_SPRITE_SetPosition+0x464>
 8018616:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018618:	68d8      	ldr	r0, [r3, #12]
 801861a:	4426      	add	r6, r4
 801861c:	b990      	cbnz	r0, 8018644 <GUI_SPRITE_SetPosition+0x148>
 801861e:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 8018622:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018624:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018626:	9019      	str	r0, [sp, #100]	; 0x64
 8018628:	ea4f 038e 	mov.w	r3, lr, lsl #2
 801862c:	434b      	muls	r3, r1
 801862e:	9321      	str	r3, [sp, #132]	; 0x84
 8018630:	fb0e 2304 	mla	r3, lr, r4, r2
 8018634:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018638:	930c      	str	r3, [sp, #48]	; 0x30
 801863a:	9b04      	ldr	r3, [sp, #16]
 801863c:	009b      	lsls	r3, r3, #2
 801863e:	444e      	add	r6, r9
 8018640:	9320      	str	r3, [sp, #128]	; 0x80
 8018642:	e0db      	b.n	80187fc <GUI_SPRITE_SetPosition+0x300>
 8018644:	f7f8 f9fc 	bl	8010a40 <GUI_ALLOC_LockH>
 8018648:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 801864c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801864e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018650:	9022      	str	r0, [sp, #136]	; 0x88
 8018652:	ea4f 038e 	mov.w	r3, lr, lsl #2
 8018656:	434b      	muls	r3, r1
 8018658:	9319      	str	r3, [sp, #100]	; 0x64
 801865a:	fb0e 2304 	mla	r3, lr, r4, r2
 801865e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018662:	930b      	str	r3, [sp, #44]	; 0x2c
 8018664:	9b04      	ldr	r3, [sp, #16]
 8018666:	009b      	lsls	r3, r3, #2
 8018668:	444e      	add	r6, r9
 801866a:	931d      	str	r3, [sp, #116]	; 0x74
 801866c:	9915      	ldr	r1, [sp, #84]	; 0x54
 801866e:	428c      	cmp	r4, r1
 8018670:	f000 809e 	beq.w	80187b0 <GUI_SPRITE_SetPosition+0x2b4>
 8018674:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 8018678:	4574      	cmp	r4, lr
 801867a:	db05      	blt.n	8018688 <GUI_SPRITE_SetPosition+0x18c>
 801867c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801867e:	428c      	cmp	r4, r1
 8018680:	bfcc      	ite	gt
 8018682:	2300      	movgt	r3, #0
 8018684:	2301      	movle	r3, #1
 8018686:	e000      	b.n	801868a <GUI_SPRITE_SetPosition+0x18e>
 8018688:	2300      	movs	r3, #0
 801868a:	b2db      	uxtb	r3, r3
 801868c:	9318      	str	r3, [sp, #96]	; 0x60
 801868e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8018690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018692:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018694:	9105      	str	r1, [sp, #20]
 8018696:	ebc9 0206 	rsb	r2, r9, r6
 801869a:	441f      	add	r7, r3
 801869c:	920c      	str	r2, [sp, #48]	; 0x30
 801869e:	4457      	add	r7, sl
 80186a0:	461d      	mov	r5, r3
 80186a2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80186a4:	428d      	cmp	r5, r1
 80186a6:	d07a      	beq.n	801879e <GUI_SPRITE_SetPosition+0x2a2>
 80186a8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80186aa:	4629      	mov	r1, r5
 80186ac:	4622      	mov	r2, r4
 80186ae:	f000 f9eb 	bl	8018a88 <GUI_GetBitmapPixelIndex>
 80186b2:	900f      	str	r0, [sp, #60]	; 0x3c
 80186b4:	2800      	cmp	r0, #0
 80186b6:	d069      	beq.n	801878c <GUI_SPRITE_SetPosition+0x290>
 80186b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80186ba:	4295      	cmp	r5, r2
 80186bc:	ebca 0c07 	rsb	ip, sl, r7
 80186c0:	db07      	blt.n	80186d2 <GUI_SPRITE_SetPosition+0x1d6>
 80186c2:	9b07      	ldr	r3, [sp, #28]
 80186c4:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 80186c8:	429d      	cmp	r5, r3
 80186ca:	bfc8      	it	gt
 80186cc:	f04f 0b00 	movgt.w	fp, #0
 80186d0:	e001      	b.n	80186d6 <GUI_SPRITE_SetPosition+0x1da>
 80186d2:	f04f 0b00 	mov.w	fp, #0
 80186d6:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 80186da:	429f      	cmp	r7, r3
 80186dc:	fa5f fb8b 	uxtb.w	fp, fp
 80186e0:	db17      	blt.n	8018712 <GUI_SPRITE_SetPosition+0x216>
 80186e2:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 80186e6:	429e      	cmp	r6, r3
 80186e8:	db13      	blt.n	8018712 <GUI_SPRITE_SetPosition+0x216>
 80186ea:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 80186ee:	429f      	cmp	r7, r3
 80186f0:	dc0f      	bgt.n	8018712 <GUI_SPRITE_SetPosition+0x216>
 80186f2:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 80186f6:	429e      	cmp	r6, r3
 80186f8:	dc0b      	bgt.n	8018712 <GUI_SPRITE_SetPosition+0x216>
 80186fa:	4638      	mov	r0, r7
 80186fc:	4631      	mov	r1, r6
 80186fe:	9a06      	ldr	r2, [sp, #24]
 8018700:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018702:	f8cd c00c 	str.w	ip, [sp, #12]
 8018706:	f7ff fdf7 	bl	80182f8 <_GetBkIndex.isra.0>
 801870a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801870e:	4680      	mov	r8, r0
 8018710:	e001      	b.n	8018716 <GUI_SPRITE_SetPosition+0x21a>
 8018712:	f04f 0800 	mov.w	r8, #0
 8018716:	f1bb 0f00 	cmp.w	fp, #0
 801871a:	d00d      	beq.n	8018738 <GUI_SPRITE_SetPosition+0x23c>
 801871c:	ebb5 010a 	subs.w	r1, r5, sl
 8018720:	d415      	bmi.n	801874e <GUI_SPRITE_SetPosition+0x252>
 8018722:	ebb4 0209 	subs.w	r2, r4, r9
 8018726:	d412      	bmi.n	801874e <GUI_SPRITE_SetPosition+0x252>
 8018728:	9811      	ldr	r0, [sp, #68]	; 0x44
 801872a:	f8cd c00c 	str.w	ip, [sp, #12]
 801872e:	f000 f9ab 	bl	8018a88 <GUI_GetBitmapPixelIndex>
 8018732:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8018736:	b950      	cbnz	r0, 801874e <GUI_SPRITE_SetPosition+0x252>
 8018738:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 801873c:	459c      	cmp	ip, r3
 801873e:	db06      	blt.n	801874e <GUI_SPRITE_SetPosition+0x252>
 8018740:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8018744:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8018748:	459e      	cmp	lr, r3
 801874a:	f280 812d 	bge.w	80189a8 <GUI_SPRITE_SetPosition+0x4ac>
 801874e:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8018752:	429f      	cmp	r7, r3
 8018754:	db17      	blt.n	8018786 <GUI_SPRITE_SetPosition+0x28a>
 8018756:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 801875a:	429e      	cmp	r6, r3
 801875c:	db13      	blt.n	8018786 <GUI_SPRITE_SetPosition+0x28a>
 801875e:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8018762:	429f      	cmp	r7, r3
 8018764:	dc0f      	bgt.n	8018786 <GUI_SPRITE_SetPosition+0x28a>
 8018766:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 801876a:	429e      	cmp	r6, r3
 801876c:	dc0b      	bgt.n	8018786 <GUI_SPRITE_SetPosition+0x28a>
 801876e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018770:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018772:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
 8018776:	9100      	str	r1, [sp, #0]
 8018778:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
 801877c:	9b06      	ldr	r3, [sp, #24]
 801877e:	4638      	mov	r0, r7
 8018780:	4631      	mov	r1, r6
 8018782:	f7ff fe8a 	bl	801849a <_SetBkIndexBuffered>
 8018786:	9905      	ldr	r1, [sp, #20]
 8018788:	f8c1 8020 	str.w	r8, [r1, #32]
 801878c:	9b05      	ldr	r3, [sp, #20]
 801878e:	f8dd e074 	ldr.w	lr, [sp, #116]	; 0x74
 8018792:	9a04      	ldr	r2, [sp, #16]
 8018794:	4473      	add	r3, lr
 8018796:	4415      	add	r5, r2
 8018798:	9305      	str	r3, [sp, #20]
 801879a:	4417      	add	r7, r2
 801879c:	e781      	b.n	80186a2 <GUI_SPRITE_SetPosition+0x1a6>
 801879e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80187a0:	f8dd e064 	ldr.w	lr, [sp, #100]	; 0x64
 80187a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80187a6:	4473      	add	r3, lr
 80187a8:	4414      	add	r4, r2
 80187aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80187ac:	4416      	add	r6, r2
 80187ae:	e75d      	b.n	801866c <GUI_SPRITE_SetPosition+0x170>
 80187b0:	a822      	add	r0, sp, #136	; 0x88
 80187b2:	f7f8 f953 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80187b6:	e0ce      	b.n	8018956 <GUI_SPRITE_SetPosition+0x45a>
 80187b8:	20000308 	.word	0x20000308
 80187bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80187be:	4294      	cmp	r4, r2
 80187c0:	db20      	blt.n	8018804 <GUI_SPRITE_SetPosition+0x308>
 80187c2:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 80187c6:	4574      	cmp	r4, lr
 80187c8:	bfcc      	ite	gt
 80187ca:	2300      	movgt	r3, #0
 80187cc:	2301      	movle	r3, #1
 80187ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80187d0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80187d2:	b2db      	uxtb	r3, r3
 80187d4:	931d      	str	r3, [sp, #116]	; 0x74
 80187d6:	ebc9 0106 	rsb	r1, r9, r6
 80187da:	4417      	add	r7, r2
 80187dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80187de:	910f      	str	r1, [sp, #60]	; 0x3c
 80187e0:	4457      	add	r7, sl
 80187e2:	9305      	str	r3, [sp, #20]
 80187e4:	4615      	mov	r5, r2
 80187e6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80187e8:	428d      	cmp	r5, r1
 80187ea:	d10d      	bne.n	8018808 <GUI_SPRITE_SetPosition+0x30c>
 80187ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80187ee:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
 80187f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80187f4:	4473      	add	r3, lr
 80187f6:	4414      	add	r4, r2
 80187f8:	930c      	str	r3, [sp, #48]	; 0x30
 80187fa:	4416      	add	r6, r2
 80187fc:	9915      	ldr	r1, [sp, #84]	; 0x54
 80187fe:	428c      	cmp	r4, r1
 8018800:	d1dc      	bne.n	80187bc <GUI_SPRITE_SetPosition+0x2c0>
 8018802:	e0a8      	b.n	8018956 <GUI_SPRITE_SetPosition+0x45a>
 8018804:	2300      	movs	r3, #0
 8018806:	e7e2      	b.n	80187ce <GUI_SPRITE_SetPosition+0x2d2>
 8018808:	4629      	mov	r1, r5
 801880a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801880c:	4622      	mov	r2, r4
 801880e:	f000 f93b 	bl	8018a88 <GUI_GetBitmapPixelIndex>
 8018812:	0e01      	lsrs	r1, r0, #24
 8018814:	29ff      	cmp	r1, #255	; 0xff
 8018816:	9018      	str	r0, [sp, #96]	; 0x60
 8018818:	910b      	str	r1, [sp, #44]	; 0x2c
 801881a:	f000 8093 	beq.w	8018944 <GUI_SPRITE_SetPosition+0x448>
 801881e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018820:	4295      	cmp	r5, r2
 8018822:	ebca 0c07 	rsb	ip, sl, r7
 8018826:	db07      	blt.n	8018838 <GUI_SPRITE_SetPosition+0x33c>
 8018828:	9b07      	ldr	r3, [sp, #28]
 801882a:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 801882e:	429d      	cmp	r5, r3
 8018830:	bfc8      	it	gt
 8018832:	f04f 0b00 	movgt.w	fp, #0
 8018836:	e001      	b.n	801883c <GUI_SPRITE_SetPosition+0x340>
 8018838:	f04f 0b00 	mov.w	fp, #0
 801883c:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8018840:	429f      	cmp	r7, r3
 8018842:	fa5f fb8b 	uxtb.w	fp, fp
 8018846:	db22      	blt.n	801888e <GUI_SPRITE_SetPosition+0x392>
 8018848:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 801884c:	429e      	cmp	r6, r3
 801884e:	db1e      	blt.n	801888e <GUI_SPRITE_SetPosition+0x392>
 8018850:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8018854:	429f      	cmp	r7, r3
 8018856:	dc1a      	bgt.n	801888e <GUI_SPRITE_SetPosition+0x392>
 8018858:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 801885c:	429e      	cmp	r6, r3
 801885e:	dc16      	bgt.n	801888e <GUI_SPRITE_SetPosition+0x392>
 8018860:	4631      	mov	r1, r6
 8018862:	9a06      	ldr	r2, [sp, #24]
 8018864:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018866:	f8cd c00c 	str.w	ip, [sp, #12]
 801886a:	4638      	mov	r0, r7
 801886c:	f7ff fd7e 	bl	801836c <_GetBkIndexAlpha.isra.2>
 8018870:	f8dd e020 	ldr.w	lr, [sp, #32]
 8018874:	4b61      	ldr	r3, [pc, #388]	; (80189fc <GUI_SPRITE_SetPosition+0x500>)
 8018876:	f853 302e 	ldr.w	r3, [r3, lr, lsl #2]
 801887a:	691b      	ldr	r3, [r3, #16]
 801887c:	4680      	mov	r8, r0
 801887e:	685b      	ldr	r3, [r3, #4]
 8018880:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8018884:	4798      	blx	r3
 8018886:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801888a:	9019      	str	r0, [sp, #100]	; 0x64
 801888c:	e001      	b.n	8018892 <GUI_SPRITE_SetPosition+0x396>
 801888e:	f04f 0800 	mov.w	r8, #0
 8018892:	f1bb 0f00 	cmp.w	fp, #0
 8018896:	d00f      	beq.n	80188b8 <GUI_SPRITE_SetPosition+0x3bc>
 8018898:	ebb5 010a 	subs.w	r1, r5, sl
 801889c:	d416      	bmi.n	80188cc <GUI_SPRITE_SetPosition+0x3d0>
 801889e:	ebb4 0209 	subs.w	r2, r4, r9
 80188a2:	d413      	bmi.n	80188cc <GUI_SPRITE_SetPosition+0x3d0>
 80188a4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80188a6:	f8cd c00c 	str.w	ip, [sp, #12]
 80188aa:	f000 f8ed 	bl	8018a88 <GUI_GetBitmapPixelIndex>
 80188ae:	0e00      	lsrs	r0, r0, #24
 80188b0:	28ff      	cmp	r0, #255	; 0xff
 80188b2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80188b6:	d109      	bne.n	80188cc <GUI_SPRITE_SetPosition+0x3d0>
 80188b8:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 80188bc:	459c      	cmp	ip, r3
 80188be:	db05      	blt.n	80188cc <GUI_SPRITE_SetPosition+0x3d0>
 80188c0:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 80188c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80188c6:	4299      	cmp	r1, r3
 80188c8:	f280 8082 	bge.w	80189d0 <GUI_SPRITE_SetPosition+0x4d4>
 80188cc:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 80188d0:	429f      	cmp	r7, r3
 80188d2:	db34      	blt.n	801893e <GUI_SPRITE_SetPosition+0x442>
 80188d4:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 80188d8:	429e      	cmp	r6, r3
 80188da:	db30      	blt.n	801893e <GUI_SPRITE_SetPosition+0x442>
 80188dc:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 80188e0:	429f      	cmp	r7, r3
 80188e2:	dc2c      	bgt.n	801893e <GUI_SPRITE_SetPosition+0x442>
 80188e4:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 80188e8:	429e      	cmp	r6, r3
 80188ea:	dc28      	bgt.n	801893e <GUI_SPRITE_SetPosition+0x442>
 80188ec:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 80188f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80188f2:	f8df b108 	ldr.w	fp, [pc, #264]	; 80189fc <GUI_SPRITE_SetPosition+0x500>
 80188f6:	f02e 407f 	bic.w	r0, lr, #4278190080	; 0xff000000
 80188fa:	b191      	cbz	r1, 8018922 <GUI_SPRITE_SetPosition+0x426>
 80188fc:	9a08      	ldr	r2, [sp, #32]
 80188fe:	f85b 3022 	ldr.w	r3, [fp, r2, lsl #2]
 8018902:	691b      	ldr	r3, [r3, #16]
 8018904:	685b      	ldr	r3, [r3, #4]
 8018906:	4798      	blx	r3
 8018908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801890a:	9919      	ldr	r1, [sp, #100]	; 0x64
 801890c:	43da      	mvns	r2, r3
 801890e:	b2d2      	uxtb	r2, r2
 8018910:	f7f6 fba7 	bl	800f062 <GUI__MixColors>
 8018914:	f8dd e020 	ldr.w	lr, [sp, #32]
 8018918:	f85b 302e 	ldr.w	r3, [fp, lr, lsl #2]
 801891c:	691b      	ldr	r3, [r3, #16]
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	e004      	b.n	801892c <GUI_SPRITE_SetPosition+0x430>
 8018922:	9908      	ldr	r1, [sp, #32]
 8018924:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
 8018928:	691b      	ldr	r3, [r3, #16]
 801892a:	685b      	ldr	r3, [r3, #4]
 801892c:	4798      	blx	r3
 801892e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018930:	9300      	str	r3, [sp, #0]
 8018932:	4602      	mov	r2, r0
 8018934:	4631      	mov	r1, r6
 8018936:	4638      	mov	r0, r7
 8018938:	9b06      	ldr	r3, [sp, #24]
 801893a:	f7ff fdae 	bl	801849a <_SetBkIndexBuffered>
 801893e:	9905      	ldr	r1, [sp, #20]
 8018940:	f8c1 8020 	str.w	r8, [r1, #32]
 8018944:	9b05      	ldr	r3, [sp, #20]
 8018946:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
 801894a:	9a04      	ldr	r2, [sp, #16]
 801894c:	4473      	add	r3, lr
 801894e:	4415      	add	r5, r2
 8018950:	9305      	str	r3, [sp, #20]
 8018952:	4417      	add	r7, r2
 8018954:	e747      	b.n	80187e6 <GUI_SPRITE_SetPosition+0x2ea>
 8018956:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018958:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801895a:	6818      	ldr	r0, [r3, #0]
 801895c:	f7ff fdbf 	bl	80184de <_ReleaseBuffer.isra.6>
 8018960:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018962:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018964:	6818      	ldr	r0, [r3, #0]
 8018966:	f7ff fdba 	bl	80184de <_ReleaseBuffer.isra.6>
 801896a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801896c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801896e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018970:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8018974:	809a      	strh	r2, [r3, #4]
 8018976:	440a      	add	r2, r1
 8018978:	3a01      	subs	r2, #1
 801897a:	f8a3 e006 	strh.w	lr, [r3, #6]
 801897e:	811a      	strh	r2, [r3, #8]
 8018980:	f10e 32ff 	add.w	r2, lr, #4294967295
 8018984:	f8dd e078 	ldr.w	lr, [sp, #120]	; 0x78
 8018988:	9908      	ldr	r1, [sp, #32]
 801898a:	4472      	add	r2, lr
 801898c:	815a      	strh	r2, [r3, #10]
 801898e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8018990:	4291      	cmp	r1, r2
 8018992:	d002      	beq.n	801899a <GUI_SPRITE_SetPosition+0x49e>
 8018994:	4b1a      	ldr	r3, [pc, #104]	; (8018a00 <GUI_SPRITE_SetPosition+0x504>)
 8018996:	681b      	ldr	r3, [r3, #0]
 8018998:	745a      	strb	r2, [r3, #17]
 801899a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801899c:	f7f4 fe6a 	bl	800d674 <GUI_MEMDEV_Select>
 80189a0:	a823      	add	r0, sp, #140	; 0x8c
 80189a2:	f7f8 f85b 	bl	8010a5c <GUI_ALLOC_UnlockH>
 80189a6:	e026      	b.n	80189f6 <GUI_SPRITE_SetPosition+0x4fa>
 80189a8:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 80189ac:	459c      	cmp	ip, r3
 80189ae:	f73f aece 	bgt.w	801874e <GUI_SPRITE_SetPosition+0x252>
 80189b2:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 80189b6:	459e      	cmp	lr, r3
 80189b8:	f73f aec9 	bgt.w	801874e <GUI_SPRITE_SetPosition+0x252>
 80189bc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80189be:	9b05      	ldr	r3, [sp, #20]
 80189c0:	9100      	str	r1, [sp, #0]
 80189c2:	6a1a      	ldr	r2, [r3, #32]
 80189c4:	9b06      	ldr	r3, [sp, #24]
 80189c6:	4660      	mov	r0, ip
 80189c8:	4671      	mov	r1, lr
 80189ca:	f7ff fd66 	bl	801849a <_SetBkIndexBuffered>
 80189ce:	e6be      	b.n	801874e <GUI_SPRITE_SetPosition+0x252>
 80189d0:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 80189d4:	459c      	cmp	ip, r3
 80189d6:	f73f af79 	bgt.w	80188cc <GUI_SPRITE_SetPosition+0x3d0>
 80189da:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 80189de:	4299      	cmp	r1, r3
 80189e0:	f73f af74 	bgt.w	80188cc <GUI_SPRITE_SetPosition+0x3d0>
 80189e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80189e6:	9b05      	ldr	r3, [sp, #20]
 80189e8:	9200      	str	r2, [sp, #0]
 80189ea:	6a1a      	ldr	r2, [r3, #32]
 80189ec:	9b06      	ldr	r3, [sp, #24]
 80189ee:	4660      	mov	r0, ip
 80189f0:	f7ff fd53 	bl	801849a <_SetBkIndexBuffered>
 80189f4:	e76a      	b.n	80188cc <GUI_SPRITE_SetPosition+0x3d0>
 80189f6:	b027      	add	sp, #156	; 0x9c
 80189f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189fc:	20021c0c 	.word	0x20021c0c
 8018a00:	20000308 	.word	0x20000308

08018a04 <GUI_GetBitmapPixelIndexEx>:
 8018a04:	b510      	push	{r4, lr}
 8018a06:	2804      	cmp	r0, #4
 8018a08:	9c02      	ldr	r4, [sp, #8]
 8018a0a:	d025      	beq.n	8018a58 <GUI_GetBitmapPixelIndexEx+0x54>
 8018a0c:	dc0f      	bgt.n	8018a2e <GUI_GetBitmapPixelIndexEx+0x2a>
 8018a0e:	2801      	cmp	r0, #1
 8018a10:	d017      	beq.n	8018a42 <GUI_GetBitmapPixelIndexEx+0x3e>
 8018a12:	2802      	cmp	r0, #2
 8018a14:	d136      	bne.n	8018a84 <GUI_GetBitmapPixelIndexEx+0x80>
 8018a16:	0898      	lsrs	r0, r3, #2
 8018a18:	fb04 2101 	mla	r1, r4, r1, r2
 8018a1c:	ea6f 0343 	mvn.w	r3, r3, lsl #1
 8018a20:	5c08      	ldrb	r0, [r1, r0]
 8018a22:	f003 0306 	and.w	r3, r3, #6
 8018a26:	40d8      	lsrs	r0, r3
 8018a28:	f000 0003 	and.w	r0, r0, #3
 8018a2c:	bd10      	pop	{r4, pc}
 8018a2e:	2810      	cmp	r0, #16
 8018a30:	d01c      	beq.n	8018a6c <GUI_GetBitmapPixelIndexEx+0x68>
 8018a32:	2820      	cmp	r0, #32
 8018a34:	d020      	beq.n	8018a78 <GUI_GetBitmapPixelIndexEx+0x74>
 8018a36:	2808      	cmp	r0, #8
 8018a38:	d124      	bne.n	8018a84 <GUI_GetBitmapPixelIndexEx+0x80>
 8018a3a:	fb04 2101 	mla	r1, r4, r1, r2
 8018a3e:	5cc8      	ldrb	r0, [r1, r3]
 8018a40:	bd10      	pop	{r4, pc}
 8018a42:	08d8      	lsrs	r0, r3, #3
 8018a44:	fb04 2101 	mla	r1, r4, r1, r2
 8018a48:	43db      	mvns	r3, r3
 8018a4a:	5c08      	ldrb	r0, [r1, r0]
 8018a4c:	f003 0307 	and.w	r3, r3, #7
 8018a50:	40d8      	lsrs	r0, r3
 8018a52:	f000 0001 	and.w	r0, r0, #1
 8018a56:	bd10      	pop	{r4, pc}
 8018a58:	0858      	lsrs	r0, r3, #1
 8018a5a:	fb04 2101 	mla	r1, r4, r1, r2
 8018a5e:	07db      	lsls	r3, r3, #31
 8018a60:	5c08      	ldrb	r0, [r1, r0]
 8018a62:	bf4c      	ite	mi
 8018a64:	f000 000f 	andmi.w	r0, r0, #15
 8018a68:	0900      	lsrpl	r0, r0, #4
 8018a6a:	bd10      	pop	{r4, pc}
 8018a6c:	1049      	asrs	r1, r1, #1
 8018a6e:	fb04 3301 	mla	r3, r4, r1, r3
 8018a72:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8018a76:	bd10      	pop	{r4, pc}
 8018a78:	1089      	asrs	r1, r1, #2
 8018a7a:	fb04 3301 	mla	r3, r4, r1, r3
 8018a7e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8018a82:	bd10      	pop	{r4, pc}
 8018a84:	2000      	movs	r0, #0
 8018a86:	bd10      	pop	{r4, pc}

08018a88 <GUI_GetBitmapPixelIndex>:
 8018a88:	b513      	push	{r0, r1, r4, lr}
 8018a8a:	460b      	mov	r3, r1
 8018a8c:	4604      	mov	r4, r0
 8018a8e:	b130      	cbz	r0, 8018a9e <GUI_GetBitmapPixelIndex+0x16>
 8018a90:	88c0      	ldrh	r0, [r0, #6]
 8018a92:	88a1      	ldrh	r1, [r4, #4]
 8018a94:	9200      	str	r2, [sp, #0]
 8018a96:	68a2      	ldr	r2, [r4, #8]
 8018a98:	f7ff ffb4 	bl	8018a04 <GUI_GetBitmapPixelIndexEx>
 8018a9c:	e7ff      	b.n	8018a9e <GUI_GetBitmapPixelIndex+0x16>
 8018a9e:	b002      	add	sp, #8
 8018aa0:	bd10      	pop	{r4, pc}

08018aa2 <GUI_CalcColorDist>:
 8018aa2:	b2cb      	uxtb	r3, r1
 8018aa4:	b2c2      	uxtb	r2, r0
 8018aa6:	1ad2      	subs	r2, r2, r3
 8018aa8:	b292      	uxth	r2, r2
 8018aaa:	b293      	uxth	r3, r2
 8018aac:	b530      	push	{r4, r5, lr}
 8018aae:	041c      	lsls	r4, r3, #16
 8018ab0:	bf48      	it	mi
 8018ab2:	4253      	negmi	r3, r2
 8018ab4:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8018ab8:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8018abc:	ebc5 0202 	rsb	r2, r5, r2
 8018ac0:	bf48      	it	mi
 8018ac2:	b29b      	uxthmi	r3, r3
 8018ac4:	b292      	uxth	r2, r2
 8018ac6:	0c09      	lsrs	r1, r1, #16
 8018ac8:	fb13 f403 	smulbb	r4, r3, r3
 8018acc:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 8018ad0:	b293      	uxth	r3, r2
 8018ad2:	041d      	lsls	r5, r3, #16
 8018ad4:	b289      	uxth	r1, r1
 8018ad6:	b288      	uxth	r0, r1
 8018ad8:	bf44      	itt	mi
 8018ada:	4253      	negmi	r3, r2
 8018adc:	b29b      	uxthmi	r3, r3
 8018ade:	0402      	lsls	r2, r0, #16
 8018ae0:	bf48      	it	mi
 8018ae2:	4248      	negmi	r0, r1
 8018ae4:	fb13 4303 	smlabb	r3, r3, r3, r4
 8018ae8:	bf48      	it	mi
 8018aea:	b280      	uxthmi	r0, r0
 8018aec:	fb00 3000 	mla	r0, r0, r0, r3
 8018af0:	bd30      	pop	{r4, r5, pc}

08018af2 <WIDGET_SetWidth>:
 8018af2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018af4:	460d      	mov	r5, r1
 8018af6:	4604      	mov	r4, r0
 8018af8:	b190      	cbz	r0, 8018b20 <WIDGET_SetWidth+0x2e>
 8018afa:	f7f7 ffa1 	bl	8010a40 <GUI_ALLOC_LockH>
 8018afe:	ab02      	add	r3, sp, #8
 8018b00:	8e46      	ldrh	r6, [r0, #50]	; 0x32
 8018b02:	f843 0d04 	str.w	r0, [r3, #-4]!
 8018b06:	4618      	mov	r0, r3
 8018b08:	f7f7 ffa8 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8018b0c:	0733      	lsls	r3, r6, #28
 8018b0e:	4620      	mov	r0, r4
 8018b10:	4629      	mov	r1, r5
 8018b12:	d502      	bpl.n	8018b1a <WIDGET_SetWidth+0x28>
 8018b14:	f000 f826 	bl	8018b64 <WM_SetXSize>
 8018b18:	e002      	b.n	8018b20 <WIDGET_SetWidth+0x2e>
 8018b1a:	f000 f803 	bl	8018b24 <WM_SetYSize>
 8018b1e:	e7ff      	b.n	8018b20 <WIDGET_SetWidth+0x2e>
 8018b20:	b002      	add	sp, #8
 8018b22:	bd70      	pop	{r4, r5, r6, pc}

08018b24 <WM_SetYSize>:
 8018b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018b26:	460d      	mov	r5, r1
 8018b28:	4604      	mov	r4, r0
 8018b2a:	b1c0      	cbz	r0, 8018b5e <WM_SetYSize+0x3a>
 8018b2c:	f7f7 ff88 	bl	8010a40 <GUI_ALLOC_LockH>
 8018b30:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8018b34:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018b38:	9001      	str	r0, [sp, #4]
 8018b3a:	1ad2      	subs	r2, r2, r3
 8018b3c:	43d2      	mvns	r2, r2
 8018b3e:	4620      	mov	r0, r4
 8018b40:	442a      	add	r2, r5
 8018b42:	2100      	movs	r1, #0
 8018b44:	f7f2 f8a4 	bl	800ac90 <WM_ResizeWindow>
 8018b48:	a802      	add	r0, sp, #8
 8018b4a:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8018b4e:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 8018b52:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8018b56:	1aa4      	subs	r4, r4, r2
 8018b58:	3401      	adds	r4, #1
 8018b5a:	f7f7 ff7f 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8018b5e:	4620      	mov	r0, r4
 8018b60:	b003      	add	sp, #12
 8018b62:	bd30      	pop	{r4, r5, pc}

08018b64 <WM_SetXSize>:
 8018b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018b66:	460d      	mov	r5, r1
 8018b68:	4604      	mov	r4, r0
 8018b6a:	b1c0      	cbz	r0, 8018b9e <WM_SetXSize+0x3a>
 8018b6c:	f7f7 ff68 	bl	8010a40 <GUI_ALLOC_LockH>
 8018b70:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8018b74:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018b78:	9001      	str	r0, [sp, #4]
 8018b7a:	1ac9      	subs	r1, r1, r3
 8018b7c:	43c9      	mvns	r1, r1
 8018b7e:	4620      	mov	r0, r4
 8018b80:	2200      	movs	r2, #0
 8018b82:	4429      	add	r1, r5
 8018b84:	f7f2 f884 	bl	800ac90 <WM_ResizeWindow>
 8018b88:	a802      	add	r0, sp, #8
 8018b8a:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8018b8e:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 8018b92:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018b96:	1aa4      	subs	r4, r4, r2
 8018b98:	3401      	adds	r4, #1
 8018b9a:	f7f7 ff5f 	bl	8010a5c <GUI_ALLOC_UnlockH>
 8018b9e:	4620      	mov	r0, r4
 8018ba0:	b003      	add	sp, #12
 8018ba2:	bd30      	pop	{r4, r5, pc}

08018ba4 <atof>:
 8018ba4:	2100      	movs	r1, #0
 8018ba6:	f000 be9b 	b.w	80198e0 <strtod>

08018baa <atoi>:
 8018baa:	220a      	movs	r2, #10
 8018bac:	2100      	movs	r1, #0
 8018bae:	f000 bf25 	b.w	80199fc <strtol>
	...

08018bb4 <__libc_init_array>:
 8018bb4:	b570      	push	{r4, r5, r6, lr}
 8018bb6:	4b0e      	ldr	r3, [pc, #56]	; (8018bf0 <__libc_init_array+0x3c>)
 8018bb8:	4c0e      	ldr	r4, [pc, #56]	; (8018bf4 <__libc_init_array+0x40>)
 8018bba:	1ae4      	subs	r4, r4, r3
 8018bbc:	10a4      	asrs	r4, r4, #2
 8018bbe:	2500      	movs	r5, #0
 8018bc0:	461e      	mov	r6, r3
 8018bc2:	42a5      	cmp	r5, r4
 8018bc4:	d004      	beq.n	8018bd0 <__libc_init_array+0x1c>
 8018bc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018bca:	4798      	blx	r3
 8018bcc:	3501      	adds	r5, #1
 8018bce:	e7f8      	b.n	8018bc2 <__libc_init_array+0xe>
 8018bd0:	f002 f9ce 	bl	801af70 <_init>
 8018bd4:	4c08      	ldr	r4, [pc, #32]	; (8018bf8 <__libc_init_array+0x44>)
 8018bd6:	4b09      	ldr	r3, [pc, #36]	; (8018bfc <__libc_init_array+0x48>)
 8018bd8:	1ae4      	subs	r4, r4, r3
 8018bda:	10a4      	asrs	r4, r4, #2
 8018bdc:	2500      	movs	r5, #0
 8018bde:	461e      	mov	r6, r3
 8018be0:	42a5      	cmp	r5, r4
 8018be2:	d004      	beq.n	8018bee <__libc_init_array+0x3a>
 8018be4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018be8:	4798      	blx	r3
 8018bea:	3501      	adds	r5, #1
 8018bec:	e7f8      	b.n	8018be0 <__libc_init_array+0x2c>
 8018bee:	bd70      	pop	{r4, r5, r6, pc}
 8018bf0:	080233d4 	.word	0x080233d4
 8018bf4:	080233d4 	.word	0x080233d4
 8018bf8:	080233d8 	.word	0x080233d8
 8018bfc:	080233d4 	.word	0x080233d4

08018c00 <memcmp>:
 8018c00:	b510      	push	{r4, lr}
 8018c02:	3901      	subs	r1, #1
 8018c04:	4402      	add	r2, r0
 8018c06:	4290      	cmp	r0, r2
 8018c08:	d007      	beq.n	8018c1a <memcmp+0x1a>
 8018c0a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018c0e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018c12:	42a3      	cmp	r3, r4
 8018c14:	d0f7      	beq.n	8018c06 <memcmp+0x6>
 8018c16:	1b18      	subs	r0, r3, r4
 8018c18:	bd10      	pop	{r4, pc}
 8018c1a:	2000      	movs	r0, #0
 8018c1c:	bd10      	pop	{r4, pc}

08018c1e <memcpy>:
 8018c1e:	b510      	push	{r4, lr}
 8018c20:	1e43      	subs	r3, r0, #1
 8018c22:	440a      	add	r2, r1
 8018c24:	4291      	cmp	r1, r2
 8018c26:	d004      	beq.n	8018c32 <memcpy+0x14>
 8018c28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018c2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018c30:	e7f8      	b.n	8018c24 <memcpy+0x6>
 8018c32:	bd10      	pop	{r4, pc}

08018c34 <memmove>:
 8018c34:	4288      	cmp	r0, r1
 8018c36:	b510      	push	{r4, lr}
 8018c38:	eb01 0302 	add.w	r3, r1, r2
 8018c3c:	d801      	bhi.n	8018c42 <memmove+0xe>
 8018c3e:	1e42      	subs	r2, r0, #1
 8018c40:	e00b      	b.n	8018c5a <memmove+0x26>
 8018c42:	4298      	cmp	r0, r3
 8018c44:	d2fb      	bcs.n	8018c3e <memmove+0xa>
 8018c46:	1881      	adds	r1, r0, r2
 8018c48:	1ad2      	subs	r2, r2, r3
 8018c4a:	42d3      	cmn	r3, r2
 8018c4c:	d004      	beq.n	8018c58 <memmove+0x24>
 8018c4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018c52:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8018c56:	e7f8      	b.n	8018c4a <memmove+0x16>
 8018c58:	bd10      	pop	{r4, pc}
 8018c5a:	4299      	cmp	r1, r3
 8018c5c:	d004      	beq.n	8018c68 <memmove+0x34>
 8018c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018c62:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018c66:	e7f8      	b.n	8018c5a <memmove+0x26>
 8018c68:	bd10      	pop	{r4, pc}

08018c6a <memset>:
 8018c6a:	4402      	add	r2, r0
 8018c6c:	4603      	mov	r3, r0
 8018c6e:	4293      	cmp	r3, r2
 8018c70:	d002      	beq.n	8018c78 <memset+0xe>
 8018c72:	f803 1b01 	strb.w	r1, [r3], #1
 8018c76:	e7fa      	b.n	8018c6e <memset+0x4>
 8018c78:	4770      	bx	lr

08018c7a <strcat>:
 8018c7a:	b510      	push	{r4, lr}
 8018c7c:	4602      	mov	r2, r0
 8018c7e:	4613      	mov	r3, r2
 8018c80:	3201      	adds	r2, #1
 8018c82:	781c      	ldrb	r4, [r3, #0]
 8018c84:	2c00      	cmp	r4, #0
 8018c86:	d1fa      	bne.n	8018c7e <strcat+0x4>
 8018c88:	3b01      	subs	r3, #1
 8018c8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018c8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018c92:	2a00      	cmp	r2, #0
 8018c94:	d1f9      	bne.n	8018c8a <strcat+0x10>
 8018c96:	bd10      	pop	{r4, pc}

08018c98 <strcpy>:
 8018c98:	4603      	mov	r3, r0
 8018c9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018c9e:	f803 2b01 	strb.w	r2, [r3], #1
 8018ca2:	2a00      	cmp	r2, #0
 8018ca4:	d1f9      	bne.n	8018c9a <strcpy+0x2>
 8018ca6:	4770      	bx	lr

08018ca8 <sulp>:
 8018ca8:	b570      	push	{r4, r5, r6, lr}
 8018caa:	4604      	mov	r4, r0
 8018cac:	460d      	mov	r5, r1
 8018cae:	ec45 4b10 	vmov	d0, r4, r5
 8018cb2:	4616      	mov	r6, r2
 8018cb4:	f001 fc94 	bl	801a5e0 <__ulp>
 8018cb8:	ec51 0b10 	vmov	r0, r1, d0
 8018cbc:	b17e      	cbz	r6, 8018cde <sulp+0x36>
 8018cbe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8018cc2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	dd09      	ble.n	8018cde <sulp+0x36>
 8018cca:	051b      	lsls	r3, r3, #20
 8018ccc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8018cd0:	2400      	movs	r4, #0
 8018cd2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8018cd6:	4622      	mov	r2, r4
 8018cd8:	462b      	mov	r3, r5
 8018cda:	f7e7 fc49 	bl	8000570 <__aeabi_dmul>
 8018cde:	bd70      	pop	{r4, r5, r6, pc}

08018ce0 <_strtod_r>:
 8018ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ce4:	b09d      	sub	sp, #116	; 0x74
 8018ce6:	2300      	movs	r3, #0
 8018ce8:	9002      	str	r0, [sp, #8]
 8018cea:	460c      	mov	r4, r1
 8018cec:	9213      	str	r2, [sp, #76]	; 0x4c
 8018cee:	9318      	str	r3, [sp, #96]	; 0x60
 8018cf0:	f04f 0a00 	mov.w	sl, #0
 8018cf4:	f04f 0b00 	mov.w	fp, #0
 8018cf8:	9117      	str	r1, [sp, #92]	; 0x5c
 8018cfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018cfc:	781a      	ldrb	r2, [r3, #0]
 8018cfe:	2a0d      	cmp	r2, #13
 8018d00:	d805      	bhi.n	8018d0e <_strtod_r+0x2e>
 8018d02:	2a09      	cmp	r2, #9
 8018d04:	d213      	bcs.n	8018d2e <_strtod_r+0x4e>
 8018d06:	2a00      	cmp	r2, #0
 8018d08:	f000 81ac 	beq.w	8019064 <_strtod_r+0x384>
 8018d0c:	e012      	b.n	8018d34 <_strtod_r+0x54>
 8018d0e:	2a2b      	cmp	r2, #43	; 0x2b
 8018d10:	d004      	beq.n	8018d1c <_strtod_r+0x3c>
 8018d12:	2a2d      	cmp	r2, #45	; 0x2d
 8018d14:	d004      	beq.n	8018d20 <_strtod_r+0x40>
 8018d16:	2a20      	cmp	r2, #32
 8018d18:	d10c      	bne.n	8018d34 <_strtod_r+0x54>
 8018d1a:	e008      	b.n	8018d2e <_strtod_r+0x4e>
 8018d1c:	2200      	movs	r2, #0
 8018d1e:	e000      	b.n	8018d22 <_strtod_r+0x42>
 8018d20:	2201      	movs	r2, #1
 8018d22:	920c      	str	r2, [sp, #48]	; 0x30
 8018d24:	1c5a      	adds	r2, r3, #1
 8018d26:	9217      	str	r2, [sp, #92]	; 0x5c
 8018d28:	785b      	ldrb	r3, [r3, #1]
 8018d2a:	b92b      	cbnz	r3, 8018d38 <_strtod_r+0x58>
 8018d2c:	e19a      	b.n	8019064 <_strtod_r+0x384>
 8018d2e:	3301      	adds	r3, #1
 8018d30:	9317      	str	r3, [sp, #92]	; 0x5c
 8018d32:	e7e2      	b.n	8018cfa <_strtod_r+0x1a>
 8018d34:	2300      	movs	r3, #0
 8018d36:	930c      	str	r3, [sp, #48]	; 0x30
 8018d38:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8018d3a:	782b      	ldrb	r3, [r5, #0]
 8018d3c:	2b30      	cmp	r3, #48	; 0x30
 8018d3e:	d15c      	bne.n	8018dfa <_strtod_r+0x11a>
 8018d40:	786b      	ldrb	r3, [r5, #1]
 8018d42:	2b58      	cmp	r3, #88	; 0x58
 8018d44:	d001      	beq.n	8018d4a <_strtod_r+0x6a>
 8018d46:	2b78      	cmp	r3, #120	; 0x78
 8018d48:	d14c      	bne.n	8018de4 <_strtod_r+0x104>
 8018d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018d4c:	9301      	str	r3, [sp, #4]
 8018d4e:	ab18      	add	r3, sp, #96	; 0x60
 8018d50:	9300      	str	r3, [sp, #0]
 8018d52:	4aa9      	ldr	r2, [pc, #676]	; (8018ff8 <_strtod_r+0x318>)
 8018d54:	9802      	ldr	r0, [sp, #8]
 8018d56:	ab19      	add	r3, sp, #100	; 0x64
 8018d58:	a917      	add	r1, sp, #92	; 0x5c
 8018d5a:	f000 fea4 	bl	8019aa6 <__gethex>
 8018d5e:	f010 0607 	ands.w	r6, r0, #7
 8018d62:	4604      	mov	r4, r0
 8018d64:	f000 8587 	beq.w	8019876 <_strtod_r+0xb96>
 8018d68:	2e06      	cmp	r6, #6
 8018d6a:	d105      	bne.n	8018d78 <_strtod_r+0x98>
 8018d6c:	3501      	adds	r5, #1
 8018d6e:	2300      	movs	r3, #0
 8018d70:	9517      	str	r5, [sp, #92]	; 0x5c
 8018d72:	930c      	str	r3, [sp, #48]	; 0x30
 8018d74:	f000 bd7f 	b.w	8019876 <_strtod_r+0xb96>
 8018d78:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018d7a:	b13a      	cbz	r2, 8018d8c <_strtod_r+0xac>
 8018d7c:	2135      	movs	r1, #53	; 0x35
 8018d7e:	a81a      	add	r0, sp, #104	; 0x68
 8018d80:	f001 fd1b 	bl	801a7ba <__copybits>
 8018d84:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018d86:	9802      	ldr	r0, [sp, #8]
 8018d88:	f001 f999 	bl	801a0be <_Bfree>
 8018d8c:	2e06      	cmp	r6, #6
 8018d8e:	d822      	bhi.n	8018dd6 <_strtod_r+0xf6>
 8018d90:	e8df f006 	tbb	[pc, r6]
 8018d94:	18080d04 	.word	0x18080d04
 8018d98:	0d1d      	.short	0x0d1d
 8018d9a:	04          	.byte	0x04
 8018d9b:	00          	.byte	0x00
 8018d9c:	f04f 0b00 	mov.w	fp, #0
 8018da0:	46da      	mov	sl, fp
 8018da2:	e018      	b.n	8018dd6 <_strtod_r+0xf6>
 8018da4:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8018da8:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 8018dac:	e013      	b.n	8018dd6 <_strtod_r+0xf6>
 8018dae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018db0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018db2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8018db6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8018dba:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018dbe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8018dc2:	e008      	b.n	8018dd6 <_strtod_r+0xf6>
 8018dc4:	f8df b234 	ldr.w	fp, [pc, #564]	; 8018ffc <_strtod_r+0x31c>
 8018dc8:	f04f 0a00 	mov.w	sl, #0
 8018dcc:	e003      	b.n	8018dd6 <_strtod_r+0xf6>
 8018dce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8018dd2:	f04f 3aff 	mov.w	sl, #4294967295
 8018dd6:	0721      	lsls	r1, r4, #28
 8018dd8:	f140 854d 	bpl.w	8019876 <_strtod_r+0xb96>
 8018ddc:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8018de0:	f000 bd49 	b.w	8019876 <_strtod_r+0xb96>
 8018de4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018de6:	1c5a      	adds	r2, r3, #1
 8018de8:	9217      	str	r2, [sp, #92]	; 0x5c
 8018dea:	785b      	ldrb	r3, [r3, #1]
 8018dec:	2b30      	cmp	r3, #48	; 0x30
 8018dee:	d0f9      	beq.n	8018de4 <_strtod_r+0x104>
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	f000 8540 	beq.w	8019876 <_strtod_r+0xb96>
 8018df6:	2301      	movs	r3, #1
 8018df8:	e000      	b.n	8018dfc <_strtod_r+0x11c>
 8018dfa:	2300      	movs	r3, #0
 8018dfc:	f04f 0800 	mov.w	r8, #0
 8018e00:	9306      	str	r3, [sp, #24]
 8018e02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018e04:	9307      	str	r3, [sp, #28]
 8018e06:	f8cd 8014 	str.w	r8, [sp, #20]
 8018e0a:	f8cd 8010 	str.w	r8, [sp, #16]
 8018e0e:	220a      	movs	r2, #10
 8018e10:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8018e12:	782e      	ldrb	r6, [r5, #0]
 8018e14:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8018e18:	b2d9      	uxtb	r1, r3
 8018e1a:	2909      	cmp	r1, #9
 8018e1c:	d80e      	bhi.n	8018e3c <_strtod_r+0x15c>
 8018e1e:	9904      	ldr	r1, [sp, #16]
 8018e20:	2908      	cmp	r1, #8
 8018e22:	bfdd      	ittte	le
 8018e24:	9905      	ldrle	r1, [sp, #20]
 8018e26:	fb02 3301 	mlale	r3, r2, r1, r3
 8018e2a:	9305      	strle	r3, [sp, #20]
 8018e2c:	fb02 3808 	mlagt	r8, r2, r8, r3
 8018e30:	9b04      	ldr	r3, [sp, #16]
 8018e32:	3501      	adds	r5, #1
 8018e34:	3301      	adds	r3, #1
 8018e36:	9304      	str	r3, [sp, #16]
 8018e38:	9517      	str	r5, [sp, #92]	; 0x5c
 8018e3a:	e7e9      	b.n	8018e10 <_strtod_r+0x130>
 8018e3c:	9802      	ldr	r0, [sp, #8]
 8018e3e:	f001 f905 	bl	801a04c <_localeconv_r>
 8018e42:	6807      	ldr	r7, [r0, #0]
 8018e44:	9802      	ldr	r0, [sp, #8]
 8018e46:	f001 f901 	bl	801a04c <_localeconv_r>
 8018e4a:	6800      	ldr	r0, [r0, #0]
 8018e4c:	f7e7 f9d0 	bl	80001f0 <strlen>
 8018e50:	4639      	mov	r1, r7
 8018e52:	4602      	mov	r2, r0
 8018e54:	4628      	mov	r0, r5
 8018e56:	f001 fcec 	bl	801a832 <strncmp>
 8018e5a:	4607      	mov	r7, r0
 8018e5c:	b128      	cbz	r0, 8018e6a <_strtod_r+0x18a>
 8018e5e:	2000      	movs	r0, #0
 8018e60:	4633      	mov	r3, r6
 8018e62:	9d04      	ldr	r5, [sp, #16]
 8018e64:	4602      	mov	r2, r0
 8018e66:	4601      	mov	r1, r0
 8018e68:	e057      	b.n	8018f1a <_strtod_r+0x23a>
 8018e6a:	9802      	ldr	r0, [sp, #8]
 8018e6c:	f001 f8ee 	bl	801a04c <_localeconv_r>
 8018e70:	6800      	ldr	r0, [r0, #0]
 8018e72:	f7e7 f9bd 	bl	80001f0 <strlen>
 8018e76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018e78:	181a      	adds	r2, r3, r0
 8018e7a:	9217      	str	r2, [sp, #92]	; 0x5c
 8018e7c:	9a04      	ldr	r2, [sp, #16]
 8018e7e:	5c1b      	ldrb	r3, [r3, r0]
 8018e80:	2a00      	cmp	r2, #0
 8018e82:	d142      	bne.n	8018f0a <_strtod_r+0x22a>
 8018e84:	4610      	mov	r0, r2
 8018e86:	2b30      	cmp	r3, #48	; 0x30
 8018e88:	d105      	bne.n	8018e96 <_strtod_r+0x1b6>
 8018e8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018e8c:	1c5a      	adds	r2, r3, #1
 8018e8e:	9217      	str	r2, [sp, #92]	; 0x5c
 8018e90:	3001      	adds	r0, #1
 8018e92:	785b      	ldrb	r3, [r3, #1]
 8018e94:	e7f7      	b.n	8018e86 <_strtod_r+0x1a6>
 8018e96:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8018e9a:	2a08      	cmp	r2, #8
 8018e9c:	d843      	bhi.n	8018f26 <_strtod_r+0x246>
 8018e9e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018ea0:	9207      	str	r2, [sp, #28]
 8018ea2:	4602      	mov	r2, r0
 8018ea4:	2000      	movs	r0, #0
 8018ea6:	4605      	mov	r5, r0
 8018ea8:	3b30      	subs	r3, #48	; 0x30
 8018eaa:	f100 0101 	add.w	r1, r0, #1
 8018eae:	d026      	beq.n	8018efe <_strtod_r+0x21e>
 8018eb0:	440a      	add	r2, r1
 8018eb2:	eb05 0c00 	add.w	ip, r5, r0
 8018eb6:	4629      	mov	r1, r5
 8018eb8:	260a      	movs	r6, #10
 8018eba:	4561      	cmp	r1, ip
 8018ebc:	d00e      	beq.n	8018edc <_strtod_r+0x1fc>
 8018ebe:	3101      	adds	r1, #1
 8018ec0:	f101 3eff 	add.w	lr, r1, #4294967295
 8018ec4:	f1be 0f08 	cmp.w	lr, #8
 8018ec8:	dc03      	bgt.n	8018ed2 <_strtod_r+0x1f2>
 8018eca:	9f05      	ldr	r7, [sp, #20]
 8018ecc:	4377      	muls	r7, r6
 8018ece:	9705      	str	r7, [sp, #20]
 8018ed0:	e7f3      	b.n	8018eba <_strtod_r+0x1da>
 8018ed2:	2910      	cmp	r1, #16
 8018ed4:	bfd8      	it	le
 8018ed6:	fb06 f808 	mulle.w	r8, r6, r8
 8018eda:	e7ee      	b.n	8018eba <_strtod_r+0x1da>
 8018edc:	4428      	add	r0, r5
 8018ede:	2808      	cmp	r0, #8
 8018ee0:	f100 0501 	add.w	r5, r0, #1
 8018ee4:	dc05      	bgt.n	8018ef2 <_strtod_r+0x212>
 8018ee6:	9805      	ldr	r0, [sp, #20]
 8018ee8:	210a      	movs	r1, #10
 8018eea:	fb01 3300 	mla	r3, r1, r0, r3
 8018eee:	9305      	str	r3, [sp, #20]
 8018ef0:	e004      	b.n	8018efc <_strtod_r+0x21c>
 8018ef2:	2d10      	cmp	r5, #16
 8018ef4:	bfdc      	itt	le
 8018ef6:	210a      	movle	r1, #10
 8018ef8:	fb01 3808 	mlale	r8, r1, r8, r3
 8018efc:	2100      	movs	r1, #0
 8018efe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018f00:	1c58      	adds	r0, r3, #1
 8018f02:	9017      	str	r0, [sp, #92]	; 0x5c
 8018f04:	785b      	ldrb	r3, [r3, #1]
 8018f06:	4608      	mov	r0, r1
 8018f08:	e002      	b.n	8018f10 <_strtod_r+0x230>
 8018f0a:	9d04      	ldr	r5, [sp, #16]
 8018f0c:	4638      	mov	r0, r7
 8018f0e:	463a      	mov	r2, r7
 8018f10:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8018f14:	2909      	cmp	r1, #9
 8018f16:	d9c7      	bls.n	8018ea8 <_strtod_r+0x1c8>
 8018f18:	2101      	movs	r1, #1
 8018f1a:	2b65      	cmp	r3, #101	; 0x65
 8018f1c:	d001      	beq.n	8018f22 <_strtod_r+0x242>
 8018f1e:	2b45      	cmp	r3, #69	; 0x45
 8018f20:	d151      	bne.n	8018fc6 <_strtod_r+0x2e6>
 8018f22:	b96d      	cbnz	r5, 8018f40 <_strtod_r+0x260>
 8018f24:	e004      	b.n	8018f30 <_strtod_r+0x250>
 8018f26:	2b65      	cmp	r3, #101	; 0x65
 8018f28:	f040 84b3 	bne.w	8019892 <_strtod_r+0xbb2>
 8018f2c:	2200      	movs	r2, #0
 8018f2e:	2101      	movs	r1, #1
 8018f30:	b928      	cbnz	r0, 8018f3e <_strtod_r+0x25e>
 8018f32:	9b06      	ldr	r3, [sp, #24]
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	f000 8095 	beq.w	8019064 <_strtod_r+0x384>
 8018f3a:	4605      	mov	r5, r0
 8018f3c:	e000      	b.n	8018f40 <_strtod_r+0x260>
 8018f3e:	2500      	movs	r5, #0
 8018f40:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8018f42:	1c63      	adds	r3, r4, #1
 8018f44:	9317      	str	r3, [sp, #92]	; 0x5c
 8018f46:	7863      	ldrb	r3, [r4, #1]
 8018f48:	2b2b      	cmp	r3, #43	; 0x2b
 8018f4a:	d006      	beq.n	8018f5a <_strtod_r+0x27a>
 8018f4c:	2b2d      	cmp	r3, #45	; 0x2d
 8018f4e:	d002      	beq.n	8018f56 <_strtod_r+0x276>
 8018f50:	2600      	movs	r6, #0
 8018f52:	9603      	str	r6, [sp, #12]
 8018f54:	e006      	b.n	8018f64 <_strtod_r+0x284>
 8018f56:	2301      	movs	r3, #1
 8018f58:	e000      	b.n	8018f5c <_strtod_r+0x27c>
 8018f5a:	2300      	movs	r3, #0
 8018f5c:	9303      	str	r3, [sp, #12]
 8018f5e:	1ca3      	adds	r3, r4, #2
 8018f60:	9317      	str	r3, [sp, #92]	; 0x5c
 8018f62:	78a3      	ldrb	r3, [r4, #2]
 8018f64:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8018f68:	2e09      	cmp	r6, #9
 8018f6a:	d82b      	bhi.n	8018fc4 <_strtod_r+0x2e4>
 8018f6c:	2b30      	cmp	r3, #48	; 0x30
 8018f6e:	d104      	bne.n	8018f7a <_strtod_r+0x29a>
 8018f70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018f72:	1c5e      	adds	r6, r3, #1
 8018f74:	9617      	str	r6, [sp, #92]	; 0x5c
 8018f76:	785b      	ldrb	r3, [r3, #1]
 8018f78:	e7f8      	b.n	8018f6c <_strtod_r+0x28c>
 8018f7a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 8018f7e:	2e08      	cmp	r6, #8
 8018f80:	d821      	bhi.n	8018fc6 <_strtod_r+0x2e6>
 8018f82:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8018f86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018f88:	f04f 0c0a 	mov.w	ip, #10
 8018f8c:	461f      	mov	r7, r3
 8018f8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018f90:	1c5e      	adds	r6, r3, #1
 8018f92:	9617      	str	r6, [sp, #92]	; 0x5c
 8018f94:	785b      	ldrb	r3, [r3, #1]
 8018f96:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
 8018f9a:	f1b9 0f09 	cmp.w	r9, #9
 8018f9e:	d804      	bhi.n	8018faa <_strtod_r+0x2ca>
 8018fa0:	fb0c 3e0e 	mla	lr, ip, lr, r3
 8018fa4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8018fa8:	e7f1      	b.n	8018f8e <_strtod_r+0x2ae>
 8018faa:	1bf6      	subs	r6, r6, r7
 8018fac:	2e08      	cmp	r6, #8
 8018fae:	f644 691f 	movw	r9, #19999	; 0x4e1f
 8018fb2:	dc02      	bgt.n	8018fba <_strtod_r+0x2da>
 8018fb4:	45f1      	cmp	r9, lr
 8018fb6:	bfa8      	it	ge
 8018fb8:	46f1      	movge	r9, lr
 8018fba:	9e03      	ldr	r6, [sp, #12]
 8018fbc:	b12e      	cbz	r6, 8018fca <_strtod_r+0x2ea>
 8018fbe:	f1c9 0900 	rsb	r9, r9, #0
 8018fc2:	e002      	b.n	8018fca <_strtod_r+0x2ea>
 8018fc4:	9417      	str	r4, [sp, #92]	; 0x5c
 8018fc6:	f04f 0900 	mov.w	r9, #0
 8018fca:	2d00      	cmp	r5, #0
 8018fcc:	d153      	bne.n	8019076 <_strtod_r+0x396>
 8018fce:	2800      	cmp	r0, #0
 8018fd0:	f040 8451 	bne.w	8019876 <_strtod_r+0xb96>
 8018fd4:	9a06      	ldr	r2, [sp, #24]
 8018fd6:	2a00      	cmp	r2, #0
 8018fd8:	f040 844d 	bne.w	8019876 <_strtod_r+0xb96>
 8018fdc:	2900      	cmp	r1, #0
 8018fde:	d141      	bne.n	8019064 <_strtod_r+0x384>
 8018fe0:	2b4e      	cmp	r3, #78	; 0x4e
 8018fe2:	d020      	beq.n	8019026 <_strtod_r+0x346>
 8018fe4:	dc02      	bgt.n	8018fec <_strtod_r+0x30c>
 8018fe6:	2b49      	cmp	r3, #73	; 0x49
 8018fe8:	d00a      	beq.n	8019000 <_strtod_r+0x320>
 8018fea:	e03b      	b.n	8019064 <_strtod_r+0x384>
 8018fec:	2b69      	cmp	r3, #105	; 0x69
 8018fee:	d007      	beq.n	8019000 <_strtod_r+0x320>
 8018ff0:	2b6e      	cmp	r3, #110	; 0x6e
 8018ff2:	d018      	beq.n	8019026 <_strtod_r+0x346>
 8018ff4:	e036      	b.n	8019064 <_strtod_r+0x384>
 8018ff6:	bf00      	nop
 8018ff8:	08023168 	.word	0x08023168
 8018ffc:	7ff00000 	.word	0x7ff00000
 8019000:	49a8      	ldr	r1, [pc, #672]	; (80192a4 <_strtod_r+0x5c4>)
 8019002:	a817      	add	r0, sp, #92	; 0x5c
 8019004:	f000 ff80 	bl	8019f08 <__match>
 8019008:	b360      	cbz	r0, 8019064 <_strtod_r+0x384>
 801900a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801900c:	49a6      	ldr	r1, [pc, #664]	; (80192a8 <_strtod_r+0x5c8>)
 801900e:	3b01      	subs	r3, #1
 8019010:	a817      	add	r0, sp, #92	; 0x5c
 8019012:	9317      	str	r3, [sp, #92]	; 0x5c
 8019014:	f000 ff78 	bl	8019f08 <__match>
 8019018:	b910      	cbnz	r0, 8019020 <_strtod_r+0x340>
 801901a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801901c:	3301      	adds	r3, #1
 801901e:	9317      	str	r3, [sp, #92]	; 0x5c
 8019020:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 80192c4 <_strtod_r+0x5e4>
 8019024:	e01a      	b.n	801905c <_strtod_r+0x37c>
 8019026:	49a1      	ldr	r1, [pc, #644]	; (80192ac <_strtod_r+0x5cc>)
 8019028:	a817      	add	r0, sp, #92	; 0x5c
 801902a:	f000 ff6d 	bl	8019f08 <__match>
 801902e:	b1c8      	cbz	r0, 8019064 <_strtod_r+0x384>
 8019030:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019032:	781b      	ldrb	r3, [r3, #0]
 8019034:	2b28      	cmp	r3, #40	; 0x28
 8019036:	d10f      	bne.n	8019058 <_strtod_r+0x378>
 8019038:	aa1a      	add	r2, sp, #104	; 0x68
 801903a:	499d      	ldr	r1, [pc, #628]	; (80192b0 <_strtod_r+0x5d0>)
 801903c:	a817      	add	r0, sp, #92	; 0x5c
 801903e:	f000 ff76 	bl	8019f2e <__hexnan>
 8019042:	2805      	cmp	r0, #5
 8019044:	d108      	bne.n	8019058 <_strtod_r+0x378>
 8019046:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019048:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801904c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8019050:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8019054:	f000 bc0f 	b.w	8019876 <_strtod_r+0xb96>
 8019058:	f8df b26c 	ldr.w	fp, [pc, #620]	; 80192c8 <_strtod_r+0x5e8>
 801905c:	f04f 0a00 	mov.w	sl, #0
 8019060:	f000 bc09 	b.w	8019876 <_strtod_r+0xb96>
 8019064:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019066:	9417      	str	r4, [sp, #92]	; 0x5c
 8019068:	2b00      	cmp	r3, #0
 801906a:	f000 840f 	beq.w	801988c <_strtod_r+0xbac>
 801906e:	2300      	movs	r3, #0
 8019070:	930c      	str	r3, [sp, #48]	; 0x30
 8019072:	f000 bc02 	b.w	801987a <_strtod_r+0xb9a>
 8019076:	9b04      	ldr	r3, [sp, #16]
 8019078:	9805      	ldr	r0, [sp, #20]
 801907a:	2b00      	cmp	r3, #0
 801907c:	bf08      	it	eq
 801907e:	462b      	moveq	r3, r5
 8019080:	2d10      	cmp	r5, #16
 8019082:	462c      	mov	r4, r5
 8019084:	ebc2 0909 	rsb	r9, r2, r9
 8019088:	bfa8      	it	ge
 801908a:	2410      	movge	r4, #16
 801908c:	9304      	str	r3, [sp, #16]
 801908e:	f7e7 f9f9 	bl	8000484 <__aeabi_ui2d>
 8019092:	2c09      	cmp	r4, #9
 8019094:	4682      	mov	sl, r0
 8019096:	468b      	mov	fp, r1
 8019098:	dd13      	ble.n	80190c2 <_strtod_r+0x3e2>
 801909a:	4b86      	ldr	r3, [pc, #536]	; (80192b4 <_strtod_r+0x5d4>)
 801909c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80190a0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80190a4:	f7e7 fa64 	bl	8000570 <__aeabi_dmul>
 80190a8:	4606      	mov	r6, r0
 80190aa:	4640      	mov	r0, r8
 80190ac:	460f      	mov	r7, r1
 80190ae:	f7e7 f9e9 	bl	8000484 <__aeabi_ui2d>
 80190b2:	4602      	mov	r2, r0
 80190b4:	460b      	mov	r3, r1
 80190b6:	4630      	mov	r0, r6
 80190b8:	4639      	mov	r1, r7
 80190ba:	f7e7 f8a7 	bl	800020c <__adddf3>
 80190be:	4682      	mov	sl, r0
 80190c0:	468b      	mov	fp, r1
 80190c2:	2d0f      	cmp	r5, #15
 80190c4:	dc36      	bgt.n	8019134 <_strtod_r+0x454>
 80190c6:	f1b9 0f00 	cmp.w	r9, #0
 80190ca:	f000 83d4 	beq.w	8019876 <_strtod_r+0xb96>
 80190ce:	dd24      	ble.n	801911a <_strtod_r+0x43a>
 80190d0:	f1b9 0f16 	cmp.w	r9, #22
 80190d4:	dc07      	bgt.n	80190e6 <_strtod_r+0x406>
 80190d6:	4d77      	ldr	r5, [pc, #476]	; (80192b4 <_strtod_r+0x5d4>)
 80190d8:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 80190dc:	4652      	mov	r2, sl
 80190de:	465b      	mov	r3, fp
 80190e0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80190e4:	e014      	b.n	8019110 <_strtod_r+0x430>
 80190e6:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80190ea:	4599      	cmp	r9, r3
 80190ec:	dc22      	bgt.n	8019134 <_strtod_r+0x454>
 80190ee:	4c71      	ldr	r4, [pc, #452]	; (80192b4 <_strtod_r+0x5d4>)
 80190f0:	f1c5 050f 	rsb	r5, r5, #15
 80190f4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80190f8:	ebc5 0509 	rsb	r5, r5, r9
 80190fc:	4652      	mov	r2, sl
 80190fe:	465b      	mov	r3, fp
 8019100:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019104:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8019108:	f7e7 fa32 	bl	8000570 <__aeabi_dmul>
 801910c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019110:	f7e7 fa2e 	bl	8000570 <__aeabi_dmul>
 8019114:	4682      	mov	sl, r0
 8019116:	468b      	mov	fp, r1
 8019118:	e3ad      	b.n	8019876 <_strtod_r+0xb96>
 801911a:	f119 0f16 	cmn.w	r9, #22
 801911e:	db09      	blt.n	8019134 <_strtod_r+0x454>
 8019120:	4d64      	ldr	r5, [pc, #400]	; (80192b4 <_strtod_r+0x5d4>)
 8019122:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
 8019126:	e9d9 2300 	ldrd	r2, r3, [r9]
 801912a:	4650      	mov	r0, sl
 801912c:	4659      	mov	r1, fp
 801912e:	f7e7 fb49 	bl	80007c4 <__aeabi_ddiv>
 8019132:	e7ef      	b.n	8019114 <_strtod_r+0x434>
 8019134:	1b2c      	subs	r4, r5, r4
 8019136:	444c      	add	r4, r9
 8019138:	2c00      	cmp	r4, #0
 801913a:	dd57      	ble.n	80191ec <_strtod_r+0x50c>
 801913c:	f014 010f 	ands.w	r1, r4, #15
 8019140:	d00a      	beq.n	8019158 <_strtod_r+0x478>
 8019142:	4b5c      	ldr	r3, [pc, #368]	; (80192b4 <_strtod_r+0x5d4>)
 8019144:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8019148:	4652      	mov	r2, sl
 801914a:	465b      	mov	r3, fp
 801914c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019150:	f7e7 fa0e 	bl	8000570 <__aeabi_dmul>
 8019154:	4682      	mov	sl, r0
 8019156:	468b      	mov	fp, r1
 8019158:	f034 040f 	bics.w	r4, r4, #15
 801915c:	f000 80b8 	beq.w	80192d0 <_strtod_r+0x5f0>
 8019160:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 8019164:	dd0b      	ble.n	801917e <_strtod_r+0x49e>
 8019166:	2400      	movs	r4, #0
 8019168:	4625      	mov	r5, r4
 801916a:	9405      	str	r4, [sp, #20]
 801916c:	9404      	str	r4, [sp, #16]
 801916e:	9a02      	ldr	r2, [sp, #8]
 8019170:	f8df b150 	ldr.w	fp, [pc, #336]	; 80192c4 <_strtod_r+0x5e4>
 8019174:	2322      	movs	r3, #34	; 0x22
 8019176:	6013      	str	r3, [r2, #0]
 8019178:	f04f 0a00 	mov.w	sl, #0
 801917c:	e187      	b.n	801948e <_strtod_r+0x7ae>
 801917e:	4e4e      	ldr	r6, [pc, #312]	; (80192b8 <_strtod_r+0x5d8>)
 8019180:	2300      	movs	r3, #0
 8019182:	1124      	asrs	r4, r4, #4
 8019184:	4650      	mov	r0, sl
 8019186:	4659      	mov	r1, fp
 8019188:	4698      	mov	r8, r3
 801918a:	4637      	mov	r7, r6
 801918c:	2c01      	cmp	r4, #1
 801918e:	dd0b      	ble.n	80191a8 <_strtod_r+0x4c8>
 8019190:	07e2      	lsls	r2, r4, #31
 8019192:	d504      	bpl.n	801919e <_strtod_r+0x4be>
 8019194:	e9d6 2300 	ldrd	r2, r3, [r6]
 8019198:	f7e7 f9ea 	bl	8000570 <__aeabi_dmul>
 801919c:	2301      	movs	r3, #1
 801919e:	f108 0801 	add.w	r8, r8, #1
 80191a2:	1064      	asrs	r4, r4, #1
 80191a4:	3608      	adds	r6, #8
 80191a6:	e7f1      	b.n	801918c <_strtod_r+0x4ac>
 80191a8:	b10b      	cbz	r3, 80191ae <_strtod_r+0x4ce>
 80191aa:	4682      	mov	sl, r0
 80191ac:	468b      	mov	fp, r1
 80191ae:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80191b2:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 80191b6:	4652      	mov	r2, sl
 80191b8:	465b      	mov	r3, fp
 80191ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80191be:	f7e7 f9d7 	bl	8000570 <__aeabi_dmul>
 80191c2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80191c6:	468b      	mov	fp, r1
 80191c8:	460a      	mov	r2, r1
 80191ca:	0d1b      	lsrs	r3, r3, #20
 80191cc:	493b      	ldr	r1, [pc, #236]	; (80192bc <_strtod_r+0x5dc>)
 80191ce:	051b      	lsls	r3, r3, #20
 80191d0:	428b      	cmp	r3, r1
 80191d2:	4682      	mov	sl, r0
 80191d4:	d8c7      	bhi.n	8019166 <_strtod_r+0x486>
 80191d6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80191da:	428b      	cmp	r3, r1
 80191dc:	bf86      	itte	hi
 80191de:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; 80192cc <_strtod_r+0x5ec>
 80191e2:	f04f 3aff 	movhi.w	sl, #4294967295
 80191e6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80191ea:	e071      	b.n	80192d0 <_strtod_r+0x5f0>
 80191ec:	d070      	beq.n	80192d0 <_strtod_r+0x5f0>
 80191ee:	4264      	negs	r4, r4
 80191f0:	f014 020f 	ands.w	r2, r4, #15
 80191f4:	d00a      	beq.n	801920c <_strtod_r+0x52c>
 80191f6:	4b2f      	ldr	r3, [pc, #188]	; (80192b4 <_strtod_r+0x5d4>)
 80191f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80191fc:	4650      	mov	r0, sl
 80191fe:	4659      	mov	r1, fp
 8019200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019204:	f7e7 fade 	bl	80007c4 <__aeabi_ddiv>
 8019208:	4682      	mov	sl, r0
 801920a:	468b      	mov	fp, r1
 801920c:	1124      	asrs	r4, r4, #4
 801920e:	d05f      	beq.n	80192d0 <_strtod_r+0x5f0>
 8019210:	2c1f      	cmp	r4, #31
 8019212:	dd04      	ble.n	801921e <_strtod_r+0x53e>
 8019214:	2400      	movs	r4, #0
 8019216:	4625      	mov	r5, r4
 8019218:	9405      	str	r4, [sp, #20]
 801921a:	9404      	str	r4, [sp, #16]
 801921c:	e130      	b.n	8019480 <_strtod_r+0x7a0>
 801921e:	f014 0f10 	tst.w	r4, #16
 8019222:	bf0c      	ite	eq
 8019224:	2300      	moveq	r3, #0
 8019226:	236a      	movne	r3, #106	; 0x6a
 8019228:	4e25      	ldr	r6, [pc, #148]	; (80192c0 <_strtod_r+0x5e0>)
 801922a:	9303      	str	r3, [sp, #12]
 801922c:	4650      	mov	r0, sl
 801922e:	4659      	mov	r1, fp
 8019230:	2300      	movs	r3, #0
 8019232:	2c00      	cmp	r4, #0
 8019234:	dd09      	ble.n	801924a <_strtod_r+0x56a>
 8019236:	07e2      	lsls	r2, r4, #31
 8019238:	d504      	bpl.n	8019244 <_strtod_r+0x564>
 801923a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801923e:	f7e7 f997 	bl	8000570 <__aeabi_dmul>
 8019242:	2301      	movs	r3, #1
 8019244:	1064      	asrs	r4, r4, #1
 8019246:	3608      	adds	r6, #8
 8019248:	e7f3      	b.n	8019232 <_strtod_r+0x552>
 801924a:	b10b      	cbz	r3, 8019250 <_strtod_r+0x570>
 801924c:	4682      	mov	sl, r0
 801924e:	468b      	mov	fp, r1
 8019250:	9b03      	ldr	r3, [sp, #12]
 8019252:	b1eb      	cbz	r3, 8019290 <_strtod_r+0x5b0>
 8019254:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8019258:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801925c:	2b00      	cmp	r3, #0
 801925e:	4659      	mov	r1, fp
 8019260:	dd16      	ble.n	8019290 <_strtod_r+0x5b0>
 8019262:	2b1f      	cmp	r3, #31
 8019264:	dd0e      	ble.n	8019284 <_strtod_r+0x5a4>
 8019266:	2b34      	cmp	r3, #52	; 0x34
 8019268:	bfde      	ittt	le
 801926a:	3b20      	suble	r3, #32
 801926c:	f04f 32ff 	movle.w	r2, #4294967295
 8019270:	fa02 f303 	lslle.w	r3, r2, r3
 8019274:	f04f 0a00 	mov.w	sl, #0
 8019278:	bfcc      	ite	gt
 801927a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801927e:	ea03 0b01 	andle.w	fp, r3, r1
 8019282:	e005      	b.n	8019290 <_strtod_r+0x5b0>
 8019284:	f04f 32ff 	mov.w	r2, #4294967295
 8019288:	fa02 f303 	lsl.w	r3, r2, r3
 801928c:	ea03 0a0a 	and.w	sl, r3, sl
 8019290:	2200      	movs	r2, #0
 8019292:	2300      	movs	r3, #0
 8019294:	4650      	mov	r0, sl
 8019296:	4659      	mov	r1, fp
 8019298:	f7e7 fbd2 	bl	8000a40 <__aeabi_dcmpeq>
 801929c:	2800      	cmp	r0, #0
 801929e:	d1b9      	bne.n	8019214 <_strtod_r+0x534>
 80192a0:	e018      	b.n	80192d4 <_strtod_r+0x5f4>
 80192a2:	bf00      	nop
 80192a4:	0802317c 	.word	0x0802317c
 80192a8:	0802317f 	.word	0x0802317f
 80192ac:	08023185 	.word	0x08023185
 80192b0:	08023188 	.word	0x08023188
 80192b4:	080232d8 	.word	0x080232d8
 80192b8:	080233a0 	.word	0x080233a0
 80192bc:	7ca00000 	.word	0x7ca00000
 80192c0:	080231a0 	.word	0x080231a0
 80192c4:	7ff00000 	.word	0x7ff00000
 80192c8:	fff80000 	.word	0xfff80000
 80192cc:	7fefffff 	.word	0x7fefffff
 80192d0:	2300      	movs	r3, #0
 80192d2:	9303      	str	r3, [sp, #12]
 80192d4:	9b05      	ldr	r3, [sp, #20]
 80192d6:	9300      	str	r3, [sp, #0]
 80192d8:	9a04      	ldr	r2, [sp, #16]
 80192da:	9907      	ldr	r1, [sp, #28]
 80192dc:	9802      	ldr	r0, [sp, #8]
 80192de:	462b      	mov	r3, r5
 80192e0:	f000 ff3f 	bl	801a162 <__s2b>
 80192e4:	9005      	str	r0, [sp, #20]
 80192e6:	2800      	cmp	r0, #0
 80192e8:	f43f af3d 	beq.w	8019166 <_strtod_r+0x486>
 80192ec:	f1b9 0f00 	cmp.w	r9, #0
 80192f0:	f1c9 0300 	rsb	r3, r9, #0
 80192f4:	bfa8      	it	ge
 80192f6:	2300      	movge	r3, #0
 80192f8:	930d      	str	r3, [sp, #52]	; 0x34
 80192fa:	2400      	movs	r4, #0
 80192fc:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 8019300:	9312      	str	r3, [sp, #72]	; 0x48
 8019302:	4625      	mov	r5, r4
 8019304:	9b05      	ldr	r3, [sp, #20]
 8019306:	9802      	ldr	r0, [sp, #8]
 8019308:	6859      	ldr	r1, [r3, #4]
 801930a:	f000 fea3 	bl	801a054 <_Balloc>
 801930e:	9004      	str	r0, [sp, #16]
 8019310:	2800      	cmp	r0, #0
 8019312:	f43f af2c 	beq.w	801916e <_strtod_r+0x48e>
 8019316:	9b05      	ldr	r3, [sp, #20]
 8019318:	691a      	ldr	r2, [r3, #16]
 801931a:	3202      	adds	r2, #2
 801931c:	f103 010c 	add.w	r1, r3, #12
 8019320:	0092      	lsls	r2, r2, #2
 8019322:	300c      	adds	r0, #12
 8019324:	f7ff fc7b 	bl	8018c1e <memcpy>
 8019328:	aa1a      	add	r2, sp, #104	; 0x68
 801932a:	a919      	add	r1, sp, #100	; 0x64
 801932c:	ec4b ab10 	vmov	d0, sl, fp
 8019330:	9802      	ldr	r0, [sp, #8]
 8019332:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8019336:	f001 f9c8 	bl	801a6ca <__d2b>
 801933a:	9018      	str	r0, [sp, #96]	; 0x60
 801933c:	2800      	cmp	r0, #0
 801933e:	f43f af16 	beq.w	801916e <_strtod_r+0x48e>
 8019342:	2101      	movs	r1, #1
 8019344:	9802      	ldr	r0, [sp, #8]
 8019346:	f000 ff97 	bl	801a278 <__i2b>
 801934a:	4605      	mov	r5, r0
 801934c:	2800      	cmp	r0, #0
 801934e:	f43f af0e 	beq.w	801916e <_strtod_r+0x48e>
 8019352:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019354:	9903      	ldr	r1, [sp, #12]
 8019356:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8019358:	2b00      	cmp	r3, #0
 801935a:	bfad      	iteet	ge
 801935c:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 801935e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8019360:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
 8019364:	eb02 0803 	addge.w	r8, r2, r3
 8019368:	bfb8      	it	lt
 801936a:	1ad2      	sublt	r2, r2, r3
 801936c:	eba3 0301 	sub.w	r3, r3, r1
 8019370:	4433      	add	r3, r6
 8019372:	49b5      	ldr	r1, [pc, #724]	; (8019648 <_strtod_r+0x968>)
 8019374:	bfa8      	it	ge
 8019376:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 8019378:	3b01      	subs	r3, #1
 801937a:	428b      	cmp	r3, r1
 801937c:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
 8019380:	f280 808a 	bge.w	8019498 <_strtod_r+0x7b8>
 8019384:	1ac9      	subs	r1, r1, r3
 8019386:	291f      	cmp	r1, #31
 8019388:	bfc8      	it	gt
 801938a:	4fb0      	ldrgt	r7, [pc, #704]	; (801964c <_strtod_r+0x96c>)
 801938c:	f04f 0901 	mov.w	r9, #1
 8019390:	bfd4      	ite	le
 8019392:	fa09 f301 	lslle.w	r3, r9, r1
 8019396:	1aff      	subgt	r7, r7, r3
 8019398:	eba6 0601 	sub.w	r6, r6, r1
 801939c:	bfd9      	ittee	le
 801939e:	9306      	strle	r3, [sp, #24]
 80193a0:	2700      	movle	r7, #0
 80193a2:	fa09 f707 	lslgt.w	r7, r9, r7
 80193a6:	f8cd 9018 	strgt.w	r9, [sp, #24]
 80193aa:	eb08 0906 	add.w	r9, r8, r6
 80193ae:	9b03      	ldr	r3, [sp, #12]
 80193b0:	45c8      	cmp	r8, r9
 80193b2:	4416      	add	r6, r2
 80193b4:	441e      	add	r6, r3
 80193b6:	4643      	mov	r3, r8
 80193b8:	bfa8      	it	ge
 80193ba:	464b      	movge	r3, r9
 80193bc:	42b3      	cmp	r3, r6
 80193be:	bfa8      	it	ge
 80193c0:	4633      	movge	r3, r6
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	bfc2      	ittt	gt
 80193c6:	ebc3 0909 	rsbgt	r9, r3, r9
 80193ca:	1af6      	subgt	r6, r6, r3
 80193cc:	ebc3 0808 	rsbgt	r8, r3, r8
 80193d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	d164      	bne.n	80194a0 <_strtod_r+0x7c0>
 80193d6:	f1b9 0f00 	cmp.w	r9, #0
 80193da:	dc7a      	bgt.n	80194d2 <_strtod_r+0x7f2>
 80193dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80193de:	2b00      	cmp	r3, #0
 80193e0:	f040 8081 	bne.w	80194e6 <_strtod_r+0x806>
 80193e4:	2e00      	cmp	r6, #0
 80193e6:	f300 8088 	bgt.w	80194fa <_strtod_r+0x81a>
 80193ea:	f1b8 0f00 	cmp.w	r8, #0
 80193ee:	f300 808e 	bgt.w	801950e <_strtod_r+0x82e>
 80193f2:	9a04      	ldr	r2, [sp, #16]
 80193f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80193f6:	9802      	ldr	r0, [sp, #8]
 80193f8:	f001 f893 	bl	801a522 <__mdiff>
 80193fc:	4604      	mov	r4, r0
 80193fe:	2800      	cmp	r0, #0
 8019400:	f43f aeb5 	beq.w	801916e <_strtod_r+0x48e>
 8019404:	68c3      	ldr	r3, [r0, #12]
 8019406:	9307      	str	r3, [sp, #28]
 8019408:	2300      	movs	r3, #0
 801940a:	60c3      	str	r3, [r0, #12]
 801940c:	4629      	mov	r1, r5
 801940e:	f001 f86c 	bl	801a4ea <__mcmp>
 8019412:	2800      	cmp	r0, #0
 8019414:	f280 8089 	bge.w	801952a <_strtod_r+0x84a>
 8019418:	9b07      	ldr	r3, [sp, #28]
 801941a:	2b00      	cmp	r3, #0
 801941c:	f040 8204 	bne.w	8019828 <_strtod_r+0xb48>
 8019420:	f1ba 0f00 	cmp.w	sl, #0
 8019424:	f040 8200 	bne.w	8019828 <_strtod_r+0xb48>
 8019428:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801942c:	2b00      	cmp	r3, #0
 801942e:	f040 81fb 	bne.w	8019828 <_strtod_r+0xb48>
 8019432:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8019436:	0d1b      	lsrs	r3, r3, #20
 8019438:	051b      	lsls	r3, r3, #20
 801943a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801943e:	f240 81f3 	bls.w	8019828 <_strtod_r+0xb48>
 8019442:	6963      	ldr	r3, [r4, #20]
 8019444:	2b00      	cmp	r3, #0
 8019446:	d06c      	beq.n	8019522 <_strtod_r+0x842>
 8019448:	4621      	mov	r1, r4
 801944a:	2201      	movs	r2, #1
 801944c:	9802      	ldr	r0, [sp, #8]
 801944e:	f000 fffb 	bl	801a448 <__lshift>
 8019452:	4629      	mov	r1, r5
 8019454:	4604      	mov	r4, r0
 8019456:	f001 f848 	bl	801a4ea <__mcmp>
 801945a:	2800      	cmp	r0, #0
 801945c:	f340 81e4 	ble.w	8019828 <_strtod_r+0xb48>
 8019460:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8019464:	9a03      	ldr	r2, [sp, #12]
 8019466:	0d1b      	lsrs	r3, r3, #20
 8019468:	051b      	lsls	r3, r3, #20
 801946a:	2a00      	cmp	r2, #0
 801946c:	f000 808c 	beq.w	8019588 <_strtod_r+0x8a8>
 8019470:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8019474:	f300 8088 	bgt.w	8019588 <_strtod_r+0x8a8>
 8019478:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 801947c:	f300 81d6 	bgt.w	801982c <_strtod_r+0xb4c>
 8019480:	9a02      	ldr	r2, [sp, #8]
 8019482:	2322      	movs	r3, #34	; 0x22
 8019484:	f04f 0a00 	mov.w	sl, #0
 8019488:	f04f 0b00 	mov.w	fp, #0
 801948c:	6013      	str	r3, [r2, #0]
 801948e:	9b05      	ldr	r3, [sp, #20]
 8019490:	2b00      	cmp	r3, #0
 8019492:	f040 81dc 	bne.w	801984e <_strtod_r+0xb6e>
 8019496:	e1ee      	b.n	8019876 <_strtod_r+0xb96>
 8019498:	2301      	movs	r3, #1
 801949a:	2700      	movs	r7, #0
 801949c:	9306      	str	r3, [sp, #24]
 801949e:	e784      	b.n	80193aa <_strtod_r+0x6ca>
 80194a0:	4629      	mov	r1, r5
 80194a2:	461a      	mov	r2, r3
 80194a4:	9802      	ldr	r0, [sp, #8]
 80194a6:	f000 ff81 	bl	801a3ac <__pow5mult>
 80194aa:	4605      	mov	r5, r0
 80194ac:	2800      	cmp	r0, #0
 80194ae:	f43f ae5e 	beq.w	801916e <_strtod_r+0x48e>
 80194b2:	4601      	mov	r1, r0
 80194b4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80194b6:	9802      	ldr	r0, [sp, #8]
 80194b8:	f000 fee7 	bl	801a28a <__multiply>
 80194bc:	9007      	str	r0, [sp, #28]
 80194be:	2800      	cmp	r0, #0
 80194c0:	f43f ae55 	beq.w	801916e <_strtod_r+0x48e>
 80194c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80194c6:	9802      	ldr	r0, [sp, #8]
 80194c8:	f000 fdf9 	bl	801a0be <_Bfree>
 80194cc:	9b07      	ldr	r3, [sp, #28]
 80194ce:	9318      	str	r3, [sp, #96]	; 0x60
 80194d0:	e781      	b.n	80193d6 <_strtod_r+0x6f6>
 80194d2:	464a      	mov	r2, r9
 80194d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80194d6:	9802      	ldr	r0, [sp, #8]
 80194d8:	f000 ffb6 	bl	801a448 <__lshift>
 80194dc:	9018      	str	r0, [sp, #96]	; 0x60
 80194de:	2800      	cmp	r0, #0
 80194e0:	f47f af7c 	bne.w	80193dc <_strtod_r+0x6fc>
 80194e4:	e643      	b.n	801916e <_strtod_r+0x48e>
 80194e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80194e8:	9904      	ldr	r1, [sp, #16]
 80194ea:	9802      	ldr	r0, [sp, #8]
 80194ec:	f000 ff5e 	bl	801a3ac <__pow5mult>
 80194f0:	9004      	str	r0, [sp, #16]
 80194f2:	2800      	cmp	r0, #0
 80194f4:	f47f af76 	bne.w	80193e4 <_strtod_r+0x704>
 80194f8:	e639      	b.n	801916e <_strtod_r+0x48e>
 80194fa:	4632      	mov	r2, r6
 80194fc:	9904      	ldr	r1, [sp, #16]
 80194fe:	9802      	ldr	r0, [sp, #8]
 8019500:	f000 ffa2 	bl	801a448 <__lshift>
 8019504:	9004      	str	r0, [sp, #16]
 8019506:	2800      	cmp	r0, #0
 8019508:	f47f af6f 	bne.w	80193ea <_strtod_r+0x70a>
 801950c:	e62f      	b.n	801916e <_strtod_r+0x48e>
 801950e:	4629      	mov	r1, r5
 8019510:	4642      	mov	r2, r8
 8019512:	9802      	ldr	r0, [sp, #8]
 8019514:	f000 ff98 	bl	801a448 <__lshift>
 8019518:	4605      	mov	r5, r0
 801951a:	2800      	cmp	r0, #0
 801951c:	f47f af69 	bne.w	80193f2 <_strtod_r+0x712>
 8019520:	e625      	b.n	801916e <_strtod_r+0x48e>
 8019522:	6923      	ldr	r3, [r4, #16]
 8019524:	2b01      	cmp	r3, #1
 8019526:	dc8f      	bgt.n	8019448 <_strtod_r+0x768>
 8019528:	e17e      	b.n	8019828 <_strtod_r+0xb48>
 801952a:	d161      	bne.n	80195f0 <_strtod_r+0x910>
 801952c:	9a07      	ldr	r2, [sp, #28]
 801952e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019532:	b322      	cbz	r2, 801957e <_strtod_r+0x89e>
 8019534:	4946      	ldr	r1, [pc, #280]	; (8019650 <_strtod_r+0x970>)
 8019536:	428b      	cmp	r3, r1
 8019538:	465a      	mov	r2, fp
 801953a:	d12e      	bne.n	801959a <_strtod_r+0x8ba>
 801953c:	9b03      	ldr	r3, [sp, #12]
 801953e:	4651      	mov	r1, sl
 8019540:	b163      	cbz	r3, 801955c <_strtod_r+0x87c>
 8019542:	4b44      	ldr	r3, [pc, #272]	; (8019654 <_strtod_r+0x974>)
 8019544:	4013      	ands	r3, r2
 8019546:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801954a:	d807      	bhi.n	801955c <_strtod_r+0x87c>
 801954c:	0d1b      	lsrs	r3, r3, #20
 801954e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8019552:	f04f 30ff 	mov.w	r0, #4294967295
 8019556:	fa00 f303 	lsl.w	r3, r0, r3
 801955a:	e001      	b.n	8019560 <_strtod_r+0x880>
 801955c:	f04f 33ff 	mov.w	r3, #4294967295
 8019560:	428b      	cmp	r3, r1
 8019562:	d11a      	bne.n	801959a <_strtod_r+0x8ba>
 8019564:	493c      	ldr	r1, [pc, #240]	; (8019658 <_strtod_r+0x978>)
 8019566:	428a      	cmp	r2, r1
 8019568:	d102      	bne.n	8019570 <_strtod_r+0x890>
 801956a:	3301      	adds	r3, #1
 801956c:	f43f adff 	beq.w	801916e <_strtod_r+0x48e>
 8019570:	4b38      	ldr	r3, [pc, #224]	; (8019654 <_strtod_r+0x974>)
 8019572:	4013      	ands	r3, r2
 8019574:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8019578:	f04f 0a00 	mov.w	sl, #0
 801957c:	e154      	b.n	8019828 <_strtod_r+0xb48>
 801957e:	b963      	cbnz	r3, 801959a <_strtod_r+0x8ba>
 8019580:	f1ba 0f00 	cmp.w	sl, #0
 8019584:	d109      	bne.n	801959a <_strtod_r+0x8ba>
 8019586:	e76b      	b.n	8019460 <_strtod_r+0x780>
 8019588:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801958c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8019590:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8019594:	f04f 3aff 	mov.w	sl, #4294967295
 8019598:	e146      	b.n	8019828 <_strtod_r+0xb48>
 801959a:	b117      	cbz	r7, 80195a2 <_strtod_r+0x8c2>
 801959c:	ea17 0f0b 	tst.w	r7, fp
 80195a0:	e002      	b.n	80195a8 <_strtod_r+0x8c8>
 80195a2:	9b06      	ldr	r3, [sp, #24]
 80195a4:	ea13 0f0a 	tst.w	r3, sl
 80195a8:	f000 813e 	beq.w	8019828 <_strtod_r+0xb48>
 80195ac:	9b07      	ldr	r3, [sp, #28]
 80195ae:	9a03      	ldr	r2, [sp, #12]
 80195b0:	4650      	mov	r0, sl
 80195b2:	4659      	mov	r1, fp
 80195b4:	b153      	cbz	r3, 80195cc <_strtod_r+0x8ec>
 80195b6:	f7ff fb77 	bl	8018ca8 <sulp>
 80195ba:	4602      	mov	r2, r0
 80195bc:	460b      	mov	r3, r1
 80195be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80195c2:	f7e6 fe23 	bl	800020c <__adddf3>
 80195c6:	4682      	mov	sl, r0
 80195c8:	468b      	mov	fp, r1
 80195ca:	e12d      	b.n	8019828 <_strtod_r+0xb48>
 80195cc:	f7ff fb6c 	bl	8018ca8 <sulp>
 80195d0:	4602      	mov	r2, r0
 80195d2:	460b      	mov	r3, r1
 80195d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80195d8:	f7e6 fe16 	bl	8000208 <__aeabi_dsub>
 80195dc:	2200      	movs	r2, #0
 80195de:	2300      	movs	r3, #0
 80195e0:	4682      	mov	sl, r0
 80195e2:	468b      	mov	fp, r1
 80195e4:	f7e7 fa2c 	bl	8000a40 <__aeabi_dcmpeq>
 80195e8:	2800      	cmp	r0, #0
 80195ea:	f47f af49 	bne.w	8019480 <_strtod_r+0x7a0>
 80195ee:	e11b      	b.n	8019828 <_strtod_r+0xb48>
 80195f0:	4629      	mov	r1, r5
 80195f2:	4620      	mov	r0, r4
 80195f4:	f001 f8b7 	bl	801a766 <__ratio>
 80195f8:	ec57 6b10 	vmov	r6, r7, d0
 80195fc:	2200      	movs	r2, #0
 80195fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019602:	ee10 0a10 	vmov	r0, s0
 8019606:	4639      	mov	r1, r7
 8019608:	f7e7 fa2e 	bl	8000a68 <__aeabi_dcmple>
 801960c:	2800      	cmp	r0, #0
 801960e:	d042      	beq.n	8019696 <_strtod_r+0x9b6>
 8019610:	9b07      	ldr	r3, [sp, #28]
 8019612:	b123      	cbz	r3, 801961e <_strtod_r+0x93e>
 8019614:	f04f 0800 	mov.w	r8, #0
 8019618:	f8df 9040 	ldr.w	r9, [pc, #64]	; 801965c <_strtod_r+0x97c>
 801961c:	e011      	b.n	8019642 <_strtod_r+0x962>
 801961e:	f1ba 0f00 	cmp.w	sl, #0
 8019622:	d103      	bne.n	801962c <_strtod_r+0x94c>
 8019624:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019628:	b93b      	cbnz	r3, 801963a <_strtod_r+0x95a>
 801962a:	e01b      	b.n	8019664 <_strtod_r+0x984>
 801962c:	f1ba 0f01 	cmp.w	sl, #1
 8019630:	d103      	bne.n	801963a <_strtod_r+0x95a>
 8019632:	f1bb 0f00 	cmp.w	fp, #0
 8019636:	f43f af23 	beq.w	8019480 <_strtod_r+0x7a0>
 801963a:	f8df 9024 	ldr.w	r9, [pc, #36]	; 8019660 <_strtod_r+0x980>
 801963e:	f04f 0800 	mov.w	r8, #0
 8019642:	2600      	movs	r6, #0
 8019644:	4f05      	ldr	r7, [pc, #20]	; (801965c <_strtod_r+0x97c>)
 8019646:	e039      	b.n	80196bc <_strtod_r+0x9dc>
 8019648:	fffffc02 	.word	0xfffffc02
 801964c:	fffffbe2 	.word	0xfffffbe2
 8019650:	000fffff 	.word	0x000fffff
 8019654:	7ff00000 	.word	0x7ff00000
 8019658:	7fefffff 	.word	0x7fefffff
 801965c:	3ff00000 	.word	0x3ff00000
 8019660:	bff00000 	.word	0xbff00000
 8019664:	2200      	movs	r2, #0
 8019666:	4b98      	ldr	r3, [pc, #608]	; (80198c8 <_strtod_r+0xbe8>)
 8019668:	4630      	mov	r0, r6
 801966a:	4639      	mov	r1, r7
 801966c:	f7e7 f9f2 	bl	8000a54 <__aeabi_dcmplt>
 8019670:	b940      	cbnz	r0, 8019684 <_strtod_r+0x9a4>
 8019672:	4630      	mov	r0, r6
 8019674:	4639      	mov	r1, r7
 8019676:	2200      	movs	r2, #0
 8019678:	4b94      	ldr	r3, [pc, #592]	; (80198cc <_strtod_r+0xbec>)
 801967a:	f7e6 ff79 	bl	8000570 <__aeabi_dmul>
 801967e:	4606      	mov	r6, r0
 8019680:	460f      	mov	r7, r1
 8019682:	e001      	b.n	8019688 <_strtod_r+0x9a8>
 8019684:	4f91      	ldr	r7, [pc, #580]	; (80198cc <_strtod_r+0xbec>)
 8019686:	2600      	movs	r6, #0
 8019688:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801968c:	9614      	str	r6, [sp, #80]	; 0x50
 801968e:	9315      	str	r3, [sp, #84]	; 0x54
 8019690:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8019694:	e012      	b.n	80196bc <_strtod_r+0x9dc>
 8019696:	4b8d      	ldr	r3, [pc, #564]	; (80198cc <_strtod_r+0xbec>)
 8019698:	4630      	mov	r0, r6
 801969a:	4639      	mov	r1, r7
 801969c:	2200      	movs	r2, #0
 801969e:	f7e6 ff67 	bl	8000570 <__aeabi_dmul>
 80196a2:	9b07      	ldr	r3, [sp, #28]
 80196a4:	4606      	mov	r6, r0
 80196a6:	460f      	mov	r7, r1
 80196a8:	b923      	cbnz	r3, 80196b4 <_strtod_r+0x9d4>
 80196aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80196ae:	900e      	str	r0, [sp, #56]	; 0x38
 80196b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80196b2:	e001      	b.n	80196b8 <_strtod_r+0x9d8>
 80196b4:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 80196b8:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 80196bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80196c0:	0d1b      	lsrs	r3, r3, #20
 80196c2:	051b      	lsls	r3, r3, #20
 80196c4:	9306      	str	r3, [sp, #24]
 80196c6:	9a06      	ldr	r2, [sp, #24]
 80196c8:	4b81      	ldr	r3, [pc, #516]	; (80198d0 <_strtod_r+0xbf0>)
 80196ca:	429a      	cmp	r2, r3
 80196cc:	d12b      	bne.n	8019726 <_strtod_r+0xa46>
 80196ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80196d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80196d6:	ec4b ab10 	vmov	d0, sl, fp
 80196da:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80196de:	f000 ff7f 	bl	801a5e0 <__ulp>
 80196e2:	4640      	mov	r0, r8
 80196e4:	ec53 2b10 	vmov	r2, r3, d0
 80196e8:	4649      	mov	r1, r9
 80196ea:	f7e6 ff41 	bl	8000570 <__aeabi_dmul>
 80196ee:	4652      	mov	r2, sl
 80196f0:	465b      	mov	r3, fp
 80196f2:	f7e6 fd8b 	bl	800020c <__adddf3>
 80196f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80196fa:	0d1b      	lsrs	r3, r3, #20
 80196fc:	4a75      	ldr	r2, [pc, #468]	; (80198d4 <_strtod_r+0xbf4>)
 80196fe:	051b      	lsls	r3, r3, #20
 8019700:	4293      	cmp	r3, r2
 8019702:	4682      	mov	sl, r0
 8019704:	d90c      	bls.n	8019720 <_strtod_r+0xa40>
 8019706:	4b74      	ldr	r3, [pc, #464]	; (80198d8 <_strtod_r+0xbf8>)
 8019708:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801970a:	429a      	cmp	r2, r3
 801970c:	d103      	bne.n	8019716 <_strtod_r+0xa36>
 801970e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019710:	3301      	adds	r3, #1
 8019712:	f43f ad2c 	beq.w	801916e <_strtod_r+0x48e>
 8019716:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 80198d8 <_strtod_r+0xbf8>
 801971a:	f04f 3aff 	mov.w	sl, #4294967295
 801971e:	e072      	b.n	8019806 <_strtod_r+0xb26>
 8019720:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 8019724:	e038      	b.n	8019798 <_strtod_r+0xab8>
 8019726:	9b03      	ldr	r3, [sp, #12]
 8019728:	b333      	cbz	r3, 8019778 <_strtod_r+0xa98>
 801972a:	9b06      	ldr	r3, [sp, #24]
 801972c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8019730:	d822      	bhi.n	8019778 <_strtod_r+0xa98>
 8019732:	a35d      	add	r3, pc, #372	; (adr r3, 80198a8 <_strtod_r+0xbc8>)
 8019734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019738:	4630      	mov	r0, r6
 801973a:	4639      	mov	r1, r7
 801973c:	f7e7 f994 	bl	8000a68 <__aeabi_dcmple>
 8019740:	b1a8      	cbz	r0, 801976e <_strtod_r+0xa8e>
 8019742:	4639      	mov	r1, r7
 8019744:	4630      	mov	r0, r6
 8019746:	f7e7 f9d5 	bl	8000af4 <__aeabi_d2uiz>
 801974a:	2800      	cmp	r0, #0
 801974c:	bf08      	it	eq
 801974e:	2001      	moveq	r0, #1
 8019750:	f7e6 fe98 	bl	8000484 <__aeabi_ui2d>
 8019754:	9b07      	ldr	r3, [sp, #28]
 8019756:	4606      	mov	r6, r0
 8019758:	460f      	mov	r7, r1
 801975a:	b923      	cbnz	r3, 8019766 <_strtod_r+0xa86>
 801975c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019760:	9010      	str	r0, [sp, #64]	; 0x40
 8019762:	9311      	str	r3, [sp, #68]	; 0x44
 8019764:	e001      	b.n	801976a <_strtod_r+0xa8a>
 8019766:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801976a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 801976e:	9a06      	ldr	r2, [sp, #24]
 8019770:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
 8019774:	ebc2 0903 	rsb	r9, r2, r3
 8019778:	ed9d 0b08 	vldr	d0, [sp, #32]
 801977c:	f000 ff30 	bl	801a5e0 <__ulp>
 8019780:	4640      	mov	r0, r8
 8019782:	ec53 2b10 	vmov	r2, r3, d0
 8019786:	4649      	mov	r1, r9
 8019788:	f7e6 fef2 	bl	8000570 <__aeabi_dmul>
 801978c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8019790:	f7e6 fd3c 	bl	800020c <__adddf3>
 8019794:	4682      	mov	sl, r0
 8019796:	468b      	mov	fp, r1
 8019798:	9b03      	ldr	r3, [sp, #12]
 801979a:	bba3      	cbnz	r3, 8019806 <_strtod_r+0xb26>
 801979c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80197a0:	0d1b      	lsrs	r3, r3, #20
 80197a2:	9a06      	ldr	r2, [sp, #24]
 80197a4:	051b      	lsls	r3, r3, #20
 80197a6:	429a      	cmp	r2, r3
 80197a8:	46d8      	mov	r8, fp
 80197aa:	d12c      	bne.n	8019806 <_strtod_r+0xb26>
 80197ac:	4639      	mov	r1, r7
 80197ae:	4630      	mov	r0, r6
 80197b0:	f7e7 f978 	bl	8000aa4 <__aeabi_d2iz>
 80197b4:	f7e6 fe76 	bl	80004a4 <__aeabi_i2d>
 80197b8:	460b      	mov	r3, r1
 80197ba:	4602      	mov	r2, r0
 80197bc:	4639      	mov	r1, r7
 80197be:	4630      	mov	r0, r6
 80197c0:	f7e6 fd22 	bl	8000208 <__aeabi_dsub>
 80197c4:	9b07      	ldr	r3, [sp, #28]
 80197c6:	4606      	mov	r6, r0
 80197c8:	460f      	mov	r7, r1
 80197ca:	b92b      	cbnz	r3, 80197d8 <_strtod_r+0xaf8>
 80197cc:	f1ba 0f00 	cmp.w	sl, #0
 80197d0:	d102      	bne.n	80197d8 <_strtod_r+0xaf8>
 80197d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80197d6:	b183      	cbz	r3, 80197fa <_strtod_r+0xb1a>
 80197d8:	a335      	add	r3, pc, #212	; (adr r3, 80198b0 <_strtod_r+0xbd0>)
 80197da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197de:	4630      	mov	r0, r6
 80197e0:	4639      	mov	r1, r7
 80197e2:	f7e7 f937 	bl	8000a54 <__aeabi_dcmplt>
 80197e6:	2800      	cmp	r0, #0
 80197e8:	d131      	bne.n	801984e <_strtod_r+0xb6e>
 80197ea:	a333      	add	r3, pc, #204	; (adr r3, 80198b8 <_strtod_r+0xbd8>)
 80197ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197f0:	4630      	mov	r0, r6
 80197f2:	4639      	mov	r1, r7
 80197f4:	f7e7 f94c 	bl	8000a90 <__aeabi_dcmpgt>
 80197f8:	e004      	b.n	8019804 <_strtod_r+0xb24>
 80197fa:	a331      	add	r3, pc, #196	; (adr r3, 80198c0 <_strtod_r+0xbe0>)
 80197fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019800:	f7e7 f928 	bl	8000a54 <__aeabi_dcmplt>
 8019804:	bb18      	cbnz	r0, 801984e <_strtod_r+0xb6e>
 8019806:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019808:	9802      	ldr	r0, [sp, #8]
 801980a:	f000 fc58 	bl	801a0be <_Bfree>
 801980e:	9904      	ldr	r1, [sp, #16]
 8019810:	9802      	ldr	r0, [sp, #8]
 8019812:	f000 fc54 	bl	801a0be <_Bfree>
 8019816:	4629      	mov	r1, r5
 8019818:	9802      	ldr	r0, [sp, #8]
 801981a:	f000 fc50 	bl	801a0be <_Bfree>
 801981e:	4621      	mov	r1, r4
 8019820:	9802      	ldr	r0, [sp, #8]
 8019822:	f000 fc4c 	bl	801a0be <_Bfree>
 8019826:	e56d      	b.n	8019304 <_strtod_r+0x624>
 8019828:	9b03      	ldr	r3, [sp, #12]
 801982a:	b183      	cbz	r3, 801984e <_strtod_r+0xb6e>
 801982c:	4b2b      	ldr	r3, [pc, #172]	; (80198dc <_strtod_r+0xbfc>)
 801982e:	930b      	str	r3, [sp, #44]	; 0x2c
 8019830:	2300      	movs	r3, #0
 8019832:	930a      	str	r3, [sp, #40]	; 0x28
 8019834:	4650      	mov	r0, sl
 8019836:	4659      	mov	r1, fp
 8019838:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801983c:	f7e6 fe98 	bl	8000570 <__aeabi_dmul>
 8019840:	4682      	mov	sl, r0
 8019842:	468b      	mov	fp, r1
 8019844:	b919      	cbnz	r1, 801984e <_strtod_r+0xb6e>
 8019846:	b910      	cbnz	r0, 801984e <_strtod_r+0xb6e>
 8019848:	9a02      	ldr	r2, [sp, #8]
 801984a:	2322      	movs	r3, #34	; 0x22
 801984c:	6013      	str	r3, [r2, #0]
 801984e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019850:	9802      	ldr	r0, [sp, #8]
 8019852:	f000 fc34 	bl	801a0be <_Bfree>
 8019856:	9904      	ldr	r1, [sp, #16]
 8019858:	9802      	ldr	r0, [sp, #8]
 801985a:	f000 fc30 	bl	801a0be <_Bfree>
 801985e:	4629      	mov	r1, r5
 8019860:	9802      	ldr	r0, [sp, #8]
 8019862:	f000 fc2c 	bl	801a0be <_Bfree>
 8019866:	9905      	ldr	r1, [sp, #20]
 8019868:	9802      	ldr	r0, [sp, #8]
 801986a:	f000 fc28 	bl	801a0be <_Bfree>
 801986e:	4621      	mov	r1, r4
 8019870:	9802      	ldr	r0, [sp, #8]
 8019872:	f000 fc24 	bl	801a0be <_Bfree>
 8019876:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019878:	b113      	cbz	r3, 8019880 <_strtod_r+0xba0>
 801987a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801987c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801987e:	6013      	str	r3, [r2, #0]
 8019880:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019882:	b11b      	cbz	r3, 801988c <_strtod_r+0xbac>
 8019884:	4652      	mov	r2, sl
 8019886:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801988a:	e007      	b.n	801989c <_strtod_r+0xbbc>
 801988c:	4652      	mov	r2, sl
 801988e:	465b      	mov	r3, fp
 8019890:	e004      	b.n	801989c <_strtod_r+0xbbc>
 8019892:	2500      	movs	r5, #0
 8019894:	462a      	mov	r2, r5
 8019896:	2101      	movs	r1, #1
 8019898:	f7ff bb41 	b.w	8018f1e <_strtod_r+0x23e>
 801989c:	ec43 2b10 	vmov	d0, r2, r3
 80198a0:	b01d      	add	sp, #116	; 0x74
 80198a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198a6:	bf00      	nop
 80198a8:	ffc00000 	.word	0xffc00000
 80198ac:	41dfffff 	.word	0x41dfffff
 80198b0:	94a03595 	.word	0x94a03595
 80198b4:	3fdfffff 	.word	0x3fdfffff
 80198b8:	35afe535 	.word	0x35afe535
 80198bc:	3fe00000 	.word	0x3fe00000
 80198c0:	94a03595 	.word	0x94a03595
 80198c4:	3fcfffff 	.word	0x3fcfffff
 80198c8:	3ff00000 	.word	0x3ff00000
 80198cc:	3fe00000 	.word	0x3fe00000
 80198d0:	7fe00000 	.word	0x7fe00000
 80198d4:	7c9fffff 	.word	0x7c9fffff
 80198d8:	7fefffff 	.word	0x7fefffff
 80198dc:	39500000 	.word	0x39500000

080198e0 <strtod>:
 80198e0:	4b02      	ldr	r3, [pc, #8]	; (80198ec <strtod+0xc>)
 80198e2:	460a      	mov	r2, r1
 80198e4:	4601      	mov	r1, r0
 80198e6:	6818      	ldr	r0, [r3, #0]
 80198e8:	f7ff b9fa 	b.w	8018ce0 <_strtod_r>
 80198ec:	20000724 	.word	0x20000724

080198f0 <_strtol_r>:
 80198f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80198f4:	4680      	mov	r8, r0
 80198f6:	4840      	ldr	r0, [pc, #256]	; (80199f8 <_strtol_r+0x108>)
 80198f8:	f8d0 9000 	ldr.w	r9, [r0]
 80198fc:	460f      	mov	r7, r1
 80198fe:	463d      	mov	r5, r7
 8019900:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019904:	eb09 0004 	add.w	r0, r9, r4
 8019908:	7840      	ldrb	r0, [r0, #1]
 801990a:	f000 0008 	and.w	r0, r0, #8
 801990e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8019912:	b108      	cbz	r0, 8019918 <_strtol_r+0x28>
 8019914:	462f      	mov	r7, r5
 8019916:	e7f2      	b.n	80198fe <_strtol_r+0xe>
 8019918:	2c2d      	cmp	r4, #45	; 0x2d
 801991a:	d103      	bne.n	8019924 <_strtol_r+0x34>
 801991c:	1cbd      	adds	r5, r7, #2
 801991e:	787c      	ldrb	r4, [r7, #1]
 8019920:	2601      	movs	r6, #1
 8019922:	e003      	b.n	801992c <_strtol_r+0x3c>
 8019924:	2c2b      	cmp	r4, #43	; 0x2b
 8019926:	bf04      	itt	eq
 8019928:	787c      	ldrbeq	r4, [r7, #1]
 801992a:	1cbd      	addeq	r5, r7, #2
 801992c:	b113      	cbz	r3, 8019934 <_strtol_r+0x44>
 801992e:	2b10      	cmp	r3, #16
 8019930:	d10a      	bne.n	8019948 <_strtol_r+0x58>
 8019932:	e05b      	b.n	80199ec <_strtol_r+0xfc>
 8019934:	2c30      	cmp	r4, #48	; 0x30
 8019936:	d157      	bne.n	80199e8 <_strtol_r+0xf8>
 8019938:	7828      	ldrb	r0, [r5, #0]
 801993a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801993e:	2858      	cmp	r0, #88	; 0x58
 8019940:	d14d      	bne.n	80199de <_strtol_r+0xee>
 8019942:	786c      	ldrb	r4, [r5, #1]
 8019944:	2310      	movs	r3, #16
 8019946:	3502      	adds	r5, #2
 8019948:	2e00      	cmp	r6, #0
 801994a:	bf14      	ite	ne
 801994c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8019950:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8019954:	2700      	movs	r7, #0
 8019956:	fbbc faf3 	udiv	sl, ip, r3
 801995a:	4638      	mov	r0, r7
 801995c:	fb03 cc1a 	mls	ip, r3, sl, ip
 8019960:	eb09 0e04 	add.w	lr, r9, r4
 8019964:	f89e e001 	ldrb.w	lr, [lr, #1]
 8019968:	f01e 0f04 	tst.w	lr, #4
 801996c:	d001      	beq.n	8019972 <_strtol_r+0x82>
 801996e:	3c30      	subs	r4, #48	; 0x30
 8019970:	e00b      	b.n	801998a <_strtol_r+0x9a>
 8019972:	f01e 0e03 	ands.w	lr, lr, #3
 8019976:	d01b      	beq.n	80199b0 <_strtol_r+0xc0>
 8019978:	f1be 0f01 	cmp.w	lr, #1
 801997c:	bf0c      	ite	eq
 801997e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8019982:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8019986:	ebce 0404 	rsb	r4, lr, r4
 801998a:	42a3      	cmp	r3, r4
 801998c:	dd10      	ble.n	80199b0 <_strtol_r+0xc0>
 801998e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8019992:	d00a      	beq.n	80199aa <_strtol_r+0xba>
 8019994:	4550      	cmp	r0, sl
 8019996:	d806      	bhi.n	80199a6 <_strtol_r+0xb6>
 8019998:	d101      	bne.n	801999e <_strtol_r+0xae>
 801999a:	4564      	cmp	r4, ip
 801999c:	dc03      	bgt.n	80199a6 <_strtol_r+0xb6>
 801999e:	fb03 4000 	mla	r0, r3, r0, r4
 80199a2:	2701      	movs	r7, #1
 80199a4:	e001      	b.n	80199aa <_strtol_r+0xba>
 80199a6:	f04f 37ff 	mov.w	r7, #4294967295
 80199aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80199ae:	e7d7      	b.n	8019960 <_strtol_r+0x70>
 80199b0:	1c7b      	adds	r3, r7, #1
 80199b2:	d10c      	bne.n	80199ce <_strtol_r+0xde>
 80199b4:	2e00      	cmp	r6, #0
 80199b6:	f04f 0322 	mov.w	r3, #34	; 0x22
 80199ba:	bf14      	ite	ne
 80199bc:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80199c0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80199c4:	f8c8 3000 	str.w	r3, [r8]
 80199c8:	b92a      	cbnz	r2, 80199d6 <_strtol_r+0xe6>
 80199ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199ce:	b106      	cbz	r6, 80199d2 <_strtol_r+0xe2>
 80199d0:	4240      	negs	r0, r0
 80199d2:	b172      	cbz	r2, 80199f2 <_strtol_r+0x102>
 80199d4:	b107      	cbz	r7, 80199d8 <_strtol_r+0xe8>
 80199d6:	1e69      	subs	r1, r5, #1
 80199d8:	6011      	str	r1, [r2, #0]
 80199da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199de:	2430      	movs	r4, #48	; 0x30
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d1b1      	bne.n	8019948 <_strtol_r+0x58>
 80199e4:	2308      	movs	r3, #8
 80199e6:	e7af      	b.n	8019948 <_strtol_r+0x58>
 80199e8:	230a      	movs	r3, #10
 80199ea:	e7ad      	b.n	8019948 <_strtol_r+0x58>
 80199ec:	2c30      	cmp	r4, #48	; 0x30
 80199ee:	d0a3      	beq.n	8019938 <_strtol_r+0x48>
 80199f0:	e7aa      	b.n	8019948 <_strtol_r+0x58>
 80199f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199f6:	bf00      	nop
 80199f8:	20000630 	.word	0x20000630

080199fc <strtol>:
 80199fc:	4613      	mov	r3, r2
 80199fe:	460a      	mov	r2, r1
 8019a00:	4601      	mov	r1, r0
 8019a02:	4802      	ldr	r0, [pc, #8]	; (8019a0c <strtol+0x10>)
 8019a04:	6800      	ldr	r0, [r0, #0]
 8019a06:	f7ff bf73 	b.w	80198f0 <_strtol_r>
 8019a0a:	bf00      	nop
 8019a0c:	20000724 	.word	0x20000724

08019a10 <rshift>:
 8019a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a12:	6906      	ldr	r6, [r0, #16]
 8019a14:	114b      	asrs	r3, r1, #5
 8019a16:	42b3      	cmp	r3, r6
 8019a18:	f100 0514 	add.w	r5, r0, #20
 8019a1c:	da27      	bge.n	8019a6e <rshift+0x5e>
 8019a1e:	f011 011f 	ands.w	r1, r1, #31
 8019a22:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8019a26:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8019a2a:	d101      	bne.n	8019a30 <rshift+0x20>
 8019a2c:	4629      	mov	r1, r5
 8019a2e:	e016      	b.n	8019a5e <rshift+0x4e>
 8019a30:	1d14      	adds	r4, r2, #4
 8019a32:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8019a36:	f1c1 0e20 	rsb	lr, r1, #32
 8019a3a:	40ca      	lsrs	r2, r1
 8019a3c:	462b      	mov	r3, r5
 8019a3e:	42b4      	cmp	r4, r6
 8019a40:	d209      	bcs.n	8019a56 <rshift+0x46>
 8019a42:	6827      	ldr	r7, [r4, #0]
 8019a44:	fa07 f70e 	lsl.w	r7, r7, lr
 8019a48:	433a      	orrs	r2, r7
 8019a4a:	f843 2b04 	str.w	r2, [r3], #4
 8019a4e:	f854 2b04 	ldr.w	r2, [r4], #4
 8019a52:	40ca      	lsrs	r2, r1
 8019a54:	e7f3      	b.n	8019a3e <rshift+0x2e>
 8019a56:	601a      	str	r2, [r3, #0]
 8019a58:	b152      	cbz	r2, 8019a70 <rshift+0x60>
 8019a5a:	3304      	adds	r3, #4
 8019a5c:	e008      	b.n	8019a70 <rshift+0x60>
 8019a5e:	42b2      	cmp	r2, r6
 8019a60:	460b      	mov	r3, r1
 8019a62:	d205      	bcs.n	8019a70 <rshift+0x60>
 8019a64:	f852 3b04 	ldr.w	r3, [r2], #4
 8019a68:	f841 3b04 	str.w	r3, [r1], #4
 8019a6c:	e7f7      	b.n	8019a5e <rshift+0x4e>
 8019a6e:	462b      	mov	r3, r5
 8019a70:	1b5b      	subs	r3, r3, r5
 8019a72:	109b      	asrs	r3, r3, #2
 8019a74:	6103      	str	r3, [r0, #16]
 8019a76:	b903      	cbnz	r3, 8019a7a <rshift+0x6a>
 8019a78:	6143      	str	r3, [r0, #20]
 8019a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019a7c <__hexdig_fun>:
 8019a7c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8019a80:	2b09      	cmp	r3, #9
 8019a82:	d801      	bhi.n	8019a88 <__hexdig_fun+0xc>
 8019a84:	3820      	subs	r0, #32
 8019a86:	e00a      	b.n	8019a9e <__hexdig_fun+0x22>
 8019a88:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8019a8c:	2b05      	cmp	r3, #5
 8019a8e:	d801      	bhi.n	8019a94 <__hexdig_fun+0x18>
 8019a90:	3847      	subs	r0, #71	; 0x47
 8019a92:	e004      	b.n	8019a9e <__hexdig_fun+0x22>
 8019a94:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8019a98:	2b05      	cmp	r3, #5
 8019a9a:	d802      	bhi.n	8019aa2 <__hexdig_fun+0x26>
 8019a9c:	3827      	subs	r0, #39	; 0x27
 8019a9e:	b2c0      	uxtb	r0, r0
 8019aa0:	4770      	bx	lr
 8019aa2:	2000      	movs	r0, #0
 8019aa4:	4770      	bx	lr

08019aa6 <__gethex>:
 8019aa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019aaa:	b08b      	sub	sp, #44	; 0x2c
 8019aac:	468a      	mov	sl, r1
 8019aae:	4690      	mov	r8, r2
 8019ab0:	9306      	str	r3, [sp, #24]
 8019ab2:	9002      	str	r0, [sp, #8]
 8019ab4:	f000 faca 	bl	801a04c <_localeconv_r>
 8019ab8:	6803      	ldr	r3, [r0, #0]
 8019aba:	9303      	str	r3, [sp, #12]
 8019abc:	4618      	mov	r0, r3
 8019abe:	f7e6 fb97 	bl	80001f0 <strlen>
 8019ac2:	9b03      	ldr	r3, [sp, #12]
 8019ac4:	9001      	str	r0, [sp, #4]
 8019ac6:	4403      	add	r3, r0
 8019ac8:	f04f 0b00 	mov.w	fp, #0
 8019acc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8019ad0:	9307      	str	r3, [sp, #28]
 8019ad2:	f8da 3000 	ldr.w	r3, [sl]
 8019ad6:	3302      	adds	r3, #2
 8019ad8:	461f      	mov	r7, r3
 8019ada:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019ade:	2830      	cmp	r0, #48	; 0x30
 8019ae0:	d102      	bne.n	8019ae8 <__gethex+0x42>
 8019ae2:	f10b 0b01 	add.w	fp, fp, #1
 8019ae6:	e7f7      	b.n	8019ad8 <__gethex+0x32>
 8019ae8:	f7ff ffc8 	bl	8019a7c <__hexdig_fun>
 8019aec:	4604      	mov	r4, r0
 8019aee:	b9e0      	cbnz	r0, 8019b2a <__gethex+0x84>
 8019af0:	9a01      	ldr	r2, [sp, #4]
 8019af2:	9903      	ldr	r1, [sp, #12]
 8019af4:	4638      	mov	r0, r7
 8019af6:	f000 fe9c 	bl	801a832 <strncmp>
 8019afa:	2800      	cmp	r0, #0
 8019afc:	d134      	bne.n	8019b68 <__gethex+0xc2>
 8019afe:	9b01      	ldr	r3, [sp, #4]
 8019b00:	5cf8      	ldrb	r0, [r7, r3]
 8019b02:	18fe      	adds	r6, r7, r3
 8019b04:	f7ff ffba 	bl	8019a7c <__hexdig_fun>
 8019b08:	b380      	cbz	r0, 8019b6c <__gethex+0xc6>
 8019b0a:	4633      	mov	r3, r6
 8019b0c:	7818      	ldrb	r0, [r3, #0]
 8019b0e:	2830      	cmp	r0, #48	; 0x30
 8019b10:	461f      	mov	r7, r3
 8019b12:	f103 0301 	add.w	r3, r3, #1
 8019b16:	d0f9      	beq.n	8019b0c <__gethex+0x66>
 8019b18:	f7ff ffb0 	bl	8019a7c <__hexdig_fun>
 8019b1c:	fab0 f580 	clz	r5, r0
 8019b20:	096d      	lsrs	r5, r5, #5
 8019b22:	4634      	mov	r4, r6
 8019b24:	f04f 0b01 	mov.w	fp, #1
 8019b28:	e001      	b.n	8019b2e <__gethex+0x88>
 8019b2a:	2500      	movs	r5, #0
 8019b2c:	462c      	mov	r4, r5
 8019b2e:	463a      	mov	r2, r7
 8019b30:	4616      	mov	r6, r2
 8019b32:	3201      	adds	r2, #1
 8019b34:	7830      	ldrb	r0, [r6, #0]
 8019b36:	f7ff ffa1 	bl	8019a7c <__hexdig_fun>
 8019b3a:	2800      	cmp	r0, #0
 8019b3c:	d1f8      	bne.n	8019b30 <__gethex+0x8a>
 8019b3e:	9a01      	ldr	r2, [sp, #4]
 8019b40:	9903      	ldr	r1, [sp, #12]
 8019b42:	4630      	mov	r0, r6
 8019b44:	f000 fe75 	bl	801a832 <strncmp>
 8019b48:	b950      	cbnz	r0, 8019b60 <__gethex+0xba>
 8019b4a:	b954      	cbnz	r4, 8019b62 <__gethex+0xbc>
 8019b4c:	9b01      	ldr	r3, [sp, #4]
 8019b4e:	18f4      	adds	r4, r6, r3
 8019b50:	4622      	mov	r2, r4
 8019b52:	4616      	mov	r6, r2
 8019b54:	3201      	adds	r2, #1
 8019b56:	7830      	ldrb	r0, [r6, #0]
 8019b58:	f7ff ff90 	bl	8019a7c <__hexdig_fun>
 8019b5c:	2800      	cmp	r0, #0
 8019b5e:	d1f8      	bne.n	8019b52 <__gethex+0xac>
 8019b60:	b134      	cbz	r4, 8019b70 <__gethex+0xca>
 8019b62:	1ba4      	subs	r4, r4, r6
 8019b64:	00a4      	lsls	r4, r4, #2
 8019b66:	e003      	b.n	8019b70 <__gethex+0xca>
 8019b68:	463e      	mov	r6, r7
 8019b6a:	e000      	b.n	8019b6e <__gethex+0xc8>
 8019b6c:	4604      	mov	r4, r0
 8019b6e:	2501      	movs	r5, #1
 8019b70:	7833      	ldrb	r3, [r6, #0]
 8019b72:	2b50      	cmp	r3, #80	; 0x50
 8019b74:	d001      	beq.n	8019b7a <__gethex+0xd4>
 8019b76:	2b70      	cmp	r3, #112	; 0x70
 8019b78:	d12a      	bne.n	8019bd0 <__gethex+0x12a>
 8019b7a:	7873      	ldrb	r3, [r6, #1]
 8019b7c:	2b2b      	cmp	r3, #43	; 0x2b
 8019b7e:	d008      	beq.n	8019b92 <__gethex+0xec>
 8019b80:	2b2d      	cmp	r3, #45	; 0x2d
 8019b82:	d003      	beq.n	8019b8c <__gethex+0xe6>
 8019b84:	1c71      	adds	r1, r6, #1
 8019b86:	f04f 0900 	mov.w	r9, #0
 8019b8a:	e005      	b.n	8019b98 <__gethex+0xf2>
 8019b8c:	f04f 0901 	mov.w	r9, #1
 8019b90:	e001      	b.n	8019b96 <__gethex+0xf0>
 8019b92:	f04f 0900 	mov.w	r9, #0
 8019b96:	1cb1      	adds	r1, r6, #2
 8019b98:	7808      	ldrb	r0, [r1, #0]
 8019b9a:	f7ff ff6f 	bl	8019a7c <__hexdig_fun>
 8019b9e:	1e43      	subs	r3, r0, #1
 8019ba0:	b2db      	uxtb	r3, r3
 8019ba2:	2b18      	cmp	r3, #24
 8019ba4:	d814      	bhi.n	8019bd0 <__gethex+0x12a>
 8019ba6:	f1a0 0210 	sub.w	r2, r0, #16
 8019baa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019bae:	f7ff ff65 	bl	8019a7c <__hexdig_fun>
 8019bb2:	1e43      	subs	r3, r0, #1
 8019bb4:	b2db      	uxtb	r3, r3
 8019bb6:	2b18      	cmp	r3, #24
 8019bb8:	d804      	bhi.n	8019bc4 <__gethex+0x11e>
 8019bba:	230a      	movs	r3, #10
 8019bbc:	fb03 0202 	mla	r2, r3, r2, r0
 8019bc0:	3a10      	subs	r2, #16
 8019bc2:	e7f2      	b.n	8019baa <__gethex+0x104>
 8019bc4:	f1b9 0f00 	cmp.w	r9, #0
 8019bc8:	d000      	beq.n	8019bcc <__gethex+0x126>
 8019bca:	4252      	negs	r2, r2
 8019bcc:	4414      	add	r4, r2
 8019bce:	e000      	b.n	8019bd2 <__gethex+0x12c>
 8019bd0:	4631      	mov	r1, r6
 8019bd2:	f8ca 1000 	str.w	r1, [sl]
 8019bd6:	b12d      	cbz	r5, 8019be4 <__gethex+0x13e>
 8019bd8:	f1bb 0f00 	cmp.w	fp, #0
 8019bdc:	bf14      	ite	ne
 8019bde:	2000      	movne	r0, #0
 8019be0:	2006      	moveq	r0, #6
 8019be2:	e17c      	b.n	8019ede <__gethex+0x438>
 8019be4:	1bf3      	subs	r3, r6, r7
 8019be6:	3b01      	subs	r3, #1
 8019be8:	4629      	mov	r1, r5
 8019bea:	2b07      	cmp	r3, #7
 8019bec:	dd02      	ble.n	8019bf4 <__gethex+0x14e>
 8019bee:	3101      	adds	r1, #1
 8019bf0:	105b      	asrs	r3, r3, #1
 8019bf2:	e7fa      	b.n	8019bea <__gethex+0x144>
 8019bf4:	9802      	ldr	r0, [sp, #8]
 8019bf6:	f000 fa2d 	bl	801a054 <_Balloc>
 8019bfa:	9b01      	ldr	r3, [sp, #4]
 8019bfc:	f100 0a14 	add.w	sl, r0, #20
 8019c00:	f04f 0900 	mov.w	r9, #0
 8019c04:	f1c3 0301 	rsb	r3, r3, #1
 8019c08:	4605      	mov	r5, r0
 8019c0a:	f8cd a010 	str.w	sl, [sp, #16]
 8019c0e:	46cb      	mov	fp, r9
 8019c10:	9308      	str	r3, [sp, #32]
 8019c12:	42b7      	cmp	r7, r6
 8019c14:	d22f      	bcs.n	8019c76 <__gethex+0x1d0>
 8019c16:	1e73      	subs	r3, r6, #1
 8019c18:	9305      	str	r3, [sp, #20]
 8019c1a:	9a07      	ldr	r2, [sp, #28]
 8019c1c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019c20:	4293      	cmp	r3, r2
 8019c22:	d00b      	beq.n	8019c3c <__gethex+0x196>
 8019c24:	f1bb 0f20 	cmp.w	fp, #32
 8019c28:	d116      	bne.n	8019c58 <__gethex+0x1b2>
 8019c2a:	9b04      	ldr	r3, [sp, #16]
 8019c2c:	f8c3 9000 	str.w	r9, [r3]
 8019c30:	3304      	adds	r3, #4
 8019c32:	f04f 0900 	mov.w	r9, #0
 8019c36:	9304      	str	r3, [sp, #16]
 8019c38:	46cb      	mov	fp, r9
 8019c3a:	e00d      	b.n	8019c58 <__gethex+0x1b2>
 8019c3c:	9b05      	ldr	r3, [sp, #20]
 8019c3e:	9a08      	ldr	r2, [sp, #32]
 8019c40:	4413      	add	r3, r2
 8019c42:	429f      	cmp	r7, r3
 8019c44:	d8ee      	bhi.n	8019c24 <__gethex+0x17e>
 8019c46:	4618      	mov	r0, r3
 8019c48:	9a01      	ldr	r2, [sp, #4]
 8019c4a:	9903      	ldr	r1, [sp, #12]
 8019c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8019c4e:	f000 fdf0 	bl	801a832 <strncmp>
 8019c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c54:	b168      	cbz	r0, 8019c72 <__gethex+0x1cc>
 8019c56:	e7e5      	b.n	8019c24 <__gethex+0x17e>
 8019c58:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8019c5c:	f7ff ff0e 	bl	8019a7c <__hexdig_fun>
 8019c60:	f000 000f 	and.w	r0, r0, #15
 8019c64:	fa00 f00b 	lsl.w	r0, r0, fp
 8019c68:	9b05      	ldr	r3, [sp, #20]
 8019c6a:	ea49 0900 	orr.w	r9, r9, r0
 8019c6e:	f10b 0b04 	add.w	fp, fp, #4
 8019c72:	461e      	mov	r6, r3
 8019c74:	e7cd      	b.n	8019c12 <__gethex+0x16c>
 8019c76:	9804      	ldr	r0, [sp, #16]
 8019c78:	f840 9b04 	str.w	r9, [r0], #4
 8019c7c:	ebca 0000 	rsb	r0, sl, r0
 8019c80:	1080      	asrs	r0, r0, #2
 8019c82:	6128      	str	r0, [r5, #16]
 8019c84:	0147      	lsls	r7, r0, #5
 8019c86:	4648      	mov	r0, r9
 8019c88:	f000 faa9 	bl	801a1de <__hi0bits>
 8019c8c:	f8d8 6000 	ldr.w	r6, [r8]
 8019c90:	1a38      	subs	r0, r7, r0
 8019c92:	42b0      	cmp	r0, r6
 8019c94:	dd26      	ble.n	8019ce4 <__gethex+0x23e>
 8019c96:	1b87      	subs	r7, r0, r6
 8019c98:	4639      	mov	r1, r7
 8019c9a:	4628      	mov	r0, r5
 8019c9c:	f000 fda7 	bl	801a7ee <__any_on>
 8019ca0:	b1c8      	cbz	r0, 8019cd6 <__gethex+0x230>
 8019ca2:	1e7b      	subs	r3, r7, #1
 8019ca4:	1159      	asrs	r1, r3, #5
 8019ca6:	f003 021f 	and.w	r2, r3, #31
 8019caa:	f04f 0901 	mov.w	r9, #1
 8019cae:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8019cb2:	fa09 f202 	lsl.w	r2, r9, r2
 8019cb6:	420a      	tst	r2, r1
 8019cb8:	d00e      	beq.n	8019cd8 <__gethex+0x232>
 8019cba:	454b      	cmp	r3, r9
 8019cbc:	dc02      	bgt.n	8019cc4 <__gethex+0x21e>
 8019cbe:	f04f 0902 	mov.w	r9, #2
 8019cc2:	e009      	b.n	8019cd8 <__gethex+0x232>
 8019cc4:	1eb9      	subs	r1, r7, #2
 8019cc6:	4628      	mov	r0, r5
 8019cc8:	f000 fd91 	bl	801a7ee <__any_on>
 8019ccc:	2800      	cmp	r0, #0
 8019cce:	d0f6      	beq.n	8019cbe <__gethex+0x218>
 8019cd0:	f04f 0903 	mov.w	r9, #3
 8019cd4:	e000      	b.n	8019cd8 <__gethex+0x232>
 8019cd6:	4681      	mov	r9, r0
 8019cd8:	4639      	mov	r1, r7
 8019cda:	4628      	mov	r0, r5
 8019cdc:	f7ff fe98 	bl	8019a10 <rshift>
 8019ce0:	443c      	add	r4, r7
 8019ce2:	e00c      	b.n	8019cfe <__gethex+0x258>
 8019ce4:	da09      	bge.n	8019cfa <__gethex+0x254>
 8019ce6:	1a37      	subs	r7, r6, r0
 8019ce8:	4629      	mov	r1, r5
 8019cea:	463a      	mov	r2, r7
 8019cec:	9802      	ldr	r0, [sp, #8]
 8019cee:	f000 fbab 	bl	801a448 <__lshift>
 8019cf2:	1be4      	subs	r4, r4, r7
 8019cf4:	4605      	mov	r5, r0
 8019cf6:	f100 0a14 	add.w	sl, r0, #20
 8019cfa:	f04f 0900 	mov.w	r9, #0
 8019cfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019d02:	429c      	cmp	r4, r3
 8019d04:	dd08      	ble.n	8019d18 <__gethex+0x272>
 8019d06:	9802      	ldr	r0, [sp, #8]
 8019d08:	4629      	mov	r1, r5
 8019d0a:	f000 f9d8 	bl	801a0be <_Bfree>
 8019d0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019d10:	2300      	movs	r3, #0
 8019d12:	6013      	str	r3, [r2, #0]
 8019d14:	20a3      	movs	r0, #163	; 0xa3
 8019d16:	e0e2      	b.n	8019ede <__gethex+0x438>
 8019d18:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019d1c:	4284      	cmp	r4, r0
 8019d1e:	da53      	bge.n	8019dc8 <__gethex+0x322>
 8019d20:	1b04      	subs	r4, r0, r4
 8019d22:	42a6      	cmp	r6, r4
 8019d24:	dc2e      	bgt.n	8019d84 <__gethex+0x2de>
 8019d26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019d2a:	2b02      	cmp	r3, #2
 8019d2c:	d01a      	beq.n	8019d64 <__gethex+0x2be>
 8019d2e:	2b03      	cmp	r3, #3
 8019d30:	d01c      	beq.n	8019d6c <__gethex+0x2c6>
 8019d32:	2b01      	cmp	r3, #1
 8019d34:	d11d      	bne.n	8019d72 <__gethex+0x2cc>
 8019d36:	42a6      	cmp	r6, r4
 8019d38:	d11b      	bne.n	8019d72 <__gethex+0x2cc>
 8019d3a:	2e01      	cmp	r6, #1
 8019d3c:	dc0b      	bgt.n	8019d56 <__gethex+0x2b0>
 8019d3e:	9a06      	ldr	r2, [sp, #24]
 8019d40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019d44:	6013      	str	r3, [r2, #0]
 8019d46:	2301      	movs	r3, #1
 8019d48:	612b      	str	r3, [r5, #16]
 8019d4a:	f8ca 3000 	str.w	r3, [sl]
 8019d4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019d50:	2062      	movs	r0, #98	; 0x62
 8019d52:	601d      	str	r5, [r3, #0]
 8019d54:	e0c3      	b.n	8019ede <__gethex+0x438>
 8019d56:	1e71      	subs	r1, r6, #1
 8019d58:	4628      	mov	r0, r5
 8019d5a:	f000 fd48 	bl	801a7ee <__any_on>
 8019d5e:	2800      	cmp	r0, #0
 8019d60:	d1ed      	bne.n	8019d3e <__gethex+0x298>
 8019d62:	e006      	b.n	8019d72 <__gethex+0x2cc>
 8019d64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	d0e9      	beq.n	8019d3e <__gethex+0x298>
 8019d6a:	e002      	b.n	8019d72 <__gethex+0x2cc>
 8019d6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	d1e5      	bne.n	8019d3e <__gethex+0x298>
 8019d72:	9802      	ldr	r0, [sp, #8]
 8019d74:	4629      	mov	r1, r5
 8019d76:	f000 f9a2 	bl	801a0be <_Bfree>
 8019d7a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019d7c:	2300      	movs	r3, #0
 8019d7e:	6013      	str	r3, [r2, #0]
 8019d80:	2050      	movs	r0, #80	; 0x50
 8019d82:	e0ac      	b.n	8019ede <__gethex+0x438>
 8019d84:	1e67      	subs	r7, r4, #1
 8019d86:	f1b9 0f00 	cmp.w	r9, #0
 8019d8a:	d106      	bne.n	8019d9a <__gethex+0x2f4>
 8019d8c:	b13f      	cbz	r7, 8019d9e <__gethex+0x2f8>
 8019d8e:	4639      	mov	r1, r7
 8019d90:	4628      	mov	r0, r5
 8019d92:	f000 fd2c 	bl	801a7ee <__any_on>
 8019d96:	4681      	mov	r9, r0
 8019d98:	e001      	b.n	8019d9e <__gethex+0x2f8>
 8019d9a:	f04f 0901 	mov.w	r9, #1
 8019d9e:	117a      	asrs	r2, r7, #5
 8019da0:	2301      	movs	r3, #1
 8019da2:	f007 071f 	and.w	r7, r7, #31
 8019da6:	fa03 f707 	lsl.w	r7, r3, r7
 8019daa:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 8019dae:	4621      	mov	r1, r4
 8019db0:	421f      	tst	r7, r3
 8019db2:	4628      	mov	r0, r5
 8019db4:	bf18      	it	ne
 8019db6:	f049 0902 	orrne.w	r9, r9, #2
 8019dba:	1b36      	subs	r6, r6, r4
 8019dbc:	f7ff fe28 	bl	8019a10 <rshift>
 8019dc0:	2702      	movs	r7, #2
 8019dc2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8019dc6:	e000      	b.n	8019dca <__gethex+0x324>
 8019dc8:	2701      	movs	r7, #1
 8019dca:	f1b9 0f00 	cmp.w	r9, #0
 8019dce:	f000 8081 	beq.w	8019ed4 <__gethex+0x42e>
 8019dd2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019dd6:	2b02      	cmp	r3, #2
 8019dd8:	d00e      	beq.n	8019df8 <__gethex+0x352>
 8019dda:	2b03      	cmp	r3, #3
 8019ddc:	d010      	beq.n	8019e00 <__gethex+0x35a>
 8019dde:	2b01      	cmp	r3, #1
 8019de0:	d176      	bne.n	8019ed0 <__gethex+0x42a>
 8019de2:	f019 0f02 	tst.w	r9, #2
 8019de6:	d073      	beq.n	8019ed0 <__gethex+0x42a>
 8019de8:	f8da 0000 	ldr.w	r0, [sl]
 8019dec:	ea49 0900 	orr.w	r9, r9, r0
 8019df0:	f019 0f01 	tst.w	r9, #1
 8019df4:	d107      	bne.n	8019e06 <__gethex+0x360>
 8019df6:	e06b      	b.n	8019ed0 <__gethex+0x42a>
 8019df8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019dfa:	f1c3 0301 	rsb	r3, r3, #1
 8019dfe:	9315      	str	r3, [sp, #84]	; 0x54
 8019e00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d064      	beq.n	8019ed0 <__gethex+0x42a>
 8019e06:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8019e0a:	f105 0314 	add.w	r3, r5, #20
 8019e0e:	ea4f 098a 	mov.w	r9, sl, lsl #2
 8019e12:	eb03 0109 	add.w	r1, r3, r9
 8019e16:	2000      	movs	r0, #0
 8019e18:	681a      	ldr	r2, [r3, #0]
 8019e1a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019e1e:	d002      	beq.n	8019e26 <__gethex+0x380>
 8019e20:	3201      	adds	r2, #1
 8019e22:	601a      	str	r2, [r3, #0]
 8019e24:	e020      	b.n	8019e68 <__gethex+0x3c2>
 8019e26:	f843 0b04 	str.w	r0, [r3], #4
 8019e2a:	4299      	cmp	r1, r3
 8019e2c:	d8f4      	bhi.n	8019e18 <__gethex+0x372>
 8019e2e:	68ab      	ldr	r3, [r5, #8]
 8019e30:	459a      	cmp	sl, r3
 8019e32:	db12      	blt.n	8019e5a <__gethex+0x3b4>
 8019e34:	6869      	ldr	r1, [r5, #4]
 8019e36:	9802      	ldr	r0, [sp, #8]
 8019e38:	3101      	adds	r1, #1
 8019e3a:	f000 f90b 	bl	801a054 <_Balloc>
 8019e3e:	692a      	ldr	r2, [r5, #16]
 8019e40:	3202      	adds	r2, #2
 8019e42:	f105 010c 	add.w	r1, r5, #12
 8019e46:	4683      	mov	fp, r0
 8019e48:	0092      	lsls	r2, r2, #2
 8019e4a:	300c      	adds	r0, #12
 8019e4c:	f7fe fee7 	bl	8018c1e <memcpy>
 8019e50:	4629      	mov	r1, r5
 8019e52:	9802      	ldr	r0, [sp, #8]
 8019e54:	f000 f933 	bl	801a0be <_Bfree>
 8019e58:	465d      	mov	r5, fp
 8019e5a:	692b      	ldr	r3, [r5, #16]
 8019e5c:	1c5a      	adds	r2, r3, #1
 8019e5e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8019e62:	612a      	str	r2, [r5, #16]
 8019e64:	2201      	movs	r2, #1
 8019e66:	615a      	str	r2, [r3, #20]
 8019e68:	2f02      	cmp	r7, #2
 8019e6a:	f105 0214 	add.w	r2, r5, #20
 8019e6e:	d111      	bne.n	8019e94 <__gethex+0x3ee>
 8019e70:	f8d8 3000 	ldr.w	r3, [r8]
 8019e74:	3b01      	subs	r3, #1
 8019e76:	429e      	cmp	r6, r3
 8019e78:	d127      	bne.n	8019eca <__gethex+0x424>
 8019e7a:	1171      	asrs	r1, r6, #5
 8019e7c:	2301      	movs	r3, #1
 8019e7e:	f006 061f 	and.w	r6, r6, #31
 8019e82:	fa03 f606 	lsl.w	r6, r3, r6
 8019e86:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019e8a:	421e      	tst	r6, r3
 8019e8c:	bf0c      	ite	eq
 8019e8e:	2702      	moveq	r7, #2
 8019e90:	2701      	movne	r7, #1
 8019e92:	e01a      	b.n	8019eca <__gethex+0x424>
 8019e94:	692b      	ldr	r3, [r5, #16]
 8019e96:	459a      	cmp	sl, r3
 8019e98:	da0a      	bge.n	8019eb0 <__gethex+0x40a>
 8019e9a:	2101      	movs	r1, #1
 8019e9c:	4628      	mov	r0, r5
 8019e9e:	f7ff fdb7 	bl	8019a10 <rshift>
 8019ea2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019ea6:	3401      	adds	r4, #1
 8019ea8:	429c      	cmp	r4, r3
 8019eaa:	f73f af2c 	bgt.w	8019d06 <__gethex+0x260>
 8019eae:	e00b      	b.n	8019ec8 <__gethex+0x422>
 8019eb0:	f016 061f 	ands.w	r6, r6, #31
 8019eb4:	d008      	beq.n	8019ec8 <__gethex+0x422>
 8019eb6:	4491      	add	r9, r2
 8019eb8:	f1c6 0620 	rsb	r6, r6, #32
 8019ebc:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8019ec0:	f000 f98d 	bl	801a1de <__hi0bits>
 8019ec4:	42b0      	cmp	r0, r6
 8019ec6:	dbe8      	blt.n	8019e9a <__gethex+0x3f4>
 8019ec8:	2701      	movs	r7, #1
 8019eca:	f047 0720 	orr.w	r7, r7, #32
 8019ece:	e001      	b.n	8019ed4 <__gethex+0x42e>
 8019ed0:	f047 0710 	orr.w	r7, r7, #16
 8019ed4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019ed6:	601d      	str	r5, [r3, #0]
 8019ed8:	9b06      	ldr	r3, [sp, #24]
 8019eda:	4638      	mov	r0, r7
 8019edc:	601c      	str	r4, [r3, #0]
 8019ede:	b00b      	add	sp, #44	; 0x2c
 8019ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019ee4 <L_shift>:
 8019ee4:	f1c2 0208 	rsb	r2, r2, #8
 8019ee8:	0092      	lsls	r2, r2, #2
 8019eea:	b570      	push	{r4, r5, r6, lr}
 8019eec:	f1c2 0620 	rsb	r6, r2, #32
 8019ef0:	6843      	ldr	r3, [r0, #4]
 8019ef2:	6805      	ldr	r5, [r0, #0]
 8019ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8019ef8:	432c      	orrs	r4, r5
 8019efa:	40d3      	lsrs	r3, r2
 8019efc:	6004      	str	r4, [r0, #0]
 8019efe:	f840 3f04 	str.w	r3, [r0, #4]!
 8019f02:	4288      	cmp	r0, r1
 8019f04:	d3f4      	bcc.n	8019ef0 <L_shift+0xc>
 8019f06:	bd70      	pop	{r4, r5, r6, pc}

08019f08 <__match>:
 8019f08:	b530      	push	{r4, r5, lr}
 8019f0a:	6803      	ldr	r3, [r0, #0]
 8019f0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019f10:	3301      	adds	r3, #1
 8019f12:	b14c      	cbz	r4, 8019f28 <__match+0x20>
 8019f14:	781a      	ldrb	r2, [r3, #0]
 8019f16:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019f1a:	2d19      	cmp	r5, #25
 8019f1c:	bf98      	it	ls
 8019f1e:	3220      	addls	r2, #32
 8019f20:	42a2      	cmp	r2, r4
 8019f22:	d0f3      	beq.n	8019f0c <__match+0x4>
 8019f24:	2000      	movs	r0, #0
 8019f26:	bd30      	pop	{r4, r5, pc}
 8019f28:	6003      	str	r3, [r0, #0]
 8019f2a:	2001      	movs	r0, #1
 8019f2c:	bd30      	pop	{r4, r5, pc}

08019f2e <__hexnan>:
 8019f2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f32:	680b      	ldr	r3, [r1, #0]
 8019f34:	f8d0 b000 	ldr.w	fp, [r0]
 8019f38:	115e      	asrs	r6, r3, #5
 8019f3a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019f3e:	f013 031f 	ands.w	r3, r3, #31
 8019f42:	b085      	sub	sp, #20
 8019f44:	bf18      	it	ne
 8019f46:	3604      	addne	r6, #4
 8019f48:	1f35      	subs	r5, r6, #4
 8019f4a:	4617      	mov	r7, r2
 8019f4c:	2200      	movs	r2, #0
 8019f4e:	4682      	mov	sl, r0
 8019f50:	9301      	str	r3, [sp, #4]
 8019f52:	f846 2c04 	str.w	r2, [r6, #-4]
 8019f56:	46a8      	mov	r8, r5
 8019f58:	462c      	mov	r4, r5
 8019f5a:	9200      	str	r2, [sp, #0]
 8019f5c:	4691      	mov	r9, r2
 8019f5e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 8019f62:	2900      	cmp	r1, #0
 8019f64:	d03c      	beq.n	8019fe0 <__hexnan+0xb2>
 8019f66:	4608      	mov	r0, r1
 8019f68:	9203      	str	r2, [sp, #12]
 8019f6a:	9102      	str	r1, [sp, #8]
 8019f6c:	f7ff fd86 	bl	8019a7c <__hexdig_fun>
 8019f70:	9a03      	ldr	r2, [sp, #12]
 8019f72:	bb00      	cbnz	r0, 8019fb6 <__hexnan+0x88>
 8019f74:	9902      	ldr	r1, [sp, #8]
 8019f76:	2920      	cmp	r1, #32
 8019f78:	d816      	bhi.n	8019fa8 <__hexnan+0x7a>
 8019f7a:	9b00      	ldr	r3, [sp, #0]
 8019f7c:	4599      	cmp	r9, r3
 8019f7e:	ddee      	ble.n	8019f5e <__hexnan+0x30>
 8019f80:	4544      	cmp	r4, r8
 8019f82:	d205      	bcs.n	8019f90 <__hexnan+0x62>
 8019f84:	2a07      	cmp	r2, #7
 8019f86:	dc03      	bgt.n	8019f90 <__hexnan+0x62>
 8019f88:	4641      	mov	r1, r8
 8019f8a:	4620      	mov	r0, r4
 8019f8c:	f7ff ffaa 	bl	8019ee4 <L_shift>
 8019f90:	42bc      	cmp	r4, r7
 8019f92:	d923      	bls.n	8019fdc <__hexnan+0xae>
 8019f94:	2300      	movs	r3, #0
 8019f96:	f1a4 0804 	sub.w	r8, r4, #4
 8019f9a:	f844 3c04 	str.w	r3, [r4, #-4]
 8019f9e:	f8cd 9000 	str.w	r9, [sp]
 8019fa2:	4644      	mov	r4, r8
 8019fa4:	461a      	mov	r2, r3
 8019fa6:	e7da      	b.n	8019f5e <__hexnan+0x30>
 8019fa8:	2929      	cmp	r1, #41	; 0x29
 8019faa:	d148      	bne.n	801a03e <__hexnan+0x110>
 8019fac:	f10b 0301 	add.w	r3, fp, #1
 8019fb0:	f8ca 3000 	str.w	r3, [sl]
 8019fb4:	e014      	b.n	8019fe0 <__hexnan+0xb2>
 8019fb6:	3201      	adds	r2, #1
 8019fb8:	2a08      	cmp	r2, #8
 8019fba:	f109 0901 	add.w	r9, r9, #1
 8019fbe:	dd06      	ble.n	8019fce <__hexnan+0xa0>
 8019fc0:	42bc      	cmp	r4, r7
 8019fc2:	d9cc      	bls.n	8019f5e <__hexnan+0x30>
 8019fc4:	2300      	movs	r3, #0
 8019fc6:	f844 3c04 	str.w	r3, [r4, #-4]
 8019fca:	2201      	movs	r2, #1
 8019fcc:	3c04      	subs	r4, #4
 8019fce:	6821      	ldr	r1, [r4, #0]
 8019fd0:	f000 000f 	and.w	r0, r0, #15
 8019fd4:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8019fd8:	6020      	str	r0, [r4, #0]
 8019fda:	e7c0      	b.n	8019f5e <__hexnan+0x30>
 8019fdc:	2208      	movs	r2, #8
 8019fde:	e7be      	b.n	8019f5e <__hexnan+0x30>
 8019fe0:	f1b9 0f00 	cmp.w	r9, #0
 8019fe4:	d02b      	beq.n	801a03e <__hexnan+0x110>
 8019fe6:	4544      	cmp	r4, r8
 8019fe8:	d205      	bcs.n	8019ff6 <__hexnan+0xc8>
 8019fea:	2a07      	cmp	r2, #7
 8019fec:	dc03      	bgt.n	8019ff6 <__hexnan+0xc8>
 8019fee:	4641      	mov	r1, r8
 8019ff0:	4620      	mov	r0, r4
 8019ff2:	f7ff ff77 	bl	8019ee4 <L_shift>
 8019ff6:	42bc      	cmp	r4, r7
 8019ff8:	d90c      	bls.n	801a014 <__hexnan+0xe6>
 8019ffa:	463b      	mov	r3, r7
 8019ffc:	f854 2b04 	ldr.w	r2, [r4], #4
 801a000:	f843 2b04 	str.w	r2, [r3], #4
 801a004:	42a5      	cmp	r5, r4
 801a006:	d2f9      	bcs.n	8019ffc <__hexnan+0xce>
 801a008:	2200      	movs	r2, #0
 801a00a:	f843 2b04 	str.w	r2, [r3], #4
 801a00e:	429d      	cmp	r5, r3
 801a010:	d2fb      	bcs.n	801a00a <__hexnan+0xdc>
 801a012:	e00b      	b.n	801a02c <__hexnan+0xfe>
 801a014:	9b01      	ldr	r3, [sp, #4]
 801a016:	b14b      	cbz	r3, 801a02c <__hexnan+0xfe>
 801a018:	f1c3 0220 	rsb	r2, r3, #32
 801a01c:	f04f 33ff 	mov.w	r3, #4294967295
 801a020:	40d3      	lsrs	r3, r2
 801a022:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801a026:	4013      	ands	r3, r2
 801a028:	f846 3c04 	str.w	r3, [r6, #-4]
 801a02c:	682b      	ldr	r3, [r5, #0]
 801a02e:	b943      	cbnz	r3, 801a042 <__hexnan+0x114>
 801a030:	42bd      	cmp	r5, r7
 801a032:	d102      	bne.n	801a03a <__hexnan+0x10c>
 801a034:	2301      	movs	r3, #1
 801a036:	602b      	str	r3, [r5, #0]
 801a038:	e003      	b.n	801a042 <__hexnan+0x114>
 801a03a:	3d04      	subs	r5, #4
 801a03c:	e7f6      	b.n	801a02c <__hexnan+0xfe>
 801a03e:	2004      	movs	r0, #4
 801a040:	e000      	b.n	801a044 <__hexnan+0x116>
 801a042:	2005      	movs	r0, #5
 801a044:	b005      	add	sp, #20
 801a046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a04c <_localeconv_r>:
 801a04c:	4800      	ldr	r0, [pc, #0]	; (801a050 <_localeconv_r+0x4>)
 801a04e:	4770      	bx	lr
 801a050:	20000728 	.word	0x20000728

0801a054 <_Balloc>:
 801a054:	b570      	push	{r4, r5, r6, lr}
 801a056:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a058:	4604      	mov	r4, r0
 801a05a:	460e      	mov	r6, r1
 801a05c:	b93d      	cbnz	r5, 801a06e <_Balloc+0x1a>
 801a05e:	2010      	movs	r0, #16
 801a060:	f000 fc2a 	bl	801a8b8 <malloc>
 801a064:	6260      	str	r0, [r4, #36]	; 0x24
 801a066:	6045      	str	r5, [r0, #4]
 801a068:	6085      	str	r5, [r0, #8]
 801a06a:	6005      	str	r5, [r0, #0]
 801a06c:	60c5      	str	r5, [r0, #12]
 801a06e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801a070:	68eb      	ldr	r3, [r5, #12]
 801a072:	b143      	cbz	r3, 801a086 <_Balloc+0x32>
 801a074:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a076:	68db      	ldr	r3, [r3, #12]
 801a078:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801a07c:	b178      	cbz	r0, 801a09e <_Balloc+0x4a>
 801a07e:	6802      	ldr	r2, [r0, #0]
 801a080:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801a084:	e017      	b.n	801a0b6 <_Balloc+0x62>
 801a086:	2221      	movs	r2, #33	; 0x21
 801a088:	2104      	movs	r1, #4
 801a08a:	4620      	mov	r0, r4
 801a08c:	f000 fbe6 	bl	801a85c <_calloc_r>
 801a090:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a092:	60e8      	str	r0, [r5, #12]
 801a094:	68db      	ldr	r3, [r3, #12]
 801a096:	2b00      	cmp	r3, #0
 801a098:	d1ec      	bne.n	801a074 <_Balloc+0x20>
 801a09a:	2000      	movs	r0, #0
 801a09c:	bd70      	pop	{r4, r5, r6, pc}
 801a09e:	2101      	movs	r1, #1
 801a0a0:	fa01 f506 	lsl.w	r5, r1, r6
 801a0a4:	1d6a      	adds	r2, r5, #5
 801a0a6:	0092      	lsls	r2, r2, #2
 801a0a8:	4620      	mov	r0, r4
 801a0aa:	f000 fbd7 	bl	801a85c <_calloc_r>
 801a0ae:	2800      	cmp	r0, #0
 801a0b0:	d0f3      	beq.n	801a09a <_Balloc+0x46>
 801a0b2:	6046      	str	r6, [r0, #4]
 801a0b4:	6085      	str	r5, [r0, #8]
 801a0b6:	2300      	movs	r3, #0
 801a0b8:	6103      	str	r3, [r0, #16]
 801a0ba:	60c3      	str	r3, [r0, #12]
 801a0bc:	bd70      	pop	{r4, r5, r6, pc}

0801a0be <_Bfree>:
 801a0be:	b570      	push	{r4, r5, r6, lr}
 801a0c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801a0c2:	4606      	mov	r6, r0
 801a0c4:	460d      	mov	r5, r1
 801a0c6:	b93c      	cbnz	r4, 801a0d8 <_Bfree+0x1a>
 801a0c8:	2010      	movs	r0, #16
 801a0ca:	f000 fbf5 	bl	801a8b8 <malloc>
 801a0ce:	6270      	str	r0, [r6, #36]	; 0x24
 801a0d0:	6044      	str	r4, [r0, #4]
 801a0d2:	6084      	str	r4, [r0, #8]
 801a0d4:	6004      	str	r4, [r0, #0]
 801a0d6:	60c4      	str	r4, [r0, #12]
 801a0d8:	b13d      	cbz	r5, 801a0ea <_Bfree+0x2c>
 801a0da:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801a0dc:	686a      	ldr	r2, [r5, #4]
 801a0de:	68db      	ldr	r3, [r3, #12]
 801a0e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a0e4:	6029      	str	r1, [r5, #0]
 801a0e6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801a0ea:	bd70      	pop	{r4, r5, r6, pc}

0801a0ec <__multadd>:
 801a0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0f0:	690d      	ldr	r5, [r1, #16]
 801a0f2:	461f      	mov	r7, r3
 801a0f4:	4606      	mov	r6, r0
 801a0f6:	460c      	mov	r4, r1
 801a0f8:	f101 0e14 	add.w	lr, r1, #20
 801a0fc:	2300      	movs	r3, #0
 801a0fe:	f8de 0000 	ldr.w	r0, [lr]
 801a102:	b281      	uxth	r1, r0
 801a104:	fb02 7101 	mla	r1, r2, r1, r7
 801a108:	0c0f      	lsrs	r7, r1, #16
 801a10a:	0c00      	lsrs	r0, r0, #16
 801a10c:	fb02 7000 	mla	r0, r2, r0, r7
 801a110:	b289      	uxth	r1, r1
 801a112:	3301      	adds	r3, #1
 801a114:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801a118:	429d      	cmp	r5, r3
 801a11a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801a11e:	f84e 1b04 	str.w	r1, [lr], #4
 801a122:	dcec      	bgt.n	801a0fe <__multadd+0x12>
 801a124:	b1d7      	cbz	r7, 801a15c <__multadd+0x70>
 801a126:	68a3      	ldr	r3, [r4, #8]
 801a128:	429d      	cmp	r5, r3
 801a12a:	db12      	blt.n	801a152 <__multadd+0x66>
 801a12c:	6861      	ldr	r1, [r4, #4]
 801a12e:	4630      	mov	r0, r6
 801a130:	3101      	adds	r1, #1
 801a132:	f7ff ff8f 	bl	801a054 <_Balloc>
 801a136:	6922      	ldr	r2, [r4, #16]
 801a138:	3202      	adds	r2, #2
 801a13a:	f104 010c 	add.w	r1, r4, #12
 801a13e:	4680      	mov	r8, r0
 801a140:	0092      	lsls	r2, r2, #2
 801a142:	300c      	adds	r0, #12
 801a144:	f7fe fd6b 	bl	8018c1e <memcpy>
 801a148:	4621      	mov	r1, r4
 801a14a:	4630      	mov	r0, r6
 801a14c:	f7ff ffb7 	bl	801a0be <_Bfree>
 801a150:	4644      	mov	r4, r8
 801a152:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a156:	3501      	adds	r5, #1
 801a158:	615f      	str	r7, [r3, #20]
 801a15a:	6125      	str	r5, [r4, #16]
 801a15c:	4620      	mov	r0, r4
 801a15e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a162 <__s2b>:
 801a162:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a166:	460c      	mov	r4, r1
 801a168:	4615      	mov	r5, r2
 801a16a:	461f      	mov	r7, r3
 801a16c:	2209      	movs	r2, #9
 801a16e:	3308      	adds	r3, #8
 801a170:	4606      	mov	r6, r0
 801a172:	fb93 f3f2 	sdiv	r3, r3, r2
 801a176:	2100      	movs	r1, #0
 801a178:	2201      	movs	r2, #1
 801a17a:	429a      	cmp	r2, r3
 801a17c:	da02      	bge.n	801a184 <__s2b+0x22>
 801a17e:	0052      	lsls	r2, r2, #1
 801a180:	3101      	adds	r1, #1
 801a182:	e7fa      	b.n	801a17a <__s2b+0x18>
 801a184:	4630      	mov	r0, r6
 801a186:	f7ff ff65 	bl	801a054 <_Balloc>
 801a18a:	9b08      	ldr	r3, [sp, #32]
 801a18c:	6143      	str	r3, [r0, #20]
 801a18e:	2d09      	cmp	r5, #9
 801a190:	f04f 0301 	mov.w	r3, #1
 801a194:	6103      	str	r3, [r0, #16]
 801a196:	dd11      	ble.n	801a1bc <__s2b+0x5a>
 801a198:	f104 0809 	add.w	r8, r4, #9
 801a19c:	46c1      	mov	r9, r8
 801a19e:	442c      	add	r4, r5
 801a1a0:	f819 3b01 	ldrb.w	r3, [r9], #1
 801a1a4:	4601      	mov	r1, r0
 801a1a6:	3b30      	subs	r3, #48	; 0x30
 801a1a8:	220a      	movs	r2, #10
 801a1aa:	4630      	mov	r0, r6
 801a1ac:	f7ff ff9e 	bl	801a0ec <__multadd>
 801a1b0:	45a1      	cmp	r9, r4
 801a1b2:	d1f5      	bne.n	801a1a0 <__s2b+0x3e>
 801a1b4:	eb08 0405 	add.w	r4, r8, r5
 801a1b8:	3c08      	subs	r4, #8
 801a1ba:	e001      	b.n	801a1c0 <__s2b+0x5e>
 801a1bc:	340a      	adds	r4, #10
 801a1be:	2509      	movs	r5, #9
 801a1c0:	1b2d      	subs	r5, r5, r4
 801a1c2:	1963      	adds	r3, r4, r5
 801a1c4:	429f      	cmp	r7, r3
 801a1c6:	dd08      	ble.n	801a1da <__s2b+0x78>
 801a1c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a1cc:	4601      	mov	r1, r0
 801a1ce:	3b30      	subs	r3, #48	; 0x30
 801a1d0:	220a      	movs	r2, #10
 801a1d2:	4630      	mov	r0, r6
 801a1d4:	f7ff ff8a 	bl	801a0ec <__multadd>
 801a1d8:	e7f3      	b.n	801a1c2 <__s2b+0x60>
 801a1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801a1de <__hi0bits>:
 801a1de:	0c03      	lsrs	r3, r0, #16
 801a1e0:	041b      	lsls	r3, r3, #16
 801a1e2:	b913      	cbnz	r3, 801a1ea <__hi0bits+0xc>
 801a1e4:	0400      	lsls	r0, r0, #16
 801a1e6:	2310      	movs	r3, #16
 801a1e8:	e000      	b.n	801a1ec <__hi0bits+0xe>
 801a1ea:	2300      	movs	r3, #0
 801a1ec:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a1f0:	bf04      	itt	eq
 801a1f2:	0200      	lsleq	r0, r0, #8
 801a1f4:	3308      	addeq	r3, #8
 801a1f6:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801a1fa:	bf04      	itt	eq
 801a1fc:	0100      	lsleq	r0, r0, #4
 801a1fe:	3304      	addeq	r3, #4
 801a200:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801a204:	bf04      	itt	eq
 801a206:	0080      	lsleq	r0, r0, #2
 801a208:	3302      	addeq	r3, #2
 801a20a:	2800      	cmp	r0, #0
 801a20c:	db03      	blt.n	801a216 <__hi0bits+0x38>
 801a20e:	0042      	lsls	r2, r0, #1
 801a210:	d503      	bpl.n	801a21a <__hi0bits+0x3c>
 801a212:	1c58      	adds	r0, r3, #1
 801a214:	4770      	bx	lr
 801a216:	4618      	mov	r0, r3
 801a218:	4770      	bx	lr
 801a21a:	2020      	movs	r0, #32
 801a21c:	4770      	bx	lr

0801a21e <__lo0bits>:
 801a21e:	6803      	ldr	r3, [r0, #0]
 801a220:	f013 0207 	ands.w	r2, r3, #7
 801a224:	d00b      	beq.n	801a23e <__lo0bits+0x20>
 801a226:	07d9      	lsls	r1, r3, #31
 801a228:	d422      	bmi.n	801a270 <__lo0bits+0x52>
 801a22a:	079a      	lsls	r2, r3, #30
 801a22c:	bf4b      	itete	mi
 801a22e:	085b      	lsrmi	r3, r3, #1
 801a230:	089b      	lsrpl	r3, r3, #2
 801a232:	6003      	strmi	r3, [r0, #0]
 801a234:	6003      	strpl	r3, [r0, #0]
 801a236:	bf4c      	ite	mi
 801a238:	2001      	movmi	r0, #1
 801a23a:	2002      	movpl	r0, #2
 801a23c:	4770      	bx	lr
 801a23e:	b299      	uxth	r1, r3
 801a240:	b909      	cbnz	r1, 801a246 <__lo0bits+0x28>
 801a242:	0c1b      	lsrs	r3, r3, #16
 801a244:	2210      	movs	r2, #16
 801a246:	f013 0fff 	tst.w	r3, #255	; 0xff
 801a24a:	bf04      	itt	eq
 801a24c:	0a1b      	lsreq	r3, r3, #8
 801a24e:	3208      	addeq	r2, #8
 801a250:	0719      	lsls	r1, r3, #28
 801a252:	bf04      	itt	eq
 801a254:	091b      	lsreq	r3, r3, #4
 801a256:	3204      	addeq	r2, #4
 801a258:	0799      	lsls	r1, r3, #30
 801a25a:	bf04      	itt	eq
 801a25c:	089b      	lsreq	r3, r3, #2
 801a25e:	3202      	addeq	r2, #2
 801a260:	07d9      	lsls	r1, r3, #31
 801a262:	d402      	bmi.n	801a26a <__lo0bits+0x4c>
 801a264:	085b      	lsrs	r3, r3, #1
 801a266:	d005      	beq.n	801a274 <__lo0bits+0x56>
 801a268:	3201      	adds	r2, #1
 801a26a:	6003      	str	r3, [r0, #0]
 801a26c:	4610      	mov	r0, r2
 801a26e:	4770      	bx	lr
 801a270:	2000      	movs	r0, #0
 801a272:	4770      	bx	lr
 801a274:	2020      	movs	r0, #32
 801a276:	4770      	bx	lr

0801a278 <__i2b>:
 801a278:	b510      	push	{r4, lr}
 801a27a:	460c      	mov	r4, r1
 801a27c:	2101      	movs	r1, #1
 801a27e:	f7ff fee9 	bl	801a054 <_Balloc>
 801a282:	2201      	movs	r2, #1
 801a284:	6144      	str	r4, [r0, #20]
 801a286:	6102      	str	r2, [r0, #16]
 801a288:	bd10      	pop	{r4, pc}

0801a28a <__multiply>:
 801a28a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a28e:	4614      	mov	r4, r2
 801a290:	690a      	ldr	r2, [r1, #16]
 801a292:	6923      	ldr	r3, [r4, #16]
 801a294:	429a      	cmp	r2, r3
 801a296:	bfb8      	it	lt
 801a298:	460b      	movlt	r3, r1
 801a29a:	4688      	mov	r8, r1
 801a29c:	bfbc      	itt	lt
 801a29e:	46a0      	movlt	r8, r4
 801a2a0:	461c      	movlt	r4, r3
 801a2a2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801a2a6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801a2aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a2ae:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a2b2:	eb07 0609 	add.w	r6, r7, r9
 801a2b6:	429e      	cmp	r6, r3
 801a2b8:	bfc8      	it	gt
 801a2ba:	3101      	addgt	r1, #1
 801a2bc:	f7ff feca 	bl	801a054 <_Balloc>
 801a2c0:	f100 0514 	add.w	r5, r0, #20
 801a2c4:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 801a2c8:	462b      	mov	r3, r5
 801a2ca:	2200      	movs	r2, #0
 801a2cc:	4563      	cmp	r3, ip
 801a2ce:	d202      	bcs.n	801a2d6 <__multiply+0x4c>
 801a2d0:	f843 2b04 	str.w	r2, [r3], #4
 801a2d4:	e7fa      	b.n	801a2cc <__multiply+0x42>
 801a2d6:	f104 0214 	add.w	r2, r4, #20
 801a2da:	f108 0114 	add.w	r1, r8, #20
 801a2de:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801a2e2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801a2e6:	9300      	str	r3, [sp, #0]
 801a2e8:	9b00      	ldr	r3, [sp, #0]
 801a2ea:	9201      	str	r2, [sp, #4]
 801a2ec:	4293      	cmp	r3, r2
 801a2ee:	d957      	bls.n	801a3a0 <__multiply+0x116>
 801a2f0:	f8b2 b000 	ldrh.w	fp, [r2]
 801a2f4:	f1bb 0f00 	cmp.w	fp, #0
 801a2f8:	d023      	beq.n	801a342 <__multiply+0xb8>
 801a2fa:	4689      	mov	r9, r1
 801a2fc:	46ae      	mov	lr, r5
 801a2fe:	f04f 0800 	mov.w	r8, #0
 801a302:	f859 4b04 	ldr.w	r4, [r9], #4
 801a306:	f8be a000 	ldrh.w	sl, [lr]
 801a30a:	b2a3      	uxth	r3, r4
 801a30c:	fb0b a303 	mla	r3, fp, r3, sl
 801a310:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801a314:	f8de 4000 	ldr.w	r4, [lr]
 801a318:	4443      	add	r3, r8
 801a31a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801a31e:	fb0b 840a 	mla	r4, fp, sl, r8
 801a322:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801a326:	46f2      	mov	sl, lr
 801a328:	b29b      	uxth	r3, r3
 801a32a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801a32e:	454f      	cmp	r7, r9
 801a330:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801a334:	f84a 3b04 	str.w	r3, [sl], #4
 801a338:	d901      	bls.n	801a33e <__multiply+0xb4>
 801a33a:	46d6      	mov	lr, sl
 801a33c:	e7e1      	b.n	801a302 <__multiply+0x78>
 801a33e:	f8ce 8004 	str.w	r8, [lr, #4]
 801a342:	9b01      	ldr	r3, [sp, #4]
 801a344:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801a348:	3204      	adds	r2, #4
 801a34a:	f1ba 0f00 	cmp.w	sl, #0
 801a34e:	d021      	beq.n	801a394 <__multiply+0x10a>
 801a350:	682b      	ldr	r3, [r5, #0]
 801a352:	462c      	mov	r4, r5
 801a354:	4689      	mov	r9, r1
 801a356:	f04f 0800 	mov.w	r8, #0
 801a35a:	f8b9 e000 	ldrh.w	lr, [r9]
 801a35e:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 801a362:	fb0a be0e 	mla	lr, sl, lr, fp
 801a366:	44f0      	add	r8, lr
 801a368:	46a3      	mov	fp, r4
 801a36a:	b29b      	uxth	r3, r3
 801a36c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 801a370:	f84b 3b04 	str.w	r3, [fp], #4
 801a374:	f859 3b04 	ldr.w	r3, [r9], #4
 801a378:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 801a37c:	0c1b      	lsrs	r3, r3, #16
 801a37e:	fb0a e303 	mla	r3, sl, r3, lr
 801a382:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 801a386:	454f      	cmp	r7, r9
 801a388:	ea4f 4813 	mov.w	r8, r3, lsr #16
 801a38c:	d901      	bls.n	801a392 <__multiply+0x108>
 801a38e:	465c      	mov	r4, fp
 801a390:	e7e3      	b.n	801a35a <__multiply+0xd0>
 801a392:	6063      	str	r3, [r4, #4]
 801a394:	3504      	adds	r5, #4
 801a396:	e7a7      	b.n	801a2e8 <__multiply+0x5e>
 801a398:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 801a39c:	b913      	cbnz	r3, 801a3a4 <__multiply+0x11a>
 801a39e:	3e01      	subs	r6, #1
 801a3a0:	2e00      	cmp	r6, #0
 801a3a2:	dcf9      	bgt.n	801a398 <__multiply+0x10e>
 801a3a4:	6106      	str	r6, [r0, #16]
 801a3a6:	b003      	add	sp, #12
 801a3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a3ac <__pow5mult>:
 801a3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a3b0:	4615      	mov	r5, r2
 801a3b2:	f012 0203 	ands.w	r2, r2, #3
 801a3b6:	4606      	mov	r6, r0
 801a3b8:	460f      	mov	r7, r1
 801a3ba:	d007      	beq.n	801a3cc <__pow5mult+0x20>
 801a3bc:	3a01      	subs	r2, #1
 801a3be:	4c21      	ldr	r4, [pc, #132]	; (801a444 <__pow5mult+0x98>)
 801a3c0:	2300      	movs	r3, #0
 801a3c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a3c6:	f7ff fe91 	bl	801a0ec <__multadd>
 801a3ca:	4607      	mov	r7, r0
 801a3cc:	10ad      	asrs	r5, r5, #2
 801a3ce:	d036      	beq.n	801a43e <__pow5mult+0x92>
 801a3d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801a3d2:	b93c      	cbnz	r4, 801a3e4 <__pow5mult+0x38>
 801a3d4:	2010      	movs	r0, #16
 801a3d6:	f000 fa6f 	bl	801a8b8 <malloc>
 801a3da:	6270      	str	r0, [r6, #36]	; 0x24
 801a3dc:	6044      	str	r4, [r0, #4]
 801a3de:	6084      	str	r4, [r0, #8]
 801a3e0:	6004      	str	r4, [r0, #0]
 801a3e2:	60c4      	str	r4, [r0, #12]
 801a3e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801a3e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a3ec:	b94c      	cbnz	r4, 801a402 <__pow5mult+0x56>
 801a3ee:	f240 2171 	movw	r1, #625	; 0x271
 801a3f2:	4630      	mov	r0, r6
 801a3f4:	f7ff ff40 	bl	801a278 <__i2b>
 801a3f8:	2300      	movs	r3, #0
 801a3fa:	f8c8 0008 	str.w	r0, [r8, #8]
 801a3fe:	4604      	mov	r4, r0
 801a400:	6003      	str	r3, [r0, #0]
 801a402:	f04f 0800 	mov.w	r8, #0
 801a406:	07eb      	lsls	r3, r5, #31
 801a408:	d50a      	bpl.n	801a420 <__pow5mult+0x74>
 801a40a:	4639      	mov	r1, r7
 801a40c:	4622      	mov	r2, r4
 801a40e:	4630      	mov	r0, r6
 801a410:	f7ff ff3b 	bl	801a28a <__multiply>
 801a414:	4639      	mov	r1, r7
 801a416:	4681      	mov	r9, r0
 801a418:	4630      	mov	r0, r6
 801a41a:	f7ff fe50 	bl	801a0be <_Bfree>
 801a41e:	464f      	mov	r7, r9
 801a420:	106d      	asrs	r5, r5, #1
 801a422:	d00c      	beq.n	801a43e <__pow5mult+0x92>
 801a424:	6820      	ldr	r0, [r4, #0]
 801a426:	b108      	cbz	r0, 801a42c <__pow5mult+0x80>
 801a428:	4604      	mov	r4, r0
 801a42a:	e7ec      	b.n	801a406 <__pow5mult+0x5a>
 801a42c:	4622      	mov	r2, r4
 801a42e:	4621      	mov	r1, r4
 801a430:	4630      	mov	r0, r6
 801a432:	f7ff ff2a 	bl	801a28a <__multiply>
 801a436:	6020      	str	r0, [r4, #0]
 801a438:	f8c0 8000 	str.w	r8, [r0]
 801a43c:	e7f4      	b.n	801a428 <__pow5mult+0x7c>
 801a43e:	4638      	mov	r0, r7
 801a440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a444:	080233c8 	.word	0x080233c8

0801a448 <__lshift>:
 801a448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a44c:	460c      	mov	r4, r1
 801a44e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a452:	6926      	ldr	r6, [r4, #16]
 801a454:	6849      	ldr	r1, [r1, #4]
 801a456:	68a3      	ldr	r3, [r4, #8]
 801a458:	4456      	add	r6, sl
 801a45a:	4607      	mov	r7, r0
 801a45c:	4691      	mov	r9, r2
 801a45e:	1c75      	adds	r5, r6, #1
 801a460:	42ab      	cmp	r3, r5
 801a462:	da02      	bge.n	801a46a <__lshift+0x22>
 801a464:	3101      	adds	r1, #1
 801a466:	005b      	lsls	r3, r3, #1
 801a468:	e7fa      	b.n	801a460 <__lshift+0x18>
 801a46a:	4638      	mov	r0, r7
 801a46c:	f7ff fdf2 	bl	801a054 <_Balloc>
 801a470:	2300      	movs	r3, #0
 801a472:	4680      	mov	r8, r0
 801a474:	f100 0114 	add.w	r1, r0, #20
 801a478:	461a      	mov	r2, r3
 801a47a:	4553      	cmp	r3, sl
 801a47c:	da03      	bge.n	801a486 <__lshift+0x3e>
 801a47e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801a482:	3301      	adds	r3, #1
 801a484:	e7f9      	b.n	801a47a <__lshift+0x32>
 801a486:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 801a48a:	6920      	ldr	r0, [r4, #16]
 801a48c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a490:	f019 091f 	ands.w	r9, r9, #31
 801a494:	f104 0114 	add.w	r1, r4, #20
 801a498:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 801a49c:	d014      	beq.n	801a4c8 <__lshift+0x80>
 801a49e:	f1c9 0c20 	rsb	ip, r9, #32
 801a4a2:	2200      	movs	r2, #0
 801a4a4:	6808      	ldr	r0, [r1, #0]
 801a4a6:	fa00 f009 	lsl.w	r0, r0, r9
 801a4aa:	4302      	orrs	r2, r0
 801a4ac:	469a      	mov	sl, r3
 801a4ae:	f843 2b04 	str.w	r2, [r3], #4
 801a4b2:	f851 2b04 	ldr.w	r2, [r1], #4
 801a4b6:	458e      	cmp	lr, r1
 801a4b8:	fa22 f20c 	lsr.w	r2, r2, ip
 801a4bc:	d8f2      	bhi.n	801a4a4 <__lshift+0x5c>
 801a4be:	f8ca 2004 	str.w	r2, [sl, #4]
 801a4c2:	b142      	cbz	r2, 801a4d6 <__lshift+0x8e>
 801a4c4:	1cb5      	adds	r5, r6, #2
 801a4c6:	e006      	b.n	801a4d6 <__lshift+0x8e>
 801a4c8:	3b04      	subs	r3, #4
 801a4ca:	f851 2b04 	ldr.w	r2, [r1], #4
 801a4ce:	f843 2f04 	str.w	r2, [r3, #4]!
 801a4d2:	458e      	cmp	lr, r1
 801a4d4:	d8f9      	bhi.n	801a4ca <__lshift+0x82>
 801a4d6:	3d01      	subs	r5, #1
 801a4d8:	4638      	mov	r0, r7
 801a4da:	f8c8 5010 	str.w	r5, [r8, #16]
 801a4de:	4621      	mov	r1, r4
 801a4e0:	f7ff fded 	bl	801a0be <_Bfree>
 801a4e4:	4640      	mov	r0, r8
 801a4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801a4ea <__mcmp>:
 801a4ea:	6903      	ldr	r3, [r0, #16]
 801a4ec:	690a      	ldr	r2, [r1, #16]
 801a4ee:	1a9b      	subs	r3, r3, r2
 801a4f0:	b510      	push	{r4, lr}
 801a4f2:	d111      	bne.n	801a518 <__mcmp+0x2e>
 801a4f4:	0092      	lsls	r2, r2, #2
 801a4f6:	3014      	adds	r0, #20
 801a4f8:	3114      	adds	r1, #20
 801a4fa:	1883      	adds	r3, r0, r2
 801a4fc:	440a      	add	r2, r1
 801a4fe:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 801a502:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801a506:	428c      	cmp	r4, r1
 801a508:	d002      	beq.n	801a510 <__mcmp+0x26>
 801a50a:	d307      	bcc.n	801a51c <__mcmp+0x32>
 801a50c:	2001      	movs	r0, #1
 801a50e:	bd10      	pop	{r4, pc}
 801a510:	4298      	cmp	r0, r3
 801a512:	d3f4      	bcc.n	801a4fe <__mcmp+0x14>
 801a514:	2000      	movs	r0, #0
 801a516:	bd10      	pop	{r4, pc}
 801a518:	4618      	mov	r0, r3
 801a51a:	bd10      	pop	{r4, pc}
 801a51c:	f04f 30ff 	mov.w	r0, #4294967295
 801a520:	bd10      	pop	{r4, pc}

0801a522 <__mdiff>:
 801a522:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a526:	460c      	mov	r4, r1
 801a528:	4607      	mov	r7, r0
 801a52a:	4611      	mov	r1, r2
 801a52c:	4620      	mov	r0, r4
 801a52e:	4615      	mov	r5, r2
 801a530:	f7ff ffdb 	bl	801a4ea <__mcmp>
 801a534:	1e06      	subs	r6, r0, #0
 801a536:	d108      	bne.n	801a54a <__mdiff+0x28>
 801a538:	4631      	mov	r1, r6
 801a53a:	4638      	mov	r0, r7
 801a53c:	f7ff fd8a 	bl	801a054 <_Balloc>
 801a540:	2301      	movs	r3, #1
 801a542:	6103      	str	r3, [r0, #16]
 801a544:	6146      	str	r6, [r0, #20]
 801a546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a54a:	bfbc      	itt	lt
 801a54c:	4623      	movlt	r3, r4
 801a54e:	462c      	movlt	r4, r5
 801a550:	4638      	mov	r0, r7
 801a552:	6861      	ldr	r1, [r4, #4]
 801a554:	bfba      	itte	lt
 801a556:	461d      	movlt	r5, r3
 801a558:	2601      	movlt	r6, #1
 801a55a:	2600      	movge	r6, #0
 801a55c:	f7ff fd7a 	bl	801a054 <_Balloc>
 801a560:	692b      	ldr	r3, [r5, #16]
 801a562:	60c6      	str	r6, [r0, #12]
 801a564:	6926      	ldr	r6, [r4, #16]
 801a566:	f105 0914 	add.w	r9, r5, #20
 801a56a:	3414      	adds	r4, #20
 801a56c:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 801a570:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801a574:	f100 0514 	add.w	r5, r0, #20
 801a578:	f04f 0c00 	mov.w	ip, #0
 801a57c:	f854 3b04 	ldr.w	r3, [r4], #4
 801a580:	f859 2b04 	ldr.w	r2, [r9], #4
 801a584:	fa1c f183 	uxtah	r1, ip, r3
 801a588:	fa1f fe82 	uxth.w	lr, r2
 801a58c:	0c12      	lsrs	r2, r2, #16
 801a58e:	ebce 0101 	rsb	r1, lr, r1
 801a592:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 801a596:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801a59a:	b289      	uxth	r1, r1
 801a59c:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801a5a0:	45c8      	cmp	r8, r9
 801a5a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801a5a6:	46a6      	mov	lr, r4
 801a5a8:	f845 3b04 	str.w	r3, [r5], #4
 801a5ac:	d8e6      	bhi.n	801a57c <__mdiff+0x5a>
 801a5ae:	45be      	cmp	lr, r7
 801a5b0:	d20e      	bcs.n	801a5d0 <__mdiff+0xae>
 801a5b2:	f85e 1b04 	ldr.w	r1, [lr], #4
 801a5b6:	fa1c f281 	uxtah	r2, ip, r1
 801a5ba:	1413      	asrs	r3, r2, #16
 801a5bc:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 801a5c0:	b292      	uxth	r2, r2
 801a5c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801a5c6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801a5ca:	f845 2b04 	str.w	r2, [r5], #4
 801a5ce:	e7ee      	b.n	801a5ae <__mdiff+0x8c>
 801a5d0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801a5d4:	b90b      	cbnz	r3, 801a5da <__mdiff+0xb8>
 801a5d6:	3e01      	subs	r6, #1
 801a5d8:	e7fa      	b.n	801a5d0 <__mdiff+0xae>
 801a5da:	6106      	str	r6, [r0, #16]
 801a5dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801a5e0 <__ulp>:
 801a5e0:	4b12      	ldr	r3, [pc, #72]	; (801a62c <__ulp+0x4c>)
 801a5e2:	ee10 2a90 	vmov	r2, s1
 801a5e6:	401a      	ands	r2, r3
 801a5e8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	dd02      	ble.n	801a5f6 <__ulp+0x16>
 801a5f0:	2000      	movs	r0, #0
 801a5f2:	4619      	mov	r1, r3
 801a5f4:	e017      	b.n	801a626 <__ulp+0x46>
 801a5f6:	425b      	negs	r3, r3
 801a5f8:	151b      	asrs	r3, r3, #20
 801a5fa:	2b13      	cmp	r3, #19
 801a5fc:	f04f 0000 	mov.w	r0, #0
 801a600:	f04f 0100 	mov.w	r1, #0
 801a604:	dc04      	bgt.n	801a610 <__ulp+0x30>
 801a606:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801a60a:	fa42 f103 	asr.w	r1, r2, r3
 801a60e:	e00a      	b.n	801a626 <__ulp+0x46>
 801a610:	3b14      	subs	r3, #20
 801a612:	2b1e      	cmp	r3, #30
 801a614:	f04f 0201 	mov.w	r2, #1
 801a618:	bfda      	itte	le
 801a61a:	f1c3 031f 	rsble	r3, r3, #31
 801a61e:	fa02 f303 	lslle.w	r3, r2, r3
 801a622:	4613      	movgt	r3, r2
 801a624:	4618      	mov	r0, r3
 801a626:	ec41 0b10 	vmov	d0, r0, r1
 801a62a:	4770      	bx	lr
 801a62c:	7ff00000 	.word	0x7ff00000

0801a630 <__b2d>:
 801a630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a632:	6905      	ldr	r5, [r0, #16]
 801a634:	f100 0614 	add.w	r6, r0, #20
 801a638:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 801a63c:	1f2f      	subs	r7, r5, #4
 801a63e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801a642:	4620      	mov	r0, r4
 801a644:	f7ff fdcb 	bl	801a1de <__hi0bits>
 801a648:	f1c0 0320 	rsb	r3, r0, #32
 801a64c:	280a      	cmp	r0, #10
 801a64e:	600b      	str	r3, [r1, #0]
 801a650:	dc14      	bgt.n	801a67c <__b2d+0x4c>
 801a652:	f1c0 0e0b 	rsb	lr, r0, #11
 801a656:	fa24 f10e 	lsr.w	r1, r4, lr
 801a65a:	42be      	cmp	r6, r7
 801a65c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 801a660:	bf34      	ite	cc
 801a662:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a666:	2100      	movcs	r1, #0
 801a668:	3015      	adds	r0, #21
 801a66a:	fa04 f000 	lsl.w	r0, r4, r0
 801a66e:	fa21 f10e 	lsr.w	r1, r1, lr
 801a672:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a676:	ea40 0201 	orr.w	r2, r0, r1
 801a67a:	e023      	b.n	801a6c4 <__b2d+0x94>
 801a67c:	42be      	cmp	r6, r7
 801a67e:	bf3a      	itte	cc
 801a680:	f1a5 0708 	subcc.w	r7, r5, #8
 801a684:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a688:	2100      	movcs	r1, #0
 801a68a:	380b      	subs	r0, #11
 801a68c:	d015      	beq.n	801a6ba <__b2d+0x8a>
 801a68e:	4084      	lsls	r4, r0
 801a690:	f1c0 0520 	rsb	r5, r0, #32
 801a694:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801a698:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801a69c:	42b7      	cmp	r7, r6
 801a69e:	fa21 fe05 	lsr.w	lr, r1, r5
 801a6a2:	ea44 030e 	orr.w	r3, r4, lr
 801a6a6:	bf8c      	ite	hi
 801a6a8:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 801a6ac:	2400      	movls	r4, #0
 801a6ae:	fa01 f000 	lsl.w	r0, r1, r0
 801a6b2:	40ec      	lsrs	r4, r5
 801a6b4:	ea40 0204 	orr.w	r2, r0, r4
 801a6b8:	e004      	b.n	801a6c4 <__b2d+0x94>
 801a6ba:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801a6be:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a6c2:	460a      	mov	r2, r1
 801a6c4:	ec43 2b10 	vmov	d0, r2, r3
 801a6c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a6ca <__d2b>:
 801a6ca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a6ce:	460e      	mov	r6, r1
 801a6d0:	2101      	movs	r1, #1
 801a6d2:	ec59 8b10 	vmov	r8, r9, d0
 801a6d6:	4615      	mov	r5, r2
 801a6d8:	f7ff fcbc 	bl	801a054 <_Balloc>
 801a6dc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801a6e0:	4607      	mov	r7, r0
 801a6e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a6e6:	b10c      	cbz	r4, 801a6ec <__d2b+0x22>
 801a6e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a6ec:	9301      	str	r3, [sp, #4]
 801a6ee:	f1b8 0f00 	cmp.w	r8, #0
 801a6f2:	d019      	beq.n	801a728 <__d2b+0x5e>
 801a6f4:	a802      	add	r0, sp, #8
 801a6f6:	f840 8d08 	str.w	r8, [r0, #-8]!
 801a6fa:	f7ff fd90 	bl	801a21e <__lo0bits>
 801a6fe:	9b00      	ldr	r3, [sp, #0]
 801a700:	b148      	cbz	r0, 801a716 <__d2b+0x4c>
 801a702:	9a01      	ldr	r2, [sp, #4]
 801a704:	f1c0 0120 	rsb	r1, r0, #32
 801a708:	fa02 f101 	lsl.w	r1, r2, r1
 801a70c:	430b      	orrs	r3, r1
 801a70e:	40c2      	lsrs	r2, r0
 801a710:	617b      	str	r3, [r7, #20]
 801a712:	9201      	str	r2, [sp, #4]
 801a714:	e000      	b.n	801a718 <__d2b+0x4e>
 801a716:	617b      	str	r3, [r7, #20]
 801a718:	9b01      	ldr	r3, [sp, #4]
 801a71a:	61bb      	str	r3, [r7, #24]
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	bf14      	ite	ne
 801a720:	2102      	movne	r1, #2
 801a722:	2101      	moveq	r1, #1
 801a724:	6139      	str	r1, [r7, #16]
 801a726:	e007      	b.n	801a738 <__d2b+0x6e>
 801a728:	a801      	add	r0, sp, #4
 801a72a:	f7ff fd78 	bl	801a21e <__lo0bits>
 801a72e:	9b01      	ldr	r3, [sp, #4]
 801a730:	617b      	str	r3, [r7, #20]
 801a732:	2101      	movs	r1, #1
 801a734:	6139      	str	r1, [r7, #16]
 801a736:	3020      	adds	r0, #32
 801a738:	b134      	cbz	r4, 801a748 <__d2b+0x7e>
 801a73a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801a73e:	4404      	add	r4, r0
 801a740:	6034      	str	r4, [r6, #0]
 801a742:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a746:	e009      	b.n	801a75c <__d2b+0x92>
 801a748:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801a74c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a750:	6030      	str	r0, [r6, #0]
 801a752:	6918      	ldr	r0, [r3, #16]
 801a754:	f7ff fd43 	bl	801a1de <__hi0bits>
 801a758:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801a75c:	6028      	str	r0, [r5, #0]
 801a75e:	4638      	mov	r0, r7
 801a760:	b003      	add	sp, #12
 801a762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801a766 <__ratio>:
 801a766:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a76a:	4688      	mov	r8, r1
 801a76c:	4669      	mov	r1, sp
 801a76e:	4681      	mov	r9, r0
 801a770:	f7ff ff5e 	bl	801a630 <__b2d>
 801a774:	a901      	add	r1, sp, #4
 801a776:	4640      	mov	r0, r8
 801a778:	ec55 4b10 	vmov	r4, r5, d0
 801a77c:	f7ff ff58 	bl	801a630 <__b2d>
 801a780:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a784:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a788:	1a9a      	subs	r2, r3, r2
 801a78a:	e89d 000a 	ldmia.w	sp, {r1, r3}
 801a78e:	1ac9      	subs	r1, r1, r3
 801a790:	ec57 6b10 	vmov	r6, r7, d0
 801a794:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 801a798:	2b00      	cmp	r3, #0
 801a79a:	bfcc      	ite	gt
 801a79c:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 801a7a0:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 801a7a4:	4632      	mov	r2, r6
 801a7a6:	463b      	mov	r3, r7
 801a7a8:	4620      	mov	r0, r4
 801a7aa:	4629      	mov	r1, r5
 801a7ac:	f7e6 f80a 	bl	80007c4 <__aeabi_ddiv>
 801a7b0:	ec41 0b10 	vmov	d0, r0, r1
 801a7b4:	b003      	add	sp, #12
 801a7b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801a7ba <__copybits>:
 801a7ba:	3901      	subs	r1, #1
 801a7bc:	b510      	push	{r4, lr}
 801a7be:	1149      	asrs	r1, r1, #5
 801a7c0:	6914      	ldr	r4, [r2, #16]
 801a7c2:	3101      	adds	r1, #1
 801a7c4:	f102 0314 	add.w	r3, r2, #20
 801a7c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a7cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a7d0:	42a3      	cmp	r3, r4
 801a7d2:	4602      	mov	r2, r0
 801a7d4:	d204      	bcs.n	801a7e0 <__copybits+0x26>
 801a7d6:	f853 2b04 	ldr.w	r2, [r3], #4
 801a7da:	f840 2b04 	str.w	r2, [r0], #4
 801a7de:	e7f7      	b.n	801a7d0 <__copybits+0x16>
 801a7e0:	2300      	movs	r3, #0
 801a7e2:	428a      	cmp	r2, r1
 801a7e4:	d202      	bcs.n	801a7ec <__copybits+0x32>
 801a7e6:	f842 3b04 	str.w	r3, [r2], #4
 801a7ea:	e7fa      	b.n	801a7e2 <__copybits+0x28>
 801a7ec:	bd10      	pop	{r4, pc}

0801a7ee <__any_on>:
 801a7ee:	f100 0214 	add.w	r2, r0, #20
 801a7f2:	6900      	ldr	r0, [r0, #16]
 801a7f4:	114b      	asrs	r3, r1, #5
 801a7f6:	4298      	cmp	r0, r3
 801a7f8:	b510      	push	{r4, lr}
 801a7fa:	db0c      	blt.n	801a816 <__any_on+0x28>
 801a7fc:	dd0c      	ble.n	801a818 <__any_on+0x2a>
 801a7fe:	f011 011f 	ands.w	r1, r1, #31
 801a802:	d009      	beq.n	801a818 <__any_on+0x2a>
 801a804:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a808:	fa24 f001 	lsr.w	r0, r4, r1
 801a80c:	fa00 f101 	lsl.w	r1, r0, r1
 801a810:	428c      	cmp	r4, r1
 801a812:	d10c      	bne.n	801a82e <__any_on+0x40>
 801a814:	e000      	b.n	801a818 <__any_on+0x2a>
 801a816:	4603      	mov	r3, r0
 801a818:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a81c:	4293      	cmp	r3, r2
 801a81e:	d904      	bls.n	801a82a <__any_on+0x3c>
 801a820:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a824:	2900      	cmp	r1, #0
 801a826:	d0f9      	beq.n	801a81c <__any_on+0x2e>
 801a828:	e001      	b.n	801a82e <__any_on+0x40>
 801a82a:	2000      	movs	r0, #0
 801a82c:	bd10      	pop	{r4, pc}
 801a82e:	2001      	movs	r0, #1
 801a830:	bd10      	pop	{r4, pc}

0801a832 <strncmp>:
 801a832:	b530      	push	{r4, r5, lr}
 801a834:	b182      	cbz	r2, 801a858 <strncmp+0x26>
 801a836:	1e45      	subs	r5, r0, #1
 801a838:	3901      	subs	r1, #1
 801a83a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 801a83e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a842:	42a3      	cmp	r3, r4
 801a844:	d106      	bne.n	801a854 <strncmp+0x22>
 801a846:	43ec      	mvns	r4, r5
 801a848:	4414      	add	r4, r2
 801a84a:	42e0      	cmn	r0, r4
 801a84c:	d001      	beq.n	801a852 <strncmp+0x20>
 801a84e:	2b00      	cmp	r3, #0
 801a850:	d1f3      	bne.n	801a83a <strncmp+0x8>
 801a852:	461c      	mov	r4, r3
 801a854:	1b18      	subs	r0, r3, r4
 801a856:	bd30      	pop	{r4, r5, pc}
 801a858:	4610      	mov	r0, r2
 801a85a:	bd30      	pop	{r4, r5, pc}

0801a85c <_calloc_r>:
 801a85c:	b510      	push	{r4, lr}
 801a85e:	4351      	muls	r1, r2
 801a860:	f000 f832 	bl	801a8c8 <_malloc_r>
 801a864:	4604      	mov	r4, r0
 801a866:	b320      	cbz	r0, 801a8b2 <_calloc_r+0x56>
 801a868:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801a86c:	f022 0203 	bic.w	r2, r2, #3
 801a870:	3a04      	subs	r2, #4
 801a872:	2a24      	cmp	r2, #36	; 0x24
 801a874:	d81a      	bhi.n	801a8ac <_calloc_r+0x50>
 801a876:	2a13      	cmp	r2, #19
 801a878:	d912      	bls.n	801a8a0 <_calloc_r+0x44>
 801a87a:	2100      	movs	r1, #0
 801a87c:	2a1b      	cmp	r2, #27
 801a87e:	6001      	str	r1, [r0, #0]
 801a880:	6041      	str	r1, [r0, #4]
 801a882:	d802      	bhi.n	801a88a <_calloc_r+0x2e>
 801a884:	f100 0308 	add.w	r3, r0, #8
 801a888:	e00b      	b.n	801a8a2 <_calloc_r+0x46>
 801a88a:	2a24      	cmp	r2, #36	; 0x24
 801a88c:	6081      	str	r1, [r0, #8]
 801a88e:	60c1      	str	r1, [r0, #12]
 801a890:	bf11      	iteee	ne
 801a892:	f100 0310 	addne.w	r3, r0, #16
 801a896:	6101      	streq	r1, [r0, #16]
 801a898:	f100 0318 	addeq.w	r3, r0, #24
 801a89c:	6141      	streq	r1, [r0, #20]
 801a89e:	e000      	b.n	801a8a2 <_calloc_r+0x46>
 801a8a0:	4603      	mov	r3, r0
 801a8a2:	2200      	movs	r2, #0
 801a8a4:	601a      	str	r2, [r3, #0]
 801a8a6:	605a      	str	r2, [r3, #4]
 801a8a8:	609a      	str	r2, [r3, #8]
 801a8aa:	e002      	b.n	801a8b2 <_calloc_r+0x56>
 801a8ac:	2100      	movs	r1, #0
 801a8ae:	f7fe f9dc 	bl	8018c6a <memset>
 801a8b2:	4620      	mov	r0, r4
 801a8b4:	bd10      	pop	{r4, pc}
	...

0801a8b8 <malloc>:
 801a8b8:	4b02      	ldr	r3, [pc, #8]	; (801a8c4 <malloc+0xc>)
 801a8ba:	4601      	mov	r1, r0
 801a8bc:	6818      	ldr	r0, [r3, #0]
 801a8be:	f000 b803 	b.w	801a8c8 <_malloc_r>
 801a8c2:	bf00      	nop
 801a8c4:	20000724 	.word	0x20000724

0801a8c8 <_malloc_r>:
 801a8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8cc:	f101 040b 	add.w	r4, r1, #11
 801a8d0:	2c16      	cmp	r4, #22
 801a8d2:	b085      	sub	sp, #20
 801a8d4:	4681      	mov	r9, r0
 801a8d6:	d903      	bls.n	801a8e0 <_malloc_r+0x18>
 801a8d8:	f034 0407 	bics.w	r4, r4, #7
 801a8dc:	d501      	bpl.n	801a8e2 <_malloc_r+0x1a>
 801a8de:	e002      	b.n	801a8e6 <_malloc_r+0x1e>
 801a8e0:	2410      	movs	r4, #16
 801a8e2:	428c      	cmp	r4, r1
 801a8e4:	d203      	bcs.n	801a8ee <_malloc_r+0x26>
 801a8e6:	230c      	movs	r3, #12
 801a8e8:	f8c9 3000 	str.w	r3, [r9]
 801a8ec:	e1ea      	b.n	801acc4 <_malloc_r+0x3fc>
 801a8ee:	4648      	mov	r0, r9
 801a8f0:	f000 fa0a 	bl	801ad08 <__malloc_lock>
 801a8f4:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 801a8f8:	4d9e      	ldr	r5, [pc, #632]	; (801ab74 <_malloc_r+0x2ac>)
 801a8fa:	d217      	bcs.n	801a92c <_malloc_r+0x64>
 801a8fc:	f104 0208 	add.w	r2, r4, #8
 801a900:	442a      	add	r2, r5
 801a902:	f1a2 0108 	sub.w	r1, r2, #8
 801a906:	6856      	ldr	r6, [r2, #4]
 801a908:	428e      	cmp	r6, r1
 801a90a:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 801a90e:	d102      	bne.n	801a916 <_malloc_r+0x4e>
 801a910:	68d6      	ldr	r6, [r2, #12]
 801a912:	42b2      	cmp	r2, r6
 801a914:	d008      	beq.n	801a928 <_malloc_r+0x60>
 801a916:	6873      	ldr	r3, [r6, #4]
 801a918:	68f2      	ldr	r2, [r6, #12]
 801a91a:	68b1      	ldr	r1, [r6, #8]
 801a91c:	f023 0303 	bic.w	r3, r3, #3
 801a920:	60ca      	str	r2, [r1, #12]
 801a922:	4433      	add	r3, r6
 801a924:	6091      	str	r1, [r2, #8]
 801a926:	e02f      	b.n	801a988 <_malloc_r+0xc0>
 801a928:	3302      	adds	r3, #2
 801a92a:	e03d      	b.n	801a9a8 <_malloc_r+0xe0>
 801a92c:	0a63      	lsrs	r3, r4, #9
 801a92e:	d01a      	beq.n	801a966 <_malloc_r+0x9e>
 801a930:	2b04      	cmp	r3, #4
 801a932:	d802      	bhi.n	801a93a <_malloc_r+0x72>
 801a934:	09a3      	lsrs	r3, r4, #6
 801a936:	3338      	adds	r3, #56	; 0x38
 801a938:	e018      	b.n	801a96c <_malloc_r+0xa4>
 801a93a:	2b14      	cmp	r3, #20
 801a93c:	d801      	bhi.n	801a942 <_malloc_r+0x7a>
 801a93e:	335b      	adds	r3, #91	; 0x5b
 801a940:	e014      	b.n	801a96c <_malloc_r+0xa4>
 801a942:	2b54      	cmp	r3, #84	; 0x54
 801a944:	d802      	bhi.n	801a94c <_malloc_r+0x84>
 801a946:	0b23      	lsrs	r3, r4, #12
 801a948:	336e      	adds	r3, #110	; 0x6e
 801a94a:	e00f      	b.n	801a96c <_malloc_r+0xa4>
 801a94c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 801a950:	d802      	bhi.n	801a958 <_malloc_r+0x90>
 801a952:	0be3      	lsrs	r3, r4, #15
 801a954:	3377      	adds	r3, #119	; 0x77
 801a956:	e009      	b.n	801a96c <_malloc_r+0xa4>
 801a958:	f240 5254 	movw	r2, #1364	; 0x554
 801a95c:	4293      	cmp	r3, r2
 801a95e:	d804      	bhi.n	801a96a <_malloc_r+0xa2>
 801a960:	0ca3      	lsrs	r3, r4, #18
 801a962:	337c      	adds	r3, #124	; 0x7c
 801a964:	e002      	b.n	801a96c <_malloc_r+0xa4>
 801a966:	233f      	movs	r3, #63	; 0x3f
 801a968:	e000      	b.n	801a96c <_malloc_r+0xa4>
 801a96a:	237e      	movs	r3, #126	; 0x7e
 801a96c:	1c5a      	adds	r2, r3, #1
 801a96e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 801a972:	f1a2 0008 	sub.w	r0, r2, #8
 801a976:	6856      	ldr	r6, [r2, #4]
 801a978:	e00c      	b.n	801a994 <_malloc_r+0xcc>
 801a97a:	2900      	cmp	r1, #0
 801a97c:	68f1      	ldr	r1, [r6, #12]
 801a97e:	db08      	blt.n	801a992 <_malloc_r+0xca>
 801a980:	68b3      	ldr	r3, [r6, #8]
 801a982:	60d9      	str	r1, [r3, #12]
 801a984:	608b      	str	r3, [r1, #8]
 801a986:	18b3      	adds	r3, r6, r2
 801a988:	685a      	ldr	r2, [r3, #4]
 801a98a:	f042 0201 	orr.w	r2, r2, #1
 801a98e:	605a      	str	r2, [r3, #4]
 801a990:	e1a3      	b.n	801acda <_malloc_r+0x412>
 801a992:	460e      	mov	r6, r1
 801a994:	4286      	cmp	r6, r0
 801a996:	d006      	beq.n	801a9a6 <_malloc_r+0xde>
 801a998:	6872      	ldr	r2, [r6, #4]
 801a99a:	f022 0203 	bic.w	r2, r2, #3
 801a99e:	1b11      	subs	r1, r2, r4
 801a9a0:	290f      	cmp	r1, #15
 801a9a2:	ddea      	ble.n	801a97a <_malloc_r+0xb2>
 801a9a4:	3b01      	subs	r3, #1
 801a9a6:	3301      	adds	r3, #1
 801a9a8:	4a72      	ldr	r2, [pc, #456]	; (801ab74 <_malloc_r+0x2ac>)
 801a9aa:	692e      	ldr	r6, [r5, #16]
 801a9ac:	f102 0708 	add.w	r7, r2, #8
 801a9b0:	42be      	cmp	r6, r7
 801a9b2:	4639      	mov	r1, r7
 801a9b4:	d079      	beq.n	801aaaa <_malloc_r+0x1e2>
 801a9b6:	6870      	ldr	r0, [r6, #4]
 801a9b8:	f020 0003 	bic.w	r0, r0, #3
 801a9bc:	ebc4 0e00 	rsb	lr, r4, r0
 801a9c0:	f1be 0f0f 	cmp.w	lr, #15
 801a9c4:	dd0d      	ble.n	801a9e2 <_malloc_r+0x11a>
 801a9c6:	1933      	adds	r3, r6, r4
 801a9c8:	f044 0401 	orr.w	r4, r4, #1
 801a9cc:	6074      	str	r4, [r6, #4]
 801a9ce:	6153      	str	r3, [r2, #20]
 801a9d0:	6113      	str	r3, [r2, #16]
 801a9d2:	f04e 0201 	orr.w	r2, lr, #1
 801a9d6:	60df      	str	r7, [r3, #12]
 801a9d8:	609f      	str	r7, [r3, #8]
 801a9da:	605a      	str	r2, [r3, #4]
 801a9dc:	f843 e00e 	str.w	lr, [r3, lr]
 801a9e0:	e17b      	b.n	801acda <_malloc_r+0x412>
 801a9e2:	f1be 0f00 	cmp.w	lr, #0
 801a9e6:	6157      	str	r7, [r2, #20]
 801a9e8:	6117      	str	r7, [r2, #16]
 801a9ea:	db05      	blt.n	801a9f8 <_malloc_r+0x130>
 801a9ec:	4430      	add	r0, r6
 801a9ee:	6843      	ldr	r3, [r0, #4]
 801a9f0:	f043 0301 	orr.w	r3, r3, #1
 801a9f4:	6043      	str	r3, [r0, #4]
 801a9f6:	e170      	b.n	801acda <_malloc_r+0x412>
 801a9f8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 801a9fc:	d215      	bcs.n	801aa2a <_malloc_r+0x162>
 801a9fe:	08c0      	lsrs	r0, r0, #3
 801aa00:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 801aa04:	2701      	movs	r7, #1
 801aa06:	fa07 fe0e 	lsl.w	lr, r7, lr
 801aa0a:	6857      	ldr	r7, [r2, #4]
 801aa0c:	3001      	adds	r0, #1
 801aa0e:	ea4e 0707 	orr.w	r7, lr, r7
 801aa12:	6057      	str	r7, [r2, #4]
 801aa14:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 801aa18:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 801aa1c:	f8c6 e008 	str.w	lr, [r6, #8]
 801aa20:	3f08      	subs	r7, #8
 801aa22:	60f7      	str	r7, [r6, #12]
 801aa24:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 801aa28:	e03d      	b.n	801aaa6 <_malloc_r+0x1de>
 801aa2a:	0a42      	lsrs	r2, r0, #9
 801aa2c:	2a04      	cmp	r2, #4
 801aa2e:	d802      	bhi.n	801aa36 <_malloc_r+0x16e>
 801aa30:	0982      	lsrs	r2, r0, #6
 801aa32:	3238      	adds	r2, #56	; 0x38
 801aa34:	e015      	b.n	801aa62 <_malloc_r+0x19a>
 801aa36:	2a14      	cmp	r2, #20
 801aa38:	d801      	bhi.n	801aa3e <_malloc_r+0x176>
 801aa3a:	325b      	adds	r2, #91	; 0x5b
 801aa3c:	e011      	b.n	801aa62 <_malloc_r+0x19a>
 801aa3e:	2a54      	cmp	r2, #84	; 0x54
 801aa40:	d802      	bhi.n	801aa48 <_malloc_r+0x180>
 801aa42:	0b02      	lsrs	r2, r0, #12
 801aa44:	326e      	adds	r2, #110	; 0x6e
 801aa46:	e00c      	b.n	801aa62 <_malloc_r+0x19a>
 801aa48:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801aa4c:	d802      	bhi.n	801aa54 <_malloc_r+0x18c>
 801aa4e:	0bc2      	lsrs	r2, r0, #15
 801aa50:	3277      	adds	r2, #119	; 0x77
 801aa52:	e006      	b.n	801aa62 <_malloc_r+0x19a>
 801aa54:	f240 5754 	movw	r7, #1364	; 0x554
 801aa58:	42ba      	cmp	r2, r7
 801aa5a:	bf9a      	itte	ls
 801aa5c:	0c82      	lsrls	r2, r0, #18
 801aa5e:	327c      	addls	r2, #124	; 0x7c
 801aa60:	227e      	movhi	r2, #126	; 0x7e
 801aa62:	1c57      	adds	r7, r2, #1
 801aa64:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 801aa68:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 801aa6c:	f8df c104 	ldr.w	ip, [pc, #260]	; 801ab74 <_malloc_r+0x2ac>
 801aa70:	45be      	cmp	lr, r7
 801aa72:	d10d      	bne.n	801aa90 <_malloc_r+0x1c8>
 801aa74:	2001      	movs	r0, #1
 801aa76:	1092      	asrs	r2, r2, #2
 801aa78:	fa00 f202 	lsl.w	r2, r0, r2
 801aa7c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801aa80:	4310      	orrs	r0, r2
 801aa82:	f8cc 0004 	str.w	r0, [ip, #4]
 801aa86:	4672      	mov	r2, lr
 801aa88:	e009      	b.n	801aa9e <_malloc_r+0x1d6>
 801aa8a:	68bf      	ldr	r7, [r7, #8]
 801aa8c:	45be      	cmp	lr, r7
 801aa8e:	d004      	beq.n	801aa9a <_malloc_r+0x1d2>
 801aa90:	687a      	ldr	r2, [r7, #4]
 801aa92:	f022 0203 	bic.w	r2, r2, #3
 801aa96:	4290      	cmp	r0, r2
 801aa98:	d3f7      	bcc.n	801aa8a <_malloc_r+0x1c2>
 801aa9a:	68fa      	ldr	r2, [r7, #12]
 801aa9c:	46be      	mov	lr, r7
 801aa9e:	60f2      	str	r2, [r6, #12]
 801aaa0:	f8c6 e008 	str.w	lr, [r6, #8]
 801aaa4:	6096      	str	r6, [r2, #8]
 801aaa6:	f8ce 600c 	str.w	r6, [lr, #12]
 801aaaa:	2001      	movs	r0, #1
 801aaac:	109a      	asrs	r2, r3, #2
 801aaae:	fa00 f202 	lsl.w	r2, r0, r2
 801aab2:	6868      	ldr	r0, [r5, #4]
 801aab4:	4282      	cmp	r2, r0
 801aab6:	d85f      	bhi.n	801ab78 <_malloc_r+0x2b0>
 801aab8:	4202      	tst	r2, r0
 801aaba:	d106      	bne.n	801aaca <_malloc_r+0x202>
 801aabc:	f023 0303 	bic.w	r3, r3, #3
 801aac0:	0052      	lsls	r2, r2, #1
 801aac2:	4202      	tst	r2, r0
 801aac4:	f103 0304 	add.w	r3, r3, #4
 801aac8:	d0fa      	beq.n	801aac0 <_malloc_r+0x1f8>
 801aaca:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 801aace:	46c2      	mov	sl, r8
 801aad0:	469c      	mov	ip, r3
 801aad2:	f8da 600c 	ldr.w	r6, [sl, #12]
 801aad6:	4556      	cmp	r6, sl
 801aad8:	d02c      	beq.n	801ab34 <_malloc_r+0x26c>
 801aada:	6870      	ldr	r0, [r6, #4]
 801aadc:	68f7      	ldr	r7, [r6, #12]
 801aade:	f020 0003 	bic.w	r0, r0, #3
 801aae2:	ebc4 0e00 	rsb	lr, r4, r0
 801aae6:	f1be 0f0f 	cmp.w	lr, #15
 801aaea:	dd11      	ble.n	801ab10 <_malloc_r+0x248>
 801aaec:	1933      	adds	r3, r6, r4
 801aaee:	f044 0401 	orr.w	r4, r4, #1
 801aaf2:	6074      	str	r4, [r6, #4]
 801aaf4:	f856 2f08 	ldr.w	r2, [r6, #8]!
 801aaf8:	60d7      	str	r7, [r2, #12]
 801aafa:	60ba      	str	r2, [r7, #8]
 801aafc:	f04e 0201 	orr.w	r2, lr, #1
 801ab00:	616b      	str	r3, [r5, #20]
 801ab02:	612b      	str	r3, [r5, #16]
 801ab04:	60d9      	str	r1, [r3, #12]
 801ab06:	6099      	str	r1, [r3, #8]
 801ab08:	605a      	str	r2, [r3, #4]
 801ab0a:	f843 e00e 	str.w	lr, [r3, lr]
 801ab0e:	e00b      	b.n	801ab28 <_malloc_r+0x260>
 801ab10:	f1be 0f00 	cmp.w	lr, #0
 801ab14:	db0c      	blt.n	801ab30 <_malloc_r+0x268>
 801ab16:	1833      	adds	r3, r6, r0
 801ab18:	685a      	ldr	r2, [r3, #4]
 801ab1a:	f042 0201 	orr.w	r2, r2, #1
 801ab1e:	605a      	str	r2, [r3, #4]
 801ab20:	f856 3f08 	ldr.w	r3, [r6, #8]!
 801ab24:	60df      	str	r7, [r3, #12]
 801ab26:	60bb      	str	r3, [r7, #8]
 801ab28:	4648      	mov	r0, r9
 801ab2a:	f000 f8ee 	bl	801ad0a <__malloc_unlock>
 801ab2e:	e0d8      	b.n	801ace2 <_malloc_r+0x41a>
 801ab30:	463e      	mov	r6, r7
 801ab32:	e7d0      	b.n	801aad6 <_malloc_r+0x20e>
 801ab34:	f10c 0c01 	add.w	ip, ip, #1
 801ab38:	f01c 0f03 	tst.w	ip, #3
 801ab3c:	f10a 0a08 	add.w	sl, sl, #8
 801ab40:	d1c7      	bne.n	801aad2 <_malloc_r+0x20a>
 801ab42:	0798      	lsls	r0, r3, #30
 801ab44:	d104      	bne.n	801ab50 <_malloc_r+0x288>
 801ab46:	686b      	ldr	r3, [r5, #4]
 801ab48:	ea23 0302 	bic.w	r3, r3, r2
 801ab4c:	606b      	str	r3, [r5, #4]
 801ab4e:	e005      	b.n	801ab5c <_malloc_r+0x294>
 801ab50:	f858 0908 	ldr.w	r0, [r8], #-8
 801ab54:	4580      	cmp	r8, r0
 801ab56:	f103 33ff 	add.w	r3, r3, #4294967295
 801ab5a:	d0f2      	beq.n	801ab42 <_malloc_r+0x27a>
 801ab5c:	6868      	ldr	r0, [r5, #4]
 801ab5e:	0052      	lsls	r2, r2, #1
 801ab60:	4282      	cmp	r2, r0
 801ab62:	d809      	bhi.n	801ab78 <_malloc_r+0x2b0>
 801ab64:	b142      	cbz	r2, 801ab78 <_malloc_r+0x2b0>
 801ab66:	4663      	mov	r3, ip
 801ab68:	4202      	tst	r2, r0
 801ab6a:	d1ae      	bne.n	801aaca <_malloc_r+0x202>
 801ab6c:	3304      	adds	r3, #4
 801ab6e:	0052      	lsls	r2, r2, #1
 801ab70:	e7fa      	b.n	801ab68 <_malloc_r+0x2a0>
 801ab72:	bf00      	nop
 801ab74:	20000760 	.word	0x20000760
 801ab78:	f8d5 b008 	ldr.w	fp, [r5, #8]
 801ab7c:	f8db 6004 	ldr.w	r6, [fp, #4]
 801ab80:	f026 0603 	bic.w	r6, r6, #3
 801ab84:	42b4      	cmp	r4, r6
 801ab86:	d803      	bhi.n	801ab90 <_malloc_r+0x2c8>
 801ab88:	1b33      	subs	r3, r6, r4
 801ab8a:	2b0f      	cmp	r3, #15
 801ab8c:	f300 809c 	bgt.w	801acc8 <_malloc_r+0x400>
 801ab90:	4a56      	ldr	r2, [pc, #344]	; (801acec <_malloc_r+0x424>)
 801ab92:	4957      	ldr	r1, [pc, #348]	; (801acf0 <_malloc_r+0x428>)
 801ab94:	6812      	ldr	r2, [r2, #0]
 801ab96:	6808      	ldr	r0, [r1, #0]
 801ab98:	9101      	str	r1, [sp, #4]
 801ab9a:	f102 0810 	add.w	r8, r2, #16
 801ab9e:	4a55      	ldr	r2, [pc, #340]	; (801acf4 <_malloc_r+0x42c>)
 801aba0:	9203      	str	r2, [sp, #12]
 801aba2:	3001      	adds	r0, #1
 801aba4:	bf18      	it	ne
 801aba6:	f102 31ff 	addne.w	r1, r2, #4294967295
 801abaa:	44a0      	add	r8, r4
 801abac:	bf1e      	ittt	ne
 801abae:	4488      	addne	r8, r1
 801abb0:	4251      	negne	r1, r2
 801abb2:	ea01 0808 	andne.w	r8, r1, r8
 801abb6:	eb0b 0306 	add.w	r3, fp, r6
 801abba:	4641      	mov	r1, r8
 801abbc:	4648      	mov	r0, r9
 801abbe:	9302      	str	r3, [sp, #8]
 801abc0:	f000 f8a4 	bl	801ad0c <_sbrk_r>
 801abc4:	1c42      	adds	r2, r0, #1
 801abc6:	4607      	mov	r7, r0
 801abc8:	d06f      	beq.n	801acaa <_malloc_r+0x3e2>
 801abca:	9b02      	ldr	r3, [sp, #8]
 801abcc:	9a03      	ldr	r2, [sp, #12]
 801abce:	4283      	cmp	r3, r0
 801abd0:	d901      	bls.n	801abd6 <_malloc_r+0x30e>
 801abd2:	45ab      	cmp	fp, r5
 801abd4:	d169      	bne.n	801acaa <_malloc_r+0x3e2>
 801abd6:	f8df a128 	ldr.w	sl, [pc, #296]	; 801ad00 <_malloc_r+0x438>
 801abda:	f8df c128 	ldr.w	ip, [pc, #296]	; 801ad04 <_malloc_r+0x43c>
 801abde:	f8da 0000 	ldr.w	r0, [sl]
 801abe2:	42bb      	cmp	r3, r7
 801abe4:	4440      	add	r0, r8
 801abe6:	f8ca 0000 	str.w	r0, [sl]
 801abea:	d108      	bne.n	801abfe <_malloc_r+0x336>
 801abec:	ea13 0f0c 	tst.w	r3, ip
 801abf0:	d105      	bne.n	801abfe <_malloc_r+0x336>
 801abf2:	68ab      	ldr	r3, [r5, #8]
 801abf4:	4446      	add	r6, r8
 801abf6:	f046 0601 	orr.w	r6, r6, #1
 801abfa:	605e      	str	r6, [r3, #4]
 801abfc:	e049      	b.n	801ac92 <_malloc_r+0x3ca>
 801abfe:	9901      	ldr	r1, [sp, #4]
 801ac00:	f8d1 e000 	ldr.w	lr, [r1]
 801ac04:	f1be 3fff 	cmp.w	lr, #4294967295
 801ac08:	bf15      	itete	ne
 801ac0a:	1afb      	subne	r3, r7, r3
 801ac0c:	4b38      	ldreq	r3, [pc, #224]	; (801acf0 <_malloc_r+0x428>)
 801ac0e:	181b      	addne	r3, r3, r0
 801ac10:	601f      	streq	r7, [r3, #0]
 801ac12:	bf18      	it	ne
 801ac14:	f8ca 3000 	strne.w	r3, [sl]
 801ac18:	f017 0307 	ands.w	r3, r7, #7
 801ac1c:	bf1c      	itt	ne
 801ac1e:	f1c3 0308 	rsbne	r3, r3, #8
 801ac22:	18ff      	addne	r7, r7, r3
 801ac24:	44b8      	add	r8, r7
 801ac26:	441a      	add	r2, r3
 801ac28:	ea08 080c 	and.w	r8, r8, ip
 801ac2c:	ebc8 0802 	rsb	r8, r8, r2
 801ac30:	4641      	mov	r1, r8
 801ac32:	4648      	mov	r0, r9
 801ac34:	f000 f86a 	bl	801ad0c <_sbrk_r>
 801ac38:	1c43      	adds	r3, r0, #1
 801ac3a:	bf04      	itt	eq
 801ac3c:	4638      	moveq	r0, r7
 801ac3e:	f04f 0800 	moveq.w	r8, #0
 801ac42:	f8da 3000 	ldr.w	r3, [sl]
 801ac46:	60af      	str	r7, [r5, #8]
 801ac48:	1bc2      	subs	r2, r0, r7
 801ac4a:	4442      	add	r2, r8
 801ac4c:	4443      	add	r3, r8
 801ac4e:	f042 0201 	orr.w	r2, r2, #1
 801ac52:	45ab      	cmp	fp, r5
 801ac54:	f8ca 3000 	str.w	r3, [sl]
 801ac58:	607a      	str	r2, [r7, #4]
 801ac5a:	d01a      	beq.n	801ac92 <_malloc_r+0x3ca>
 801ac5c:	2e0f      	cmp	r6, #15
 801ac5e:	d802      	bhi.n	801ac66 <_malloc_r+0x39e>
 801ac60:	2301      	movs	r3, #1
 801ac62:	607b      	str	r3, [r7, #4]
 801ac64:	e021      	b.n	801acaa <_malloc_r+0x3e2>
 801ac66:	f8db 3004 	ldr.w	r3, [fp, #4]
 801ac6a:	3e0c      	subs	r6, #12
 801ac6c:	f026 0607 	bic.w	r6, r6, #7
 801ac70:	f003 0301 	and.w	r3, r3, #1
 801ac74:	4333      	orrs	r3, r6
 801ac76:	f8cb 3004 	str.w	r3, [fp, #4]
 801ac7a:	eb0b 0306 	add.w	r3, fp, r6
 801ac7e:	2205      	movs	r2, #5
 801ac80:	2e0f      	cmp	r6, #15
 801ac82:	605a      	str	r2, [r3, #4]
 801ac84:	609a      	str	r2, [r3, #8]
 801ac86:	d904      	bls.n	801ac92 <_malloc_r+0x3ca>
 801ac88:	f10b 0108 	add.w	r1, fp, #8
 801ac8c:	4648      	mov	r0, r9
 801ac8e:	f000 f8a3 	bl	801add8 <_free_r>
 801ac92:	4a19      	ldr	r2, [pc, #100]	; (801acf8 <_malloc_r+0x430>)
 801ac94:	f8da 3000 	ldr.w	r3, [sl]
 801ac98:	6811      	ldr	r1, [r2, #0]
 801ac9a:	428b      	cmp	r3, r1
 801ac9c:	bf88      	it	hi
 801ac9e:	6013      	strhi	r3, [r2, #0]
 801aca0:	4a16      	ldr	r2, [pc, #88]	; (801acfc <_malloc_r+0x434>)
 801aca2:	6811      	ldr	r1, [r2, #0]
 801aca4:	428b      	cmp	r3, r1
 801aca6:	bf88      	it	hi
 801aca8:	6013      	strhi	r3, [r2, #0]
 801acaa:	68ab      	ldr	r3, [r5, #8]
 801acac:	685a      	ldr	r2, [r3, #4]
 801acae:	f022 0203 	bic.w	r2, r2, #3
 801acb2:	4294      	cmp	r4, r2
 801acb4:	eba2 0304 	sub.w	r3, r2, r4
 801acb8:	d801      	bhi.n	801acbe <_malloc_r+0x3f6>
 801acba:	2b0f      	cmp	r3, #15
 801acbc:	dc04      	bgt.n	801acc8 <_malloc_r+0x400>
 801acbe:	4648      	mov	r0, r9
 801acc0:	f000 f823 	bl	801ad0a <__malloc_unlock>
 801acc4:	2600      	movs	r6, #0
 801acc6:	e00c      	b.n	801ace2 <_malloc_r+0x41a>
 801acc8:	68ae      	ldr	r6, [r5, #8]
 801acca:	f044 0201 	orr.w	r2, r4, #1
 801acce:	4434      	add	r4, r6
 801acd0:	f043 0301 	orr.w	r3, r3, #1
 801acd4:	6072      	str	r2, [r6, #4]
 801acd6:	60ac      	str	r4, [r5, #8]
 801acd8:	6063      	str	r3, [r4, #4]
 801acda:	4648      	mov	r0, r9
 801acdc:	f000 f815 	bl	801ad0a <__malloc_unlock>
 801ace0:	3608      	adds	r6, #8
 801ace2:	4630      	mov	r0, r6
 801ace4:	b005      	add	sp, #20
 801ace6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acea:	bf00      	nop
 801acec:	20001834 	.word	0x20001834
 801acf0:	20000b6c 	.word	0x20000b6c
 801acf4:	00000080 	.word	0x00000080
 801acf8:	20001830 	.word	0x20001830
 801acfc:	2000182c 	.word	0x2000182c
 801ad00:	20001838 	.word	0x20001838
 801ad04:	0000007f 	.word	0x0000007f

0801ad08 <__malloc_lock>:
 801ad08:	4770      	bx	lr

0801ad0a <__malloc_unlock>:
 801ad0a:	4770      	bx	lr

0801ad0c <_sbrk_r>:
 801ad0c:	b538      	push	{r3, r4, r5, lr}
 801ad0e:	4c06      	ldr	r4, [pc, #24]	; (801ad28 <_sbrk_r+0x1c>)
 801ad10:	2300      	movs	r3, #0
 801ad12:	4605      	mov	r5, r0
 801ad14:	4608      	mov	r0, r1
 801ad16:	6023      	str	r3, [r4, #0]
 801ad18:	f000 f91c 	bl	801af54 <_sbrk>
 801ad1c:	1c43      	adds	r3, r0, #1
 801ad1e:	d102      	bne.n	801ad26 <_sbrk_r+0x1a>
 801ad20:	6823      	ldr	r3, [r4, #0]
 801ad22:	b103      	cbz	r3, 801ad26 <_sbrk_r+0x1a>
 801ad24:	602b      	str	r3, [r5, #0]
 801ad26:	bd38      	pop	{r3, r4, r5, pc}
 801ad28:	20021d18 	.word	0x20021d18

0801ad2c <_malloc_trim_r>:
 801ad2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad30:	4f25      	ldr	r7, [pc, #148]	; (801adc8 <_malloc_trim_r+0x9c>)
 801ad32:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 801add4 <_malloc_trim_r+0xa8>
 801ad36:	4689      	mov	r9, r1
 801ad38:	4606      	mov	r6, r0
 801ad3a:	f7ff ffe5 	bl	801ad08 <__malloc_lock>
 801ad3e:	68bb      	ldr	r3, [r7, #8]
 801ad40:	685d      	ldr	r5, [r3, #4]
 801ad42:	f1a8 0411 	sub.w	r4, r8, #17
 801ad46:	f025 0503 	bic.w	r5, r5, #3
 801ad4a:	442c      	add	r4, r5
 801ad4c:	ebc9 0404 	rsb	r4, r9, r4
 801ad50:	fbb4 f4f8 	udiv	r4, r4, r8
 801ad54:	3c01      	subs	r4, #1
 801ad56:	fb08 f404 	mul.w	r4, r8, r4
 801ad5a:	4544      	cmp	r4, r8
 801ad5c:	da05      	bge.n	801ad6a <_malloc_trim_r+0x3e>
 801ad5e:	4630      	mov	r0, r6
 801ad60:	f7ff ffd3 	bl	801ad0a <__malloc_unlock>
 801ad64:	2000      	movs	r0, #0
 801ad66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad6a:	2100      	movs	r1, #0
 801ad6c:	4630      	mov	r0, r6
 801ad6e:	f7ff ffcd 	bl	801ad0c <_sbrk_r>
 801ad72:	68bb      	ldr	r3, [r7, #8]
 801ad74:	442b      	add	r3, r5
 801ad76:	4298      	cmp	r0, r3
 801ad78:	d1f1      	bne.n	801ad5e <_malloc_trim_r+0x32>
 801ad7a:	4261      	negs	r1, r4
 801ad7c:	4630      	mov	r0, r6
 801ad7e:	f7ff ffc5 	bl	801ad0c <_sbrk_r>
 801ad82:	3001      	adds	r0, #1
 801ad84:	d110      	bne.n	801ada8 <_malloc_trim_r+0x7c>
 801ad86:	2100      	movs	r1, #0
 801ad88:	4630      	mov	r0, r6
 801ad8a:	f7ff ffbf 	bl	801ad0c <_sbrk_r>
 801ad8e:	68ba      	ldr	r2, [r7, #8]
 801ad90:	1a83      	subs	r3, r0, r2
 801ad92:	2b0f      	cmp	r3, #15
 801ad94:	dde3      	ble.n	801ad5e <_malloc_trim_r+0x32>
 801ad96:	490d      	ldr	r1, [pc, #52]	; (801adcc <_malloc_trim_r+0xa0>)
 801ad98:	6809      	ldr	r1, [r1, #0]
 801ad9a:	1a40      	subs	r0, r0, r1
 801ad9c:	490c      	ldr	r1, [pc, #48]	; (801add0 <_malloc_trim_r+0xa4>)
 801ad9e:	f043 0301 	orr.w	r3, r3, #1
 801ada2:	6008      	str	r0, [r1, #0]
 801ada4:	6053      	str	r3, [r2, #4]
 801ada6:	e7da      	b.n	801ad5e <_malloc_trim_r+0x32>
 801ada8:	68bb      	ldr	r3, [r7, #8]
 801adaa:	4a09      	ldr	r2, [pc, #36]	; (801add0 <_malloc_trim_r+0xa4>)
 801adac:	1b2d      	subs	r5, r5, r4
 801adae:	f045 0501 	orr.w	r5, r5, #1
 801adb2:	605d      	str	r5, [r3, #4]
 801adb4:	6813      	ldr	r3, [r2, #0]
 801adb6:	4630      	mov	r0, r6
 801adb8:	1b1c      	subs	r4, r3, r4
 801adba:	6014      	str	r4, [r2, #0]
 801adbc:	f7ff ffa5 	bl	801ad0a <__malloc_unlock>
 801adc0:	2001      	movs	r0, #1
 801adc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801adc6:	bf00      	nop
 801adc8:	20000760 	.word	0x20000760
 801adcc:	20000b6c 	.word	0x20000b6c
 801add0:	20001838 	.word	0x20001838
 801add4:	00000080 	.word	0x00000080

0801add8 <_free_r>:
 801add8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801addc:	4604      	mov	r4, r0
 801adde:	4688      	mov	r8, r1
 801ade0:	2900      	cmp	r1, #0
 801ade2:	f000 80ad 	beq.w	801af40 <_free_r+0x168>
 801ade6:	f7ff ff8f 	bl	801ad08 <__malloc_lock>
 801adea:	f858 2c04 	ldr.w	r2, [r8, #-4]
 801adee:	4d55      	ldr	r5, [pc, #340]	; (801af44 <_free_r+0x16c>)
 801adf0:	f022 0001 	bic.w	r0, r2, #1
 801adf4:	f1a8 0308 	sub.w	r3, r8, #8
 801adf8:	181f      	adds	r7, r3, r0
 801adfa:	68a9      	ldr	r1, [r5, #8]
 801adfc:	687e      	ldr	r6, [r7, #4]
 801adfe:	428f      	cmp	r7, r1
 801ae00:	f026 0603 	bic.w	r6, r6, #3
 801ae04:	f002 0201 	and.w	r2, r2, #1
 801ae08:	d11b      	bne.n	801ae42 <_free_r+0x6a>
 801ae0a:	4430      	add	r0, r6
 801ae0c:	b93a      	cbnz	r2, 801ae1e <_free_r+0x46>
 801ae0e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 801ae12:	1a9b      	subs	r3, r3, r2
 801ae14:	4410      	add	r0, r2
 801ae16:	6899      	ldr	r1, [r3, #8]
 801ae18:	68da      	ldr	r2, [r3, #12]
 801ae1a:	60ca      	str	r2, [r1, #12]
 801ae1c:	6091      	str	r1, [r2, #8]
 801ae1e:	f040 0201 	orr.w	r2, r0, #1
 801ae22:	605a      	str	r2, [r3, #4]
 801ae24:	60ab      	str	r3, [r5, #8]
 801ae26:	4b48      	ldr	r3, [pc, #288]	; (801af48 <_free_r+0x170>)
 801ae28:	681b      	ldr	r3, [r3, #0]
 801ae2a:	4298      	cmp	r0, r3
 801ae2c:	d304      	bcc.n	801ae38 <_free_r+0x60>
 801ae2e:	4b47      	ldr	r3, [pc, #284]	; (801af4c <_free_r+0x174>)
 801ae30:	4620      	mov	r0, r4
 801ae32:	6819      	ldr	r1, [r3, #0]
 801ae34:	f7ff ff7a 	bl	801ad2c <_malloc_trim_r>
 801ae38:	4620      	mov	r0, r4
 801ae3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ae3e:	f7ff bf64 	b.w	801ad0a <__malloc_unlock>
 801ae42:	607e      	str	r6, [r7, #4]
 801ae44:	b97a      	cbnz	r2, 801ae66 <_free_r+0x8e>
 801ae46:	f858 1c08 	ldr.w	r1, [r8, #-8]
 801ae4a:	1a5b      	subs	r3, r3, r1
 801ae4c:	4408      	add	r0, r1
 801ae4e:	6899      	ldr	r1, [r3, #8]
 801ae50:	f105 0e08 	add.w	lr, r5, #8
 801ae54:	4571      	cmp	r1, lr
 801ae56:	d008      	beq.n	801ae6a <_free_r+0x92>
 801ae58:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 801ae5c:	f8c1 e00c 	str.w	lr, [r1, #12]
 801ae60:	f8ce 1008 	str.w	r1, [lr, #8]
 801ae64:	e002      	b.n	801ae6c <_free_r+0x94>
 801ae66:	2200      	movs	r2, #0
 801ae68:	e000      	b.n	801ae6c <_free_r+0x94>
 801ae6a:	2201      	movs	r2, #1
 801ae6c:	19b9      	adds	r1, r7, r6
 801ae6e:	6849      	ldr	r1, [r1, #4]
 801ae70:	07c9      	lsls	r1, r1, #31
 801ae72:	d40e      	bmi.n	801ae92 <_free_r+0xba>
 801ae74:	4430      	add	r0, r6
 801ae76:	68b9      	ldr	r1, [r7, #8]
 801ae78:	b942      	cbnz	r2, 801ae8c <_free_r+0xb4>
 801ae7a:	4e35      	ldr	r6, [pc, #212]	; (801af50 <_free_r+0x178>)
 801ae7c:	42b1      	cmp	r1, r6
 801ae7e:	d105      	bne.n	801ae8c <_free_r+0xb4>
 801ae80:	616b      	str	r3, [r5, #20]
 801ae82:	612b      	str	r3, [r5, #16]
 801ae84:	2201      	movs	r2, #1
 801ae86:	60d9      	str	r1, [r3, #12]
 801ae88:	6099      	str	r1, [r3, #8]
 801ae8a:	e002      	b.n	801ae92 <_free_r+0xba>
 801ae8c:	68fe      	ldr	r6, [r7, #12]
 801ae8e:	60ce      	str	r6, [r1, #12]
 801ae90:	60b1      	str	r1, [r6, #8]
 801ae92:	f040 0101 	orr.w	r1, r0, #1
 801ae96:	6059      	str	r1, [r3, #4]
 801ae98:	5018      	str	r0, [r3, r0]
 801ae9a:	2a00      	cmp	r2, #0
 801ae9c:	d1cc      	bne.n	801ae38 <_free_r+0x60>
 801ae9e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 801aea2:	d212      	bcs.n	801aeca <_free_r+0xf2>
 801aea4:	08c0      	lsrs	r0, r0, #3
 801aea6:	1081      	asrs	r1, r0, #2
 801aea8:	2201      	movs	r2, #1
 801aeaa:	fa02 f101 	lsl.w	r1, r2, r1
 801aeae:	686a      	ldr	r2, [r5, #4]
 801aeb0:	3001      	adds	r0, #1
 801aeb2:	430a      	orrs	r2, r1
 801aeb4:	606a      	str	r2, [r5, #4]
 801aeb6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 801aeba:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 801aebe:	6099      	str	r1, [r3, #8]
 801aec0:	3a08      	subs	r2, #8
 801aec2:	60da      	str	r2, [r3, #12]
 801aec4:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 801aec8:	e038      	b.n	801af3c <_free_r+0x164>
 801aeca:	0a42      	lsrs	r2, r0, #9
 801aecc:	2a04      	cmp	r2, #4
 801aece:	d802      	bhi.n	801aed6 <_free_r+0xfe>
 801aed0:	0982      	lsrs	r2, r0, #6
 801aed2:	3238      	adds	r2, #56	; 0x38
 801aed4:	e015      	b.n	801af02 <_free_r+0x12a>
 801aed6:	2a14      	cmp	r2, #20
 801aed8:	d801      	bhi.n	801aede <_free_r+0x106>
 801aeda:	325b      	adds	r2, #91	; 0x5b
 801aedc:	e011      	b.n	801af02 <_free_r+0x12a>
 801aede:	2a54      	cmp	r2, #84	; 0x54
 801aee0:	d802      	bhi.n	801aee8 <_free_r+0x110>
 801aee2:	0b02      	lsrs	r2, r0, #12
 801aee4:	326e      	adds	r2, #110	; 0x6e
 801aee6:	e00c      	b.n	801af02 <_free_r+0x12a>
 801aee8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801aeec:	d802      	bhi.n	801aef4 <_free_r+0x11c>
 801aeee:	0bc2      	lsrs	r2, r0, #15
 801aef0:	3277      	adds	r2, #119	; 0x77
 801aef2:	e006      	b.n	801af02 <_free_r+0x12a>
 801aef4:	f240 5154 	movw	r1, #1364	; 0x554
 801aef8:	428a      	cmp	r2, r1
 801aefa:	bf9a      	itte	ls
 801aefc:	0c82      	lsrls	r2, r0, #18
 801aefe:	327c      	addls	r2, #124	; 0x7c
 801af00:	227e      	movhi	r2, #126	; 0x7e
 801af02:	1c51      	adds	r1, r2, #1
 801af04:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 801af08:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 801af0c:	4f0d      	ldr	r7, [pc, #52]	; (801af44 <_free_r+0x16c>)
 801af0e:	428e      	cmp	r6, r1
 801af10:	d10b      	bne.n	801af2a <_free_r+0x152>
 801af12:	2101      	movs	r1, #1
 801af14:	1092      	asrs	r2, r2, #2
 801af16:	fa01 f202 	lsl.w	r2, r1, r2
 801af1a:	6879      	ldr	r1, [r7, #4]
 801af1c:	4311      	orrs	r1, r2
 801af1e:	6079      	str	r1, [r7, #4]
 801af20:	4631      	mov	r1, r6
 801af22:	e008      	b.n	801af36 <_free_r+0x15e>
 801af24:	6889      	ldr	r1, [r1, #8]
 801af26:	428e      	cmp	r6, r1
 801af28:	d004      	beq.n	801af34 <_free_r+0x15c>
 801af2a:	684a      	ldr	r2, [r1, #4]
 801af2c:	f022 0203 	bic.w	r2, r2, #3
 801af30:	4290      	cmp	r0, r2
 801af32:	d3f7      	bcc.n	801af24 <_free_r+0x14c>
 801af34:	68ce      	ldr	r6, [r1, #12]
 801af36:	60de      	str	r6, [r3, #12]
 801af38:	6099      	str	r1, [r3, #8]
 801af3a:	60b3      	str	r3, [r6, #8]
 801af3c:	60cb      	str	r3, [r1, #12]
 801af3e:	e77b      	b.n	801ae38 <_free_r+0x60>
 801af40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af44:	20000760 	.word	0x20000760
 801af48:	20000b68 	.word	0x20000b68
 801af4c:	20001834 	.word	0x20001834
 801af50:	20000768 	.word	0x20000768

0801af54 <_sbrk>:
 801af54:	4b04      	ldr	r3, [pc, #16]	; (801af68 <_sbrk+0x14>)
 801af56:	6819      	ldr	r1, [r3, #0]
 801af58:	4602      	mov	r2, r0
 801af5a:	b909      	cbnz	r1, 801af60 <_sbrk+0xc>
 801af5c:	4903      	ldr	r1, [pc, #12]	; (801af6c <_sbrk+0x18>)
 801af5e:	6019      	str	r1, [r3, #0]
 801af60:	6818      	ldr	r0, [r3, #0]
 801af62:	4402      	add	r2, r0
 801af64:	601a      	str	r2, [r3, #0]
 801af66:	4770      	bx	lr
 801af68:	20001860 	.word	0x20001860
 801af6c:	20021d1c 	.word	0x20021d1c

0801af70 <_init>:
 801af70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af72:	bf00      	nop
 801af74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801af76:	bc08      	pop	{r3}
 801af78:	469e      	mov	lr, r3
 801af7a:	4770      	bx	lr

0801af7c <_fini>:
 801af7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af7e:	bf00      	nop
 801af80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801af82:	bc08      	pop	{r3}
 801af84:	469e      	mov	lr, r3
 801af86:	4770      	bx	lr
